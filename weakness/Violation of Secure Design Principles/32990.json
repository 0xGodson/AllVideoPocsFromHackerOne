{"id":32990,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMjk5MA==","url":"https://hackerone.com/reports/32990","title":"Enumeration/Guess of Private (Invited) Programs","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2014-10-27T23:13:41.608Z","submitted_at":"2014-10-27T23:13:41.608Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"prakharprasad","url":"/prakharprasad","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-05-09T08:17:39.151Z","bug_reporter_agreed_on_going_public_at":"2015-05-09T08:17:38.457Z","team_member_agreed_on_going_public_at":"2015-05-09T00:27:05.336Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hey, \n\nThis bug allows anyone to enumerate usernames of invited programs.For example there are two kinds of program at HackerOne - **Public programs** and **Invited** programs. Generally invited programs are only accessible to certain users based on reputation system. \n\nNow, for most public programs the username of the program remains same as program name, that is for Slack's program it is *slack*, for Square it is *square*. So my finding to enumerate works like the following (taking example of **████** invitation only program):\n\n████ program is located at https://hackerone.com/████, but it is only accessible to invited users else if an uninvited user visits the page he gets a 404 error, that's sweet. Isn't it ?\n\nBut using the following logic: \n\nhttps://hackerone.com/████/common_responses.json (500 Internal Server Error)\nhttps://hackerone.com/████/common_responses.json (500 Internal Server Error)\nhttps://hackerone.com/trololol/common_responses.json (404 Not Found)\n\nBased on the responses we can understand that for every existing program (public/invited) the server throws 500 error code but for non-existent program it throws 404 error code. So someone who wants to guess if a company is there in the invited program simply needs to send the following request (assuming company name is same as username, as it is currently in most of the cases at HackerOne):\n\nhttps://hackerone.com/\u003ccompany-name-here\u003e/common_responses.json (500 if exists or 404 if it doesn't, then if the username is not in any of the public program then surely it will be in invited program :-) )\n\nThis thing can be automated with a list of company names as potential usernames.\n\nThanks,\nPrakhar Prasad\n","vulnerability_information_html":"\u003cp\u003eHey, \u003c/p\u003e\n\n\u003cp\u003eThis bug allows anyone to enumerate usernames of invited programs.For example there are two kinds of program at HackerOne - \u003cstrong\u003ePublic programs\u003c/strong\u003e and \u003cstrong\u003eInvited\u003c/strong\u003e programs. Generally invited programs are only accessible to certain users based on reputation system. \u003c/p\u003e\n\n\u003cp\u003eNow, for most public programs the username of the program remains same as program name, that is for Slack\u0026#39;s program it is \u003cem\u003eslack\u003c/em\u003e, for Square it is \u003cem\u003esquare\u003c/em\u003e. So my finding to enumerate works like the following (taking example of \u003cstrong\u003e████\u003c/strong\u003e invitation only program):\u003c/p\u003e\n\n\u003cp\u003e████ program is located at \u003ca title=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88\" href=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88\"\u003ehttps://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88\u003c/a\u003e, but it is only accessible to invited users else if an uninvited user visits the page he gets a 404 error, that\u0026#39;s sweet. Isn\u0026#39;t it ?\u003c/p\u003e\n\n\u003cp\u003eBut using the following logic: \u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\" href=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\"\u003ehttps://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\u003c/a\u003e (500 Internal Server Error)\u003cbr\u003e\n\u003ca title=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\" href=\"https://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\"\u003ehttps://hackerone.com/%E2%96%88%E2%96%88%E2%96%88%E2%96%88/common_responses.json\u003c/a\u003e (500 Internal Server Error)\u003cbr\u003e\n\u003ca title=\"https://hackerone.com/trololol/common_responses.json\" href=\"https://hackerone.com/trololol/common_responses.json\"\u003ehttps://hackerone.com/trololol/common_responses.json\u003c/a\u003e (404 Not Found)\u003c/p\u003e\n\n\u003cp\u003eBased on the responses we can understand that for every existing program (public/invited) the server throws 500 error code but for non-existent program it throws 404 error code. So someone who wants to guess if a company is there in the invited program simply needs to send the following request (assuming company name is same as username, as it is currently in most of the cases at HackerOne):\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hackerone.com/\" href=\"https://hackerone.com/\"\u003ehttps://hackerone.com/\u003c/a\u003e\u0026lt;company-name-here\u0026gt;/common_responses.json (500 if exists or 404 if it doesn\u0026#39;t, then if the username is not in any of the public program then surely it will be in invited program :-) )\u003c/p\u003e\n\n\u003cp\u003eThis thing can be automated with a list of company names as potential usernames.\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nPrakhar Prasad\u003c/p\u003e\n","weakness":{"id":57,"name":"Violation of Secure Design Principles"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-06-08T00:27:05.875Z","allow_singular_disclosure_after":-175496967.21754742,"singular_disclosure_allowed":true,"vote_count":3,"voters":["madrobot","spetr0x","dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":149394,"is_internal":false,"editable":false,"type":"Activities::BugDuplicate","message":"Great find, but you've unfortunately stumbled across a duplicate Won't Fix of an intentional design decision and it's something that has been submitted to us before. This is the resolution we posted over at the original ticket in #29185:\n\n\u003e At first glance there's an obvious information disclosure but there are a handful of mitigating circumstances:\n\u003e \n\u003e - Users and Teams share a unified namespace (this method can't differentiate between a private program and a deleted user)\n\u003e - Team registration is [open](https://hackerone.com/users/sign_up?team=true) to the public\n\u003e - Researchers are constantly attempting to social engineer our program approval process\n\u003e - At this point, a healthy majority of the valid names have been registered by illegitimate owners\n\u003e \n\u003e The underlying information disclosure here is really during the registration process - something we feel is pretty crucial for a smooth process. The 404 vs sign_in redirection was introduced later as a cache optimization driven by the constant vulnerability scanning we're subject to. Our belief here is that, given the high level of pollution in the namespace, the risk of a true information disclosure is quite low.","markdown_message":"\u003cp\u003eGreat find, but you\u0026#39;ve unfortunately stumbled across a duplicate Won\u0026#39;t Fix of an intentional design decision and it\u0026#39;s something that has been submitted to us before. This is the resolution we posted over at the original ticket in \u003ca href=\"/reports/29185\"\u003e#29185\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt first glance there\u0026#39;s an obvious information disclosure but there are a handful of mitigating circumstances:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUsers and Teams share a unified namespace (this method can\u0026#39;t differentiate between a private program and a deleted user)\u003c/li\u003e\n\u003cli\u003eTeam registration is \u003ca href=\"https://hackerone.com/users/sign_up?team=true\"\u003eopen\u003c/a\u003e to the public\u003c/li\u003e\n\u003cli\u003eResearchers are constantly attempting to social engineer our program approval process\u003c/li\u003e\n\u003cli\u003eAt this point, a healthy majority of the valid names have been registered by illegitimate owners\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe underlying information disclosure here is really during the registration process - something we feel is pretty crucial for a smooth process. The 404 vs sign_in redirection was introduced later as a cache optimization driven by the constant vulnerability scanning we\u0026#39;re subject to. Our belief here is that, given the high level of pollution in the namespace, the risk of a true information disclosure is quite low.\u003c/p\u003e\n\u003c/blockquote\u003e\n","automated_response":false,"created_at":"2014-10-27T23:52:57.308Z","updated_at":"2014-10-27T23:52:57.308Z","original_report_id":29185,"actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":149402,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I want to disagree a bit here. In your description you say that both team names and reporters share a common naming scheme but my enumeration method will not collide with reporter namespace as for every attempt to hit *common_responses.json* file with a reporter username will lead to 404-error and only succeed when 500-error is thrown, when an existing *team* username is hit (public/invited). \n\nAre you able to notice the difference here, with respect to your resolution on #29185 ?","markdown_message":"\u003cp\u003eI want to disagree a bit here. In your description you say that both team names and reporters share a common naming scheme but my enumeration method will not collide with reporter namespace as for every attempt to hit \u003cem\u003ecommon_responses.json\u003c/em\u003e file with a reporter username will lead to 404-error and only succeed when 500-error is thrown, when an existing \u003cem\u003eteam\u003c/em\u003e username is hit (public/invited). \u003c/p\u003e\n\n\u003cp\u003eAre you able to notice the difference here, with respect to your resolution on \u003ca href=\"/reports/29185\"\u003e#29185\u003c/a\u003e ?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T00:08:01.011Z","updated_at":"2014-10-28T00:08:01.011Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149413,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Of course I see the difference, and the response I copied from #29185 was tailored for the use case where going to the profile would result in a 404 if it did not exist and it would redirect to the sign in page when the profile existed. I had hoped that you'd see the similarity between the two cases. In your situation the only argument from my response that is invalid, is the first one. All the other arguments stay valid and apply to both #29185 and your report. ","markdown_message":"\u003cp\u003eOf course I see the difference, and the response I copied from \u003ca href=\"/reports/29185\"\u003e#29185\u003c/a\u003e was tailored for the use case where going to the profile would result in a 404 if it did not exist and it would redirect to the sign in page when the profile existed. I had hoped that you\u0026#39;d see the similarity between the two cases. In your situation the only argument from my response that is invalid, is the first one. All the other arguments stay valid and apply to both \u003ca href=\"/reports/29185\"\u003e#29185\u003c/a\u003e and your report. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T00:13:50.620Z","updated_at":"2014-10-28T00:14:20.983Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":149419,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I still don't get how 500 vs 404 responses are related to your *smooth process* and *caching*. This enumeration is only based on sending  a single GET with *common_responses.json* for a specific username  and compare responses. I don't get how these points make sense:\n\n\u003e Team registration is open to the public \n\nI don't understand what do you mean by this. This method will only find private usernames once 500 is thrown and username doesn't exist in any of the public program \n\n\u003e Researchers are constantly attempting to social engineer our program approval process\n\nWhat ?\n\n\u003eAt this point, a healthy majority of the valid names have been registered by illegitimate owners\n\nAgain, I'd stress here *most of your programs* have same username as that of their respective company name. \n\n\u003eOur belief here is that, given the high level of pollution in the namespace, the risk of a true information disclosure is quite low.\n\nNo pollution at all, this technique will **never hit a reporter/profile username** but **only hit team usernames** because *common_responses.json* file is not available to users but only teams so the probability of enumeration is *not low* as reporter/profile names are gone from namespace. \n\nFix is relatively simple just swapping 500 with 404 if the user does not have access to the program. \n\nPlease review the report properly I don't believe this being a duplicate as both methods are different significantly, just the efficiency of my method seems more. ","markdown_message":"\u003cp\u003eI still don\u0026#39;t get how 500 vs 404 responses are related to your \u003cem\u003esmooth process\u003c/em\u003e and \u003cem\u003ecaching\u003c/em\u003e. This enumeration is only based on sending  a single GET with \u003cem\u003ecommon_responses.json\u003c/em\u003e for a specific username  and compare responses. I don\u0026#39;t get how these points make sense:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTeam registration is open to the public \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI don\u0026#39;t understand what do you mean by this. This method will only find private usernames once 500 is thrown and username doesn\u0026#39;t exist in any of the public program \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eResearchers are constantly attempting to social engineer our program approval process\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat ?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt this point, a healthy majority of the valid names have been registered by illegitimate owners\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAgain, I\u0026#39;d stress here \u003cem\u003emost of your programs\u003c/em\u003e have same username as that of their respective company name. \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOur belief here is that, given the high level of pollution in the namespace, the risk of a true information disclosure is quite low.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNo pollution at all, this technique will \u003cstrong\u003enever hit a reporter/profile username\u003c/strong\u003e but \u003cstrong\u003eonly hit team usernames\u003c/strong\u003e because \u003cem\u003ecommon_responses.json\u003c/em\u003e file is not available to users but only teams so the probability of enumeration is \u003cem\u003enot low\u003c/em\u003e as reporter/profile names are gone from namespace. \u003c/p\u003e\n\n\u003cp\u003eFix is relatively simple just swapping 500 with 404 if the user does not have access to the program. \u003c/p\u003e\n\n\u003cp\u003ePlease review the report properly I don\u0026#39;t believe this being a duplicate as both methods are different significantly, just the efficiency of my method seems more. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T00:30:05.319Z","updated_at":"2014-10-28T00:38:53.263Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149420,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e I don't understand what do you mean by this. This method will only find private usernames once 500 is thrown and username doesn't exist in any of the public program.\n\nAny user can sign up for a team. Follow the link I sent you. That brings me to the two most compelling arguments I quoted from #29185:\n\n\u003e Researchers are constantly attempting to social engineer our program approval process\n\nThis means there are a bunch of researchers who sign up for a team like Google, Bank of America or Microsoft and try to get approval for these by social engineering support staff. Even though they are unapproved and flagged, they'd still show up as a \"private team\" using your method.\n\n\u003e At this point, a healthy majority of the valid names have been registered by illegitimate owners\n\nThis means that using your method, the biggest chunk of team handles you could iterate on would incorrectly get flagged as a 'private team', while they were actually signed up by illegitimate owners and not approved.\n","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eI don\u0026#39;t understand what do you mean by this. This method will only find private usernames once 500 is thrown and username doesn\u0026#39;t exist in any of the public program.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAny user can sign up for a team. Follow the link I sent you. That brings me to the two most compelling arguments I quoted from \u003ca href=\"/reports/29185\"\u003e#29185\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eResearchers are constantly attempting to social engineer our program approval process\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis means there are a bunch of researchers who sign up for a team like Google, Bank of America or Microsoft and try to get approval for these by social engineering support staff. Even though they are unapproved and flagged, they\u0026#39;d still show up as a \u0026quot;private team\u0026quot; using your method.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAt this point, a healthy majority of the valid names have been registered by illegitimate owners\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis means that using your method, the biggest chunk of team handles you could iterate on would incorrectly get flagged as a \u0026#39;private team\u0026#39;, while they were actually signed up by illegitimate owners and not approved.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T00:40:08.754Z","updated_at":"2014-10-28T00:40:52.757Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":149427,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I get it now, you are saying that unapproved teams are hit as well. I just tried hitting one of my unapproved team with my method and instead of 500 error I get 404 this is the URL I tried:\n\nhttps://hackerone.com/prakharprasadcom/common_responses.json\n\nI registered for this team a while back. So basically it should give me 500 right? as it is unapproved but I get 404. \n\nCan you check it please? ","markdown_message":"\u003cp\u003eI get it now, you are saying that unapproved teams are hit as well. I just tried hitting one of my unapproved team with my method and instead of 500 error I get 404 this is the URL I tried:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hackerone.com/prakharprasadcom/common_responses.json\" href=\"https://hackerone.com/prakharprasadcom/common_responses.json\"\u003ehttps://hackerone.com/prakharprasadcom/common_responses.json\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI registered for this team a while back. So basically it should give me 500 right? as it is unapproved but I get 404. \u003c/p\u003e\n\n\u003cp\u003eCan you check it please? \u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T00:52:00.160Z","updated_at":"2014-10-28T00:52:00.160Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149741,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Again, I tried registering a fake-program (unapproved as of now) with team username **bbtest** and I get a 404 error with JSON response body, now for a private team say *████* I get 500 error-code and an empty response body but for a non-existent team I get a 404 error with HTML response-body. Refer to the screenshots.\n","markdown_message":"\u003cp\u003eAgain, I tried registering a fake-program (unapproved as of now) with team username \u003cstrong\u003ebbtest\u003c/strong\u003e and I get a 404 error with JSON response body, now for a private team say \u003cem\u003e████\u003c/em\u003e I get 500 error-code and an empty response body but for a non-existent team I get a 404 error with HTML response-body. Refer to the screenshots.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T16:12:15.712Z","updated_at":"2014-12-03T23:57:52.391Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":19638,"filename":"doesntexist.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/019/638/69a3ecad23fbb6ed4b5763ff3663eb8683726739/doesntexist.png?response-content-disposition=attachment%3B%20filename%3D%22doesntexist.png%22%3B%20filename%2A%3DUTF-8%27%27doesntexist.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6NMQGJ6E%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053633Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCJPJ3IXoQNPAbQsg0bSSDfaJAZgsDgYrylclk1ric%2BkwIgDMmyHsdGD2jlH3d3dln%2FDB9m9n5i6VO9V2BpF6r0awgqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDCkjwEt6QlasbvM7ZiqRA8ipmJh0c%2Fct0msibE3n%2BnRShysnYAR7o%2FZb%2FNOpmlF41MYM4vnJx%2BKnhTDzjqB75T669Dmp%2FumbZJRIrhxgKJdSS92b6LQmv9XRjqyLPfQsEclw5qtwUJW48f0o0jPTkAA4Oc%2BOTznto%2FOC5dkeM5uzkchKTgv5sWyez3jHbO7YDmRMySDgSE0WkHBXhPZQyAnXHSKzrXWN4GxrsWDdDySlVvWJsjrqXJKYAL2xPI5%2FjSILjkUZ9kuALSA0BMOHlFfmOR9rXay9ZlJsKpIxq9W0g1cPU3rH2nhREBGoWjmO0zL5UzdA7mwH0emOB4l8od6kgtXvLqzikrqRZmjMafaJ4rwl7m%2F7kPi1mAWR01Xv4I7g6KRnBZoinRfFyi2aIRNmob0mp4O8dYWiI1UFCKekGmxdeEXsT%2B%2FfnOI6%2FAtmxCqBeZUB9WYcY7kMDIvIEvzHxMtG1QwLQB%2BkEanZgNJjUMVu%2BvkfnJq5ZFHRe1C33%2Bq7yApHokLx%2FpLKVFcbwIWj3IdU3SreS0T7b9NvUTUDMJrwqv8FOusBw2IadTH8jjyfIyLkG4%2BNkdrwzFLtfIjsHPdVpCkbbFU1ZYFUCT0auJmrX%2FxO31nzBV099ZiTIwmiaOXiEjREOeewBAYJIv2hxCC3PImV9Eo0xANYmEhG2QXnopWMla2LfC9A6LxCjHun0xukJwsfGjUNY%2BDMADaaUMtUItG63%2FF90r5a633HiieX5u6juKS9PEtljaKdlyfR86kZEzrXCfQmIoLh2OFdNeX0ArfbPO0PDWdVEi5auyGRhX3N1wchgL501NrEkDSpnVLS%2BEE5kKFufTTZUhelsnV4VtqdHW410LhjtT2ub2vVDA%3D%3D\u0026X-Amz-Signature=00beed195f178dcad2560896954773da0fdac4fe35563f446d611726e67b37e0"},{"id":19639,"filename":"unapproved.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/019/639/94fe77d9697f923df0423e99aff658f4f25c355a/unapproved.png?response-content-disposition=attachment%3B%20filename%3D%22unapproved.png%22%3B%20filename%2A%3DUTF-8%27%27unapproved.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6NMQGJ6E%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053633Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCJPJ3IXoQNPAbQsg0bSSDfaJAZgsDgYrylclk1ric%2BkwIgDMmyHsdGD2jlH3d3dln%2FDB9m9n5i6VO9V2BpF6r0awgqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDCkjwEt6QlasbvM7ZiqRA8ipmJh0c%2Fct0msibE3n%2BnRShysnYAR7o%2FZb%2FNOpmlF41MYM4vnJx%2BKnhTDzjqB75T669Dmp%2FumbZJRIrhxgKJdSS92b6LQmv9XRjqyLPfQsEclw5qtwUJW48f0o0jPTkAA4Oc%2BOTznto%2FOC5dkeM5uzkchKTgv5sWyez3jHbO7YDmRMySDgSE0WkHBXhPZQyAnXHSKzrXWN4GxrsWDdDySlVvWJsjrqXJKYAL2xPI5%2FjSILjkUZ9kuALSA0BMOHlFfmOR9rXay9ZlJsKpIxq9W0g1cPU3rH2nhREBGoWjmO0zL5UzdA7mwH0emOB4l8od6kgtXvLqzikrqRZmjMafaJ4rwl7m%2F7kPi1mAWR01Xv4I7g6KRnBZoinRfFyi2aIRNmob0mp4O8dYWiI1UFCKekGmxdeEXsT%2B%2FfnOI6%2FAtmxCqBeZUB9WYcY7kMDIvIEvzHxMtG1QwLQB%2BkEanZgNJjUMVu%2BvkfnJq5ZFHRe1C33%2Bq7yApHokLx%2FpLKVFcbwIWj3IdU3SreS0T7b9NvUTUDMJrwqv8FOusBw2IadTH8jjyfIyLkG4%2BNkdrwzFLtfIjsHPdVpCkbbFU1ZYFUCT0auJmrX%2FxO31nzBV099ZiTIwmiaOXiEjREOeewBAYJIv2hxCC3PImV9Eo0xANYmEhG2QXnopWMla2LfC9A6LxCjHun0xukJwsfGjUNY%2BDMADaaUMtUItG63%2FF90r5a633HiieX5u6juKS9PEtljaKdlyfR86kZEzrXCfQmIoLh2OFdNeX0ArfbPO0PDWdVEi5auyGRhX3N1wchgL501NrEkDSpnVLS%2BEE5kKFufTTZUhelsnV4VtqdHW410LhjtT2ub2vVDA%3D%3D\u0026X-Amz-Signature=945ad72a5e9f86bd96b8f281d3047092f7f84874573507fc9613196953fe085f"}],"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149906,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Are you 100% sure about that? To me it looks like it causes a 404 because the team was rejected and therefore the username **bbtest** was released to the public again. I just registered another unverified team called **bbtest**, can you now test again?","markdown_message":"\u003cp\u003eAre you 100% sure about that? To me it looks like it causes a 404 because the team was rejected and therefore the username \u003cstrong\u003ebbtest\u003c/strong\u003e was released to the public again. I just registered another unverified team called \u003cstrong\u003ebbtest\u003c/strong\u003e, can you now test again?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T18:20:26.554Z","updated_at":"2014-10-28T18:20:26.554Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":149915,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Tried hitting https://hackerone.com/bbtest/common_responses.json got 500, so if this team is in unapproved state then, **for sure** my method sucks a lot in differentiating between unapproved vs private team namespace. ","markdown_message":"\u003cp\u003eTried hitting \u003ca title=\"https://hackerone.com/bbtest/common_responses.json\" href=\"https://hackerone.com/bbtest/common_responses.json\"\u003ehttps://hackerone.com/bbtest/common_responses.json\u003c/a\u003e got 500, so if this team is in unapproved state then, \u003cstrong\u003efor sure\u003c/strong\u003e my method sucks a lot in differentiating between unapproved vs private team namespace. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T18:30:20.547Z","updated_at":"2014-10-28T18:30:20.547Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149917,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"But at the same I registered right now a team called **derpinc** and when I hit https://hackerone.com/derpinc/common_responses.json. I get 404 with JSON-body, why is that? Check screenshot please.","markdown_message":"\u003cp\u003eBut at the same I registered right now a team called \u003cstrong\u003ederpinc\u003c/strong\u003e and when I hit \u003ca title=\"https://hackerone.com/derpinc/common_responses.json\" href=\"https://hackerone.com/derpinc/common_responses.json\"\u003ehttps://hackerone.com/derpinc/common_responses.json\u003c/a\u003e. I get 404 with JSON-body, why is that? Check screenshot please.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T18:32:25.436Z","updated_at":"2014-10-28T18:35:03.464Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149919,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"-","markdown_message":"\u003cp\u003e-\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T18:35:20.911Z","updated_at":"2014-10-28T18:35:20.911Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":19644,"filename":"Screen_Shot_2014-10-29_at_12.05.51_am.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/019/644/3524c4b34a1b18b7296398423cff6ad8ea0dcb09/Screen_Shot_2014-10-29_at_12.05.51_am.png?response-content-disposition=attachment%3B%20filename%3D%22Screen_Shot_2014-10-29_at_12.05.51_am.png%22%3B%20filename%2A%3DUTF-8%27%27Screen_Shot_2014-10-29_at_12.05.51_am.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6NMQGJ6E%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053633Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCJPJ3IXoQNPAbQsg0bSSDfaJAZgsDgYrylclk1ric%2BkwIgDMmyHsdGD2jlH3d3dln%2FDB9m9n5i6VO9V2BpF6r0awgqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDCkjwEt6QlasbvM7ZiqRA8ipmJh0c%2Fct0msibE3n%2BnRShysnYAR7o%2FZb%2FNOpmlF41MYM4vnJx%2BKnhTDzjqB75T669Dmp%2FumbZJRIrhxgKJdSS92b6LQmv9XRjqyLPfQsEclw5qtwUJW48f0o0jPTkAA4Oc%2BOTznto%2FOC5dkeM5uzkchKTgv5sWyez3jHbO7YDmRMySDgSE0WkHBXhPZQyAnXHSKzrXWN4GxrsWDdDySlVvWJsjrqXJKYAL2xPI5%2FjSILjkUZ9kuALSA0BMOHlFfmOR9rXay9ZlJsKpIxq9W0g1cPU3rH2nhREBGoWjmO0zL5UzdA7mwH0emOB4l8od6kgtXvLqzikrqRZmjMafaJ4rwl7m%2F7kPi1mAWR01Xv4I7g6KRnBZoinRfFyi2aIRNmob0mp4O8dYWiI1UFCKekGmxdeEXsT%2B%2FfnOI6%2FAtmxCqBeZUB9WYcY7kMDIvIEvzHxMtG1QwLQB%2BkEanZgNJjUMVu%2BvkfnJq5ZFHRe1C33%2Bq7yApHokLx%2FpLKVFcbwIWj3IdU3SreS0T7b9NvUTUDMJrwqv8FOusBw2IadTH8jjyfIyLkG4%2BNkdrwzFLtfIjsHPdVpCkbbFU1ZYFUCT0auJmrX%2FxO31nzBV099ZiTIwmiaOXiEjREOeewBAYJIv2hxCC3PImV9Eo0xANYmEhG2QXnopWMla2LfC9A6LxCjHun0xukJwsfGjUNY%2BDMADaaUMtUItG63%2FF90r5a633HiieX5u6juKS9PEtljaKdlyfR86kZEzrXCfQmIoLh2OFdNeX0ArfbPO0PDWdVEi5auyGRhX3N1wchgL501NrEkDSpnVLS%2BEE5kKFufTTZUhelsnV4VtqdHW410LhjtT2ub2vVDA%3D%3D\u0026X-Amz-Signature=e48f24c0058c1685edd5a233b95787a8d398ba396be3e44c4df5b23a5dfc26d4"}],"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":152057,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"You have a point here, but it's something that we're refactoring right now and will land in production very soon. Your method would only work when the team was still awaiting approval. If the team were to be in the sandbox already, this method can not distinguish sandboxed teams from actually privately launched programs. Very soon we'll roll out a new onboarding flow where any sign up lands in the sandbox immediately. This includes bogus sign ups from researchers that are trying to find bugs in our platform, but also sign ups from researchers that try to social engineer us and get an illegitimate team sign up out of the sandbox.","markdown_message":"\u003cp\u003eYou have a point here, but it\u0026#39;s something that we\u0026#39;re refactoring right now and will land in production very soon. Your method would only work when the team was still awaiting approval. If the team were to be in the sandbox already, this method can not distinguish sandboxed teams from actually privately launched programs. Very soon we\u0026#39;ll roll out a new onboarding flow where any sign up lands in the sandbox immediately. This includes bogus sign ups from researchers that are trying to find bugs in our platform, but also sign ups from researchers that try to social engineer us and get an illegitimate team sign up out of the sandbox.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-31T23:17:49.569Z","updated_at":"2014-10-31T23:17:49.569Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":152058,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fine! :)","markdown_message":"\u003cp\u003eFine! :)\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-31T23:19:36.061Z","updated_at":"2014-10-31T23:19:36.061Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":152064,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Mind public disclosure ?","markdown_message":"\u003cp\u003eMind public disclosure ?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-31T23:27:25.291Z","updated_at":"2014-10-31T23:27:25.291Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":158470,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Still awaiting a response from your side regarding public disclosure for this one.","markdown_message":"\u003cp\u003eStill awaiting a response from your side regarding public disclosure for this one.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-11-11T06:29:55.978Z","updated_at":"2014-11-11T06:30:28.112Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":165475,"is_internal":false,"editable":false,"type":"Activities::BugReopened","message":"","markdown_message":"","automated_response":false,"created_at":"2014-11-20T20:38:18.589Z","updated_at":"2014-11-20T20:38:18.589Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":165476,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @prakharprasad - we're reopening this and will close this again as resolved once we launch this new onboarding flow I mentioned in my previous comment. The fix, which was already developed before this report was created, will be bundled with a larger feature launch. I expect this feature to go out next week.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/prakharprasad\"\u003e@prakharprasad\u003c/a\u003e - we\u0026#39;re reopening this and will close this again as resolved once we launch this new onboarding flow I mentioned in my previous comment. The fix, which was already developed before this report was created, will be bundled with a larger feature launch. I expect this feature to go out next week.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-11-20T20:40:02.101Z","updated_at":"2014-11-20T20:40:02.101Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":172384,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"The feature shipped! Anyone can now sign up for a team in our sandbox and users can pick their any handle they like ([try it here!](https://hackerone.com/users/sign_up?team=true)). Using any of the methods to determine whether a team exists (for instance 500 vs. 404) does not guarantee that the team is actually legitimate (in fact it's highly unlikely). Anyone can sign up a team with for instance the handle `/wellsfargo`, but that doesn't mean it is actually a private team held by the company Wells Fargo. ","markdown_message":"\u003cp\u003eThe feature shipped! Anyone can now sign up for a team in our sandbox and users can pick their any handle they like (\u003ca href=\"https://hackerone.com/users/sign_up?team=true\"\u003etry it here!\u003c/a\u003e). Using any of the methods to determine whether a team exists (for instance 500 vs. 404) does not guarantee that the team is actually legitimate (in fact it\u0026#39;s highly unlikely). Anyone can sign up a team with for instance the handle \u003ccode\u003e/wellsfargo\u003c/code\u003e, but that doesn\u0026#39;t mean it is actually a private team held by the company Wells Fargo. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-12-05T02:16:49.684Z","updated_at":"2014-12-05T02:16:49.684Z","actor":{"username":"michiel","cleared":true,"url":"/michiel","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/007/439427fb81f710e5e16246ede1828613d46bb79e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"prakharprasad","url":"/prakharprasad"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":405533,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-09T00:26:58.216Z","updated_at":"2015-05-09T00:26:58.216Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":405534,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-09T00:27:05.390Z","updated_at":"2015-05-09T00:27:05.390Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":405803,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Thanks! ","markdown_message":"\u003cp\u003eThanks! \u003c/p\u003e\n","automated_response":false,"created_at":"2015-05-09T08:17:38.604Z","updated_at":"2015-05-09T08:17:38.604Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":405804,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-09T08:18:05.633Z","updated_at":"2015-05-09T08:18:05.633Z","actor":{"username":"prakharprasad","cleared":true,"url":"/prakharprasad","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/4Qcsaci6HdNLQCPM7oBdhJYY/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}