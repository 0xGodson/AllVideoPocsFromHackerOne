{"id":31188,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTE4OA==","url":"https://hackerone.com/reports/31188","title":"Creating Unauthorized Audience Lists","state":"Closed","substate":"informative","readable_substate":"Informative","created_at":"2014-10-13T03:15:28.427Z","submitted_at":"2014-10-13T03:15:28.427Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"anshuman_bh","url":"/anshuman_bh","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/274/e61ac38cffc356f9d4531f8581e62fd4b6603c67_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":61,"url":"https://hackerone.com/twitter","handle":"twitter","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Twitter","twitter_handle":"twittersecurity","website":"https://twitter.com","about":"Twitter helps you create and share ideas and information instantly, without barriers."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2014-11-28T15:38:33.167Z","bug_reporter_agreed_on_going_public_at":"2014-10-29T15:38:19.827Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"While creating a new audience list at the URL `https://ads.twitter.com/accounts/\u003credacted\u003e/audience_manager/create_list_audience`, under `Data security and privacy` it is clearly mentioned that \r\n```\r\nWhen creating a list audience, the information in your data file is always hashed before it is sent to Twitter, and Twitter never reveals or shares the information in your list with anyone or any other service.\r\n```\r\n\r\nDuring testing, it was observed that it is possible to load an audience list from a completely different account that you are not authorized to have access to. And, this can be done without even possessing the access to the audience list of the other account. An attacker would simply have to iterate/bruteforce through numerical values. \r\n\r\nSteps to Reproduce:\r\n* Start a proxy tool such as Burp and authenticate into a valid user account which has the Ads \u0026 Analytics dashboard enabled.\r\n\r\n* Navigate to `https://ads.twitter.com/accounts/\u003credacted\u003e/audience_manager/create_list_audience`\r\n\r\n* Create a valid audience list by filling in all the information and uploading a valid CSV file.\r\n\r\n* In Burp, notice that the CSV file is uploaded to the domain `upload.twitter.com` and then a POST request is sent to the URL `https://ads.twitter.com/accounts/\u003credacted\u003e/audience_manager/create_list_audience` with a parameter `blobstore_path`in the POST body as shown below. The X-CSRF-Token, session cookies and the account IDs are redacted below:\r\n\r\n```\r\nPOST /accounts/\u003credacted\u003e/audience_manager/create_list_audience HTTP/1.1\r\nHost: ads.twitter.com\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0\r\nAccept: */*\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\r\nX-CSRF-Token: \u003credacted\u003e\r\nX-Requested-With: XMLHttpRequest\r\nReferer: https://ads.twitter.com/accounts/\u003credacted\u003e/audience_manager/create_list_audience\r\nContent-Length: 151\r\nCookie: \u003credacted\u003e\r\nConnection: keep-alive\r\nPragma: no-cache\r\nCache-Control: no-cache\r\n\r\naccount=\u003credacted\u003e\u0026name=test\u0026audience_identification_type=3\u0026input_file_record_count=10001\u0026blobstore_path=%2Fta_data%2F2812522204%2F1413168758432.txt\r\n```\r\n\r\n* Notice that the file is successfully uploaded as a audience list. \r\n\r\n* Now, logout of this account and authenticate into a different account. Follow all the steps above but instead of uploading the same CSV file as above, submit a random file and intercept the request to the URL `https://ads.twitter.com/accounts/\u003credacted\u003e/audience_manager/create_list_audience` in Burp.\r\n\r\n* Replace the value of the `blobstore_path` variable to the value of the previous account `%2Fta_data%2F2812522204%2F1413168758432.txt` and forward the request. \r\n\r\n* Notice that the request is successfully submitted. After a few hours, both the requests above would be processed and both the accounts would have the ***same*** audience list. \r\n\r\nEssentially, what the 2nd account did was simply supply the `blobstore_path` value of the previous account and the 2nd account got access to the audience list of the 1st account.\r\n\r\nThere might be an argument as to how would an attacker know the value of the `blobstore_path` of other accounts. Notice that the value of the `blobstore_path` variable does not appear to be random or something like a CSRF token that the attacker couldn't guess. It is simply a directory structure with 2 integers `/ta_data/2812522204/1413168758432.txt` which can be iterated/bruteforced. Hence, I believe that argument is irrelevant. \r\n\r\nRemediation Hypothesis:\r\nIf `2812522204` in the above `blobstore_path` represents the account and `1413168758432.txt` represents the actual CSV file, then there should be some sort of authorization controls enforced to ensure that users are only allowed to supply paths representing CSV files under their own account directory. But, I can't be 100% sure about this.  \r\n\r\nCheers!\r\n","vulnerability_information_html":"\u003cp\u003eWhile creating a new audience list at the URL \u003ccode\u003ehttps://ads.twitter.com/accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience\u003c/code\u003e, under \u003ccode\u003eData security and privacy\u003c/code\u003e it is clearly mentioned that \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eWhen creating a list audience, the information in your data file is always hashed before it is sent to Twitter, and Twitter never reveals or shares the information in your list with anyone or any other service.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDuring testing, it was observed that it is possible to load an audience list from a completely different account that you are not authorized to have access to. And, this can be done without even possessing the access to the audience list of the other account. An attacker would simply have to iterate/bruteforce through numerical values. \u003c/p\u003e\n\n\u003cp\u003eSteps to Reproduce:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eStart a proxy tool such as Burp and authenticate into a valid user account which has the Ads \u0026amp; Analytics dashboard enabled.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNavigate to \u003ccode\u003ehttps://ads.twitter.com/accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCreate a valid audience list by filling in all the information and uploading a valid CSV file.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIn Burp, notice that the CSV file is uploaded to the domain \u003ccode\u003eupload.twitter.com\u003c/code\u003e and then a POST request is sent to the URL \u003ccode\u003ehttps://ads.twitter.com/accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience\u003c/code\u003e with a parameter \u003ccode\u003eblobstore_path\u003c/code\u003ein the POST body as shown below. The X-CSRF-Token, session cookies and the account IDs are redacted below:\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience HTTP/1.1\nHost: ads.twitter.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:29.0) Gecko/20100101 Firefox/29.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nX-CSRF-Token: \u0026lt;redacted\u0026gt;\nX-Requested-With: XMLHttpRequest\nReferer: https://ads.twitter.com/accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience\nContent-Length: 151\nCookie: \u0026lt;redacted\u0026gt;\nConnection: keep-alive\nPragma: no-cache\nCache-Control: no-cache\n\naccount=\u0026lt;redacted\u0026gt;\u0026amp;name=test\u0026amp;audience_identification_type=3\u0026amp;input_file_record_count=10001\u0026amp;blobstore_path=%2Fta_data%2F2812522204%2F1413168758432.txt\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eNotice that the file is successfully uploaded as a audience list. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNow, logout of this account and authenticate into a different account. Follow all the steps above but instead of uploading the same CSV file as above, submit a random file and intercept the request to the URL \u003ccode\u003ehttps://ads.twitter.com/accounts/\u0026lt;redacted\u0026gt;/audience_manager/create_list_audience\u003c/code\u003e in Burp.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eReplace the value of the \u003ccode\u003eblobstore_path\u003c/code\u003e variable to the value of the previous account \u003ccode\u003e%2Fta_data%2F2812522204%2F1413168758432.txt\u003c/code\u003e and forward the request. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eNotice that the request is successfully submitted. After a few hours, both the requests above would be processed and both the accounts would have the \u003cstrong\u003e\u003cem\u003esame\u003c/em\u003e\u003c/strong\u003e audience list. \u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEssentially, what the 2nd account did was simply supply the \u003ccode\u003eblobstore_path\u003c/code\u003e value of the previous account and the 2nd account got access to the audience list of the 1st account.\u003c/p\u003e\n\n\u003cp\u003eThere might be an argument as to how would an attacker know the value of the \u003ccode\u003eblobstore_path\u003c/code\u003e of other accounts. Notice that the value of the \u003ccode\u003eblobstore_path\u003c/code\u003e variable does not appear to be random or something like a CSRF token that the attacker couldn\u0026#39;t guess. It is simply a directory structure with 2 integers \u003ccode\u003e/ta_data/2812522204/1413168758432.txt\u003c/code\u003e which can be iterated/bruteforced. Hence, I believe that argument is irrelevant. \u003c/p\u003e\n\n\u003cp\u003eRemediation Hypothesis:\u003cbr\u003e\nIf \u003ccode\u003e2812522204\u003c/code\u003e in the above \u003ccode\u003eblobstore_path\u003c/code\u003e represents the account and \u003ccode\u003e1413168758432.txt\u003c/code\u003e represents the actual CSV file, then there should be some sort of authorization controls enforced to ensure that users are only allowed to supply paths representing CSV files under their own account directory. But, I can\u0026#39;t be 100% sure about this.  \u003c/p\u003e\n\n\u003cp\u003eCheers!\u003c/p\u003e\n","weakness":{"id":57,"name":"Violation of Secure Design Principles"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2014-11-28T15:38:20.118Z","allow_singular_disclosure_after":-192030840.8662388,"singular_disclosure_allowed":true,"vote_count":1,"voters":["spetr0x"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":141350,"is_internal":false,"editable":false,"type":"Activities::BugNotApplicable","message":"Hello and thank you for this interesting report.  As you point out, it would be extremely difficult to find anyone else's uploaded file due to the large space you'd have to exhaust against as well as rate limits that are put in place to prevent this type of attack.  Additionally, this file only contains cryptographically hashed values and so by itself is not useful for an attacker.  As you point out, if the attacker did find such a file, which is highly unlikely, the attacker may upload and use this as a target of a campaign, but again, they won't learn the actual values of the audience list.  Given the above, we feel there are sufficient protections in place to prevent an attack against this feature and do not plan to make changes to address it at this time.","markdown_message":"\u003cp\u003eHello and thank you for this interesting report.  As you point out, it would be extremely difficult to find anyone else\u0026#39;s uploaded file due to the large space you\u0026#39;d have to exhaust against as well as rate limits that are put in place to prevent this type of attack.  Additionally, this file only contains cryptographically hashed values and so by itself is not useful for an attacker.  As you point out, if the attacker did find such a file, which is highly unlikely, the attacker may upload and use this as a target of a campaign, but again, they won\u0026#39;t learn the actual values of the audience list.  Given the above, we feel there are sufficient protections in place to prevent an attack against this feature and do not plan to make changes to address it at this time.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-13T15:36:20.181Z","updated_at":"2014-10-13T15:36:20.181Z","actor":{"username":"cmiller","cleared":false,"url":"/cmiller","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/113/6ef9b6413b36e8b43175bab4ec39791395346508_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":141352,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fair enough. Appreciate the detailed feedback :)","markdown_message":"\u003cp\u003eFair enough. Appreciate the detailed feedback :)\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-13T15:38:57.440Z","updated_at":"2014-10-13T15:38:57.440Z","actor":{"username":"anshuman_bh","cleared":true,"url":"/anshuman_bh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/274/e61ac38cffc356f9d4531f8581e62fd4b6603c67_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":149765,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello, do you mind changing this to \"Won't Fix\" and disclosing it?","markdown_message":"\u003cp\u003eHello, do you mind changing this to \u0026quot;Won\u0026#39;t Fix\u0026quot; and disclosing it?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-28T16:49:57.785Z","updated_at":"2014-10-28T16:49:57.785Z","actor":{"username":"anshuman_bh","cleared":true,"url":"/anshuman_bh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/274/e61ac38cffc356f9d4531f8581e62fd4b6603c67_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":150512,"is_internal":false,"editable":false,"type":"Activities::BugReopened","message":"","markdown_message":"","automated_response":false,"created_at":"2014-10-29T15:37:33.783Z","updated_at":"2014-10-29T15:37:33.783Z","actor":{"username":"cmiller","cleared":false,"url":"/cmiller","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/113/6ef9b6413b36e8b43175bab4ec39791395346508_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":150513,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"Changed to won't fix.","markdown_message":"\u003cp\u003eChanged to won\u0026#39;t fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-29T15:38:00.267Z","updated_at":"2014-10-29T15:38:00.267Z","actor":{"username":"cmiller","cleared":false,"url":"/cmiller","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/113/6ef9b6413b36e8b43175bab4ec39791395346508_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":150514,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2014-10-29T15:38:19.842Z","updated_at":"2014-10-29T15:38:19.842Z","first_to_agree":true,"actor":{"username":"anshuman_bh","cleared":true,"url":"/anshuman_bh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/274/e61ac38cffc356f9d4531f8581e62fd4b6603c67_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":169333,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2014-11-28T15:38:33.258Z","updated_at":"2014-11-28T15:38:33.258Z","actor":{"url":"/twitter","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Twitter"}},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}