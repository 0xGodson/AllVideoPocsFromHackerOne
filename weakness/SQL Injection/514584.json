{"id":514584,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTQ1ODQ=","url":"https://hackerone.com/reports/514584","title":"Weak credentials, Blind SQLi, Timing attack, that leads to web admin access","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-03-24T18:21:40.026Z","submitted_at":"2019-03-24T18:21:40.026Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"rabbidbyte","url":"/rabbidbyte","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/347/469/0f34025681cb282e5d656450d21a19eed461419d_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:57:25.259Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:57:19.148Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Summary:\n\nDiscovery of the application:\nThe h1Thermostat application was discovered by extracting the bit.do URL from the image at https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large. The URL https://bit.do/h1therm then led to a Google Drive where the Android application file (h1thermostat.apk) could be downloaded (https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view).\n\nDisassembly of the APK\nThe file h1thermostat.apk was loaded into the Android SDK for analysis.  The thermostat application requested a username and password to access the services.  The APK code was extracted and it was found that the system would proceed past the login screen if the server responded with ”success”:true in a JSON object.\n\nUse of default/weak administrative credentials:\nThe thermostat application was loaded into the Android SDK and executed.  When the application started it requested a username and password to access the services.  The application accepted the credentials:\n\nUsername: admin\nPassword: password\n\nAlthough some luck is involved in guessing this username and password combination it can easily be automated as there is no rate limiting or account lockout enabled on the application.\n\nSQL Injection Vulnerability\nLooking into the APK code further using jadx-gui the LoginActivity class calls the PayloadRequest class when a user signs in. The process takes the username and password and combines it with a command field in a JSON object.  The login JSON object contains the username, password, and command field ({“password”:”password”, “username”:”admin”,”cmd”:”getTemp”}).  This text string is then encrypted with AES/CBC/PKCS5 and then ran through a base64 encoder.  The server (35.243.186.41) then checks the credentials and replies with an encrypted JSON object ({“success”:true,”temperature”:73}).\n\nIt was found that the field “username” in the JSON object was vulnerable to an SQLi attack.  A custom Java application was written that would create a JSON object with the desired fields filled in and parse the server’s response.  The SQLi vulnerability was blind, meaning that inference was needed to determine what was happening on the server side.  It was found that when the success field in the JSON object was true the SQL query completed successfully.  When the query was incorrect and failed the sever responded with success as false and the error was “Unknown”.  Finally, if the query completed successfully but it returned 0 rows, success would be false and the error that was returned is “Invalid username or password”.\n\nUsing the different error messages returned by the server the SQLi vulnerability could be exploited to dump contents from the database.  A custom Java application was written to pull the information out of the database using the following queries with the password of “password”:\n\n•\tadmin' AND user() LIKE ‘%’;--\n•\tadmin' AND (database()) LIKE ‘%’;--\n•\tadmin' AND (SELECT table_name FROM information_schema.tables WHERE table_schema=database() LIMIT 1 OFFSET 1\") LIKE '%’;--\n•\tadmin' AND (SELECT column_name FROM information_schema.columns WHERE table_schema=database() AND table_name='users' LIMIT 1 OFFSET 1) LIKE '%’;--\n•\tadmin' AND (SELECT password FROM users LIMIT 1 OFFSET 0) LIKE '%’;--\n\nThe Java application would cycle through every printable character until a right answer was found.  Once the first character was found the next character would be attacked.  This would continue until the end of the string.\n\nInformation Disclosure:\nThe users table holds a single record.  The id is 1, the username is admin, and the password is 5f4dcc3b5aa765d61d8327deb882cf99.  It was found that the data stored in the password field is an md5 hash of the word “password”.  If there were more accounts stored in the table these could easily be reversed using various methods.\n\nOnce the devices table was dumped it was found that all IP addresses in the devices table were in reserved blocks and unrouteable.  These addresses fell within the following ranges except for the record with the id 85.\n\n•\t10.0.0.0–10.255.255.255\n•\t100.64.0.0–100.127.255.255\n•\t127.0.0.0–127.255.255.255\n•\t169.254.0.0–169.254.255.255\n•\t172.16.0.0–172.31.255.255\n•\t192.0.0.0–192.0.0.255\n•\t192.0.2.0–192.0.2.255\n•\t192.88.99.0–192.88.99.255\n•\t192.168.0.0–192.168.255.255\n•\t198.18.0.0–198.19.255.255\n•\t198.51.100.0–198.51.100.255\n•\t203.0.113.0–203.0.113.255\n•\t224.0.0.0–239.255.255.255\n•\t240.0.0.0–255.255.255.254\n•\t255.255.255.255\n\nThe record with the id “85” in the devices table had an IP address of 104.196.12.98.  This was the only accessible IP address in the table.  When the address was visited with a web browser it displayed an administrative login page for “FliteThermostat”.\n\nTiming Attack:\nThe JavaScript used to send the username and password from the webpage to the server took the user inputted values and combined them with the hex characters ‘\\x05\\x00\\x06’ between the two values.  Once this string was created it was ran through a custom “hashing” function and sent off to the server for authentication.\n\nIt was found through running a dictionary type attack that some responses from the server were much slower than others.  This indicated that the hash could be cracked using a timing attack.  \nThe hash was broken by brute forcing the string by two hexadecimal characters at a time and observing response times from the server.  The longer response time that was received it was determined that the more likely the two characters were the next in the series of the string.  The attack started with a series of 64 “0”’s and was brought down to the actual string using the response times from the server.  After all 255 possible combinations were sent to the server the top 10 – 15 strings were replayed to eliminate false positives.  When the string was found to replicate the same response time the process was started again on the next two characters.  \n\nThe best results were found to be from a virtual machine replaying the POST with Burp.  Settings were configured to only a single thread with 25 milliseconds for throttle.  Once again this could be made more difficult by adding a rate limiting or account lockout control within the system.\n\nf9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8\n\nThe hash was then sent to the server and the response gave a redirect and a Session ID.  The session ID was added to a browser with the console command “javascript:void(document.cookie=-“SessionID=valuereturnedbyserver”);” and this enabled access to the web application showing the pages: control, main, update, and diagnostics.\n\nThermostat Update Page:\nThe thermostat page was intended to download and install updates for the application.  It was found that the port where the server was sending requests to could be changed by sending the parameter PORT=[port#] in the URL.  After a portscan of 65,535 ports on the system and multiple other attempts I ran out of time here.\n\nThis CtF was amazing and I would like to thank everyone who helped build it!  I learnt so much in this experience including probably the most important lesson of not jumping on the first vulnerability and thinking it is the end.  This will help me in future CtF’s and more importantly in bounty hunting.  Although the report is incomplete I do hope that I will be considered for a “n00b invite” to h1-702 if there are any.\n\nSteps To Reproduce:\nExtract URL from PNG Image\n1.\tFrom a Linux machine\n2.\tOpen a web browser and navigate to https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large\n3.\tRight click the image and save to the local system\n4.\tOpen a terminal\n5.\tNavigate to the location where the PNG was saved\n6.\tRename the file to D0XoThpW0AE2r8S.png\n7.\tRun the command “zsteg -a D0XoThpW0AE2r8S.png”\n8.\tThe line “b1,rgb,lsb,yx .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22” gives the url\n9.\tNavigate to https://bit.do/h1therm which redirects to a Google Drive\n10.\tDownload the android application h1thermostat.apk\n\nWeak Username/Password\n1.\tStart the android sdk\n2.\tLoad the APK\n3.\tStart the application\n4.\tEnter commonly known username and password combinations\n\nH1Thermostat SQLi\n1.\tLoad h1-head-sqli.jar in eclipse\n2.\tEdit the values “ops” and “argVar1” according to the function that you wish to perform\n3.\tRun the jar file\n\nTiming Attack\n1.\tStart Burp Suite\n2.\tDisable proxy intercept\n3.\tLoad the burp extension “Request Timer”\n4.\tStart a web browser and configure it to run through the Burp proxy\n5.\tNavigate to http://104.196.12.98 \n6.\tSubmit random data in the form and click login\n7.\tIn the Burp proxy tab, http history, send the POST that was just submitted to intruder\n8.\tReplace the “hash” string with 64 0’s\n9.\tConfigure burp to brute force the first two characters with all characters in the hexadecimal character set\n10.\tChange the options to a single string and 25 milliseconds for the throttle value\n11.\tStart the Request Timer extension\n12.\tStart the intruder attack\n13.\tWhen the intruder attack has completed sort the requests in request timer by response time\n14.\tTake the top 10 or so longest results and replay them to ensure that you have the result that continually gives the longest response\n15.\tEnter the two characters from the intruder attack to the place holder where you were attacking\n16.\tRemove two 0’s from the string and move the attack to the first two 0’s in the string\n17.\tReset the request timer extension\n18.\tRepeat steps 11 – 17 until there are no 0’s left in the string and you get a session id returned by the server\n\nThermostat update page\n1.\tStart Burp Suite\n2.\tDisable proxy intercept\n3.\tStart a web browser and configure it to run through the Burp proxy\n4.\tNavigate to http://104.196.12.98 \n5.\tSubmit random data in the form and click login\n6.\tIn the Burp proxy tab, http history, send the POST that was just submitted to repeater\n7.\tRemove the hash that was initially sent and replace it with the hash that was received from the timing attack\n8.\tSend the request and copy the session id that was sent from the server\n9.\tIn Firefox open the Web developer, web console and enter “javascript:void(document.cookie=-“SessionID=valuereturnedbyserver”);”\n10.\tNavigate to http://104.196.12.98/update\n11.\tTo change the port number to port 80 navigate to http://104.196.12.98/update?port=80 \n\nSupporting Material/References:\n•\tPng_steg.png – screenshot of getting URL from the image\n•\tApk_download.png – screenshot of downloading the APK from a google drive\n•\tWeak_creds.png – screenshot of user logged into application with weak credentials\n•\tH1heat-sqli.jar – java application that was used to extract information from the database\n•\tDb.xlsx – file containing information pulled from the database\n•\tSqli.png – screenshot of java application extracting information from the database\n•\tHash.png – screenshot of the timing attack\n•\tLogin.jpg – screenshot of the web admin login page\n•\tLoggedin.jpg – screenshot of the user logged into the web admin page\n\n## Impact\n\n•\tThe attacker has access to the thermostat application\n•\tThe attacker has read access to the entire MariaDB instance\n•\tThe attacker has access to the thermostat admin web console","vulnerability_information_html":"\u003cp\u003eSummary:\u003c/p\u003e\n\n\u003cp\u003eDiscovery of the application:\u003cbr\u003e\nThe h1Thermostat application was discovered by extracting the bit.do URL from the image at \u003ca title=\"https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large\" href=\"/redirect?url=https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FD0XoThpW0AE2r8S.png%3Alarge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. The URL \u003ca title=\"https://bit.do/h1therm\" href=\"/redirect?url=https%3A%2F%2Fbit.do%2Fh1therm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bit.do/h1therm\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e then led to a Google Drive where the Android application file (h1thermostat.apk) could be downloaded (\u003ca title=\"https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view\" href=\"/redirect?url=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ%2Fview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eDisassembly of the APK\u003cbr\u003e\nThe file h1thermostat.apk was loaded into the Android SDK for analysis.  The thermostat application requested a username and password to access the services.  The APK code was extracted and it was found that the system would proceed past the login screen if the server responded with ”success”:true in a JSON object.\u003c/p\u003e\n\n\u003cp\u003eUse of default/weak administrative credentials:\u003cbr\u003e\nThe thermostat application was loaded into the Android SDK and executed.  When the application started it requested a username and password to access the services.  The application accepted the credentials:\u003c/p\u003e\n\n\u003cp\u003eUsername: admin\u003cbr\u003e\nPassword: password\u003c/p\u003e\n\n\u003cp\u003eAlthough some luck is involved in guessing this username and password combination it can easily be automated as there is no rate limiting or account lockout enabled on the application.\u003c/p\u003e\n\n\u003cp\u003eSQL Injection Vulnerability\u003cbr\u003e\nLooking into the APK code further using jadx-gui the LoginActivity class calls the PayloadRequest class when a user signs in. The process takes the username and password and combines it with a command field in a JSON object.  The login JSON object contains the username, password, and command field ({“password”:”password”, “username”:”admin”,”cmd”:”getTemp”}).  This text string is then encrypted with AES/CBC/PKCS5 and then ran through a base64 encoder.  The server (35.243.186.41) then checks the credentials and replies with an encrypted JSON object ({“success”:true,”temperature”:73}).\u003c/p\u003e\n\n\u003cp\u003eIt was found that the field “username” in the JSON object was vulnerable to an SQLi attack.  A custom Java application was written that would create a JSON object with the desired fields filled in and parse the server’s response.  The SQLi vulnerability was blind, meaning that inference was needed to determine what was happening on the server side.  It was found that when the success field in the JSON object was true the SQL query completed successfully.  When the query was incorrect and failed the sever responded with success as false and the error was “Unknown”.  Finally, if the query completed successfully but it returned 0 rows, success would be false and the error that was returned is “Invalid username or password”.\u003c/p\u003e\n\n\u003cp\u003eUsing the different error messages returned by the server the SQLi vulnerability could be exploited to dump contents from the database.  A custom Java application was written to pull the information out of the database using the following queries with the password of “password”:\u003c/p\u003e\n\n\u003cp\u003e• admin\u0026#39; AND user() LIKE ‘%’;--\u003cbr\u003e\n• admin\u0026#39; AND (database()) LIKE ‘%’;--\u003cbr\u003e\n• admin\u0026#39; AND (SELECT table_name FROM information_schema.tables WHERE table_schema=database() LIMIT 1 OFFSET 1\u0026quot;) LIKE \u0026#39;%’;--\u003cbr\u003e\n• admin\u0026#39; AND (SELECT column_name FROM information_schema.columns WHERE table_schema=database() AND table_name=\u0026#39;users\u0026#39; LIMIT 1 OFFSET 1) LIKE \u0026#39;%’;--\u003cbr\u003e\n• admin\u0026#39; AND (SELECT password FROM users LIMIT 1 OFFSET 0) LIKE \u0026#39;%’;--\u003c/p\u003e\n\n\u003cp\u003eThe Java application would cycle through every printable character until a right answer was found.  Once the first character was found the next character would be attacked.  This would continue until the end of the string.\u003c/p\u003e\n\n\u003cp\u003eInformation Disclosure:\u003cbr\u003e\nThe users table holds a single record.  The id is 1, the username is admin, and the password is 5f4dcc3b5aa765d61d8327deb882cf99.  It was found that the data stored in the password field is an md5 hash of the word “password”.  If there were more accounts stored in the table these could easily be reversed using various methods.\u003c/p\u003e\n\n\u003cp\u003eOnce the devices table was dumped it was found that all IP addresses in the devices table were in reserved blocks and unrouteable.  These addresses fell within the following ranges except for the record with the id 85.\u003c/p\u003e\n\n\u003cp\u003e• 10.0.0.0–10.255.255.255\u003cbr\u003e\n• 100.64.0.0–100.127.255.255\u003cbr\u003e\n• 127.0.0.0–127.255.255.255\u003cbr\u003e\n• 169.254.0.0–169.254.255.255\u003cbr\u003e\n• 172.16.0.0–172.31.255.255\u003cbr\u003e\n• 192.0.0.0–192.0.0.255\u003cbr\u003e\n• 192.0.2.0–192.0.2.255\u003cbr\u003e\n• 192.88.99.0–192.88.99.255\u003cbr\u003e\n• 192.168.0.0–192.168.255.255\u003cbr\u003e\n• 198.18.0.0–198.19.255.255\u003cbr\u003e\n• 198.51.100.0–198.51.100.255\u003cbr\u003e\n• 203.0.113.0–203.0.113.255\u003cbr\u003e\n• 224.0.0.0–239.255.255.255\u003cbr\u003e\n• 240.0.0.0–255.255.255.254\u003cbr\u003e\n• 255.255.255.255\u003c/p\u003e\n\n\u003cp\u003eThe record with the id “85” in the devices table had an IP address of 104.196.12.98.  This was the only accessible IP address in the table.  When the address was visited with a web browser it displayed an administrative login page for “FliteThermostat”.\u003c/p\u003e\n\n\u003cp\u003eTiming Attack:\u003cbr\u003e\nThe JavaScript used to send the username and password from the webpage to the server took the user inputted values and combined them with the hex characters ‘\\x05\\x00\\x06’ between the two values.  Once this string was created it was ran through a custom “hashing” function and sent off to the server for authentication.\u003c/p\u003e\n\n\u003cp\u003eIt was found through running a dictionary type attack that some responses from the server were much slower than others.  This indicated that the hash could be cracked using a timing attack.\u003cbr\u003e\u003cbr\u003e\nThe hash was broken by brute forcing the string by two hexadecimal characters at a time and observing response times from the server.  The longer response time that was received it was determined that the more likely the two characters were the next in the series of the string.  The attack started with a series of 64 “0”’s and was brought down to the actual string using the response times from the server.  After all 255 possible combinations were sent to the server the top 10 – 15 strings were replayed to eliminate false positives.  When the string was found to replicate the same response time the process was started again on the next two characters.  \u003c/p\u003e\n\n\u003cp\u003eThe best results were found to be from a virtual machine replaying the POST with Burp.  Settings were configured to only a single thread with 25 milliseconds for throttle.  Once again this could be made more difficult by adding a rate limiting or account lockout control within the system.\u003c/p\u003e\n\n\u003cp\u003ef9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8\u003c/p\u003e\n\n\u003cp\u003eThe hash was then sent to the server and the response gave a redirect and a Session ID.  The session ID was added to a browser with the console command “javascript:void(document.cookie=-“SessionID=valuereturnedbyserver”);” and this enabled access to the web application showing the pages: control, main, update, and diagnostics.\u003c/p\u003e\n\n\u003cp\u003eThermostat Update Page:\u003cbr\u003e\nThe thermostat page was intended to download and install updates for the application.  It was found that the port where the server was sending requests to could be changed by sending the parameter PORT=[port#] in the URL.  After a portscan of 65,535 ports on the system and multiple other attempts I ran out of time here.\u003c/p\u003e\n\n\u003cp\u003eThis CtF was amazing and I would like to thank everyone who helped build it!  I learnt so much in this experience including probably the most important lesson of not jumping on the first vulnerability and thinking it is the end.  This will help me in future CtF’s and more importantly in bounty hunting.  Although the report is incomplete I do hope that I will be considered for a “n00b invite” to h1-702 if there are any.\u003c/p\u003e\n\n\u003cp\u003eSteps To Reproduce:\u003cbr\u003e\nExtract URL from PNG Image\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e From a Linux machine\u003c/li\u003e\n\u003cli\u003e Open a web browser and navigate to \u003ca title=\"https://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large\" href=\"/redirect?url=https%3A%2F%2Fpbs.twimg.com%2Fmedia%2FD0XoThpW0AE2r8S.png%3Alarge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://pbs.twimg.com/media/D0XoThpW0AE2r8S.png:large\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e Right click the image and save to the local system\u003c/li\u003e\n\u003cli\u003e Open a terminal\u003c/li\u003e\n\u003cli\u003e Navigate to the location where the PNG was saved\u003c/li\u003e\n\u003cli\u003e Rename the file to D0XoThpW0AE2r8S.png\u003c/li\u003e\n\u003cli\u003e Run the command “zsteg -a D0XoThpW0AE2r8S.png”\u003c/li\u003e\n\u003cli\u003e The line “b1,rgb,lsb,yx .. zlib: data=\u0026quot;\u003ca title=\"https://bit.do/h1therm\" href=\"/redirect?url=https%3A%2F%2Fbit.do%2Fh1therm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bit.do/h1therm\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;, offset=5, size=22” gives the url\u003c/li\u003e\n\u003cli\u003e Navigate to \u003ca title=\"https://bit.do/h1therm\" href=\"/redirect?url=https%3A%2F%2Fbit.do%2Fh1therm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bit.do/h1therm\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which redirects to a Google Drive\u003c/li\u003e\n\u003cli\u003eDownload the android application h1thermostat.apk\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWeak Username/Password\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Start the android sdk\u003c/li\u003e\n\u003cli\u003e Load the APK\u003c/li\u003e\n\u003cli\u003e Start the application\u003c/li\u003e\n\u003cli\u003e Enter commonly known username and password combinations\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eH1Thermostat SQLi\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Load h1-head-sqli.jar in eclipse\u003c/li\u003e\n\u003cli\u003e Edit the values “ops” and “argVar1” according to the function that you wish to perform\u003c/li\u003e\n\u003cli\u003e Run the jar file\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eTiming Attack\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Start Burp Suite\u003c/li\u003e\n\u003cli\u003e Disable proxy intercept\u003c/li\u003e\n\u003cli\u003e Load the burp extension “Request Timer”\u003c/li\u003e\n\u003cli\u003e Start a web browser and configure it to run through the Burp proxy\u003c/li\u003e\n\u003cli\u003e Navigate to \u003ca title=\"http://104.196.12.98\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e Submit random data in the form and click login\u003c/li\u003e\n\u003cli\u003e In the Burp proxy tab, http history, send the POST that was just submitted to intruder\u003c/li\u003e\n\u003cli\u003e Replace the “hash” string with 64 0’s\u003c/li\u003e\n\u003cli\u003e Configure burp to brute force the first two characters with all characters in the hexadecimal character set\u003c/li\u003e\n\u003cli\u003eChange the options to a single string and 25 milliseconds for the throttle value\u003c/li\u003e\n\u003cli\u003eStart the Request Timer extension\u003c/li\u003e\n\u003cli\u003eStart the intruder attack\u003c/li\u003e\n\u003cli\u003eWhen the intruder attack has completed sort the requests in request timer by response time\u003c/li\u003e\n\u003cli\u003eTake the top 10 or so longest results and replay them to ensure that you have the result that continually gives the longest response\u003c/li\u003e\n\u003cli\u003eEnter the two characters from the intruder attack to the place holder where you were attacking\u003c/li\u003e\n\u003cli\u003eRemove two 0’s from the string and move the attack to the first two 0’s in the string\u003c/li\u003e\n\u003cli\u003eReset the request timer extension\u003c/li\u003e\n\u003cli\u003eRepeat steps 11 – 17 until there are no 0’s left in the string and you get a session id returned by the server\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThermostat update page\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e Start Burp Suite\u003c/li\u003e\n\u003cli\u003e Disable proxy intercept\u003c/li\u003e\n\u003cli\u003e Start a web browser and configure it to run through the Burp proxy\u003c/li\u003e\n\u003cli\u003e Navigate to \u003ca title=\"http://104.196.12.98\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e Submit random data in the form and click login\u003c/li\u003e\n\u003cli\u003e In the Burp proxy tab, http history, send the POST that was just submitted to repeater\u003c/li\u003e\n\u003cli\u003e Remove the hash that was initially sent and replace it with the hash that was received from the timing attack\u003c/li\u003e\n\u003cli\u003e Send the request and copy the session id that was sent from the server\u003c/li\u003e\n\u003cli\u003e In Firefox open the Web developer, web console and enter “javascript:void(document.cookie=-“SessionID=valuereturnedbyserver”);”\u003c/li\u003e\n\u003cli\u003eNavigate to \u003ca title=\"http://104.196.12.98/update\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98%2Fupdate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98/update\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eTo change the port number to port 80 navigate to \u003ca title=\"http://104.196.12.98/update?port=80\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98%2Fupdate%3Fport%3D80\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98/update?port=80\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSupporting Material/References:\u003cbr\u003e\n• Png_steg.png – screenshot of getting URL from the image\u003cbr\u003e\n• Apk_download.png – screenshot of downloading the APK from a google drive\u003cbr\u003e\n• Weak_creds.png – screenshot of user logged into application with weak credentials\u003cbr\u003e\n• H1heat-sqli.jar – java application that was used to extract information from the database\u003cbr\u003e\n• Db.xlsx – file containing information pulled from the database\u003cbr\u003e\n• Sqli.png – screenshot of java application extracting information from the database\u003cbr\u003e\n• Hash.png – screenshot of the timing attack\u003cbr\u003e\n• Login.jpg – screenshot of the web admin login page\u003cbr\u003e\n• Loggedin.jpg – screenshot of the user logged into the web admin page\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003e• The attacker has access to the thermostat application\u003cbr\u003e\n• The attacker has read access to the entire MariaDB instance\u003cbr\u003e\n• The attacker has access to the thermostat admin web console\u003c/p\u003e\n","weakness":{"id":67,"name":"SQL Injection"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":451206,"file_name":"db.xlsx","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/206/00d18e2e88f8d8791d706e207f607aef49db19d4/db.xlsx?response-content-disposition=attachment%3B%20filename%3D%22db.xlsx%22%3B%20filename%2A%3DUTF-8%27%27db.xlsx\u0026response-content-type=application%2Fvnd.openxmlformats-officedocument.spreadsheetml.sheet\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=88360868e0c38dfb5962831684475ea8e9efbf3b1774ddbaf988722269c495b4","file_size":14129,"type":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"},{"id":451207,"file_name":"apk_download.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/207/aa6294d605f4962161ea10a0072209afb084858a/apk_download.png?response-content-disposition=attachment%3B%20filename%3D%22apk_download.png%22%3B%20filename%2A%3DUTF-8%27%27apk_download.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=a2dd9f8a6f9e677c3a2e2740bbb7ee8fb664ddbc61ef4021dbb3f5b880be31f2","file_size":178613,"type":"image/png"},{"id":451208,"file_name":"hash.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/208/0f6a71e6d680f0e97c5680aee8f64bd7868b2869/hash.PNG?response-content-disposition=attachment%3B%20filename%3D%22hash.PNG%22%3B%20filename%2A%3DUTF-8%27%27hash.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=78a6094774d530f74ffefc622b38c4213c45e00abdcda075ac837818bc834a47","file_size":291401,"type":"image/png"},{"id":451209,"file_name":"loggedin.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/209/3b687b88dec690a90be84564c3c29d5250f13b30/loggedin.jpg?response-content-disposition=attachment%3B%20filename%3D%22loggedin.jpg%22%3B%20filename%2A%3DUTF-8%27%27loggedin.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=5f32250ea8b073859320fc146d6601f3f162f0f9a163978e54c02c48d8d417a1","file_size":241336,"type":"image/jpeg"},{"id":451210,"file_name":"login.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/210/7b818044a95dfa16e608e179fde95bbfb73fb085/login.jpg?response-content-disposition=attachment%3B%20filename%3D%22login.jpg%22%3B%20filename%2A%3DUTF-8%27%27login.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=892fec04bdcc46d16173c0f869e5607ad6720b1e0dd615edf2f8d7a65d97b537","file_size":171006,"type":"image/jpeg"},{"id":451211,"file_name":"h1heat-sqli.jar","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/211/173c4514611def72ad818394aa77e164391d7b99/h1heat-sqli.jar?response-content-disposition=attachment%3B%20filename%3D%22h1heat-sqli.jar%22%3B%20filename%2A%3DUTF-8%27%27h1heat-sqli.jar\u0026response-content-type=application%2Fjava-archive\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=4c1f8194f0e98c9fc1233a1c40ea90de74990db0ed8ea6e9e028f3f8ad1c9475","file_size":3336061,"type":"application/java-archive"},{"id":451212,"file_name":"png_steg.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/212/7413b4c02f9e80c486417f8fe219f7579f949190/png_steg.png?response-content-disposition=attachment%3B%20filename%3D%22png_steg.png%22%3B%20filename%2A%3DUTF-8%27%27png_steg.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=86485f81710f374d44ccc3bff5a821882a20652a3be6c5e62e6f1ca122ca55a4","file_size":845870,"type":"image/png"},{"id":451213,"file_name":"sqli.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/213/4d676223d5a39570dc96e0b4d0c4b98e52b37080/sqli.png?response-content-disposition=attachment%3B%20filename%3D%22sqli.png%22%3B%20filename%2A%3DUTF-8%27%27sqli.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=e10d7429df605bb2545159af1a088ae32342bcef266afe98fe5ddf10ebee5ce7","file_size":146598,"type":"image/png"},{"id":451214,"file_name":"weak_creds.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/451/214/43b3e8b533a947a11af365f1fa0a51ef1bf0da06/weak_creds.png?response-content-disposition=attachment%3B%20filename%3D%22weak_creds.png%22%3B%20filename%2A%3DUTF-8%27%27weak_creds.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061332Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=39fd5d3a25e9f9e3ae6860e17dc78ced0a670b8dbd9d5c9c9c9086c6ccca575b","file_size":297548,"type":"image/png"}],"allow_singular_disclosure_at":"2019-05-08T15:57:19.228Z","allow_singular_disclosure_after":-51891372.94346718,"singular_disclosure_allowed":true,"vote_count":6,"voters":["checkm50","mygf","olegeekk","mav1s","rabbidbyte","comodoo"],"severity":{"rating":"critical","score":9.8,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4492838,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","markdown_message":"\u003cp\u003eThank you for the amazing report! We\u0026#39;ll be announcing the winners shortly, so we\u0026#39;ll let you know if you\u0026#39;re one of the reports selected. Going to close this and then request public disclosure now.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-05T18:32:05.441Z","updated_at":"2019-04-05T18:32:05.441Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"rabbidbyte","url":"/rabbidbyte"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509110,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:57:19.178Z","updated_at":"2019-04-08T15:57:19.178Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509112,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:57:25.226Z","updated_at":"2019-04-08T15:57:25.226Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}