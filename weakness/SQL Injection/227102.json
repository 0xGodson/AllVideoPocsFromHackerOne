{"id":227102,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMjcxMDI=","url":"https://hackerone.com/reports/227102","title":"Two Error-Based SQLi in courses.aspx on ██████████","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2017-05-09T06:13:58.202Z","submitted_at":"2017-05-09T06:13:58.202Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"tcpiplab","url":"/tcpiplab","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/113/049/692d3d0775ad3998c4e2aee97daa865a1827cfb7_original.jpeg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":16064,"url":"https://hackerone.com/deptofdefense","handle":"deptofdefense","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"U.S. Dept Of Defense","twitter_handle":"DC3VDP","website":"https://www.dc3.mil/vulnerability-disclosure","about":""}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-12-02T18:54:52.174Z","bug_reporter_agreed_on_going_public_at":"2019-01-23T02:51:50.312Z","team_member_agreed_on_going_public_at":"2019-12-02T18:54:52.054Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Summary:**\nThe server at ████ contains two SQL injection vulnerabilities in the `courses.aspx` file. These are error-based SQLi vulnerabilities. The resulting errors reveal seven lines of C# code, including inline SQL which reveals internal database information. Note that this is one of two reports I'm going to submit for error-based SQLi; I'm grouping them by their vulnerable source code file.\n\n**Description:**\nThe `crs_id` parameter, when sent with a `GET` to `courses.aspx`, triggers an **Unhandled Exception** if its value is set to either `%0a` or `0`. The vulnerable code is on lines 174 and 177, respectively.\n\n## Impact\n1. Leakage of:\n   * Database table names and column names.\n   * Seven lines of C# code, including inline SQL.\n   * Server and framework version information.\n1. Unhandled exceptions containing SQL errors are attractive indicators that hackers look for. Even though these vulnerabilities do not allow an attacker to execute arbitrary SQL, the errors do make for a much larger and more promising attack surface. Combining parts of the two error outputs reveals seven lines of C# code, with some inline SQL:\n   \n   ```c\nLine 173:        sqlcrs = CCommonServices.GetCourseSQL(Request.QueryString(\"crs_id\"))\nLine 174:        rscrs.open(sqlcrs, connectionString)\nLine 175:        sqlCrcf = \"SELECT Career_Field.CF_Name FROM Career_CORE_PLUS Join Career_Field on Career_Field.CF_ID = Career_CORE_PLUS.CF_ID join CRS_Detail on CRS_Detail.ID = Career_CORE_PLUS.CRS_ID where Career_CORE_PLUS.CRS_ID =\" + Request.QueryString(\"crs_id\")\nLine 176:        rsCrcf.Open(sqlCrcf, ConfigurationManager.ConnectionStrings(\"VbConnect\").ToString())\nLine 177:        crs = rscrs(\"crs_header\").value\nLine 178:        crs_id_print = Request.QueryString(\"crs_id\")\nLine 179:        rsData = oCommonServices.getCLPbyCOURSE(Request.QueryString(\"crs_id\"))\n```\n\n   The SQL from line 175, revealing the names of tables and columns, is most interesting to an attacker:\n   ```sql\n   SELECT Career_Field.CF_Name\n   FROM Career_CORE_PLUS\n   Join Career_Field on Career_Field.CF_ID = Career_CORE_PLUS.CF_ID\n   join CRS_Detail on CRS_Detail.ID = Career_CORE_PLUS.CRS_ID\n   where Career_CORE_PLUS.CRS_ID =\n   ```\n\n## Step-by-step Reproduction Instructions\n\n1. Send a `GET` request to `http://████████/onlinecatalog/courses.aspx?crs_id=%0a`\n1. The server returns the following error: `Error converting data type varchar to numeric.` and indicates line 174 of `C:\\Web_Data\\iCatalog\\onlinecatalog\\courses.aspx`.\n   ██████\n1. Send a `GET` request to `http://██████/onlinecatalog/courses.aspx?crs_id=0`\n1. The server returns the following error: `Either BOF or EOF is True, or the current record has been deleted. Requested operation requires a current record.` and indicates line 177 of the same file.\n   ███\n\n## Product, Version, and Configuration (If applicable)\n* Microsoft .NET Framework Version:4.0.30319\n* ASP.NET Version:4.6.1590.0 \n* IIS 7.5\n\n## Suggested Mitigation/Remediation Actions\n1. Add code to validate that the value of the `crs_id` parameter is an integer.\n1. Add code to return a `404` error page if the value of the `crs_id` parameter does not reference a valid object. Alternatively, you could set a default value to that of a known-good object reference.\n1. Add code to return something other than the familiar `Invalid name parameter` error when the `crs_id` parameter is set to an invalid character. E.g., setting the value to `ä`:\n\n   `http://██████████/onlinecatalog/courses.aspx?crs_id=%C3%A4`\n\nReturns this terse error:\n```\nInvalid name parameterä\n```\nAlthough seemingly a less sensitive error message, I found this behavior useful. It gave me a fourth option when distinguishing between various behaviors based on my fuzzing of the aforementioned parameter:\n* `200/OK` and a proper page render when the parameter is set to a valid value.\n* TCP reset sent when the web application firewall (WAF) blocks a known-malicious value like `ORDER BY`.\n* Unhandled exceptions by the application code (as shown above).\n* Invalid input caught and appended to the `Invalid name parameter` message.\n\nMy recommendations, generally, are that you modify the source code of the `courses.aspx` file so that you can eliminate these latter two behaviors.\n\nPlease let me know if you have any questions.","vulnerability_information_html":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003cbr\u003e\nThe server at ████ contains two SQL injection vulnerabilities in the \u003ccode\u003ecourses.aspx\u003c/code\u003e file. These are error-based SQLi vulnerabilities. The resulting errors reveal seven lines of C# code, including inline SQL which reveals internal database information. Note that this is one of two reports I\u0026#39;m going to submit for error-based SQLi; I\u0026#39;m grouping them by their vulnerable source code file.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003cbr\u003e\nThe \u003ccode\u003ecrs_id\u003c/code\u003e parameter, when sent with a \u003ccode\u003eGET\u003c/code\u003e to \u003ccode\u003ecourses.aspx\u003c/code\u003e, triggers an \u003cstrong\u003eUnhandled Exception\u003c/strong\u003e if its value is set to either \u003ccode\u003e%0a\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e. The vulnerable code is on lines 174 and 177, respectively.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eLeakage of:\n\n\u003cul\u003e\n\u003cli\u003eDatabase table names and column names.\u003c/li\u003e\n\u003cli\u003eSeven lines of C# code, including inline SQL.\u003c/li\u003e\n\u003cli\u003eServer and framework version information.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUnhandled exceptions containing SQL errors are attractive indicators that hackers look for. Even though these vulnerabilities do not allow an attacker to execute arbitrary SQL, the errors do make for a much larger and more promising attack surface. Combining parts of the two error outputs reveals seven lines of C# code, with some inline SQL:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e173\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003esqlcrs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCCommonServices\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCourseSQL\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crs_id\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e174\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003erscrs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqlcrs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econnectionString\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e175\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003esqlCrcf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;SELECT Career_Field.CF_Name FROM Career_CORE_PLUS Join Career_Field on Career_Field.CF_ID = Career_CORE_PLUS.CF_ID join CRS_Detail on CRS_Detail.ID = Career_CORE_PLUS.CRS_ID where Career_CORE_PLUS.CRS_ID =\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crs_id\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e176\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003ersCrcf\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eOpen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esqlCrcf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eConfigurationManager\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eConnectionStrings\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;VbConnect\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003eToString\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e177\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003ecrs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erscrs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crs_header\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e178\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003ecrs_id_print\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crs_id\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eLine\u003c/span\u003e \u003cspan class=\"mi\"\u003e179\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e        \u003cspan class=\"n\"\u003ersData\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoCommonServices\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003egetCLPbyCOURSE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crs_id\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe SQL from line 175, revealing the names of tables and columns, is most interesting to an attacker:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight sql\"\u003e\u003ccode\u003e   \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_Field\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCF_Name\u003c/span\u003e\n   \u003cspan class=\"k\"\u003eFROM\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_CORE_PLUS\u003c/span\u003e\n   \u003cspan class=\"k\"\u003eJoin\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_Field\u003c/span\u003e \u003cspan class=\"k\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_Field\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCF_ID\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_CORE_PLUS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCF_ID\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ejoin\u003c/span\u003e \u003cspan class=\"n\"\u003eCRS_Detail\u003c/span\u003e \u003cspan class=\"k\"\u003eon\u003c/span\u003e \u003cspan class=\"n\"\u003eCRS_Detail\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eID\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_CORE_PLUS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCRS_ID\u003c/span\u003e\n   \u003cspan class=\"k\"\u003ewhere\u003c/span\u003e \u003cspan class=\"n\"\u003eCareer_CORE_PLUS\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eCRS_ID\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"step-by-step-reproduction-instructions\"\u003eStep-by-step Reproduction Instructions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eSend a \u003ccode\u003eGET\u003c/code\u003e request to \u003ccode\u003ehttp://████████/onlinecatalog/courses.aspx?crs_id=%0a\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe server returns the following error: \u003ccode\u003eError converting data type varchar to numeric.\u003c/code\u003e and indicates line 174 of \u003ccode\u003eC:\\Web_Data\\iCatalog\\onlinecatalog\\courses.aspx\u003c/code\u003e.\n██████\u003c/li\u003e\n\u003cli\u003eSend a \u003ccode\u003eGET\u003c/code\u003e request to \u003ccode\u003ehttp://██████/onlinecatalog/courses.aspx?crs_id=0\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eThe server returns the following error: \u003ccode\u003eEither BOF or EOF is True, or the current record has been deleted. Requested operation requires a current record.\u003c/code\u003e and indicates line 177 of the same file.\n███\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"product-version-and-configuration-if-applicable\"\u003eProduct, Version, and Configuration (If applicable)\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eMicrosoft .NET Framework Version:4.0.30319\u003c/li\u003e\n\u003cli\u003eASP.NET Version:4.6.1590.0 \u003c/li\u003e\n\u003cli\u003eIIS 7.5\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"suggested-mitigation-remediation-actions\"\u003eSuggested Mitigation/Remediation Actions\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eAdd code to validate that the value of the \u003ccode\u003ecrs_id\u003c/code\u003e parameter is an integer.\u003c/li\u003e\n\u003cli\u003eAdd code to return a \u003ccode\u003e404\u003c/code\u003e error page if the value of the \u003ccode\u003ecrs_id\u003c/code\u003e parameter does not reference a valid object. Alternatively, you could set a default value to that of a known-good object reference.\u003c/li\u003e\n\u003cli\u003eAdd code to return something other than the familiar \u003ccode\u003eInvalid name parameter\u003c/code\u003e error when the \u003ccode\u003ecrs_id\u003c/code\u003e parameter is set to an invalid character. E.g., setting the value to \u003ccode\u003eä\u003c/code\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://██████████/onlinecatalog/courses.aspx?crs_id=%C3%A4\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eReturns this terse error:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInvalid name parameterä\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlthough seemingly a less sensitive error message, I found this behavior useful. It gave me a fourth option when distinguishing between various behaviors based on my fuzzing of the aforementioned parameter:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003e200/OK\u003c/code\u003e and a proper page render when the parameter is set to a valid value.\u003c/li\u003e\n\u003cli\u003eTCP reset sent when the web application firewall (WAF) blocks a known-malicious value like \u003ccode\u003eORDER BY\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eUnhandled exceptions by the application code (as shown above).\u003c/li\u003e\n\u003cli\u003eInvalid input caught and appended to the \u003ccode\u003eInvalid name parameter\u003c/code\u003e message.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eMy recommendations, generally, are that you modify the source code of the \u003ccode\u003ecourses.aspx\u003c/code\u003e file so that you can eliminate these latter two behaviors.\u003c/p\u003e\n\n\u003cp\u003ePlease let me know if you have any questions.\u003c/p\u003e\n","weakness":{"id":67,"name":"SQL Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":0,"voters":[],"severity":{"rating":"medium","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1662331,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Greetings from the Department of Defense (DoD),\n\nThank you for supporting the DoD Vulnerability Disclosure Program (VDP).\n\nBy submitting this report, you acknowledge understanding of, and agreement to, the DoD Vulnerability Disclosure Policy as detailed at @DeptofDefense.\n\nThe VDP Team will review your report to ensure compliance with the DoD Vulnerability Disclosure Policy.  If your report is determined to be out-of-scope, it will be closed without action.\n\nWe will attempt to validate in-scope vulnerability reports and may request additional information from you if necessary. We will forward reports with validated vulnerabilities to DoD system owners for their action.\n\nOur goal is to provide you with status updates not less than every two weeks until the reported vulnerability is resolved.\n\nRegards,\n\nThe VDP Team","markdown_message":"\u003cp\u003eGreetings from the Department of Defense (DoD),\u003c/p\u003e\n\n\u003cp\u003eThank you for supporting the DoD Vulnerability Disclosure Program (VDP).\u003c/p\u003e\n\n\u003cp\u003eBy submitting this report, you acknowledge understanding of, and agreement to, the DoD Vulnerability Disclosure Policy as detailed at \u003ca href=\"/deptofdefense\"\u003e@DeptofDefense\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe VDP Team will review your report to ensure compliance with the DoD Vulnerability Disclosure Policy.  If your report is determined to be out-of-scope, it will be closed without action.\u003c/p\u003e\n\n\u003cp\u003eWe will attempt to validate in-scope vulnerability reports and may request additional information from you if necessary. We will forward reports with validated vulnerabilities to DoD system owners for their action.\u003c/p\u003e\n\n\u003cp\u003eOur goal is to provide you with status updates not less than every two weeks until the reported vulnerability is resolved.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003c/p\u003e\n\n\u003cp\u003eThe VDP Team\u003c/p\u003e\n","automated_response":true,"created_at":"2017-05-09T06:13:58.342Z","updated_at":"2017-05-09T06:13:58.342Z","actor":{"url":"/deptofdefense","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/064/46cd0286b1fa224aaa2cb9dfaaca9fa22b5b80b2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"U.S. Dept Of Defense"}},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1663200,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2017-05-09T13:53:25.700Z","updated_at":"2017-05-09T13:53:25.700Z","additional_data":{"old_severity":null,"new_severity":"Medium","old_severity_id":null,"new_severity_id":41242},"actor":{"username":"bwluebberthill","cleared":false,"url":"/bwluebberthill","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1663201,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Greetings,\n\nWe have validated the vulnerability you reported and are preparing to forward this report to the affected DoD system owner for resolution.\n\nThank you for bringing this vulnerability to our attention!\n\nWe will endeavor to answer any questions the system owners may have regarding this report; however, there is a possibility we will need to contact you if they require more information to resolve the vulnerability.\n\nYou will receive another status update after we have confirmed your report has been resolved by the system owner. If you have any questions, please let me know.\n\nThanks again for supporting the DoD Vulnerability Disclosure Program.\n\nRegards,\n\nThe VDP Team","markdown_message":"\u003cp\u003eGreetings,\u003c/p\u003e\n\n\u003cp\u003eWe have validated the vulnerability you reported and are preparing to forward this report to the affected DoD system owner for resolution.\u003c/p\u003e\n\n\u003cp\u003eThank you for bringing this vulnerability to our attention!\u003c/p\u003e\n\n\u003cp\u003eWe will endeavor to answer any questions the system owners may have regarding this report; however, there is a possibility we will need to contact you if they require more information to resolve the vulnerability.\u003c/p\u003e\n\n\u003cp\u003eYou will receive another status update after we have confirmed your report has been resolved by the system owner. If you have any questions, please let me know.\u003c/p\u003e\n\n\u003cp\u003eThanks again for supporting the DoD Vulnerability Disclosure Program.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003c/p\u003e\n\n\u003cp\u003eThe VDP Team\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-09T13:53:37.645Z","updated_at":"2017-05-09T13:53:37.645Z","actor":{"username":"bwluebberthill","cleared":false,"url":"/bwluebberthill","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1666881,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Somehow I neglected to include important information in the section \"Suggested Mitigation/Remediation Actions\". Please append this to my minimum recommendations:\n\n1. A better solution is to parameterize user input values that will become part of SQL statements. You can find a short code example in this StackExchange question: [parameterized sql query - asp.net / c#](http://stackoverflow.com/questions/13600179/parameterized-sql-query-asp-net-c-sharp).\n1. One way to accomplish the aforementioned parameterization is to use Object Relational Mapping (ORM). ASP.NET has the built-in [Entity Framework](https://msdn.microsoft.com/en-us/data/ee712907.aspx), but there are many other ORMs to choose from.\n\nProbably the quickest way to get context and details about all these suggestions is to read all the answers to this excellent StackOverflow question [parameterized queries vs. SQL injection\n](http://stackoverflow.com/questions/17509169/parameterized-queries-vs-sql-injection\n).\n\nIf you're a one-man-band infosec guy who has to fix this on your own, ASAP, then begin at the top of my list of suggestions. But if your leadership/budget/time/staffing allow you to do things like this the right way, then I recommend that you read the OWASP [SQL Injection Prevention Cheat Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet) first.\n\nEither way, when trying to decide which mitigation to implement, your decision making process will be greatly clarified by reading the OWASP [SQL Injection Prevention Cheat Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet).\n\n\nGood luck. Please let me know if you have any questions.","markdown_message":"\u003cp\u003eSomehow I neglected to include important information in the section \u0026quot;Suggested Mitigation/Remediation Actions\u0026quot;. Please append this to my minimum recommendations:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA better solution is to parameterize user input values that will become part of SQL statements. You can find a short code example in this StackExchange question: \u003ca href=\"/redirect?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F13600179%2Fparameterized-sql-query-asp-net-c-sharp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eparameterized sql query - asp.net / c#\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eOne way to accomplish the aforementioned parameterization is to use Object Relational Mapping (ORM). ASP.NET has the built-in \u003ca href=\"/redirect?url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Fdata%2Fee712907.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eEntity Framework\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, but there are many other ORMs to choose from.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eProbably the quickest way to get context and details about all these suggestions is to read all the answers to this excellent StackOverflow question \u003ca href=\"/redirect?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F17509169%2Fparameterized-queries-vs-sql-injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eparameterized queries vs. SQL injection\u003cbr\u003e\n\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf you\u0026#39;re a one-man-band infosec guy who has to fix this on your own, ASAP, then begin at the top of my list of suggestions. But if your leadership/budget/time/staffing allow you to do things like this the right way, then I recommend that you read the OWASP \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FSQL_Injection_Prevention_Cheat_Sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSQL Injection Prevention Cheat Sheet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e first.\u003c/p\u003e\n\n\u003cp\u003eEither way, when trying to decide which mitigation to implement, your decision making process will be greatly clarified by reading the OWASP \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FSQL_Injection_Prevention_Cheat_Sheet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSQL Injection Prevention Cheat Sheet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eGood luck. Please let me know if you have any questions.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-10T22:29:54.598Z","updated_at":"2017-05-10T22:29:54.598Z","actor":{"username":"tcpiplab","cleared":false,"url":"/tcpiplab","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/113/049/692d3d0775ad3998c4e2aee97daa865a1827cfb7_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2941330,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Good news!\n\nThe vulnerability you reported has been resolved and this report is now closed. If you have any further questions or disagree that the report is resolved, please let us know.\n\nThank you for your time and effort to improve the security of the DoD information network.\n\nRegards,\n\nThe VDP Team","markdown_message":"\u003cp\u003eGood news!\u003c/p\u003e\n\n\u003cp\u003eThe vulnerability you reported has been resolved and this report is now closed. If you have any further questions or disagree that the report is resolved, please let us know.\u003c/p\u003e\n\n\u003cp\u003eThank you for your time and effort to improve the security of the DoD information network.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003c/p\u003e\n\n\u003cp\u003eThe VDP Team\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-27T15:27:36.349Z","updated_at":"2018-06-27T15:27:36.349Z","actor":{"username":"ag3nt-j1","cleared":false,"url":"/ag3nt-j1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"tcpiplab","url":"/tcpiplab"},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4021681,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-23T02:51:50.340Z","updated_at":"2019-01-23T02:51:50.340Z","first_to_agree":true,"actor":{"username":"tcpiplab","cleared":false,"url":"/tcpiplab","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/113/049/692d3d0775ad3998c4e2aee97daa865a1827cfb7_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6450505,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Approved for disclosure. Thanks for your participation in the DoD Vulnerability Disclosure Program (VDP). Please follow us on Twitter @DC3VDP","markdown_message":"\u003cp\u003eApproved for disclosure. Thanks for your participation in the DoD Vulnerability Disclosure Program (VDP). Please follow us on Twitter \u003ca href=\"/dc3vdp\"\u003e@DC3VDP\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-02T18:54:52.072Z","updated_at":"2019-12-02T18:54:52.072Z","actor":{"username":"agent-1","cleared":false,"url":"/agent-1","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/379/490/775a471f25ef037fbf277e8b5d5a50bbb9e9ab56_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6450506,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-02T18:54:52.193Z","updated_at":"2019-12-02T18:54:52.193Z","actor":{"username":"agent-1","cleared":false,"url":"/agent-1","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/379/490/775a471f25ef037fbf277e8b5d5a50bbb9e9ab56_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"deptofdefense","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}