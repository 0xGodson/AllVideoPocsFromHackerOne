{"id":183356,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODMzNTY=","url":"https://hackerone.com/reports/183356","title":"Segfault and/or potential unwanted (byte)code execution with \"break\" and \"||=\" inside a loop","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2016-11-18T19:23:38.371Z","submitted_at":"2016-11-18T19:23:38.371Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dkasak","url":"/dkasak","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":15668,"url":"https://hackerone.com/shopify-scripts","handle":"shopify-scripts","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"shopify-scripts","twitter_handle":"","website":"","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-12-16T21:42:19.613Z","bug_reporter_agreed_on_going_public_at":"2016-12-16T21:42:19.549Z","team_member_agreed_on_going_public_at":"2016-12-16T20:19:59.882Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Introduction\n============\n\nCertain invalid inputs (invalid Ruby programs) crash mruby and mruby_engine (including the parent MRI VM). The programs always involve the `||=` operator, loops and the `break` keyword.\n\nProof of Concept\n================\n\ncrash.rb\n--------\n\n    A ||= break while break\n\n1. Save the above code as crash.rb\n2. Run either:\n    a) mruby crash.rb\n    b) sandbox crash.rb\n3. Both cause a segmentation fault.\n\nDiscussion\n==========\n\nEverything below assumes the latest master of the mruby repository as of Nov 18th, which is commit `0ff3ae1fbaed62010c54c43235e29cdc85da2f78`.\n\nThe above crashing example isn't the only one that we've managed to produce but is the minimal one so far. An infinite family of programs is able to exploit this bug to crash the interpreter, execute spurious bytecode that wasn't generated for the current program or even set the machine instruction pointer to some junk value (making this a limited form of unwated code execution, even though the executed code isn't arbitrary).\n\nThe generated AST and bytecode for the crashing case is as follows:\n\n    mruby 1.2.0 (2015-11-17)\n    00001 NODE_SCOPE:\n    00001   NODE_BEGIN:\n    00001     NODE_WHILE:\n    00001       cond:\n    00001         NODE_BREAK:\n    00001       body:\n    00001         NODE_OP_ASGN:\n    00001           lhs:\n    00001             NODE_CONST A\n    00001           op='||' (666)\n    00001           NODE_BREAK:\n    irep 0x16b2970 nregs=2 nlocals=1 pools=0 syms=1 reps=0\n    file: crash.rb\n        1 000 OP_JMP    010\n        1 001 OP_ONERR  005\n        1 002 OP_GETCONST       R1      :A\n        1 003 OP_POPERR 1\n        1 004 OP_JMP    007\n        1 005 OP_RESCUE R1\n        1 006 OP_LOADF  R1\n        1 007 OP_JMPIF  R1      010\n        1 008 OP_JMP    008\n        1 009 OP_SETCONST       :A      R1\n        1 010 OP_JMP    018\n        1 011 OP_JMPIF  R1      001\n        1 012 OP_LOADNIL        R1\n        1 013 OP_STOP\n\nThe odd thing to notice here is that the `OP_JMP` at 010 jumps beyond the last instruction. This is what leads to a potential execution of spurious bytecode since there may be valid opcodes beyond the end of the `iseq` array of the current `irep` (and indeed, we've seen this happen).\n\nFurthermore, the index of the instruction onto which the invalid `OP_JMP` jumps to is equal I + A where I is the index of the instruction the `OP_JMP` at 000 jumps to (in this case 010) and A is the index of an `OP_JMP` instruction located prior to the invalid one (so in this case 010 + 008 = 018). Since each additional `break` inserted into the code inserts an additional `OP_JMP` instruction, this implies that the argument of the invalid `OP_JMP` can be increased almost without bounds (limited only by memory consumption and/or the maximum argument to `OP_JMP` instructions, which is `0xffff \u003e\u003e 1` = 32767).\n\nAs an example, the code:\n\nlarger.rb\n---------\n\n    A ||= break break break break while break\n\nYields the following bytecode:\n\nfile: larger.rb\n    1 000 OP_JMP        013\n    1 001 OP_ONERR      005\n    1 002 OP_GETCONST   R1      :A\n    1 003 OP_POPERR     1\n    1 004 OP_JMP        007\n    1 005 OP_RESCUE     R1\n    1 006 OP_LOADF      R1\n    1 007 OP_JMPIF      R1      013\n    1 008 OP_JMP        008\n    1 009 OP_JMP        017\n    1 010 OP_JMP        019\n    1 011 OP_JMP        021\n    1 012 OP_SETCONST   :A      R1\n    1 013 OP_JMP        024\n    1 014 OP_JMPIF      R1      001\n    1 015 OP_LOADNIL    R1\n    1 016 OP_STOP\n\nAfter the jump is made, the memory location might contain a valid mruby instruction or even something with an opcode larger than the number of opcodes contained in the `optable` in `vm.c`. Since the code in `mrb_vm_exec` jumps to addresses contained in the `optable`, indexed by the opcode number, this leads to a limited form of unwanted code execution, since memory locations after the `optable` may contain pointers to executable code by accident.\n\nIt is interesting to note that a very similar program doesn't cause a crash:\n\nnon-crash.rb\n------------\n\n    a ||= break while break\n\nThe only difference from the crashing case is the use of a lowercase variable name instead of an uppercase (so a non-constant, in Ruby terms).\n\nAnother non-crashing case is the following:\n\nnon-crash-other.rb\n------------------\n\n    A \u0026\u0026= break while break\n\nThe only difference here is the use of another assignment operator â€” `\u0026\u0026`, instead of `||`.\n\nThis gives us a hint as to where the problem is. The invalid jump length is ultimately set during code generation for the `NODE_WHILE` node of the AST in `codegen.c`, line 1426. Specifically, the jump lengths are adjusted *after* the loop is generated, on line 1438 of the same file, during the call of the function `loop_pop()`.\n\nWhen this function is executed in the debugger when run on the `crash.rb` case, it may be noticed that the `s-\u003eloop` variable, which contains the loop context, contains two loops inside one another instead of only one: a `LOOP_NORMAL` (which is generated by the `while`) and a `LOOP_RESCUE`. The latter is generated during code generation for `NODE_OP_ASGN`, starting at line 1724 of `codegen.c`. Here we encounter this interesting special case:\n\n      if ((len == 2 \u0026\u0026 name[0] == '|' \u0026\u0026 name[1] == '|') \u0026\u0026\n          ((intptr_t)tree-\u003ecar-\u003ecar == NODE_CONST ||\n           (intptr_t)tree-\u003ecar-\u003ecar == NODE_CVAR)) {\n\nThis explains why the problem only happens only when using the `||=` operator on Ruby constants. It is here that an additional `LOOP_RESCUE` loop context is created, and it is using this context that is used later on by `loop_pop`/`dispatch_linked` to generate the final arguments to the jump instructions.\n\nSince this \"loop\" is generated simply to catch potential `NameError` exceptions generated when an unexisting constant is reference, it seems that this loop context shouldn't escape the generation of the code for the assignment operator.\n\nSolution\n========\n\nTherefore, the solution we chose was to pop this loop context after the assignment code is generated. This makes the `loop_pop`/`dispatch_linked` function calls inside the `while` code generation operate on the loop context for the `while` loop instead and fixes the generated jump.\n\nundef-constant-or-assign.patch\n------------------------------\n    diff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\n    index 9b064b8..bbe0f51 100644\n    --- a/mrbgems/mruby-compiler/core/codegen.c\n    +++ b/mrbgems/mruby-compiler/core/codegen.c\n    @@ -1746,6 +1746,7 @@ codegen(codegen_scope *s, node *tree, int val)\n            genop(s, MKOP_A(OP_RESCUE, exc));\n            genop(s, MKOP_A(OP_LOADF, exc));\n            dispatch(s, noexc);\n    +        loop_pop(s, val);\n        }\n        else if ((intptr_t)tree-\u003ecar-\u003ecar == NODE_CALL) {\n            node *n = tree-\u003ecar-\u003ecdr;\n\nWith the above patch, we were unable to crash the VM through this bug nor generated any more jumps with invalid jump lengths. Furthermore, all tests pass successfully.","vulnerability_information_html":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\n\u003cp\u003eCertain invalid inputs (invalid Ruby programs) crash mruby and mruby_engine (including the parent MRI VM). The programs always involve the \u003ccode\u003e||=\u003c/code\u003e operator, loops and the \u003ccode\u003ebreak\u003c/code\u003e keyword.\u003c/p\u003e\n\n\u003ch1 id=\"proof-of-concept\"\u003eProof of Concept\u003c/h1\u003e\n\n\u003ch2 id=\"crash-rb\"\u003ecrash.rb\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eA ||= break while break\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eSave the above code as crash.rb\u003c/li\u003e\n\u003cli\u003eRun either:\na) mruby crash.rb\nb) sandbox crash.rb\u003c/li\u003e\n\u003cli\u003eBoth cause a segmentation fault.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"discussion\"\u003eDiscussion\u003c/h1\u003e\n\n\u003cp\u003eEverything below assumes the latest master of the mruby repository as of Nov 18th, which is commit \u003ccode\u003e0ff3ae1fbaed62010c54c43235e29cdc85da2f78\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe above crashing example isn\u0026#39;t the only one that we\u0026#39;ve managed to produce but is the minimal one so far. An infinite family of programs is able to exploit this bug to crash the interpreter, execute spurious bytecode that wasn\u0026#39;t generated for the current program or even set the machine instruction pointer to some junk value (making this a limited form of unwated code execution, even though the executed code isn\u0026#39;t arbitrary).\u003c/p\u003e\n\n\u003cp\u003eThe generated AST and bytecode for the crashing case is as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emruby 1.2.0 (2015-11-17)\n00001 NODE_SCOPE:\n00001   NODE_BEGIN:\n00001     NODE_WHILE:\n00001       cond:\n00001         NODE_BREAK:\n00001       body:\n00001         NODE_OP_ASGN:\n00001           lhs:\n00001             NODE_CONST A\n00001           op=\u0026#39;||\u0026#39; (666)\n00001           NODE_BREAK:\nirep 0x16b2970 nregs=2 nlocals=1 pools=0 syms=1 reps=0\nfile: crash.rb\n    1 000 OP_JMP    010\n    1 001 OP_ONERR  005\n    1 002 OP_GETCONST       R1      :A\n    1 003 OP_POPERR 1\n    1 004 OP_JMP    007\n    1 005 OP_RESCUE R1\n    1 006 OP_LOADF  R1\n    1 007 OP_JMPIF  R1      010\n    1 008 OP_JMP    008\n    1 009 OP_SETCONST       :A      R1\n    1 010 OP_JMP    018\n    1 011 OP_JMPIF  R1      001\n    1 012 OP_LOADNIL        R1\n    1 013 OP_STOP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe odd thing to notice here is that the \u003ccode\u003eOP_JMP\u003c/code\u003e at 010 jumps beyond the last instruction. This is what leads to a potential execution of spurious bytecode since there may be valid opcodes beyond the end of the \u003ccode\u003eiseq\u003c/code\u003e array of the current \u003ccode\u003eirep\u003c/code\u003e (and indeed, we\u0026#39;ve seen this happen).\u003c/p\u003e\n\n\u003cp\u003eFurthermore, the index of the instruction onto which the invalid \u003ccode\u003eOP_JMP\u003c/code\u003e jumps to is equal I + A where I is the index of the instruction the \u003ccode\u003eOP_JMP\u003c/code\u003e at 000 jumps to (in this case 010) and A is the index of an \u003ccode\u003eOP_JMP\u003c/code\u003e instruction located prior to the invalid one (so in this case 010 + 008 = 018). Since each additional \u003ccode\u003ebreak\u003c/code\u003e inserted into the code inserts an additional \u003ccode\u003eOP_JMP\u003c/code\u003e instruction, this implies that the argument of the invalid \u003ccode\u003eOP_JMP\u003c/code\u003e can be increased almost without bounds (limited only by memory consumption and/or the maximum argument to \u003ccode\u003eOP_JMP\u003c/code\u003e instructions, which is \u003ccode\u003e0xffff \u0026gt;\u0026gt; 1\u003c/code\u003e = 32767).\u003c/p\u003e\n\n\u003cp\u003eAs an example, the code:\u003c/p\u003e\n\n\u003ch2 id=\"larger-rb\"\u003elarger.rb\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eA ||= break break break break while break\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYields the following bytecode:\u003c/p\u003e\n\n\u003cp\u003efile: larger.rb\u003cbr\u003e\n    1 000 OP_JMP        013\u003cbr\u003e\n    1 001 OP_ONERR      005\u003cbr\u003e\n    1 002 OP_GETCONST   R1      :A\u003cbr\u003e\n    1 003 OP_POPERR     1\u003cbr\u003e\n    1 004 OP_JMP        007\u003cbr\u003e\n    1 005 OP_RESCUE     R1\u003cbr\u003e\n    1 006 OP_LOADF      R1\u003cbr\u003e\n    1 007 OP_JMPIF      R1      013\u003cbr\u003e\n    1 008 OP_JMP        008\u003cbr\u003e\n    1 009 OP_JMP        017\u003cbr\u003e\n    1 010 OP_JMP        019\u003cbr\u003e\n    1 011 OP_JMP        021\u003cbr\u003e\n    1 012 OP_SETCONST   :A      R1\u003cbr\u003e\n    1 013 OP_JMP        024\u003cbr\u003e\n    1 014 OP_JMPIF      R1      001\u003cbr\u003e\n    1 015 OP_LOADNIL    R1\u003cbr\u003e\n    1 016 OP_STOP\u003c/p\u003e\n\n\u003cp\u003eAfter the jump is made, the memory location might contain a valid mruby instruction or even something with an opcode larger than the number of opcodes contained in the \u003ccode\u003eoptable\u003c/code\u003e in \u003ccode\u003evm.c\u003c/code\u003e. Since the code in \u003ccode\u003emrb_vm_exec\u003c/code\u003e jumps to addresses contained in the \u003ccode\u003eoptable\u003c/code\u003e, indexed by the opcode number, this leads to a limited form of unwanted code execution, since memory locations after the \u003ccode\u003eoptable\u003c/code\u003e may contain pointers to executable code by accident.\u003c/p\u003e\n\n\u003cp\u003eIt is interesting to note that a very similar program doesn\u0026#39;t cause a crash:\u003c/p\u003e\n\n\u003ch2 id=\"non-crash-rb\"\u003enon-crash.rb\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ea ||= break while break\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe only difference from the crashing case is the use of a lowercase variable name instead of an uppercase (so a non-constant, in Ruby terms).\u003c/p\u003e\n\n\u003cp\u003eAnother non-crashing case is the following:\u003c/p\u003e\n\n\u003ch2 id=\"non-crash-other-rb\"\u003enon-crash-other.rb\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eA \u0026amp;\u0026amp;= break while break\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe only difference here is the use of another assignment operator â€” \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, instead of \u003ccode\u003e||\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis gives us a hint as to where the problem is. The invalid jump length is ultimately set during code generation for the \u003ccode\u003eNODE_WHILE\u003c/code\u003e node of the AST in \u003ccode\u003ecodegen.c\u003c/code\u003e, line 1426. Specifically, the jump lengths are adjusted \u003cem\u003eafter\u003c/em\u003e the loop is generated, on line 1438 of the same file, during the call of the function \u003ccode\u003eloop_pop()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen this function is executed in the debugger when run on the \u003ccode\u003ecrash.rb\u003c/code\u003e case, it may be noticed that the \u003ccode\u003es-\u0026gt;loop\u003c/code\u003e variable, which contains the loop context, contains two loops inside one another instead of only one: a \u003ccode\u003eLOOP_NORMAL\u003c/code\u003e (which is generated by the \u003ccode\u003ewhile\u003c/code\u003e) and a \u003ccode\u003eLOOP_RESCUE\u003c/code\u003e. The latter is generated during code generation for \u003ccode\u003eNODE_OP_ASGN\u003c/code\u003e, starting at line 1724 of \u003ccode\u003ecodegen.c\u003c/code\u003e. Here we encounter this interesting special case:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e  if ((len == 2 \u0026amp;\u0026amp; name[0] == \u0026#39;|\u0026#39; \u0026amp;\u0026amp; name[1] == \u0026#39;|\u0026#39;) \u0026amp;\u0026amp;\n      ((intptr_t)tree-\u0026gt;car-\u0026gt;car == NODE_CONST ||\n       (intptr_t)tree-\u0026gt;car-\u0026gt;car == NODE_CVAR)) {\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis explains why the problem only happens only when using the \u003ccode\u003e||=\u003c/code\u003e operator on Ruby constants. It is here that an additional \u003ccode\u003eLOOP_RESCUE\u003c/code\u003e loop context is created, and it is using this context that is used later on by \u003ccode\u003eloop_pop\u003c/code\u003e/\u003ccode\u003edispatch_linked\u003c/code\u003e to generate the final arguments to the jump instructions.\u003c/p\u003e\n\n\u003cp\u003eSince this \u0026quot;loop\u0026quot; is generated simply to catch potential \u003ccode\u003eNameError\u003c/code\u003e exceptions generated when an unexisting constant is reference, it seems that this loop context shouldn\u0026#39;t escape the generation of the code for the assignment operator.\u003c/p\u003e\n\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\n\u003cp\u003eTherefore, the solution we chose was to pop this loop context after the assignment code is generated. This makes the \u003ccode\u003eloop_pop\u003c/code\u003e/\u003ccode\u003edispatch_linked\u003c/code\u003e function calls inside the \u003ccode\u003ewhile\u003c/code\u003e code generation operate on the loop context for the \u003ccode\u003ewhile\u003c/code\u003e loop instead and fixes the generated jump.\u003c/p\u003e\n\n\u003ch2 id=\"undef-constant-or-assign-patch\"\u003eundef-constant-or-assign.patch\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\nindex 9b064b8..bbe0f51 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/mrbgems/mruby-compiler/core/codegen.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/mrbgems/mruby-compiler/core/codegen.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -1746,6 +1746,7 @@\u003c/span\u003e codegen(codegen_scope *s, node *tree, int val)\n        genop(s, MKOP_A(OP_RESCUE, exc));\n        genop(s, MKOP_A(OP_LOADF, exc));\n        dispatch(s, noexc);\n\u003cspan class=\"gi\"\u003e+        loop_pop(s, val);\n\u003c/span\u003e    }\n    else if ((intptr_t)tree-\u0026gt;car-\u0026gt;car == NODE_CALL) {\n        node *n = tree-\u0026gt;car-\u0026gt;cdr;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith the above patch, we were unable to crash the VM through this bug nor generated any more jumps with invalid jump lengths. Furthermore, all tests pass successfully.\u003c/p\u003e\n","bounty_amount":"10000.0","formatted_bounty":"$10,000","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":135418,"file_name":"crash.rb","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/135/418/5b0b6db63343807f26bc0a8af00c4eb4796cc2c7/crash.rb?response-content-disposition=attachment%3B%20filename%3D%22crash.rb%22%3B%20filename%2A%3DUTF-8%27%27crash.rb\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044626Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=6e6e8a65dd13d8b0255bbc899fc1b9a9b8a1b17277e22e09ba50389cd256cc48","file_size":24,"type":"text/plain"},{"id":135419,"file_name":"non-crash.rb","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/135/419/931d06873f618e8ef6196bb8168d2b1390a0daff/non-crash.rb?response-content-disposition=attachment%3B%20filename%3D%22non-crash.rb%22%3B%20filename%2A%3DUTF-8%27%27non-crash.rb\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044626Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=d026af54715c5489d50245c0ca68b3f2fb5c10595d153f5f2a0419e3fc03197b","file_size":24,"type":"text/plain"},{"id":135421,"file_name":"larger.rb","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/135/421/b09071e66595cade8bf9295ecbfff8718a8ed0ab/larger.rb?response-content-disposition=attachment%3B%20filename%3D%22larger.rb%22%3B%20filename%2A%3DUTF-8%27%27larger.rb\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044626Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=bc962e877d1781d2c39408eb3af559b9591e935244ea648c024c53c4d0ef1f4b","file_size":42,"type":"text/plain"},{"id":135422,"file_name":"undef-constant-or-assign.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/135/422/80e871a09fccd7a0da2a76bc479534942cd33482/undef-constant-or-assign.patch?response-content-disposition=attachment%3B%20filename%3D%22undef-constant-or-assign.patch%22%3B%20filename%2A%3DUTF-8%27%27undef-constant-or-assign.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044626Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=559b3c9e394e40d5521820077fec743efafb487c36ce57b765e5b1487a128872","file_size":520,"type":"text/x-diff"},{"id":135424,"file_name":"non-crash-other.rb","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/135/424/b2403c2db2348d2acb06e849b2bb62199e432f3b/non-crash-other.rb?response-content-disposition=attachment%3B%20filename%3D%22non-crash-other.rb%22%3B%20filename%2A%3DUTF-8%27%27non-crash-other.rb\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044626Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=a88f6b56c6b61c9d3dd316a80cc3c0d8e36504c836883805012347c3fe3f5454","file_size":24,"type":"text/plain"}],"allow_singular_disclosure_at":"2017-01-15T20:19:59.914Z","allow_singular_disclosure_after":-124705586.37640749,"singular_disclosure_allowed":true,"vote_count":13,"voters":["dkasak","dgaletic","mpz","eveeez","ak1t4","linkks","japz","spetr0x","scept1c","no-longer-with-company","and 3 more..."],"severity":{"rating":"high","score":8.6,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"none","integrity":"none","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1307642,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report! We've reproduced the issue, and our engineering team is investigating.","markdown_message":"\u003cp\u003eThank you for your report! We\u0026#39;ve reproduced the issue, and our engineering team is investigating.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-11-18T23:53:42.568Z","updated_at":"2016-11-18T23:53:42.568Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1319619,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Is there an issue we could help with that's preventing this from being resolved or is it simply still waiting its turn? I noticed it was fixed upstream.","markdown_message":"\u003cp\u003eIs there an issue we could help with that\u0026#39;s preventing this from being resolved or is it simply still waiting its turn? I noticed it was fixed upstream.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-11-25T19:07:19.079Z","updated_at":"2016-11-25T19:07:19.079Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1319669,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"In the best case scenario I will be able to close this as Resolved later today, I am only waiting for the fix to get deployed to our production environment. Today is black friday (which normally means code freeze at Shopify) so we may have to wait until next Tuesday to deploy.\n\nYou should also be aware that we'll most likely award bounties only next week.","markdown_message":"\u003cp\u003eIn the best case scenario I will be able to close this as Resolved later today, I am only waiting for the fix to get deployed to our production environment. Today is black friday (which normally means code freeze at Shopify) so we may have to wait until next Tuesday to deploy.\u003c/p\u003e\n\n\u003cp\u003eYou should also be aware that we\u0026#39;ll most likely award bounties only next week.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-11-25T19:32:21.227Z","updated_at":"2016-11-25T19:32:21.227Z","actor":{"username":"francoischagnon","cleared":false,"url":"/francoischagnon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1319675,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Okay, that sounds great as far as we're concerned. Thanks for the quick response, the update is very appreciated. ","markdown_message":"\u003cp\u003eOkay, that sounds great as far as we\u0026#39;re concerned. Thanks for the quick response, the update is very appreciated. \u003c/p\u003e\n","automated_response":false,"created_at":"2016-11-25T19:38:02.189Z","updated_at":"2016-11-25T19:38:02.189Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1319952,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks again for reporting this issue @dkasak. We've shipped a fix to our production environment.\n\nI'm marking this issue as resolved now but as I mentioned above, we still need to assess the impact \u0026 determine a final bounty amount. This may take a few weeks since we received a large number of valid issues and we want to calibrate our payouts across all of them.","markdown_message":"\u003cp\u003eThanks again for reporting this issue \u003ca href=\"/dkasak\"\u003e@dkasak\u003c/a\u003e. We\u0026#39;ve shipped a fix to our production environment.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m marking this issue as resolved now but as I mentioned above, we still need to assess the impact \u0026amp; determine a final bounty amount. This may take a few weeks since we received a large number of valid issues and we want to calibrate our payouts across all of them.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-11-25T21:43:56.307Z","updated_at":"2016-11-25T21:43:56.307Z","actor":{"username":"francoischagnon","cleared":false,"url":"/francoischagnon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dkasak","url":"/dkasak"},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1370154,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for helping improve the security of Shopify Scripts and the mruby project!","markdown_message":"\u003cp\u003eThanks for helping improve the security of Shopify Scripts and the mruby project!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-12-16T20:19:52.917Z","updated_at":"2016-12-16T20:19:52.917Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"shopify-scripts"}},"bounty_amount":"10000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"shopify-scripts","collaborator":{"username":"dkasak","url":"/dkasak"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1370155,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-16T20:19:59.899Z","updated_at":"2016-12-16T20:19:59.899Z","first_to_agree":true,"actor":{"username":"andrewdunbar","cleared":false,"url":"/andrewdunbar","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/164/5b0e89675ed6dbb9df87223e9f8f58e2125bb56b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1370367,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-16T21:42:19.582Z","updated_at":"2016-12-16T21:42:19.582Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1370368,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-16T21:42:19.638Z","updated_at":"2016-12-16T21:42:19.638Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1387024,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"To Shopify: Feel free to ignore, this is just for documentation purposes.\n\nThis report was created with Damir JeliÄ‡.","markdown_message":"\u003cp\u003eTo Shopify: Feel free to ignore, this is just for documentation purposes.\u003c/p\u003e\n\n\u003cp\u003eThis report was created with Damir JeliÄ‡.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-12-27T14:31:35.979Z","updated_at":"2016-12-27T14:31:35.979Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}