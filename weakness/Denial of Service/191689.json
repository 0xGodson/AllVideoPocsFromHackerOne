{"id":191689,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTE2ODk=","url":"https://hackerone.com/reports/191689","title":"Incorrect code generation when result of NODE_NEGATE is not used","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2016-12-16T13:39:39.239Z","submitted_at":"2016-12-16T13:39:39.239Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dkasak","url":"/dkasak","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":15668,"url":"https://hackerone.com/shopify-scripts","handle":"shopify-scripts","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"shopify-scripts","twitter_handle":"","website":"","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-01-12T00:37:02.807Z","bug_reporter_agreed_on_going_public_at":"2017-01-12T00:37:02.763Z","team_member_agreed_on_going_public_at":"2017-01-11T21:56:20.390Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Introduction\n============\n\nNot using the result of `NODE_NEGATE` leads to incorrect code generation which could possibly result in arbitrary bytecode generation. Currently it is possible to produce a crash through a SIGABRT via an `assert` failure.\n\nProof of concept\n================\n\nassert_failure.rb\n-------------\n\n    -0E00;0\n\n1. Run either:\n\n    a. `mruby assert_failure.rb`\n    b. `sandbox assert_failure.rb`\n\n2. Both cause a crash via an `assert` failure.\n\nDiscussion\n==========\n\nThe flaw was introduced in commit `d56a19cbf526190de036130fe3a5bf14a0705ee2`.\n\nThe problem is that `codegen` is called recursively on the argument of `NODE_NEGATE` without checking whether it is a valid node. This is problematic because `codegen` assumes that its `tree` argument is a valid node (i.e. that the node's type is stored under the `car` member, further nodes or data under the `cdr` member and that `filename_index` and `lineno` are set properly). This creates an opportunity for the attacker to control further code generation, though it might not be possible to place a valid node type in `car` with the current codebase. Nevertheless, `filename_index` *can* be controlled and this is what allows the POC to make the assertion on line 135 of `debug.c` fail:\n\n    ruby: ext/mruby_engine/mruby/src/debug.c:135: mrb_debug_info_append_file: Assertion `irep-\u003efilename' failed.\n    zsh: abort      mruby-engine/bin/sandbox assert_failure.rb\n\nRunning mruby with the following input in gdb:\n\n    -0.5555555555555555555;0\n\nAnd breaking on `parse.y:2885`, we can see that `filename_index` is set to 13621 (which is two '5' characters interpreted as an integer):\n\n    (gdb) x/16hd yyvsp[0].nd-\u003ecdr\n    0x79162c:       11824   13621   13621   13621   13621   13621   13621   13621\n    0x79163c:       13621   13621   53      0       52      0       0       0\n    (gdb) p yyvsp[0].nd-\u003ecdr-\u003efilename_index \n    $21 = 13621\n\nThen, breaking `codegen.c:1230`, we see that `tree-\u003efilename_index` is indeed set to 13621:\n\n    (gdb) p tree-\u003efilename_index\n    $22 = 13621\n\nThis eventually leads to `assert` to fail.\n\nSolution\n========\n\nTo fix the problem, we should ensure `tree-\u003ecar` is a valid node before calling `codegen` on `tree` in the case of `NODE_NEGATE`.\n\nnegate_node.patch\n-----------------\n\n    diff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\n    index 90bafb3..9d47cca 100644\n    --- a/mrbgems/mruby-compiler/core/codegen.c\n    +++ b/mrbgems/mruby-compiler/core/codegen.c\n    @@ -2232,7 +2232,9 @@ codegen(codegen_scope *s, node *tree, int val)\n        nt = (intptr_t)tree-\u003ecar;\n        tree = tree-\u003ecdr;\n        if (!val) {\n    -        codegen(s, tree, NOVAL);\n    +        if (tree \u0026\u0026 (intptr_t)tree-\u003ecar \u003c NODE_LAST) {\n    +          codegen(s, tree, NOVAL);\n    +        }\n            break;\n        }\n        switch (nt) {\n\n--\nDenis Kasak\n","vulnerability_information_html":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\n\u003cp\u003eNot using the result of \u003ccode\u003eNODE_NEGATE\u003c/code\u003e leads to incorrect code generation which could possibly result in arbitrary bytecode generation. Currently it is possible to produce a crash through a SIGABRT via an \u003ccode\u003eassert\u003c/code\u003e failure.\u003c/p\u003e\n\n\u003ch1 id=\"proof-of-concept\"\u003eProof of concept\u003c/h1\u003e\n\n\u003ch2 id=\"assert_failure-rb\"\u003eassert_failure.rb\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e-0E00;0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRun either:\u003c/p\u003e\n\n\u003cp\u003ea. \u003ccode\u003emruby assert_failure.rb\u003c/code\u003e\u003cbr\u003e\nb. \u003ccode\u003esandbox assert_failure.rb\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eBoth cause a crash via an \u003ccode\u003eassert\u003c/code\u003e failure.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch1 id=\"discussion\"\u003eDiscussion\u003c/h1\u003e\n\n\u003cp\u003eThe flaw was introduced in commit \u003ccode\u003ed56a19cbf526190de036130fe3a5bf14a0705ee2\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe problem is that \u003ccode\u003ecodegen\u003c/code\u003e is called recursively on the argument of \u003ccode\u003eNODE_NEGATE\u003c/code\u003e without checking whether it is a valid node. This is problematic because \u003ccode\u003ecodegen\u003c/code\u003e assumes that its \u003ccode\u003etree\u003c/code\u003e argument is a valid node (i.e. that the node\u0026#39;s type is stored under the \u003ccode\u003ecar\u003c/code\u003e member, further nodes or data under the \u003ccode\u003ecdr\u003c/code\u003e member and that \u003ccode\u003efilename_index\u003c/code\u003e and \u003ccode\u003elineno\u003c/code\u003e are set properly). This creates an opportunity for the attacker to control further code generation, though it might not be possible to place a valid node type in \u003ccode\u003ecar\u003c/code\u003e with the current codebase. Nevertheless, \u003ccode\u003efilename_index\u003c/code\u003e \u003cem\u003ecan\u003c/em\u003e be controlled and this is what allows the POC to make the assertion on line 135 of \u003ccode\u003edebug.c\u003c/code\u003e fail:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eruby: ext/mruby_engine/mruby/src/debug.c:135: mrb_debug_info_append_file: Assertion `irep-\u0026gt;filename\u0026#39; failed.\nzsh: abort      mruby-engine/bin/sandbox assert_failure.rb\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRunning mruby with the following input in gdb:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e-0.5555555555555555555;0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd breaking on \u003ccode\u003eparse.y:2885\u003c/code\u003e, we can see that \u003ccode\u003efilename_index\u003c/code\u003e is set to 13621 (which is two \u0026#39;5\u0026#39; characters interpreted as an integer):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) x/16hd yyvsp[0].nd-\u0026gt;cdr\n0x79162c:       11824   13621   13621   13621   13621   13621   13621   13621\n0x79163c:       13621   13621   53      0       52      0       0       0\n(gdb) p yyvsp[0].nd-\u0026gt;cdr-\u0026gt;filename_index \n$21 = 13621\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen, breaking \u003ccode\u003ecodegen.c:1230\u003c/code\u003e, we see that \u003ccode\u003etree-\u0026gt;filename_index\u003c/code\u003e is indeed set to 13621:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) p tree-\u0026gt;filename_index\n$22 = 13621\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis eventually leads to \u003ccode\u003eassert\u003c/code\u003e to fail.\u003c/p\u003e\n\n\u003ch1 id=\"solution\"\u003eSolution\u003c/h1\u003e\n\n\u003cp\u003eTo fix the problem, we should ensure \u003ccode\u003etree-\u0026gt;car\u003c/code\u003e is a valid node before calling \u003ccode\u003ecodegen\u003c/code\u003e on \u003ccode\u003etree\u003c/code\u003e in the case of \u003ccode\u003eNODE_NEGATE\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"negate_node-patch\"\u003enegate_node.patch\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/mrbgems/mruby-compiler/core/codegen.c b/mrbgems/mruby-compiler/core/codegen.c\nindex 90bafb3..9d47cca 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/mrbgems/mruby-compiler/core/codegen.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/mrbgems/mruby-compiler/core/codegen.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -2232,7 +2232,9 @@\u003c/span\u003e codegen(codegen_scope *s, node *tree, int val)\n    nt = (intptr_t)tree-\u0026gt;car;\n    tree = tree-\u0026gt;cdr;\n    if (!val) {\n\u003cspan class=\"gd\"\u003e-        codegen(s, tree, NOVAL);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+        if (tree \u0026amp;\u0026amp; (intptr_t)tree-\u0026gt;car \u0026lt; NODE_LAST) {\n+          codegen(s, tree, NOVAL);\n+        }\n\u003c/span\u003e        break;\n    }\n    switch (nt) {\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e--\u003cbr\u003e\nDenis Kasak\u003c/p\u003e\n","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":48,"name":"Denial of Service"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":144130,"file_name":"assert_failure.rb","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/144/130/200d3b6b50a398142e12f71cc7e3f642abfaae8c/assert_failure.rb?response-content-disposition=attachment%3B%20filename%3D%22assert_failure.rb%22%3B%20filename%2A%3DUTF-8%27%27assert_failure.rb\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ73CCUSFG%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044929Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCGGkmdk3O0%2B96YS48IazaeHEdMv%2BN41nMJvviy9CKnDgIhAK6vCcjQLqXNhfXEkARhk2Pfw1V1rRNUAtiJTzUH8Ee1KrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyudt2yAk5Z1nSjTXIqkQPiLeekhnilcZ3reJTn08DbSZ0A7Q3crWPYcBaZnWOAiOy6idHHwS4Qv12QRaYyYJTfU5fYuLEHwHAjRoOrVVPAbenU%2FwLFPGXct9IHMUpdTZpQpcx%2BuO279E1iybhTsDNyV6Ew2Wyuyqo9Xp0GMgN%2FZKLTdQVrO%2B4fQk7PAxpP8tk6YTZlTxqWkJw%2Bm95tnQ3bCJwg3olthCbReBss9OMSKyHsf31P4S%2FgkiL0FSWlGi3mgcczMC3pLrI3jpuNi8QQQqx%2BLFl60xADebcXrl0st3ZcpjZXWajov%2Bhxh2nB4aqlqQFbpQIJx53GNTobNZCAm9lNJWEIvZsNqIaYtaDPdtKfBFPlAHcevruCDL5ywTjjc7csF1SolFKO4NQE%2BhZoWqLg7xE1DXK565UD%2BN5R1Gz7x%2F9Nh4jbJPQMCC7EhMnEWhlETnHtYlMytpmG5EhZMmF5szMpKmrsggeMK2SWT8HS8bBV0Pq%2BNrGCg3mwl%2BD8xW%2FO1zWpevrFtzmaJ7geeO91EYwzx2zPaNxnluroWDDDyar%2FBTrqAXFKDZlnJTINjzKPhr8sSRAvNO7Yf6EQdYD6yjW0HrNQp4%2BT4yy1QL%2Fx%2F6v2GWMrebqDtxosOhN3WdPz5w%2BXe91skQJxOr0w2S3bBWvphE1AEIAuxKmOy8oLs3ydeVPJi829FHc3w8QeDj3AiY%2Bo9IZc6TvSFwJ6gx3UAw5BfJyNoQprSsAtrCV76dtG2%2BS9OZs0D1q%2Bz%2BgxzcSPWXcU5Opc2ko5PvvCmnZ31uiam5NbJyUg%2FNkxKsW9XB6ZnYAdByUNhziNztEVtbeBXmCYts1v%2FWwYGc%2FK20C8EHl%2BLpQPQ7QKUG55nGEr8Q%3D%3D\u0026X-Amz-Signature=c4cba9a674c9cac98dc1562cadd11c18a61cf6543268fd08c402f64cc4a5de5d","file_size":8,"type":"text/plain"},{"id":144131,"file_name":"0001-Fix-code-generation-when-NODE_NEGATE-result-is-not-u.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/144/131/b396c83028ce6fdff43e401e9b80362f8d891920/0001-Fix-code-generation-when-NODE_NEGATE-result-is-not-u.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Fix-code-generation-when-NODE_NEGATE-result-is-not-u.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Fix-code-generation-when-NODE_NEGATE-result-is-not-u.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ73CCUSFG%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044929Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCGGkmdk3O0%2B96YS48IazaeHEdMv%2BN41nMJvviy9CKnDgIhAK6vCcjQLqXNhfXEkARhk2Pfw1V1rRNUAtiJTzUH8Ee1KrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyudt2yAk5Z1nSjTXIqkQPiLeekhnilcZ3reJTn08DbSZ0A7Q3crWPYcBaZnWOAiOy6idHHwS4Qv12QRaYyYJTfU5fYuLEHwHAjRoOrVVPAbenU%2FwLFPGXct9IHMUpdTZpQpcx%2BuO279E1iybhTsDNyV6Ew2Wyuyqo9Xp0GMgN%2FZKLTdQVrO%2B4fQk7PAxpP8tk6YTZlTxqWkJw%2Bm95tnQ3bCJwg3olthCbReBss9OMSKyHsf31P4S%2FgkiL0FSWlGi3mgcczMC3pLrI3jpuNi8QQQqx%2BLFl60xADebcXrl0st3ZcpjZXWajov%2Bhxh2nB4aqlqQFbpQIJx53GNTobNZCAm9lNJWEIvZsNqIaYtaDPdtKfBFPlAHcevruCDL5ywTjjc7csF1SolFKO4NQE%2BhZoWqLg7xE1DXK565UD%2BN5R1Gz7x%2F9Nh4jbJPQMCC7EhMnEWhlETnHtYlMytpmG5EhZMmF5szMpKmrsggeMK2SWT8HS8bBV0Pq%2BNrGCg3mwl%2BD8xW%2FO1zWpevrFtzmaJ7geeO91EYwzx2zPaNxnluroWDDDyar%2FBTrqAXFKDZlnJTINjzKPhr8sSRAvNO7Yf6EQdYD6yjW0HrNQp4%2BT4yy1QL%2Fx%2F6v2GWMrebqDtxosOhN3WdPz5w%2BXe91skQJxOr0w2S3bBWvphE1AEIAuxKmOy8oLs3ydeVPJi829FHc3w8QeDj3AiY%2Bo9IZc6TvSFwJ6gx3UAw5BfJyNoQprSsAtrCV76dtG2%2BS9OZs0D1q%2Bz%2BgxzcSPWXcU5Opc2ko5PvvCmnZ31uiam5NbJyUg%2FNkxKsW9XB6ZnYAdByUNhziNztEVtbeBXmCYts1v%2FWwYGc%2FK20C8EHl%2BLpQPQ7QKUG55nGEr8Q%3D%3D\u0026X-Amz-Signature=99c238b3840222da4e571f29c18fe6887f2eacb9df4db4afc3c5a80657eb987c","file_size":877,"type":"text/x-diff"}],"allow_singular_disclosure_at":"2017-02-10T21:56:20.435Z","allow_singular_disclosure_after":-122453589.28669181,"singular_disclosure_allowed":true,"vote_count":8,"voters":["dkasak","dgaletic","michiel","mpz","eveeez","khizer47","japz","spetr0x"],"severity":{"rating":"low","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1369652,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report. We've reproduced the issue, and opened an issue upstream: https://github.com/mruby/mruby/issues/3348","markdown_message":"\u003cp\u003eThank you for your report. We\u0026#39;ve reproduced the issue, and opened an issue upstream: \u003ca title=\"https://github.com/mruby/mruby/issues/3348\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmruby%2Fmruby%2Fissues%2F3348\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/mruby/mruby/issues/3348\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2016-12-16T17:59:04.107Z","updated_at":"2016-12-16T17:59:04.107Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1409280,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks again for your report. This issue has been resolved upstream, and we're running a patched version in our production environment.\n\nOur next round of bounty decisions will take place within two weeks, so we'll be in touch with you again soon.","markdown_message":"\u003cp\u003eThanks again for your report. This issue has been resolved upstream, and we\u0026#39;re running a patched version in our production environment.\u003c/p\u003e\n\n\u003cp\u003eOur next round of bounty decisions will take place within two weeks, so we\u0026#39;ll be in touch with you again soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-01-09T19:02:02.298Z","updated_at":"2017-01-09T19:02:02.298Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dkasak","url":"/dkasak"},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1414751,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for helping improve the security of Shopify Scripts and the mruby project!","markdown_message":"\u003cp\u003eThanks for helping improve the security of Shopify Scripts and the mruby project!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-01-11T21:56:16.207Z","updated_at":"2017-01-11T21:56:16.207Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"shopify-scripts"}},"bounty_amount":"1000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"shopify-scripts","collaborator":{"username":"dkasak","url":"/dkasak"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1414752,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-01-11T21:56:20.409Z","updated_at":"2017-01-11T21:56:20.409Z","first_to_agree":true,"actor":{"username":"andrewdunbar","cleared":false,"url":"/andrewdunbar","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/164/5b0e89675ed6dbb9df87223e9f8f58e2125bb56b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1415094,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for the bounty. As before, it was a pleasure of working on this with you, Shopify.","markdown_message":"\u003cp\u003eThank you for the bounty. As before, it was a pleasure of working on this with you, Shopify.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-01-12T00:36:02.417Z","updated_at":"2017-01-12T00:36:46.489Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1415096,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-01-12T00:37:02.781Z","updated_at":"2017-01-12T00:37:02.781Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1415097,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-01-12T00:37:02.825Z","updated_at":"2017-01-12T00:37:02.825Z","actor":{"username":"dkasak","cleared":true,"url":"/dkasak","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/122/858/df3e45a00fd0f5e53ef7dc7f9b12168cbde93200_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}