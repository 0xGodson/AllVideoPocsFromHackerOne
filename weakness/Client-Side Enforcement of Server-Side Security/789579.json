{"id":789579,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83ODk1Nzk=","url":"https://hackerone.com/reports/789579","title":"ActiveStorage direct upload fails to sign content-length header for S3 service","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2020-02-05T22:24:41.310Z","submitted_at":"2020-02-05T22:24:41.310Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"travispew","url":"/travispew","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-8162"],"singular_disclosure_disabled":false,"disclosed_at":"2020-05-18T20:43:36.685Z","bug_reporter_agreed_on_going_public_at":"2020-05-18T20:43:36.632Z","team_member_agreed_on_going_public_at":"2020-05-18T19:37:16.444Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"When a user makes a direct upload using ActiveStorage, the browser makes a request to the DirectUploadsController containing the direct_upload parameters filename, content_type, byte_size, and checksum. These are used to generate a presigned url that is then passed back to the browser, allowing the user to upload directly to S3.\n\nIn particular, the byte_size parameter is intended to be encoded in the url for content-length, preventing the user from uploading a file of a different size. Although Rails does not currently provide any built in validations, developers have been encouraged to modify the controller or provide their own controller if they want to create a validation. For example, a developer might decide to prohibit uploads greater than 10MB in size.\n\nin all current version of Rails with ActiveStorage and direct uploads `active_storage/lib/active_storage/service/s3_service.rb`, the code generates the presigned_url as follows:\n\n```ruby\n    def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:)\n      instrument :url, key: key do |payload|\n        generated_url = object_for(key).presigned_url :put, expires_in: expires_in.to_i,\n          content_type: content_type, content_length: content_length, content_md5: checksum\n\n        payload[:url] = generated_url\n\n        generated_url\n      end\n    end\n```\n\nHowever, the aws-sdk-s3 gem *silently blacklists* the \"content-length\" header:\n\nhttps://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-s3/lib/aws-sdk-s3/presigner.rb#L22\n\nThis issue is also raised here: https://github.com/aws/aws-sdk-ruby/issues/2098\n\nAs a result, the content-length header is never actually part of the presigned url. As a result, a malicious user can select a file of arbitrary size, tell the direct uploads controller that the file is a different size, and then proceed to upload the file, bypassing the intended protection of the signed url.\n\nThe solution is to add the whitelist_headers argument:\n\n```ruby\n    def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:)\n      instrument :url, key: key do |payload|\n        generated_url = object_for(key).presigned_url :put, expires_in: expires_in.to_i,\n          content_type: content_type, content_length: content_length, content_md5: checksum,\n          whitelist_headers: ['content-length']\n\n        payload[:url] = generated_url\n\n        generated_url\n      end\n    end\n```\nAfter this is added, the content-length will be included in the presigned url and the client will be unable to upload a file of arbitrary size.\n\n## Impact\n\nThe attacker could upload a file of any size, unless the S3 service is configured separately to prevent this, whereas the developer believes they have protected themselves against this. This could allow an attacker to upload a very large file to S3, incurring additional costs to the website owner or causing other harm.","vulnerability_information_html":"\u003cp\u003eWhen a user makes a direct upload using ActiveStorage, the browser makes a request to the DirectUploadsController containing the direct_upload parameters filename, content_type, byte_size, and checksum. These are used to generate a presigned url that is then passed back to the browser, allowing the user to upload directly to S3.\u003c/p\u003e\n\n\u003cp\u003eIn particular, the byte_size parameter is intended to be encoded in the url for content-length, preventing the user from uploading a file of a different size. Although Rails does not currently provide any built in validations, developers have been encouraged to modify the controller or provide their own controller if they want to create a validation. For example, a developer might decide to prohibit uploads greater than 10MB in size.\u003c/p\u003e\n\n\u003cp\u003ein all current version of Rails with ActiveStorage and direct uploads \u003ccode\u003eactive_storage/lib/active_storage/service/s3_service.rb\u003c/code\u003e, the code generates the presigned_url as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eurl_for_direct_upload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpires_in\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_length\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\u003cspan class=\"p\"\u003e:)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003einstrument\u003c/span\u003e \u003cspan class=\"ss\"\u003e:url\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eobject_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003epresigned_url\u003c/span\u003e \u003cspan class=\"ss\"\u003e:put\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eexpires_in: \u003c/span\u003e\u003cspan class=\"n\"\u003eexpires_in\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_i\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"ss\"\u003econtent_type: \u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_length: \u003c/span\u003e\u003cspan class=\"n\"\u003econtent_length\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_md5: \u003c/span\u003e\u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:url\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, the aws-sdk-s3 gem \u003cem\u003esilently blacklists\u003c/em\u003e the \u0026quot;content-length\u0026quot; header:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-s3/lib/aws-sdk-s3/presigner.rb#L22\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Faws%2Faws-sdk-ruby%2Fblob%2Fmaster%2Fgems%2Faws-sdk-s3%2Flib%2Faws-sdk-s3%2Fpresigner.rb%23L22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/aws/aws-sdk-ruby/blob/master/gems/aws-sdk-s3/lib/aws-sdk-s3/presigner.rb#L22\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis issue is also raised here: \u003ca title=\"https://github.com/aws/aws-sdk-ruby/issues/2098\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Faws%2Faws-sdk-ruby%2Fissues%2F2098\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/aws/aws-sdk-ruby/issues/2098\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAs a result, the content-length header is never actually part of the presigned url. As a result, a malicious user can select a file of arbitrary size, tell the direct uploads controller that the file is a different size, and then proceed to upload the file, bypassing the intended protection of the signed url.\u003c/p\u003e\n\n\u003cp\u003eThe solution is to add the whitelist_headers argument:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eurl_for_direct_upload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpires_in\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_length\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\u003cspan class=\"p\"\u003e:)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003einstrument\u003c/span\u003e \u003cspan class=\"ss\"\u003e:url\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n        \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eobject_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003epresigned_url\u003c/span\u003e \u003cspan class=\"ss\"\u003e:put\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eexpires_in: \u003c/span\u003e\u003cspan class=\"n\"\u003eexpires_in\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_i\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"ss\"\u003econtent_type: \u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_length: \u003c/span\u003e\u003cspan class=\"n\"\u003econtent_length\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_md5: \u003c/span\u003e\u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"ss\"\u003ewhitelist_headers: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;content-length\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:url\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003egenerated_url\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter this is added, the content-length will be included in the presigned url and the client will be unable to upload a file of arbitrary size.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe attacker could upload a file of any size, unless the S3 service is configured separately to prevent this, whereas the developer believes they have protected themselves against this. This could allow an attacker to upload a very large file to S3, incurring additional costs to the website owner or causing other harm.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":102,"name":"Client-Side Enforcement of Server-Side Security"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-06-17T19:37:16.554Z","allow_singular_disclosure_after":-16802156.142913405,"singular_disclosure_allowed":true,"vote_count":4,"voters":["mainteemoforfun","its_afolic","rsantoro","jabawack81"],"severity":{"rating":"medium","score":5.3,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"none"}},"structured_scope":{"databaseId":160,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/rails/rails","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6977500,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hello @travispew,\n\nThanks for your report.\nIn order to better assess the vulnerability, can you please provide a way to reproduce it? \nFor instance, can you create a small ruby web app with the vulnerable function and provide a video on how you are able to exploit the vulnerable code?\n\nBest regards,\n@turtle_shell","markdown_message":"\u003cp\u003eHello \u003ca href=\"/travispew\"\u003e@travispew\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThanks for your report.\u003cbr\u003e\nIn order to better assess the vulnerability, can you please provide a way to reproduce it? \u003cbr\u003e\nFor instance, can you create a small ruby web app with the vulnerable function and provide a video on how you are able to exploit the vulnerable code?\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\n\u003ca href=\"/turtle_shell\"\u003e@turtle_shell\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-06T10:19:15.683Z","updated_at":"2020-02-06T10:19:15.683Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6979959,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi @turtle_shell ,\n\nSure! I've attached a very simple rails app that uses active storage with s3 direct upload as well as attached a video with how it can be exploited. By simply modifying the byte_size parameter sent to the directuploadscontroller, I was able to trick the controller into thinking the file was smaller than it was, and received a presigned url for S3 back. Because the content-length header is unexpectedly blacklisted and dropped by aws-sdk-s3, the presigned url generated by rails ActiveStorage doesn't actually use the provided content-length, and my upload of a larger than permitted file to S3 completes.\n\nUnless there is a separate policy or check on the S3 upload, this would allow someone to upload a file of any size (up to 5 gigabytes, the largest object that can be uploaded in a single PUT).\n\nHad the active_storage code added `whitelist_headers: ['content-length']` to the presigned_url method call, this file upload would not have been allowed by S3\n\nTravis","markdown_message":"\u003cp\u003eHi \u003ca href=\"/turtle_shell\"\u003e@turtle_shell\u003c/a\u003e ,\u003c/p\u003e\n\n\u003cp\u003eSure! I\u0026#39;ve attached a very simple rails app that uses active storage with s3 direct upload as well as attached a video with how it can be exploited. By simply modifying the byte_size parameter sent to the directuploadscontroller, I was able to trick the controller into thinking the file was smaller than it was, and received a presigned url for S3 back. Because the content-length header is unexpectedly blacklisted and dropped by aws-sdk-s3, the presigned url generated by rails ActiveStorage doesn\u0026#39;t actually use the provided content-length, and my upload of a larger than permitted file to S3 completes.\u003c/p\u003e\n\n\u003cp\u003eUnless there is a separate policy or check on the S3 upload, this would allow someone to upload a file of any size (up to 5 gigabytes, the largest object that can be uploaded in a single PUT).\u003c/p\u003e\n\n\u003cp\u003eHad the active_storage code added \u003ccode\u003ewhitelist_headers: [\u0026#39;content-length\u0026#39;]\u003c/code\u003e to the presigned_url method call, this file upload would not have been allowed by S3\u003c/p\u003e\n\n\u003cp\u003eTravis\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-06T16:08:45.948Z","updated_at":"2020-02-06T16:08:45.948Z","actor":{"username":"travispew","cleared":false,"url":"/travispew","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":708077,"filename":"sample-activestorage-validation-app-master.zip","type":"application/zip","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/gMwBB7JHWujM57sMpLH2KhF7?response-content-disposition=attachment%3B%20filename%3D%22sample-activestorage-validation-app-master.zip%22%3B%20filename%2A%3DUTF-8%27%27sample-activestorage-validation-app-master.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQS4MXLS4F%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T065312Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCdPyDr833HeXJwYpWjpt%2BE8j%2FssC2h5%2FlaE7mZngOMiQIhAIhVLq5AR6H%2BIAtKS0YClrr2gxSJzGl8%2FZmOeT68dbjNKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyLw4q7eiVATMCuJ5oqkQNRnoM2%2F7QfXwU%2Fz3OKzDhPBavarq1CsKnppYIDxpxowNYh40iJGbW36kruwk7Up1vRvNyltjF5q8qwhzaGeQZ%2BiAxZXfxuO%2B2Kcrl44J%2BblDlgfJxT%2FhANHqEJ52YkeCqL%2F8Jog8rViNOOl6oETOov%2FmlWe%2BSn52SY6oPYBRdYu%2BBKeiMV8Z7HXhpAE7juI1J25wS6dso8QH7RSAhNGIs8Y8svP20AF0GCUvT57CvEpTEKNmlMu6qBfLwB6pdnFPVBhYyN%2FfIE4%2FQa2wOG4EtJYFQfTQjLwttTt9CYHJbPWKgJsiqZWwvzgG5RucysYaY1Dvc5h%2B9x16jomi9UPmmxblIqy%2BUz9R8kd2FgetX%2B5J5YRu%2FIt1eM4Pmo0vWG1EERVUZkvMX57A4jS5kp%2F0ojOEF2BB5VpPswd3ts8BMSrW%2BwRyh9hJwmvOT24d%2FVDV1XlH12OfiqXYDHqfINlxhQS6ahBnjyeup6YaEdMK6oUB8ZRQCgIyT6ugHXy7R98squWf9jBVCuea8OVuecORCfgjCE76r%2FBTrqAVa%2BDcEKB0%2FoTap54OIKsextuoDcyV%2B5vaIZrhq52EXThW%2BXIbAp6mSkhzoWUgjsywl0H1o%2FDaG%2BNn3BBVN%2BRn45Quca4CUlobnDZ4s%2FQCgf9Z7bonFsVRNiD0YQAXIATjx%2FHm9NSP5TZgVxAil%2FiJbzMr5CzCPucZqQZHGinQXPFIlAHaN7P8LEs1k%2BYLHWhoCxufAjr4F07sxUlcZob%2BG%2FmA%2B1KCCNdIEo%2B%2BJY954m5YuWhqgrGS3SilW7Zv%2FcvslV9aFtJ6DgZI3AgcMDa3advxrZKKcSBi8tFdkDhjvGZZWiwX118rNoAQ%3D%3D\u0026X-Amz-Signature=1063c43dc314e152a7d7386f48f856a56f73229dee0701a2dd51de3c09c2070d"},{"id":708076,"filename":"ActiveStorageValidation.mov","type":"video/quicktime","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/EVNQqBXm2deWzWB2NgC4iySs?response-content-disposition=attachment%3B%20filename%3D%22ActiveStorageValidation.mov%22%3B%20filename%2A%3DUTF-8%27%27ActiveStorageValidation.mov\u0026response-content-type=video%2Fquicktime\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQS4MXLS4F%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T065312Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCdPyDr833HeXJwYpWjpt%2BE8j%2FssC2h5%2FlaE7mZngOMiQIhAIhVLq5AR6H%2BIAtKS0YClrr2gxSJzGl8%2FZmOeT68dbjNKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyLw4q7eiVATMCuJ5oqkQNRnoM2%2F7QfXwU%2Fz3OKzDhPBavarq1CsKnppYIDxpxowNYh40iJGbW36kruwk7Up1vRvNyltjF5q8qwhzaGeQZ%2BiAxZXfxuO%2B2Kcrl44J%2BblDlgfJxT%2FhANHqEJ52YkeCqL%2F8Jog8rViNOOl6oETOov%2FmlWe%2BSn52SY6oPYBRdYu%2BBKeiMV8Z7HXhpAE7juI1J25wS6dso8QH7RSAhNGIs8Y8svP20AF0GCUvT57CvEpTEKNmlMu6qBfLwB6pdnFPVBhYyN%2FfIE4%2FQa2wOG4EtJYFQfTQjLwttTt9CYHJbPWKgJsiqZWwvzgG5RucysYaY1Dvc5h%2B9x16jomi9UPmmxblIqy%2BUz9R8kd2FgetX%2B5J5YRu%2FIt1eM4Pmo0vWG1EERVUZkvMX57A4jS5kp%2F0ojOEF2BB5VpPswd3ts8BMSrW%2BwRyh9hJwmvOT24d%2FVDV1XlH12OfiqXYDHqfINlxhQS6ahBnjyeup6YaEdMK6oUB8ZRQCgIyT6ugHXy7R98squWf9jBVCuea8OVuecORCfgjCE76r%2FBTrqAVa%2BDcEKB0%2FoTap54OIKsextuoDcyV%2B5vaIZrhq52EXThW%2BXIbAp6mSkhzoWUgjsywl0H1o%2FDaG%2BNn3BBVN%2BRn45Quca4CUlobnDZ4s%2FQCgf9Z7bonFsVRNiD0YQAXIATjx%2FHm9NSP5TZgVxAil%2FiJbzMr5CzCPucZqQZHGinQXPFIlAHaN7P8LEs1k%2BYLHWhoCxufAjr4F07sxUlcZob%2BG%2FmA%2B1KCCNdIEo%2B%2BJY954m5YuWhqgrGS3SilW7Zv%2FcvslV9aFtJ6DgZI3AgcMDa3advxrZKKcSBi8tFdkDhjvGZZWiwX118rNoAQ%3D%3D\u0026X-Amz-Signature=4150584822c5d0d5418815c84ef29259ac3e4b3814ebee7b9fb5d004d292ea53"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6980506,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-06T17:04:29.375Z","updated_at":"2020-02-06T17:04:29.375Z","additional_data":{"old_severity":"Medium (4.3)","new_severity":"Medium (5.3)","old_severity_id":625754,"new_severity_id":626270},"actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6980515,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @travispew,\n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@turtle_shell","markdown_message":"\u003cp\u003eHello \u003ca href=\"/travispew\"\u003e@travispew\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/turtle_shell\"\u003e@turtle_shell\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-06T17:05:13.442Z","updated_at":"2020-02-06T17:05:13.442Z","actor":{"username":"turtle_shell","cleared":false,"url":"/turtle_shell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/UEHxCfDVKTBNymNpNGb7qwy6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6982133,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also, here is a failing test for the test suite for `test/service/s3_service_test.rb`:\n\n```ruby\n    test \"directly uploading file of different size\" do\n      key      = SecureRandom.base58(24)\n      data     = \"Something else entirely!\"\n      checksum = Digest::MD5.base64digest(data)\n      url      = @service.url_for_direct_upload(key, expires_in: 5.minutes, content_type: \"text/plain\", content_length: data.size - 1, checksum: checksum)\n\n      uri = URI.parse url\n      request = Net::HTTP::Put.new uri.request_uri\n      request.body = data\n      request.add_field \"Content-Type\", \"text/plain\"\n      request.add_field \"Content-MD5\", checksum\n      upload_result = Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n        http.request request\n      end\n\n      assert_equal upload_result.code, \"403\"\n      assert_raises ActiveStorage::FileNotFoundError do\n        @service.download(key)\n      end\n    ensure\n      @service.delete key\n    end\n```\n\nIf the header is whitelisted, the test will pass as the upload is correctly rejected by S3","markdown_message":"\u003cp\u003eAlso, here is a failing test for the test suite for \u003ccode\u003etest/service/s3_service_test.rb\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e    \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;directly uploading file of different size\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ekey\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eSecureRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebase58\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003edata\u003c/span\u003e     \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Something else entirely!\u0026quot;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003echecksum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eDigest\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eMD5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebase64digest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eurl\u003c/span\u003e      \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@service\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eurl_for_direct_upload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eexpires_in: \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eminutes\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_type: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;text/plain\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003econtent_length: \u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echecksum: \u003c/span\u003e\u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n      \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eURI\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\n      \u003cspan class=\"n\"\u003erequest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003ePut\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erequest_uri\u003c/span\u003e\n      \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\n      \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eadd_field\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Content-Type\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;text/plain\u0026quot;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eadd_field\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Content-MD5\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echecksum\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eupload_result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ehost\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003euse_ssl: \u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erequest\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n      \u003cspan class=\"n\"\u003eassert_equal\u003c/span\u003e \u003cspan class=\"n\"\u003eupload_result\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;403\u0026quot;\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eassert_raises\u003c/span\u003e \u003cspan class=\"no\"\u003eActiveStorage\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eFileNotFoundError\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n        \u003cspan class=\"vi\"\u003e@service\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edownload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eensure\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@service\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the header is whitelisted, the test will pass as the upload is correctly rejected by S3\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-06T21:29:59.177Z","updated_at":"2020-02-06T21:30:30.778Z","actor":{"username":"travispew","cleared":false,"url":"/travispew","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7252036,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, trying to follow up about this report. Has anyone looked at it?","markdown_message":"\u003cp\u003eHi, trying to follow up about this report. Has anyone looked at it?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-07T15:00:05.930Z","updated_at":"2020-03-07T15:00:05.930Z","actor":{"username":"travispew","cleared":false,"url":"/travispew","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7299456,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @travispew - We are still looking into this report and will update you when we have additional information to share. Thanks for your patience!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/travispew\"\u003e@travispew\u003c/a\u003e - We are still looking into this report and will update you when we have additional information to share. Thanks for your patience!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-12T13:44:31.675Z","updated_at":"2020-03-12T13:44:31.675Z","actor":{"username":"bluetooth_headset","cleared":false,"url":"/bluetooth_headset","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/diZDezyuuh1Pn2qSqL5v9g3Y/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8038239,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Shipped","markdown_message":"\u003cp\u003eShipped\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-18T16:09:33.600Z","updated_at":"2020-05-18T16:09:33.600Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"travispew","url":"/travispew"},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8040918,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T19:37:04.114Z","updated_at":"2020-05-18T19:37:04.114Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby on Rails"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"rails","collaborator":{"username":"travispew","url":"/travispew"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8040924,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T19:37:16.469Z","updated_at":"2020-05-18T19:37:16.469Z","first_to_agree":true,"actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8041423,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T20:43:36.650Z","updated_at":"2020-05-18T20:43:36.650Z","actor":{"username":"travispew","cleared":false,"url":"/travispew","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8041424,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T20:43:36.705Z","updated_at":"2020-05-18T20:43:36.705Z","actor":{"username":"travispew","cleared":false,"url":"/travispew","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}