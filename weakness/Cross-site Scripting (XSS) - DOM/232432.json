{"id":232432,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMzI0MzI=","url":"https://hackerone.com/reports/232432","title":"Universal Cross-Site Scripting in Keybase Chrome extension","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2017-05-27T12:50:11.868Z","submitted_at":"2017-05-27T12:50:11.868Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jupenur","url":"/jupenur","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2809,"url":"https://hackerone.com/keybase","handle":"keybase","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Keybase","twitter_handle":"keybaseio","website":"https://keybase.io","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-07-26T15:46:45.361Z","bug_reporter_agreed_on_going_public_at":"2017-06-26T15:46:44.312Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Description\n\nThe Keybase Chrome extension makes heavy use of the insecure `innerHTML` DOM API, resulting in Universal Cross-Site Scripting on all Keybase-supported social networking websites.\n\n## Steps to reproduce the issue\n\n1. Install the [Keybase Chrome extension](https://chrome.google.com/webstore/detail/keybase/ognfafcpbkogffpmmdglhbjboeojlefj)\n2. Navigate to the following URL address: `https://news.ycombinator.com/user?id=jupenur\u0026id=%22%3E%3Ciframe%20src%3D%22javascript:alert(document.domain)%22`\n3. Click on the **Keybase Chat** button\n4. You should see a JavaScript `alert` dialog with the domain name of the affected social networking site (`news.ycombinator.com`) in it\n\nThis example targets an HN profile page, but it should be equally possible to trigger the same vulnerability on any other supported website. The websites potentially affected are\n\n* reddit.com\n* twitter.com\n* facebook.com\n* github.com\n* news.ycombinator.com\n* keybase.io\n* keybase.pub\n\nIt may also be possible to exploit the vulnerability without requiring the user to click a button.\n\n## Suggested fix\n\nThe vulnerable code exploited in the example above is in the file `content.js`\n\n```JavaScript\n// Render the Keybase chat reply widget\nfunction renderChat(parent, user, nudgeSupported, closeCallback) {\n  const oobNudgeHTML = `\n      \u003cp\u003e\n        You will need to let \u003ca target=\"_blank\" href=\"${user.href()}\" class=\"external-user\"\u003e${user.display()}\u003c/a\u003e know that they have a Keybase message waiting for them.\n      \u003c/p\u003e\n      \u003cp\u003e\n        Share this handy link: \u003cspan class=\"keybase-copy\"\u003ehttps://keybase.io/docs/extension\u003c/span\u003e\n      \u003c/p\u003e\n  `;\n```\n\nThe functions `user.href()` and `user.display()` return strings parsed from the URL. These values are used directly in HTML markup (via `innerHTML`) at multiple points in the code.\n\n**It is recommended to avoid the use of `innerHTML` entirely.** Standard DOM methods like `createElement` should be used instead. The code also contains a function, `safeHTML`, which could be used to escape all untrusted input, but this is much more error prone.\n","vulnerability_information_html":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThe Keybase Chrome extension makes heavy use of the insecure \u003ccode\u003einnerHTML\u003c/code\u003e DOM API, resulting in Universal Cross-Site Scripting on all Keybase-supported social networking websites.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce-the-issue\"\u003eSteps to reproduce the issue\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eInstall the \u003ca href=\"/redirect?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fkeybase%2Fognfafcpbkogffpmmdglhbjboeojlefj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eKeybase Chrome extension\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eNavigate to the following URL address: \u003ccode\u003ehttps://news.ycombinator.com/user?id=jupenur\u0026amp;id=%22%3E%3Ciframe%20src%3D%22javascript:alert(document.domain)%22\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eClick on the \u003cstrong\u003eKeybase Chat\u003c/strong\u003e button\u003c/li\u003e\n\u003cli\u003eYou should see a JavaScript \u003ccode\u003ealert\u003c/code\u003e dialog with the domain name of the affected social networking site (\u003ccode\u003enews.ycombinator.com\u003c/code\u003e) in it\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis example targets an HN profile page, but it should be equally possible to trigger the same vulnerability on any other supported website. The websites potentially affected are\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ereddit.com\u003c/li\u003e\n\u003cli\u003etwitter.com\u003c/li\u003e\n\u003cli\u003efacebook.com\u003c/li\u003e\n\u003cli\u003egithub.com\u003c/li\u003e\n\u003cli\u003enews.ycombinator.com\u003c/li\u003e\n\u003cli\u003ekeybase.io\u003c/li\u003e\n\u003cli\u003ekeybase.pub\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt may also be possible to exploit the vulnerability without requiring the user to click a button.\u003c/p\u003e\n\n\u003ch2 id=\"suggested-fix\"\u003eSuggested fix\u003c/h2\u003e\n\n\u003cp\u003eThe vulnerable code exploited in the example above is in the file \u003ccode\u003econtent.js\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Render the Keybase chat reply widget\nfunction renderChat(parent, user, nudgeSupported, closeCallback) {\n  const oobNudgeHTML = `\n      \u0026lt;p\u0026gt;\n        You will need to let \u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;${user.href()}\u0026quot; class=\u0026quot;external-user\u0026quot;\u0026gt;${user.display()}\u0026lt;/a\u0026gt; know that they have a Keybase message waiting for them.\n      \u0026lt;/p\u0026gt;\n      \u0026lt;p\u0026gt;\n        Share this handy link: \u0026lt;span class=\u0026quot;keybase-copy\u0026quot;\u0026gt;https://keybase.io/docs/extension\u0026lt;/span\u0026gt;\n      \u0026lt;/p\u0026gt;\n  `;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe functions \u003ccode\u003euser.href()\u003c/code\u003e and \u003ccode\u003euser.display()\u003c/code\u003e return strings parsed from the URL. These values are used directly in HTML markup (via \u003ccode\u003einnerHTML\u003c/code\u003e) at multiple points in the code.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIt is recommended to avoid the use of \u003ccode\u003einnerHTML\u003c/code\u003e entirely.\u003c/strong\u003e Standard DOM methods like \u003ccode\u003ecreateElement\u003c/code\u003e should be used instead. The code also contains a function, \u003ccode\u003esafeHTML\u003c/code\u003e, which could be used to escape all untrusted input, but this is much more error prone.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":63,"name":"Cross-site Scripting (XSS) - DOM"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-07-26T15:46:44.380Z","allow_singular_disclosure_after":-108134353.20358044,"singular_disclosure_allowed":true,"vote_count":22,"voters":["inhibitor181","danila","bl4de","tk0","spam404","ras-it","gamliel","xyodh","eveeez","r3y","and 12 more..."],"severity":{"rating":"medium","score":6.1,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"required","scope":"changed","confidentiality":"low","integrity":"low","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1705576,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the great report. Our extension dev just published a workaround. Can you comment on whether it's been fixed? Many thanks for the great research.","markdown_message":"\u003cp\u003eThanks for the great report. Our extension dev just published a workaround. Can you comment on whether it\u0026#39;s been fixed? Many thanks for the great research.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-27T22:21:14.375Z","updated_at":"2017-05-27T22:21:14.375Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1705900,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The `safeHTML` function now gets called in `matchService`, essentially escaping all usernames at the parsing stage. That should definitely do it. In the long term I would recommend migrating away from the use of `innerHTML`, though.","markdown_message":"\u003cp\u003eThe \u003ccode\u003esafeHTML\u003c/code\u003e function now gets called in \u003ccode\u003ematchService\u003c/code\u003e, essentially escaping all usernames at the parsing stage. That should definitely do it. In the long term I would recommend migrating away from the use of \u003ccode\u003einnerHTML\u003c/code\u003e, though.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-28T08:19:01.316Z","updated_at":"2017-05-28T08:19:12.772Z","actor":{"username":"jupenur","cleared":false,"url":"/jupenur","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709339,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"There was some reason our extension developer decided against that approach, though he agrees it's better in theory.","markdown_message":"\u003cp\u003eThere was some reason our extension developer decided against that approach, though he agrees it\u0026#39;s better in theory.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-30T12:23:17.902Z","updated_at":"2017-05-30T12:23:17.902Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"jupenur","url":"/jupenur"},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1709340,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"thanks for the great research and report.","markdown_message":"\u003cp\u003ethanks for the great research and report.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-30T12:23:37.601Z","updated_at":"2017-05-30T12:23:37.601Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"keybase","collaborator":{"username":"jupenur","url":"/jupenur"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1709382,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Public disclosure ok?","markdown_message":"\u003cp\u003ePublic disclosure ok?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-30T12:40:21.378Z","updated_at":"2017-05-30T12:40:21.378Z","actor":{"username":"jupenur","cleared":false,"url":"/jupenur","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1781013,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"I'm pretty sure I already requested public disclosure. What happened?","markdown_message":"\u003cp\u003eI\u0026#39;m pretty sure I already requested public disclosure. What happened?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-26T15:46:44.334Z","updated_at":"2017-06-26T15:46:44.334Z","first_to_agree":true,"actor":{"username":"jupenur","cleared":false,"url":"/jupenur","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1781335,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We don't want disclosure.","markdown_message":"\u003cp\u003eWe don\u0026#39;t want disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-26T16:52:10.078Z","updated_at":"2017-06-26T16:52:10.078Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1781425,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ah, ok. I was confused because the disclosure request just vanished; no indication that it was your doing.","markdown_message":"\u003cp\u003eAh, ok. I was confused because the disclosure request just vanished; no indication that it was your doing.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-26T17:10:11.612Z","updated_at":"2017-06-26T17:10:11.612Z","actor":{"username":"jupenur","cleared":false,"url":"/jupenur","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1868341,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-07-26T15:46:45.403Z","updated_at":"2017-07-26T15:46:45.403Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}