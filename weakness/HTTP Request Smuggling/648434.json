{"id":648434,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NDg0MzQ=","url":"https://hackerone.com/reports/648434","title":"Multiple HTTP Smuggling reports","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-07-17T22:47:10.824Z","submitted_at":"2019-07-17T22:47:10.824Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"regilero","url":"/regilero","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":20,"url":"https://hackerone.com/internet","handle":"internet","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"The Internet","twitter_handle":null,"website":"","about":"Hack all the things."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2017-7658"],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T23:44:23.458Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T23:44:16.704Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Theses reports spreads other several years and are all about **HTTP Smuggling issues**\n(HTTP Requests or Responses splitting, Cache Poisoning, Security filter bypass).\nI've made reports on a wide range of open source projects, explaining\nthe (not always easy) problems to the various security maintainers and testing the fixs.\n\nThe starting point for this work was the 2005 work published by Amit Klein and some others:\n\n * 2004 - Amit Klein : \"Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics\" https://packetstormsecurity.com/papers/general/whitepaper_httpresponse.pdf\n * 2005 - Chaim Linhart, Amit Klein, Ronen Heled, Steve Orrin: \"HTTP Request Smuggling\" https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf\n * 2006 - Amit Klein: \"HTTP Message Splitting, Smuggling and Other Animals\" www.owasp.org/images/1/1a/OWASPAppSecEU2006_HTTPMessageSplittingSmugglingEtc.ppt \n * 2005 - Amit Klein: \"HTTP Request Smuggling - ERRATA (the IIS 48K buffer phenomenon)\" \n * 2006 - Amit Klein: “HTTP Response Smuggling” https://www.securityfocus.com/archive/1/425593\n * 2006 - Amit Klein : HTTP Response Smuggling http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2006-February/000836.html\n * RFC 7230 section 9 (splitting, parsing, smuggling, poisoning) https://tools.ietf.org/html/rfc7230#section-9\n\nAnd also the works of James Kettle on HTTP Host headers \"Practical HTTP Host header attacks (Absolute uri in host headers)\"\nhttps://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html\nand, later, his work on ESI server or pingbacks and cache attacks or Pratical Web Cache Poisoning.\n\nIn 2015, Starting from these past studies, I studied **Apache**, **Nginx**, **Varnish** source code, I discovered\nthat a lot of smuggling problems were still present, found new ones based on overflows for the size\nattributes (previous works were mostly based on doubling length information) and expanded my works on\n**Golang**, **Nodejs**, **pound**, **HaProxy**, **Jetty**, **Tomcat**, **Apache Traffic Server**...\n\nI sometime had to push for disclosure of fixed vulnerabilitie (Varnish 3) via bugtraq.\nBut in most of the case it's been a matter a patience -- the long time between reports and fixes\nha also something to deal with lazyness on my side as security is not the biggest part of my job --\nas most of the fix implies updates on HTTP servers, which is not something as fast as updating a web\napplication framework. I did not get a security report or a CVE for each reported flaw, especially\non the first years. Smuggling is sometimes hard to explain (and public disclosure policies\nare not always liked on HTTP servers dev teams).\n\nThe main problem of HTTP smuggling issues is that the final exploitation comes from **interactions between different http parsers**. If two actors badly interprets the HTTP message or disagree on the right\ninterpretation then bad things could happen. From the security maintainer point of view it's sometimes\neasy to reject the problem as coming from the others.\n\nIt's also **very important** to understand that the attacker controls the HTTP message, **we do not use HTTP messages from browsers**, the attacker injects bad HTTP messages onto servers infrastructures, effects on the users comes later, when the real user HTTP messages reach the *infected* or  *shaken* servers. *Like when you do report a smuggling issue on hackerone reports, they prevent reporters that issues about header injection are not always security issues because we cannot control the user headers. That's a huge misunderstanding of smuggling payloads*.\n\nI've made some blog posts explaining details (I still have one awaiting vendor authorization) for some\nof the fixed problems.\n\nAnd I also made a **Defcon 24** presentation on 2016. For someone knowing nothing on smuggling\nit's a good starting point (links on next part below).\n\nNote : my work is usually reported with the name 'regilero', and sometimes 'Régis Leroy'.\n\n# Public ressources published\n\n * 2015 : Nginx Integer truncation : https://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\n * 2015 : Checking HTTP Smuggling issues in 2015 – Part1 http://regilero.github.io/security/english/2015/10/04/http_smuggling_in_2015_part_one \n * 2016 : Defcon 24 : Hiding Wookiees in HTTP: HTTP smuggling https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf\n    - Defcon presentation : https://www.youtube.com/watch?v=dVU9i5PsMPY\n    - Defcon demos : https://www.youtube.com/watch?v=lY_Mf2Fv7kI  (which were not available on time due to Linux not supported by Defcon !!)\n * 2018 : HTTP Smuggling, Apsis Pound load balancer : https://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\n * 2019 : HTTP Smuggling, Jetty : https://regilero.github.io/english/security/2019/04/24/security_jetty_http_smuggling/\n \nTools: HTTPWookiee : https://github.com/regilero/HTTPWookiee : this contains a small subset of the real tests I perform on HTTP servers.\n\n# List of CVEs\n\n## Apache Traffic Server\n\n * **CVE-2018-8004** : space before colon + force connection close on error 400 + duplicate Content-Lenght issues + bad parsing of request size on cache hit\n\n## Jetty\n\n * **CVE-2017-7656** : HTTP/0.9 Request Smuggling\n  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7656 (score 6.5)\n\n * **CVE-2017-7657**: Transfer-Encoding Request Smuggling\n  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7657 (score 6.5)\n\n * **CVE-2017-7658**: Too Tolerant Parser, Double Content-Length + Transfer-Encoding + Whitespace \n  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7658 (score 6.5)\n\n\n# Apache httpd\n\n * https://bz.apache.org/bugzilla/show_bug.cgi?id=57832 : Apache issues on 'socket poisoning', where we could store HTTP responses on\n  the reverse proxy by sending extra responses, and mix these response with other users later. Not fixed via a CVE because this behavior\n  was not considered as a real security issue (it's a consequence of a successful splitting attack on the backend, or of a compromised backend).\n  If you ask my opinion this is one of the most problematic issue I found on these 5 years. Fixs were included in 2016 on version 2.4.24.\n\n * **CVE-2016-8743** : httpd: Apache HTTP Request Parsing Whitespace Defects : problems with CR, FF, VTAB and others strange characeters in parsing HTTP messages\n especially the space before colon problem. They were also some HTTP 0.9 downgrades.\n This work contributed to the internal dev debates around the HttpProtocolOptions Strict|LenientMethods|Allow0.9 option added on 2.4\n\n * **CVE-2015-3183** : chunk header attribute truncation (low)\n\n# Facebook Proxygen\n\nProxygen is a C++ Open Source library which is the core library for Facebook HTTP related projects\n\nIn 2016 I reported several smuggling issues (about doubled headers or bad end of line, for example), via the facebook bounty program `#1710044992591113`\n\n# Apsis Pound\n\nPound is an open Source SSL terminator, but the project has not published major changes for a long time, and I experienced difficulties having my reports fixed and delivered to final users.\nAfter reports on 09-2016 a Version 2.8a fixing the flaws was published on 10-2016 but marked as experimental.\nDetails of the flaws were published in 07-2018. CVE was reserved by myslef on 2018-01. A version 2.8 was published on 2018-05.\n\n * **CVE-2016-10711** : Apsis Pound before 2.8a allows request smuggling via crafted headers\n\nDetails of issues (double Content Length, chunk prioriy, headers concatenation vuia NULL character, etc.) are published on my blog post https://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\n\n# Nodejs\n\n * **CVE-2016-2086** (but not CVE-2016-2216 from the same release) : support of bad end of lines (especially \\r followed by anything) + double Content Length, + mixed chunked and Content Length + space before colon\n\n# Tomcat\n\n * **CVE-2016-6816** : Tomcat 6,7 \u0026 8: HTTP/0.9 downgrade and various bad characters support\n\n# Varnish\n\n * Varnish3 :  **CVE-2015-8852** : received after public disclosure : https://seclists.org/oss-sec/2016/q2/95\n * Varnish4 : 2016 : space before colon fix without CVE : https://github.com/varnishcache/varnish-cache/commit/0577f3fba200e45c05099427eec01610ee061436\n cache poisoning of Varnish4 with a golang traefik server as backend was demonstrated to the project maintainer, but the project 'does not like CVE'.\n * Varnish 4 : 2016 messsage splitting on bad characters fixed without CVE : https://github.com/varnishcache/varnish-cache/commit/d1eb31109f614976f06dd506a63e0fa21185a89b\n\nHTTP/0.9 support was also removed after my reports in 2015, but without public disclosure of potential abuse.\n\n# golang (go language)\n\n * **CVE-2015-5739** : \"Content Length\" magically fixed to \"Content-Length.\"\n * **CVE-2015-5740** : support of double Content-Length\n * 01-2016 : integer overflow on chunk size : https://go-review.googlesource.com/c/go/+/18871\n * 06-2016 : downgrade HTTP/0.9 : https://github.com/golang/go/issues/16197, no CVE, as described in the commit comment\n \"@regilero also mentioned there might be some cache poisoning or request smuggling possibilities here, but I don't see how. It seems to only affect the person making the bogus request.\" (sic)\n * 06-2016 : Splitting on space + colon\n\n# Nginx\n\nNot the project where I had the most success, I do not think any smuggling issue would be considered a security issue.\n\n * Integer overflow on Content Length : fixed without CVE : http://hg.nginx.org/nginx/rev/15a15f6ae3a2 after a report and a proposed patch (not as good as the final one)\n  the security team 'don't consider this to be something serious from security point of view and have no plans for CVE and/or security advisories'.\n I made examples of exploitation at https://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\n * https://trac.nginx.org/nginx/ticket/762 : 0.9 downgrade: protocol version overflow; HTTP/65536.8 or HTTP/65536.9 treated as a 0.9 request\n rejected as a security issue, classified as minor issue, fixed 1 year and 6 month after public report (11-2016). This was in my mind quite huge.\n * https://trac.nginx.org/nginx/ticket/1014 : wontfix : I'd like an error 400 instead of silently ignoring a bad header, no success\n\n# OpenBSD\n\nIn 2015 the OpenBSD Http server was very new, crashing on 0.9 requests, I reported some smuggling issues (bad end of line, double Content-Length) which were fixed later.\n\n# HaProxy\n\nHaProxy was transmitting some of the very bad request I use to perform splitting attacks on backends (something which is not a security issue, but which allows security issues).\nI had various discussions with Willy Tarreau which leaded to some improvments in HaProxy, blocking bad requests before any less robust HTTP parser could read it.\n\nFor example:\n\n * commit 987aa383c85525b163267110a4bcff4dff3849b8 : BUG/MEDIUM: http: remove content-length from chunked messages\n * commit e1ce063c12bf22b99e6caa6a55484f1b9a27e113 : MEDIUM: http: disable support for HTTP/0.9 by default\n * commit b053c03d6f05c8ddf264de78fe321d8455358690 : MEDIUM: http: restrict the HTTP version token to 1 digit as per RFC7230\n\n# Summary\n\nI think this work allows for more robusts HTTP servers. Some of the very old issues already reported in the 2005 era reports, like double Content Length,\nwere still widely supported in 2015 and are now harder to find on most open source http servers. I think I contributed greatly to enforce the RFC 7230\nanti-smuggling policies (chunk priority, no double content-length) and for the removal of old-rfc dangerous features (like the continuation of headers\nwith the space prefix, or the HTTP/0.9 support). For this I just had to read the 2005 studies and the RFC, tests the servers, and try to explain\nexploitations.\n\nA big part of my added work and reports was studying effects of control characters (\\r, \\n, NULL, vtab, htab, bell, backspace \u0026 formfeed) on various parts of the messages.\nWith some real good success on vartious project for NULL or for bad enf of lines.\nAnother big thing was studying the HTTP/0.9 downgrade exploitations (like extracting a valid HTTP message stored in an image from a partial 0.9 response) and\nfinding new 0.9 downgrade vectors.\nFinally another part of this work was finding new attack vectors (truncation of size, overflows, concatenation of strings, effects of cache hit on header parsing, etc).\n\nThe last big part of my work was spending a long time explaining the potential attacks to maintainers. If you need hints from people understanding the smuggling attacks\nand the implications of the fixed flaws, usually better than the project maintainers, I could give you some names. If you need samples of reports or detailled lab exploitations I could also deliver.\n\nHTTP/2 or TLS are not preventing bad effects of HTTP/1.1 bad parsers (they embed HTTP/1.1 parsers in another layer), nor they could prevent effects of an HTTP/0.9 downgrades.\nEvery HTTP actors which enforces a more robust protocol parsing prevents chaining effects of smuggling attacks.\nSo I hope the work I made on the subject had real effects on the ecosystem.\n\nSome of these CVE were already elected for bounties:\n- Verizon: undisclosed (#433076): 2 700 USD\n- Apache httpd CVE-2016-8743 : https://hackerone.com/reports/244459 : 1500 USD\n- FaceBook Proxygen: (bugcrowd) 1000 USD\n- Golang CVE-2015-5739 \u0026CVE-2015-5740 : Google Security Bounty program : 1337 USD\n\n## Impact\n\nFor the final user the consequences may be huge:\n- Cache poisoning : so effects starts at Deny of Service, but may go to code injection (like replacing\n the code of a well known js library)\n- Credentials hijacking : one of the smuggling exploitation is storing unterminated requests and waiting\n for other users requests to terminate the pending requests, mixing the users credentials on something\n they did not requested (hijacking users credentials). But this cannot work on applications using csrf protections.\n- a lot of Deny of Service attacks, one of the attacks allows mixing requests and responses of\n different users, so you have documents requested by others, and they have yours.\n- security filter bypass: here the public effect is less important, the attacker use smuggling to\n remove some of the security layers\n\nA massive scale smuggling attack on a big actor (a cloud provider for example) could make a huge DOS.\nA more realist usage with a public consequence is a targeted cache poisoning, to inject an XSS.\nAn advanced usage is the filter bypass usage, where the smuggled requests is usually not even logged. A prefect way of sending requests without notices, so a nice tool for SSRF exploits.","vulnerability_information_html":"\u003cp\u003eTheses reports spreads other several years and are all about \u003cstrong\u003eHTTP Smuggling issues\u003c/strong\u003e\u003cbr\u003e\n(HTTP Requests or Responses splitting, Cache Poisoning, Security filter bypass).\u003cbr\u003e\nI\u0026#39;ve made reports on a wide range of open source projects, explaining\u003cbr\u003e\nthe (not always easy) problems to the various security maintainers and testing the fixs.\u003c/p\u003e\n\n\u003cp\u003eThe starting point for this work was the 2005 work published by Amit Klein and some others:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e2004 - Amit Klein : \u0026quot;Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics\u0026quot; \u003ca title=\"https://packetstormsecurity.com/papers/general/whitepaper_httpresponse.pdf\" href=\"/redirect?url=https%3A%2F%2Fpacketstormsecurity.com%2Fpapers%2Fgeneral%2Fwhitepaper_httpresponse.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://packetstormsecurity.com/papers/general/whitepaper_httpresponse.pdf\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2005 - Chaim Linhart, Amit Klein, Ronen Heled, Steve Orrin: \u0026quot;HTTP Request Smuggling\u0026quot; \u003ca title=\"https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf\" href=\"/redirect?url=https%3A%2F%2Fwww.cgisecurity.com%2Flib%2FHTTP-Request-Smuggling.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006 - Amit Klein: \u0026quot;HTTP Message Splitting, Smuggling and Other Animals\u0026quot; \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.owasp.org%2Fimages%2F1%2F1a%2FOWASPAppSecEU2006_HTTPMessageSplittingSmugglingEtc.ppt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.owasp.org/images/1/1a/OWASPAppSecEU2006_HTTPMessageSplittingSmugglingEtc.ppt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e2005 - Amit Klein: \u0026quot;HTTP Request Smuggling - ERRATA (the IIS 48K buffer phenomenon)\u0026quot; \u003c/li\u003e\n\u003cli\u003e2006 - Amit Klein: “HTTP Response Smuggling” \u003ca title=\"https://www.securityfocus.com/archive/1/425593\" href=\"/redirect?url=https%3A%2F%2Fwww.securityfocus.com%2Farchive%2F1%2F425593\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.securityfocus.com/archive/1/425593\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2006 - Amit Klein : HTTP Response Smuggling \u003ca title=\"http://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2006-February/000836.html\" href=\"/redirect?url=http%3A%2F%2Flists.webappsec.org%2Fpipermail%2Fwebsecurity_lists.webappsec.org%2F2006-February%2F000836.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://lists.webappsec.org/pipermail/websecurity_lists.webappsec.org/2006-February/000836.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eRFC 7230 section 9 (splitting, parsing, smuggling, poisoning) \u003ca title=\"https://tools.ietf.org/html/rfc7230#section-9\" href=\"/redirect?url=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7230%23section-9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://tools.ietf.org/html/rfc7230#section-9\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd also the works of James Kettle on HTTP Host headers \u0026quot;Practical HTTP Host header attacks (Absolute uri in host headers)\u0026quot;\u003cbr\u003e\n\u003ca title=\"https://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html\" href=\"/redirect?url=https%3A%2F%2Fwww.skeletonscribe.net%2F2013%2F05%2Fpractical-http-host-header-attacks.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.skeletonscribe.net/2013/05/practical-http-host-header-attacks.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nand, later, his work on ESI server or pingbacks and cache attacks or Pratical Web Cache Poisoning.\u003c/p\u003e\n\n\u003cp\u003eIn 2015, Starting from these past studies, I studied \u003cstrong\u003eApache\u003c/strong\u003e, \u003cstrong\u003eNginx\u003c/strong\u003e, \u003cstrong\u003eVarnish\u003c/strong\u003e source code, I discovered\u003cbr\u003e\nthat a lot of smuggling problems were still present, found new ones based on overflows for the size\u003cbr\u003e\nattributes (previous works were mostly based on doubling length information) and expanded my works on\u003cbr\u003e\n\u003cstrong\u003eGolang\u003c/strong\u003e, \u003cstrong\u003eNodejs\u003c/strong\u003e, \u003cstrong\u003epound\u003c/strong\u003e, \u003cstrong\u003eHaProxy\u003c/strong\u003e, \u003cstrong\u003eJetty\u003c/strong\u003e, \u003cstrong\u003eTomcat\u003c/strong\u003e, \u003cstrong\u003eApache Traffic Server\u003c/strong\u003e...\u003c/p\u003e\n\n\u003cp\u003eI sometime had to push for disclosure of fixed vulnerabilitie (Varnish 3) via bugtraq.\u003cbr\u003e\nBut in most of the case it\u0026#39;s been a matter a patience -- the long time between reports and fixes\u003cbr\u003e\nha also something to deal with lazyness on my side as security is not the biggest part of my job --\u003cbr\u003e\nas most of the fix implies updates on HTTP servers, which is not something as fast as updating a web\u003cbr\u003e\napplication framework. I did not get a security report or a CVE for each reported flaw, especially\u003cbr\u003e\non the first years. Smuggling is sometimes hard to explain (and public disclosure policies\u003cbr\u003e\nare not always liked on HTTP servers dev teams).\u003c/p\u003e\n\n\u003cp\u003eThe main problem of HTTP smuggling issues is that the final exploitation comes from \u003cstrong\u003einteractions between different http parsers\u003c/strong\u003e. If two actors badly interprets the HTTP message or disagree on the right\u003cbr\u003e\ninterpretation then bad things could happen. From the security maintainer point of view it\u0026#39;s sometimes\u003cbr\u003e\neasy to reject the problem as coming from the others.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s also \u003cstrong\u003every important\u003c/strong\u003e to understand that the attacker controls the HTTP message, \u003cstrong\u003ewe do not use HTTP messages from browsers\u003c/strong\u003e, the attacker injects bad HTTP messages onto servers infrastructures, effects on the users comes later, when the real user HTTP messages reach the \u003cem\u003einfected\u003c/em\u003e or  \u003cem\u003eshaken\u003c/em\u003e servers. \u003cem\u003eLike when you do report a smuggling issue on hackerone reports, they prevent reporters that issues about header injection are not always security issues because we cannot control the user headers. That\u0026#39;s a huge misunderstanding of smuggling payloads\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve made some blog posts explaining details (I still have one awaiting vendor authorization) for some\u003cbr\u003e\nof the fixed problems.\u003c/p\u003e\n\n\u003cp\u003eAnd I also made a \u003cstrong\u003eDefcon 24\u003c/strong\u003e presentation on 2016. For someone knowing nothing on smuggling\u003cbr\u003e\nit\u0026#39;s a good starting point (links on next part below).\u003c/p\u003e\n\n\u003cp\u003eNote : my work is usually reported with the name \u0026#39;regilero\u0026#39;, and sometimes \u0026#39;Régis Leroy\u0026#39;.\u003c/p\u003e\n\n\u003ch1 id=\"public-ressources-published\"\u003ePublic ressources published\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e2015 : Nginx Integer truncation : \u003ca title=\"https://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\" href=\"/redirect?url=https%3A%2F%2Fregilero.github.io%2Fenglish%2Fsecurity%2F2015%2F03%2F25%2Fnginx-integer_truncation%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2015 : Checking HTTP Smuggling issues in 2015 – Part1 \u003ca title=\"http://regilero.github.io/security/english/2015/10/04/http_smuggling_in_2015_part_one\" href=\"/redirect?url=http%3A%2F%2Fregilero.github.io%2Fsecurity%2Fenglish%2F2015%2F10%2F04%2Fhttp_smuggling_in_2015_part_one\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://regilero.github.io/security/english/2015/10/04/http_smuggling_in_2015_part_one\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003cli\u003e2016 : Defcon 24 : Hiding Wookiees in HTTP: HTTP smuggling \u003ca title=\"https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf\" href=\"/redirect?url=https%3A%2F%2Fmedia.defcon.org%2FDEF%2520CON%252024%2FDEF%2520CON%252024%2520presentations%2FDEF%2520CON%252024%2520-%2520Regilero-Hiding-Wookiees-In-Http.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Regilero-Hiding-Wookiees-In-Http.pdf\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefcon presentation : \u003ca title=\"https://www.youtube.com/watch?v=dVU9i5PsMPY\" href=\"/redirect?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdVU9i5PsMPY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.youtube.com/watch?v=dVU9i5PsMPY\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eDefcon demos : \u003ca title=\"https://www.youtube.com/watch?v=lY_Mf2Fv7kI\" href=\"/redirect?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DlY_Mf2Fv7kI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.youtube.com/watch?v=lY_Mf2Fv7kI\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e  (which were not available on time due to Linux not supported by Defcon !!)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2018 : HTTP Smuggling, Apsis Pound load balancer : \u003ca title=\"https://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\" href=\"/redirect?url=https%3A%2F%2Fregilero.github.io%2Fenglish%2Fsecurity%2F2018%2F07%2F03%2Fsecurity_pound_http_smuggling%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e2019 : HTTP Smuggling, Jetty : \u003ca title=\"https://regilero.github.io/english/security/2019/04/24/security_jetty_http_smuggling/\" href=\"/redirect?url=https%3A%2F%2Fregilero.github.io%2Fenglish%2Fsecurity%2F2019%2F04%2F24%2Fsecurity_jetty_http_smuggling%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://regilero.github.io/english/security/2019/04/24/security_jetty_http_smuggling/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTools: HTTPWookiee : \u003ca title=\"https://github.com/regilero/HTTPWookiee\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fregilero%2FHTTPWookiee\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/regilero/HTTPWookiee\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e : this contains a small subset of the real tests I perform on HTTP servers.\u003c/p\u003e\n\n\u003ch1 id=\"list-of-cves\"\u003eList of CVEs\u003c/h1\u003e\n\n\u003ch2 id=\"apache-traffic-server\"\u003eApache Traffic Server\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2018-8004\u003c/strong\u003e : space before colon + force connection close on error 400 + duplicate Content-Lenght issues + bad parsing of request size on cache hit\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"jetty\"\u003eJetty\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCVE-2017-7656\u003c/strong\u003e : HTTP/0.9 Request Smuggling\u003cbr\u003e\n\u003ca title=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7656\" href=\"/redirect?url=https%3A%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3DCVE-2017-7656\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7656\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (score 6.5)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCVE-2017-7657\u003c/strong\u003e: Transfer-Encoding Request Smuggling\u003cbr\u003e\n\u003ca title=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7657\" href=\"/redirect?url=https%3A%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3DCVE-2017-7657\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7657\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (score 6.5)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCVE-2017-7658\u003c/strong\u003e: Too Tolerant Parser, Double Content-Length + Transfer-Encoding + Whitespace \u003cbr\u003e\n\u003ca title=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7658\" href=\"/redirect?url=https%3A%2F%2Fcve.mitre.org%2Fcgi-bin%2Fcvename.cgi%3Fname%3DCVE-2017-7658\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7658\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (score 6.5)\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"apache-httpd\"\u003eApache httpd\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca title=\"https://bz.apache.org/bugzilla/show_bug.cgi?id=57832\" href=\"/redirect?url=https%3A%2F%2Fbz.apache.org%2Fbugzilla%2Fshow_bug.cgi%3Fid%3D57832\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bz.apache.org/bugzilla/show_bug.cgi?id=57832\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e : Apache issues on \u0026#39;socket poisoning\u0026#39;, where we could store HTTP responses on\u003cbr\u003e\nthe reverse proxy by sending extra responses, and mix these response with other users later. Not fixed via a CVE because this behavior\u003cbr\u003e\nwas not considered as a real security issue (it\u0026#39;s a consequence of a successful splitting attack on the backend, or of a compromised backend).\u003cbr\u003e\nIf you ask my opinion this is one of the most problematic issue I found on these 5 years. Fixs were included in 2016 on version 2.4.24.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCVE-2016-8743\u003c/strong\u003e : httpd: Apache HTTP Request Parsing Whitespace Defects : problems with CR, FF, VTAB and others strange characeters in parsing HTTP messages\u003cbr\u003e\nespecially the space before colon problem. They were also some HTTP 0.9 downgrades.\u003cbr\u003e\nThis work contributed to the internal dev debates around the HttpProtocolOptions Strict|LenientMethods|Allow0.9 option added on 2.4\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u003cstrong\u003eCVE-2015-3183\u003c/strong\u003e : chunk header attribute truncation (low)\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"facebook-proxygen\"\u003eFacebook Proxygen\u003c/h1\u003e\n\n\u003cp\u003eProxygen is a C++ Open Source library which is the core library for Facebook HTTP related projects\u003c/p\u003e\n\n\u003cp\u003eIn 2016 I reported several smuggling issues (about doubled headers or bad end of line, for example), via the facebook bounty program \u003ccode\u003e#1710044992591113\u003c/code\u003e\u003c/p\u003e\n\n\u003ch1 id=\"apsis-pound\"\u003eApsis Pound\u003c/h1\u003e\n\n\u003cp\u003ePound is an open Source SSL terminator, but the project has not published major changes for a long time, and I experienced difficulties having my reports fixed and delivered to final users.\u003cbr\u003e\nAfter reports on 09-2016 a Version 2.8a fixing the flaws was published on 10-2016 but marked as experimental.\u003cbr\u003e\nDetails of the flaws were published in 07-2018. CVE was reserved by myslef on 2018-01. A version 2.8 was published on 2018-05.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2016-10711\u003c/strong\u003e : Apsis Pound before 2.8a allows request smuggling via crafted headers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDetails of issues (double Content Length, chunk prioriy, headers concatenation vuia NULL character, etc.) are published on my blog post \u003ca title=\"https://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\" href=\"/redirect?url=https%3A%2F%2Fregilero.github.io%2Fenglish%2Fsecurity%2F2018%2F07%2F03%2Fsecurity_pound_http_smuggling%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://regilero.github.io/english/security/2018/07/03/security_pound_http_smuggling/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"nodejs\"\u003eNodejs\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2016-2086\u003c/strong\u003e (but not CVE-2016-2216 from the same release) : support of bad end of lines (especially \\r followed by anything) + double Content Length, + mixed chunked and Content Length + space before colon\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"tomcat\"\u003eTomcat\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2016-6816\u003c/strong\u003e : Tomcat 6,7 \u0026amp; 8: HTTP/0.9 downgrade and various bad characters support\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"varnish\"\u003e Varnish\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eVarnish3 :  \u003cstrong\u003eCVE-2015-8852\u003c/strong\u003e : received after public disclosure : \u003ca title=\"https://seclists.org/oss-sec/2016/q2/95\" href=\"/redirect?url=https%3A%2F%2Fseclists.org%2Foss-sec%2F2016%2Fq2%2F95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://seclists.org/oss-sec/2016/q2/95\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eVarnish4 : 2016 : space before colon fix without CVE : \u003ca title=\"https://github.com/varnishcache/varnish-cache/commit/0577f3fba200e45c05099427eec01610ee061436\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvarnishcache%2Fvarnish-cache%2Fcommit%2F0577f3fba200e45c05099427eec01610ee061436\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/varnishcache/varnish-cache/commit/0577f3fba200e45c05099427eec01610ee061436\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\ncache poisoning of Varnish4 with a golang traefik server as backend was demonstrated to the project maintainer, but the project \u0026#39;does not like CVE\u0026#39;.\u003c/li\u003e\n\u003cli\u003eVarnish 4 : 2016 messsage splitting on bad characters fixed without CVE : \u003ca title=\"https://github.com/varnishcache/varnish-cache/commit/d1eb31109f614976f06dd506a63e0fa21185a89b\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvarnishcache%2Fvarnish-cache%2Fcommit%2Fd1eb31109f614976f06dd506a63e0fa21185a89b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/varnishcache/varnish-cache/commit/d1eb31109f614976f06dd506a63e0fa21185a89b\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHTTP/0.9 support was also removed after my reports in 2015, but without public disclosure of potential abuse.\u003c/p\u003e\n\n\u003ch1 id=\"golang-go-language\"\u003egolang (go language)\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2015-5739\u003c/strong\u003e : \u0026quot;Content Length\u0026quot; magically fixed to \u0026quot;Content-Length.\u0026quot;\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eCVE-2015-5740\u003c/strong\u003e : support of double Content-Length\u003c/li\u003e\n\u003cli\u003e01-2016 : integer overflow on chunk size : \u003ca title=\"https://go-review.googlesource.com/c/go/+/18871\" href=\"/redirect?url=https%3A%2F%2Fgo-review.googlesource.com%2Fc%2Fgo%2F%2B%2F18871\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://go-review.googlesource.com/c/go/+/18871\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e06-2016 : downgrade HTTP/0.9 : \u003ca title=\"https://github.com/golang/go/issues/16197\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F16197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/golang/go/issues/16197\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, no CVE, as described in the commit comment\n\u0026quot;@regilero also mentioned there might be some cache poisoning or request smuggling possibilities here, but I don\u0026#39;t see how. It seems to only affect the person making the bogus request.\u0026quot; (sic)\u003c/li\u003e\n\u003cli\u003e06-2016 : Splitting on space + colon\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"nginx\"\u003eNginx\u003c/h1\u003e\n\n\u003cp\u003eNot the project where I had the most success, I do not think any smuggling issue would be considered a security issue.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eInteger overflow on Content Length : fixed without CVE : \u003ca title=\"http://hg.nginx.org/nginx/rev/15a15f6ae3a2\" href=\"/redirect?url=http%3A%2F%2Fhg.nginx.org%2Fnginx%2Frev%2F15a15f6ae3a2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://hg.nginx.org/nginx/rev/15a15f6ae3a2\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e after a report and a proposed patch (not as good as the final one)\nthe security team \u0026#39;don\u0026#39;t consider this to be something serious from security point of view and have no plans for CVE and/or security advisories\u0026#39;.\nI made examples of exploitation at \u003ca title=\"https://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\" href=\"/redirect?url=https%3A%2F%2Fregilero.github.io%2Fenglish%2Fsecurity%2F2015%2F03%2F25%2Fnginx-integer_truncation%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://regilero.github.io/english/security/2015/03/25/nginx-integer_truncation/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ca title=\"https://trac.nginx.org/nginx/ticket/762\" href=\"/redirect?url=https%3A%2F%2Ftrac.nginx.org%2Fnginx%2Fticket%2F762\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://trac.nginx.org/nginx/ticket/762\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e : 0.9 downgrade: protocol version overflow; HTTP/65536.8 or HTTP/65536.9 treated as a 0.9 request\nrejected as a security issue, classified as minor issue, fixed 1 year and 6 month after public report (11-2016). This was in my mind quite huge.\u003c/li\u003e\n\u003cli\u003e\n\u003ca title=\"https://trac.nginx.org/nginx/ticket/1014\" href=\"/redirect?url=https%3A%2F%2Ftrac.nginx.org%2Fnginx%2Fticket%2F1014\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://trac.nginx.org/nginx/ticket/1014\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e : wontfix : I\u0026#39;d like an error 400 instead of silently ignoring a bad header, no success\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"openbsd\"\u003eOpenBSD\u003c/h1\u003e\n\n\u003cp\u003eIn 2015 the OpenBSD Http server was very new, crashing on 0.9 requests, I reported some smuggling issues (bad end of line, double Content-Length) which were fixed later.\u003c/p\u003e\n\n\u003ch1 id=\"haproxy\"\u003eHaProxy\u003c/h1\u003e\n\n\u003cp\u003eHaProxy was transmitting some of the very bad request I use to perform splitting attacks on backends (something which is not a security issue, but which allows security issues).\u003cbr\u003e\nI had various discussions with Willy Tarreau which leaded to some improvments in HaProxy, blocking bad requests before any less robust HTTP parser could read it.\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ecommit 987aa383c85525b163267110a4bcff4dff3849b8 : BUG/MEDIUM: http: remove content-length from chunked messages\u003c/li\u003e\n\u003cli\u003ecommit e1ce063c12bf22b99e6caa6a55484f1b9a27e113 : MEDIUM: http: disable support for HTTP/0.9 by default\u003c/li\u003e\n\u003cli\u003ecommit b053c03d6f05c8ddf264de78fe321d8455358690 : MEDIUM: http: restrict the HTTP version token to 1 digit as per RFC7230\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003cp\u003eI think this work allows for more robusts HTTP servers. Some of the very old issues already reported in the 2005 era reports, like double Content Length,\u003cbr\u003e\nwere still widely supported in 2015 and are now harder to find on most open source http servers. I think I contributed greatly to enforce the RFC 7230\u003cbr\u003e\nanti-smuggling policies (chunk priority, no double content-length) and for the removal of old-rfc dangerous features (like the continuation of headers\u003cbr\u003e\nwith the space prefix, or the HTTP/0.9 support). For this I just had to read the 2005 studies and the RFC, tests the servers, and try to explain\u003cbr\u003e\nexploitations.\u003c/p\u003e\n\n\u003cp\u003eA big part of my added work and reports was studying effects of control characters (\\r, \\n, NULL, vtab, htab, bell, backspace \u0026amp; formfeed) on various parts of the messages.\u003cbr\u003e\nWith some real good success on vartious project for NULL or for bad enf of lines.\u003cbr\u003e\nAnother big thing was studying the HTTP/0.9 downgrade exploitations (like extracting a valid HTTP message stored in an image from a partial 0.9 response) and\u003cbr\u003e\nfinding new 0.9 downgrade vectors.\u003cbr\u003e\nFinally another part of this work was finding new attack vectors (truncation of size, overflows, concatenation of strings, effects of cache hit on header parsing, etc).\u003c/p\u003e\n\n\u003cp\u003eThe last big part of my work was spending a long time explaining the potential attacks to maintainers. If you need hints from people understanding the smuggling attacks\u003cbr\u003e\nand the implications of the fixed flaws, usually better than the project maintainers, I could give you some names. If you need samples of reports or detailled lab exploitations I could also deliver.\u003c/p\u003e\n\n\u003cp\u003eHTTP/2 or TLS are not preventing bad effects of HTTP/1.1 bad parsers (they embed HTTP/1.1 parsers in another layer), nor they could prevent effects of an HTTP/0.9 downgrades.\u003cbr\u003e\nEvery HTTP actors which enforces a more robust protocol parsing prevents chaining effects of smuggling attacks.\u003cbr\u003e\nSo I hope the work I made on the subject had real effects on the ecosystem.\u003c/p\u003e\n\n\u003cp\u003eSome of these CVE were already elected for bounties:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eVerizon: undisclosed (#433076): 2 700 USD\u003c/li\u003e\n\u003cli\u003eApache httpd CVE-2016-8743 : \u003ca title=\"https://hackerone.com/reports/244459\" href=\"https://hackerone.com/reports/244459\"\u003ehttps://hackerone.com/reports/244459\u003c/a\u003e : 1500 USD\u003c/li\u003e\n\u003cli\u003eFaceBook Proxygen: (bugcrowd) 1000 USD\u003c/li\u003e\n\u003cli\u003eGolang CVE-2015-5739 \u0026amp;CVE-2015-5740 : Google Security Bounty program : 1337 USD\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eFor the final user the consequences may be huge:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eCache poisoning : so effects starts at Deny of Service, but may go to code injection (like replacing\nthe code of a well known js library)\u003c/li\u003e\n\u003cli\u003eCredentials hijacking : one of the smuggling exploitation is storing unterminated requests and waiting\nfor other users requests to terminate the pending requests, mixing the users credentials on something\nthey did not requested (hijacking users credentials). But this cannot work on applications using csrf protections.\u003c/li\u003e\n\u003cli\u003ea lot of Deny of Service attacks, one of the attacks allows mixing requests and responses of\ndifferent users, so you have documents requested by others, and they have yours.\u003c/li\u003e\n\u003cli\u003esecurity filter bypass: here the public effect is less important, the attacker use smuggling to\nremove some of the security layers\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA massive scale smuggling attack on a big actor (a cloud provider for example) could make a huge DOS.\u003cbr\u003e\nA more realist usage with a public consequence is a targeted cache poisoning, to inject an XSS.\u003cbr\u003e\nAn advanced usage is the filter bypass usage, where the smuggled requests is usually not even logged. A prefect way of sending requests without notices, so a nice tool for SSRF exploits.\u003c/p\u003e\n","weakness":{"id":86,"name":"HTTP Request Smuggling"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T23:44:16.816Z","allow_singular_disclosure_after":-35621359.15475085,"singular_disclosure_allowed":true,"vote_count":16,"voters":["ikuamike","base_64","brodie_codie","0xatul","7yr","omespino","klau5","sohaip_hackerdz","armansameer","creditzcjexe","and 6 more..."],"severity":{"rating":"critical","score":9.8,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":5363167,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @regilero - Thanks for the submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share. ","markdown_message":"\u003cp\u003eHey \u003ca href=\"/regilero\"\u003e@regilero\u003c/a\u003e - Thanks for the submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-18T17:33:57.849Z","updated_at":"2019-07-18T17:33:57.849Z","actor":{"username":"tuxedo","cleared":false,"url":"/tuxedo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/9G6pgB95of3ikt3prqQunAfD/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":5525613,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"A few news:\n\n* I havecurrently some activity on Squid on this subject. Soon to be released I hope.\n* there is a big Defcon+Blackhat conference on HTTP Smuggling by James Kettle, with a new report \"HTTP Desync Attacks: Request Smuggling Reborn\" https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn ","markdown_message":"\u003cp\u003eA few news:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eI havecurrently some activity on Squid on this subject. Soon to be released I hope.\u003c/li\u003e\n\u003cli\u003ethere is a big Defcon+Blackhat conference on HTTP Smuggling by James Kettle, with a new report \u0026quot;HTTP Desync Attacks: Request Smuggling Reborn\u0026quot; \u003ca title=\"https://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn\" href=\"/redirect?url=https%3A%2F%2Fportswigger.net%2Fblog%2Fhttp-desync-attacks-request-smuggling-reborn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://portswigger.net/blog/http-desync-attacks-request-smuggling-reborn\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2019-08-08T10:21:32.960Z","updated_at":"2019-08-08T10:21:32.960Z","actor":{"username":"regilero","cleared":false,"url":"/regilero","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5678857,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-27T21:36:44.331Z","updated_at":"2019-08-27T21:36:44.331Z","cve_ids":["CVE-2017-7658"],"actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":5678862,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-27T21:37:25.672Z","updated_at":"2019-08-27T21:37:25.672Z","additional_data":{"old_severity":null,"new_severity":"Critical (9.8)","old_severity_id":null,"new_severity_id":503505},"actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":5678872,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-08-27T21:41:00.159Z","updated_at":"2019-08-27T21:41:00.159Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":5678873,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello @regilero,\n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@antenna ","markdown_message":"\u003cp\u003eHello \u003ca href=\"/regilero\"\u003e@regilero\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/antenna\"\u003e@antenna\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-27T21:41:09.223Z","updated_at":"2019-08-27T21:41:09.223Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":5678881,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Part of the IBB's charter (https://internetbugbounty.org/charter.html) includes \"Mind the Gap\":\n\n\u003e In order to most efficiently allocate funds, the Panel should be cognizant of what software is already covered by other efforts, and how. For example, if another organization rewards for providing patches to open source projects or funds secure development, the IBB should not duplicate this effort, but instead serve in a complementary fashion by rewarding researchers that identify and disclose vulnerabilities to the maintainers. The IBB should proactively identify software that has a gap in rewards for vulnerability research; in conjunction with other criteria, this is a good indicator that the software should be moved into scope.\n\nAs this bug was bountied via various companies, our Mind the Gap stipulation may cause this to not be awarded.\n\nWe'll be back in touch once we discuss this among the panel.","markdown_message":"\u003cp\u003ePart of the IBB\u0026#39;s charter (\u003ca title=\"https://internetbugbounty.org/charter.html\" href=\"/redirect?url=https%3A%2F%2Finternetbugbounty.org%2Fcharter.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://internetbugbounty.org/charter.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) includes \u0026quot;Mind the Gap\u0026quot;:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn order to most efficiently allocate funds, the Panel should be cognizant of what software is already covered by other efforts, and how. For example, if another organization rewards for providing patches to open source projects or funds secure development, the IBB should not duplicate this effort, but instead serve in a complementary fashion by rewarding researchers that identify and disclose vulnerabilities to the maintainers. The IBB should proactively identify software that has a gap in rewards for vulnerability research; in conjunction with other criteria, this is a good indicator that the software should be moved into scope.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs this bug was bountied via various companies, our Mind the Gap stipulation may cause this to not be awarded.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ll be back in touch once we discuss this among the panel.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-27T21:42:28.034Z","updated_at":"2019-08-27T21:42:28.034Z","actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5715673,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I had some bounties, on seome of the issues, that's right. But the main part of my work on this subject was mostly trying to convince Open Source project to fix the issues even if the consequences are not directly tied to their project. This field problematic is that real problems occurs when different actors react in different ways on the same messages list. And this is usually not a security problem in a mono-project point of view. That's more a systemic security problem.\nSo I have the hope that a project looking at the \"big picture\" can see how fixing details in various projects and even just making developers aware of interactions consequences has some value for the ecosystem.","markdown_message":"\u003cp\u003eI had some bounties, on seome of the issues, that\u0026#39;s right. But the main part of my work on this subject was mostly trying to convince Open Source project to fix the issues even if the consequences are not directly tied to their project. This field problematic is that real problems occurs when different actors react in different ways on the same messages list. And this is usually not a security problem in a mono-project point of view. That\u0026#39;s more a systemic security problem.\u003cbr\u003e\nSo I have the hope that a project looking at the \u0026quot;big picture\u0026quot; can see how fixing details in various projects and even just making developers aware of interactions consequences has some value for the ecosystem.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-03T07:21:42.645Z","updated_at":"2019-09-03T07:21:42.645Z","actor":{"username":"regilero","cleared":false,"url":"/regilero","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5775161,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"Hi @regilero,\n\nAfter discussion with the IBB Panel, we've found that our \"Mind the Gap\" qualification applies here, so unfortunately, we won't be able to provide a bounty.\n\nThank you for all your work, and thank you for helping make the Internet safer!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/regilero\"\u003e@regilero\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eAfter discussion with the IBB Panel, we\u0026#39;ve found that our \u0026quot;Mind the Gap\u0026quot; qualification applies here, so unfortunately, we won\u0026#39;t be able to provide a bounty.\u003c/p\u003e\n\n\u003cp\u003eThank you for all your work, and thank you for helping make the Internet safer!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-10T22:44:48.002Z","updated_at":"2019-09-10T22:44:48.002Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5775163,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T22:44:54.631Z","updated_at":"2019-09-10T22:44:54.631Z","actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"regilero","url":"/regilero"},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6028935,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T23:44:16.732Z","updated_at":"2019-10-13T23:44:16.732Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6030820,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"References to Squid should stay hidden for now. Or hide the comment from Aug 8th.","markdown_message":"\u003cp\u003eReferences to Squid should stay hidden for now. Or hide the comment from Aug 8th.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-14T07:37:42.840Z","updated_at":"2019-10-14T07:37:42.840Z","actor":{"username":"regilero","cleared":false,"url":"/regilero","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6293033,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T23:44:23.484Z","updated_at":"2019-11-12T23:44:23.484Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}