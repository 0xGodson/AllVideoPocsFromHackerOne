{"id":874778,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NzQ3Nzg=","url":"https://hackerone.com/reports/874778","title":"Partial password leak over DNS on HTTP redirect","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2020-05-15T09:14:00.772Z","submitted_at":"2020-05-15T09:14:00.772Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mszpl","url":"/mszpl","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":35663,"url":"https://hackerone.com/curl","handle":"curl","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"curl","twitter_handle":"","website":"https://curl.se","about":"cURL is a computer software project providing a library and command-line tool for transferring data using various protocols."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-8169"],"singular_disclosure_disabled":false,"disclosed_at":"2020-12-05T08:32:05.899Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-11-05T08:32:04.219Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\nFrom version 7.62 curl and curllib leaks part of user credentials in the plain text DNS request. This happens if the server makes redirect, both 301 and 302 to a relative path (eg header 'Location: /login'). It is NOT an issue in case of absolute redirection (eg header 'Location: https://domain.tld/login').\nI was able to make curl/curlib to send a password that started with @ but I believe that more abuse is possible with this attack. \nWhat makes is worst is that for eg occasionally run/daemon scripts with curl and authorization credentials this can be triggered by a remote server by switching between absolute/relative without any change on client-side.\nUser secrets are sent in plain text and anybody in the middle can record them. User secrets are sent to the DNS server and can be recorded there.\n\n## Steps To Reproduce:\n\n  1. Use curl \u003e 7.61 (tested on all from 7.62 to 7.70 and I was able to exploit it)\n  1. Find a server with relative redirection (eg https://mareksz.gq/301 or https://mareksz.gq/302)\n  1. Run 'curl https://mareksz.gq/302 -v -L -u saduser:@S3cr3t'\n\n## Supporting Material/References:\nLogs from running above steps:\n\n/ $ curl -V\ncurl 7.66.0-DEV (x86_64-pc-linux-gnu) libcurl/7.66.0-DEV OpenSSL/1.1.1d zlib/1.2.11 nghttp2/1.39.2\nRelease-Date: [unreleased]\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\nFeatures: AsynchDNS HTTP2 HTTPS-proxy IPv6 Largefile libz NTLM NTLM_WB SSL TLS-SRP UnixSockets\n/ $ curl https://mareksz.gq/302 -v -L -u saduser:@S3cr3t\n*   Trying 194.182.85.202:443...\n* TCP_NODELAY set\n* Connected to mareksz.gq (194.182.85.202) port 443 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: none\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\n* ALPN, server accepted to use http/1.1\n* Server certificate:\n*  subject: CN=mareksz.gq\n*  start date: Apr 27 10:32:33 2020 GMT\n*  expire date: Jul 26 10:32:33 2020 GMT\n*  subjectAltName: host \"mareksz.gq\" matched cert's \"mareksz.gq\"\n*  issuer: C=US; O=Let's Encrypt; CN=Let's Encrypt Authority X3\n*  SSL certificate verify ok.\n* Server auth using Basic with user 'saduser'\n\u003e GET /302 HTTP/1.1\n\u003e Host: mareksz.gq\n\u003e Authorization: Basic c2FkdXNlcjpAUzNjcjN0\n\u003e User-Agent: curl/7.66.0-DEV\n\u003e Accept: */*\n\u003e\n* Mark bundle as not supporting multiuse\n\u003c HTTP/1.1 302 Moved Temporarily\n\u003c Server: nginx\n\u003c Date: Fri, 15 May 2020 08:32:59 GMT\n\u003c Content-Type: text/html\n\u003c Content-Length: 138\n\u003c Connection: keep-alive\n\u003c Location: /goto302\n\u003c\n* Ignoring the response-body\n* Connection #0 to host mareksz.gq left intact\n* Issue another request to this URL: 'https://saduser@S3cr3t@mareksz.gq/goto302'\n* Could not resolve host: S3cr3t@mareksz.gq\n* Closing connection 1\ncurl: (6) Could not resolve host: S3cr3t@mareksz.gq\n\n\nTrafic pcap'ed:\n\n/ $ tcpdump 'udp' -vv\nX.X.X.X:X IP (tos 0x0, ttl 255, id 57291, offset 0, flags [none], proto UDP (17), length 63)\n    _ \u003e _ : [udp sum ok] 27230+ A? S3cr3t@mareksz.gq. (35)\nX.X.X.X:X IP (tos 0x0, ttl 255, id 55686, offset 0, flags [none], proto UDP (17), length 63)\n    _ \u003e _ : [udp sum ok] 51727+ AAAA? S3cr3t@mareksz.gq. (35)\nX.X.X.X:X IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto UDP (17), length 136)\n    _ \u003e _ : [udp sum ok] 27230 NXDomain q: A? S3cr3t@mareksz.gq. 0/1/0 ns: gq. SOA a.ns.gq. info.equatorialguineadomains.com. 1589532137 10800 3600 604800 5 (108)\nX.X.X.X:X IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto UDP (17), length 136)\n    _ \u003e _ : [udp sum ok] 51727 NXDomain q: AAAA? S3cr3t@mareksz.gq. 0/1/0 ns: gq. SOA a.ns.gq. info.equatorialguineadomains.com. 1589532235 10800 3600 604800 5 (108)\n\n  * [attachment / reference]\nAttached Wireshark screenshot with leaked creds.\n\n## Impact\n\nI believe it is rather high. Third-party have control over it part of your credentials are being sent over the network in plain text to the DNS server.","vulnerability_information_html":"\u003ch2 id=\"summary\"\u003eSummary:\u003c/h2\u003e\n\n\u003cp\u003eFrom version 7.62 curl and curllib leaks part of user credentials in the plain text DNS request. This happens if the server makes redirect, both 301 and 302 to a relative path (eg header \u0026#39;Location: /login\u0026#39;). It is NOT an issue in case of absolute redirection (eg header \u0026#39;Location: \u003ca title=\"https://domain.tld/login\u0026#39;\" href=\"/redirect?url=https%3A%2F%2Fdomain.tld%2Flogin%27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://domain.tld/login\u0026#39;\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).\u003cbr\u003e\nI was able to make curl/curlib to send a password that started with @ but I believe that more abuse is possible with this attack. \u003cbr\u003e\nWhat makes is worst is that for eg occasionally run/daemon scripts with curl and authorization credentials this can be triggered by a remote server by switching between absolute/relative without any change on client-side.\u003cbr\u003e\nUser secrets are sent in plain text and anybody in the middle can record them. User secrets are sent to the DNS server and can be recorded there.\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eUse curl \u0026gt; 7.61 (tested on all from 7.62 to 7.70 and I was able to exploit it)\u003c/li\u003e\n\u003cli\u003eFind a server with relative redirection (eg \u003ca title=\"https://mareksz.gq/301\" href=\"/redirect?url=https%3A%2F%2Fmareksz.gq%2F301\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://mareksz.gq/301\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e or \u003ca title=\"https://mareksz.gq/302\" href=\"/redirect?url=https%3A%2F%2Fmareksz.gq%2F302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://mareksz.gq/302\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eRun \u0026#39;curl \u003ca title=\"https://mareksz.gq/302\" href=\"/redirect?url=https%3A%2F%2Fmareksz.gq%2F302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://mareksz.gq/302\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e -v -L -u saduser:@S3cr3t\u0026#39;\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cp\u003eLogs from running above steps:\u003c/p\u003e\n\n\u003cp\u003e/ $ curl -V\u003cbr\u003e\ncurl 7.66.0-DEV (x86_64-pc-linux-gnu) libcurl/7.66.0-DEV OpenSSL/1.1.1d zlib/1.2.11 nghttp2/1.39.2\u003cbr\u003e\nRelease-Date: [unreleased]\u003cbr\u003e\nProtocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\u003cbr\u003e\nFeatures: AsynchDNS HTTP2 HTTPS-proxy IPv6 Largefile libz NTLM NTLM_WB SSL TLS-SRP UnixSockets\u003cbr\u003e\n/ $ curl \u003ca title=\"https://mareksz.gq/302\" href=\"/redirect?url=https%3A%2F%2Fmareksz.gq%2F302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://mareksz.gq/302\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e -v -L -u saduser:@S3cr3t\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e  Trying 194.182.85.202:443...\u003c/li\u003e\n\u003cli\u003eTCP_NODELAY set\u003c/li\u003e\n\u003cli\u003eConnected to mareksz.gq (194.182.85.202) port 443 (#0)\u003c/li\u003e\n\u003cli\u003eALPN, offering h2\u003c/li\u003e\n\u003cli\u003eALPN, offering http/1.1\u003c/li\u003e\n\u003cli\u003esuccessfully set certificate verify locations:\u003c/li\u003e\n\u003cli\u003e  CAfile: /etc/ssl/certs/ca-certificates.crt\nCApath: none\u003c/li\u003e\n\u003cli\u003eTLSv1.3 (OUT), TLS handshake, Client hello (1):\u003c/li\u003e\n\u003cli\u003eTLSv1.3 (IN), TLS handshake, Server hello (2):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (IN), TLS handshake, Certificate (11):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (IN), TLS handshake, Server key exchange (12):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (IN), TLS handshake, Server finished (14):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (OUT), TLS handshake, Client key exchange (16):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (OUT), TLS handshake, Finished (20):\u003c/li\u003e\n\u003cli\u003eTLSv1.2 (IN), TLS handshake, Finished (20):\u003c/li\u003e\n\u003cli\u003eSSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\u003c/li\u003e\n\u003cli\u003eALPN, server accepted to use http/1.1\u003c/li\u003e\n\u003cli\u003eServer certificate:\u003c/li\u003e\n\u003cli\u003e subject: CN=mareksz.gq\u003c/li\u003e\n\u003cli\u003e start date: Apr 27 10:32:33 2020 GMT\u003c/li\u003e\n\u003cli\u003e expire date: Jul 26 10:32:33 2020 GMT\u003c/li\u003e\n\u003cli\u003e subjectAltName: host \u0026quot;mareksz.gq\u0026quot; matched cert\u0026#39;s \u0026quot;mareksz.gq\u0026quot;\u003c/li\u003e\n\u003cli\u003e issuer: C=US; O=Let\u0026#39;s Encrypt; CN=Let\u0026#39;s Encrypt Authority X3\u003c/li\u003e\n\u003cli\u003e SSL certificate verify ok.\u003c/li\u003e\n\u003cli\u003eServer auth using Basic with user \u0026#39;saduser\u0026#39;\n\u0026gt; GET /302 HTTP/1.1\n\u0026gt; Host: mareksz.gq\n\u0026gt; Authorization: Basic c2FkdXNlcjpAUzNjcjN0\n\u0026gt; User-Agent: curl/7.66.0-DEV\n\u0026gt; Accept: \u003cem\u003e/\u003c/em\u003e\n\u0026gt;\u003c/li\u003e\n\u003cli\u003eMark bundle as not supporting multiuse\n\u0026lt; HTTP/1.1 302 Moved Temporarily\n\u0026lt; Server: nginx\n\u0026lt; Date: Fri, 15 May 2020 08:32:59 GMT\n\u0026lt; Content-Type: text/html\n\u0026lt; Content-Length: 138\n\u0026lt; Connection: keep-alive\n\u0026lt; Location: /goto302\n\u0026lt;\u003c/li\u003e\n\u003cli\u003eIgnoring the response-body\u003c/li\u003e\n\u003cli\u003eConnection #0 to host mareksz.gq left intact\u003c/li\u003e\n\u003cli\u003eIssue another request to this URL: \u0026#39;\u003ca title=\"https://saduser%40S3cr3t@mareksz.gq/goto302\" href=\"/redirect?url=https%3A%2F%2Fsaduser%2540S3cr3t%40mareksz.gq%2Fgoto302\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://saduser%40S3cr3t@mareksz.gq/goto302\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026#39;\u003c/li\u003e\n\u003cli\u003eCould not resolve host: \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eClosing connection 1\ncurl: (6) Could not resolve host: \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTrafic pcap\u0026#39;ed:\u003c/p\u003e\n\n\u003cp\u003e/ $ tcpdump \u0026#39;udp\u0026#39; -vv\u003cbr\u003e\nX.X.X.X:X IP (tos 0x0, ttl 255, id 57291, offset 0, flags [none], proto UDP (17), length 63)\u003cbr\u003e\n    _ \u0026gt; _ : [udp sum ok] 27230+ A? \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e. (35)\u003cbr\u003e\nX.X.X.X:X IP (tos 0x0, ttl 255, id 55686, offset 0, flags [none], proto UDP (17), length 63)\u003cbr\u003e\n    _ \u0026gt; _ : [udp sum ok] 51727+ AAAA? \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e. (35)\u003cbr\u003e\nX.X.X.X:X IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto UDP (17), length 136)\u003cbr\u003e\n    _ \u0026gt; _ : [udp sum ok] 27230 NXDomain q: A? \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e. 0/1/0 ns: gq. SOA a.ns.gq. info.equatorialguineadomains.com. 1589532137 10800 3600 604800 5 (108)\u003cbr\u003e\nX.X.X.X:X IP (tos 0x0, ttl 64, id 0, offset 0, flags [DF], proto UDP (17), length 136)\u003cbr\u003e\n    _ \u0026gt; _ : [udp sum ok] 51727 NXDomain q: AAAA? \u003ca title=\"S3cr3t@mareksz.gq\" href=\"mailto:S3cr3t@mareksz.gq\" rel=\"nofollow noopener noreferrer\"\u003eS3cr3t@mareksz.gq\u003c/a\u003e. 0/1/0 ns: gq. SOA a.ns.gq. info.equatorialguineadomains.com. 1589532235 10800 3600 604800 5 (108)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e[attachment / reference]\nAttached Wireshark screenshot with leaked creds.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eI believe it is rather high. Third-party have control over it part of your credentials are being sent over the network in plain text to the DNS server.\u003c/p\u003e\n","bounty_amount":"400.0","formatted_bounty":"$400","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":829171,"file_name":"curl_leaks_secret_dns.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/WqJohyQxHewo4RL6UniGRvks?response-content-disposition=attachment%3B%20filename%3D%22curl_leaks_secret_dns.png%22%3B%20filename%2A%3DUTF-8%27%27curl_leaks_secret_dns.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRAVCXZTG%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070420Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCDC1SbghdXLcy9ot06DANg74r5EiCC3XZ9CQGAdi%2BmbgIhALBQDzrYaszHyI6V41WOAEV%2Fa%2FxVgBgdKj18DrlZlW1RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgxgXaQ5tEaz15kO93YqkQPMn8lqJM5b%2F2UF4vgQzRZODqw%2FjPEjzpD61mE7LpyVCQKuiixef4EDRyTs5YaVZ%2BSeI6BYbm829Q00SoHZnAn9tGULy0VEKf9Lyq8uAs7eAOStN9gpb9p9GsQ2vxpwHzC%2F%2FjQuXDX8lTd6eIkj3L4VFhPdt4MGf%2FwzTbeirX69pmEGa7VpqUl%2BzQFSRmiyNkLz0iIRuGyUxcUtEFnAa4dcYImN8d5Xmzj3VKwszN5CZZekG0f6wVgiDQt2PU05Sm4mXV8F7Zsd2gCjxy0LByxZo8wVIQRR7XpJjeAXw7Y%2BrcntwG4VG16O2JBB13PV47avtAluDB7xEmxCn7fC%2B0gCkgtqX5FvemeTqZkzDj%2BNAE87%2BEwY1GKygDSgK%2BDrUlCwwYU%2FB1k9vGEpOa46oz6dP6MWDopeRWpW%2Fh2qwIShnMsIk%2BmfjH9n%2FnOGNwWwQp93Hlr6OPw%2F8tYLstkLZrNH3jzkkWMoWcsrv71HzpJiG6RZtm22uXPNaQTbmOYqMX%2BCryjdGcVIctKAsj5EliP0zjCb4Kr%2FBTrqAW3ufL%2FR%2FpkxPRO%2BUhyyvDPzgPmCSraR2g7lBy3KlX6LZ3JukP4SRvLInSvSu0w4T7VQh0EVNyALDb1flUgqzAKwYanyEiiHqHeCF6g4fX5%2Fuz8knjUQsnKmjOQfBtyaMe0qlW%2BHWCfwsR%2Fh2SNKi%2BVT7%2FCT2Ct%2Fia0RQuGDOtTr7KGlRg89Qz6oCZtR4isqOEM5yt6saYHHNTOAelO07weXRwFwKuKqmrZYMA5sa9p7XKqJAwmjMWMyFxAcEDHOluiNcMsa9JfilicFsycW11kxP5ZdIbUgRRdK1IdlTu3Ykx5X3L1RmsfWjw%3D%3D\u0026X-Amz-Signature=fff3be2041b5f954240d8f3d785f4d240b81d7d5d053979c83610aef71922e8f","file_size":85045,"type":"image/png"}],"allow_singular_disclosure_at":"2020-12-05T08:32:04.347Z","allow_singular_disclosure_after":-2068336.46986479,"singular_disclosure_allowed":true,"vote_count":19,"voters":["jub0bs","sw33tlie","kapkan","prophet","mygf","mrsinister15","h4x0r-dz","darkram_","supersudo","wstange","and 9 more..."],"severity":{"rating":"medium","score":5.5,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"high","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"low","availability":"low"}},"structured_scope":{"databaseId":18844,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/curl/curl","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":8010584,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I would like to add to the \"Impact\" part that libcurl also contains this issue. So ALL projects that are using libcurl for networking will also have this security issue. With libcurl \u003e 7.61 (tested on 7.62 / 7.66 / and latest 7.70).\n\nExample code that compiled with libcurl \u003e 7.61 leaks user credentials via DNS request:\n\n #include \u003ccurl/curl.h\u003e\n\nint main(int argc, char *argv[])\n{\n  CURL *curl = curl_easy_init();\n  curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n  curl_easy_setopt(curl, CURLOPT_USERPWD, \"saduser:@S3cr3t\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"https://mareksz.gq/302\");\n  int result = curl_easy_perform(curl);\n  return result;\n}","markdown_message":"\u003cp\u003eI would like to add to the \u0026quot;Impact\u0026quot; part that libcurl also contains this issue. So ALL projects that are using libcurl for networking will also have this security issue. With libcurl \u0026gt; 7.61 (tested on 7.62 / 7.66 / and latest 7.70).\u003c/p\u003e\n\n\u003cp\u003eExample code that compiled with libcurl \u0026gt; 7.61 leaks user credentials via DNS request:\u003c/p\u003e\n\n\u003cp\u003e#include \u0026lt;curl/curl.h\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eint main(int argc, char *argv[])\u003cbr\u003e\n{\u003cbr\u003e\n  CURL *curl = curl_easy_init();\u003cbr\u003e\n  curl_easy_setopt(curl, CURLOPT_VERBOSE, 1);\u003cbr\u003e\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\u003cbr\u003e\n  curl_easy_setopt(curl, CURLOPT_USERPWD, \u0026quot;saduser:@S3cr3t\u0026quot;);\u003cbr\u003e\n  curl_easy_setopt(curl, CURLOPT_URL, \u0026quot;\u003ca title=\"https://mareksz.gq/302%22\" href=\"/redirect?url=https%3A%2F%2Fmareksz.gq%2F302%2522\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://mareksz.gq/302%22\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e);\u003cbr\u003e\n  int result = curl_easy_perform(curl);\u003cbr\u003e\n  return result;\u003cbr\u003e\n}\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-15T12:25:47.773Z","updated_at":"2020-05-15T12:25:47.773Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8013901,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you. I'm pretty sure this issue has been identified and fixed already in curl: https://github.com/curl/curl/commit/600a8cded447cd7118ed50142c576567c0cf5158 I'll investigate closer in a bit.","markdown_message":"\u003cp\u003eThank you. I\u0026#39;m pretty sure this issue has been identified and fixed already in curl: \u003ca title=\"https://github.com/curl/curl/commit/600a8cded447cd7118ed50142c576567c0cf5158\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl%2Fcommit%2F600a8cded447cd7118ed50142c576567c0cf5158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/curl/curl/commit/600a8cded447cd7118ed50142c576567c0cf5158\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e I\u0026#39;ll investigate closer in a bit.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-15T17:29:26.707Z","updated_at":"2020-05-15T17:29:26.707Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8014452,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you, for a quick response. Retested from the master branch, and (sadly) yes - looks like it is fixed. Creds are not sent any more with DNS resolution.\nBut shouldn't we issue CVE for 7.61 - 7.70 (if there isn't one already reported/made)?\n\nHave a nice weekend! ;)","markdown_message":"\u003cp\u003eThank you, for a quick response. Retested from the master branch, and (sadly) yes - looks like it is fixed. Creds are not sent any more with DNS resolution.\u003cbr\u003e\nBut shouldn\u0026#39;t we issue CVE for 7.61 - 7.70 (if there isn\u0026#39;t one already reported/made)?\u003c/p\u003e\n\n\u003cp\u003eHave a nice weekend! ;)\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-15T18:15:14.313Z","updated_at":"2020-05-15T18:15:14.313Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8017526,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is what happened before the fix:\n\nThe user credentials set with `CURLOPT_USERPWD` updated the URL object, **forgetting to ask for URL encoding**. When a *relative* HTTP redirect is about to get handled, libcurl will first basically generate a full absolute URL and then \"apply\" the redirect on that.\n\nIt would then make the full URL `http://[user]:[password]@host/path` and for this bug, lets say we have user `user` and password is `@password`:\n\n`http://user:@password@example.com/path`\n\nApplying a relative redirect only changes the path part, so it ends up like:\n\n`http://user:@password@example.com/redir/newpath`\n\nThen libcurl parses the full new URL back into pieces again, and due to the wrong encoding from before, it now thinks the password is zero bytes long and that `password@example.com` is actually the host name it should use...\n\nSome observations:\n1. it doesn't leak the entire password here, just the part on the right sight of the `@` sign, and there's no additional clues how much of the password that is missing\n2. It doesn't resolve the same domain anymore so this bad DNS resolve will not end up in the DNS server of `example.com` (which presumably hosted the redirect and wanted the credentials). Not sure it matters much, but it seems hard for a remote \"player\" to take advantage of this flaw.\n3. Since DNS is still usually clear-text, sitting on the same local network as this libcurl-using app will be enough to potentially detect partial passwords.\n4. If DoH is used by libcurl, this flaw won't leak a clear-text resolve but will instead ask the DoH server to resolve the wrong name over HTTPS.\n5. Is `@` actually legal in host name or should we error in the parser there?\n6. I clearly didn't at all consider the security implications when I fixed this bug!\n7. Due to the potential leakage of sensitive data I think we should make a CVE out of this.","markdown_message":"\u003cp\u003eThis is what happened before the fix:\u003c/p\u003e\n\n\u003cp\u003eThe user credentials set with \u003ccode\u003eCURLOPT_USERPWD\u003c/code\u003e updated the URL object, \u003cstrong\u003eforgetting to ask for URL encoding\u003c/strong\u003e. When a \u003cem\u003erelative\u003c/em\u003e HTTP redirect is about to get handled, libcurl will first basically generate a full absolute URL and then \u0026quot;apply\u0026quot; the redirect on that.\u003c/p\u003e\n\n\u003cp\u003eIt would then make the full URL \u003ccode\u003ehttp://[user]:[password]@host/path\u003c/code\u003e and for this bug, lets say we have user \u003ccode\u003euser\u003c/code\u003e and password is \u003ccode\u003e@password\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://user:@password@example.com/path\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eApplying a relative redirect only changes the path part, so it ends up like:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttp://user:@password@example.com/redir/newpath\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThen libcurl parses the full new URL back into pieces again, and due to the wrong encoding from before, it now thinks the password is zero bytes long and that \u003ccode\u003epassword@example.com\u003c/code\u003e is actually the host name it should use...\u003c/p\u003e\n\n\u003cp\u003eSome observations:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eit doesn\u0026#39;t leak the entire password here, just the part on the right sight of the \u003ccode\u003e@\u003c/code\u003e sign, and there\u0026#39;s no additional clues how much of the password that is missing\u003c/li\u003e\n\u003cli\u003eIt doesn\u0026#39;t resolve the same domain anymore so this bad DNS resolve will not end up in the DNS server of \u003ccode\u003eexample.com\u003c/code\u003e (which presumably hosted the redirect and wanted the credentials). Not sure it matters much, but it seems hard for a remote \u0026quot;player\u0026quot; to take advantage of this flaw.\u003c/li\u003e\n\u003cli\u003eSince DNS is still usually clear-text, sitting on the same local network as this libcurl-using app will be enough to potentially detect partial passwords.\u003c/li\u003e\n\u003cli\u003eIf DoH is used by libcurl, this flaw won\u0026#39;t leak a clear-text resolve but will instead ask the DoH server to resolve the wrong name over HTTPS.\u003c/li\u003e\n\u003cli\u003eIs \u003ccode\u003e@\u003c/code\u003e actually legal in host name or should we error in the parser there?\u003c/li\u003e\n\u003cli\u003eI clearly didn\u0026#39;t at all consider the security implications when I fixed this bug!\u003c/li\u003e\n\u003cli\u003eDue to the potential leakage of sensitive data I think we should make a CVE out of this.\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2020-05-15T21:52:52.423Z","updated_at":"2020-05-15T21:52:52.423Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8019980,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@1. Yes, additionally using @ in user part (which is most common, as often user names are just emails) was **not** causing DNS resolution, @ needed to be in password part. Probably : (colon) from user-password part that's always after first @ (from mail) fails on internal curl domain parsing.\n@2. True, but what is strange both OS and DNS servers did not complain about domain with @ inside. Just tried do register such domain but with no success ;). Probably being able to inject `password@example.com` somewhere to this chain would cause potentially malicious redirection.\n@3. This was my main concern.\n@4. Still not 100% happy with the DNS server receiving part of the password.\n@5. Hmm. This would prevent the DNS resolution by failing internally before it (as it did with the colon in point @1). But as I believe that url encoding credential part is cleaner solution, not introducing possible regression for somebody that uses such cases (OS and DNS tried to resolve that!).\n@6/7. I spotted it when updating libcurl from 7.51 -\u003e 7.69. First I believed that there was some minor change and it can be somehow fixed by a change in our client code (eg. we need to add a `domain` to 'Set-' cookie format, as they were not sent without it anymore with new lib). Idea was to run `curl -L -u` and copy how it is done it tool, but the issue was the same. Running verbose shows the stuff that looked interesting from security perspective:\n* `Issue another request to this URL: 'https://saduser%40S3cr3t@mareksz.gq/goto302'`\n* `Could not resolve host: S3cr3t@mareksz.gq`\n* `Closing connection 1 curl: (6) Could not resolve host: S3cr3t@mareksz.gq `","markdown_message":"\u003cp\u003e@1. Yes, additionally using @ in user part (which is most common, as often user names are just emails) was \u003cstrong\u003enot\u003c/strong\u003e causing DNS resolution, @ needed to be in password part. Probably : (colon) from user-password part that\u0026#39;s always after first @ (from mail) fails on internal curl domain parsing.\u003cbr\u003e\n@2. True, but what is strange both OS and DNS servers did not complain about domain with @ inside. Just tried do register such domain but with no success ;). Probably being able to inject \u003ccode\u003epassword@example.com\u003c/code\u003e somewhere to this chain would cause potentially malicious redirection.\u003cbr\u003e\n@3. This was my main concern.\u003cbr\u003e\n@4. Still not 100% happy with the DNS server receiving part of the password.\u003cbr\u003e\n@5. Hmm. This would prevent the DNS resolution by failing internally before it (as it did with the colon in point @1). But as I believe that url encoding credential part is cleaner solution, not introducing possible regression for somebody that uses such cases (OS and DNS tried to resolve that!).\u003cbr\u003e\n@6/7. I spotted it when updating libcurl from 7.51 -\u0026gt; 7.69. First I believed that there was some minor change and it can be somehow fixed by a change in our client code (eg. we need to add a \u003ccode\u003edomain\u003c/code\u003e to \u0026#39;Set-\u0026#39; cookie format, as they were not sent without it anymore with new lib). Idea was to run \u003ccode\u003ecurl -L -u\u003c/code\u003e and copy how it is done it tool, but the issue was the same. Running verbose shows the stuff that looked interesting from security perspective:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIssue another request to this URL: \u0026#39;https://saduser%40S3cr3t@mareksz.gq/goto302\u0026#39;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCould not resolve host: S3cr3t@mareksz.gq\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eClosing connection 1 curl: (6) Could not resolve host: S3cr3t@mareksz.gq\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2020-05-16T08:39:23.082Z","updated_at":"2020-05-16T08:39:23.082Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8033346,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Suggested plan: I write up a security advisory for this flaw and request a CVE in time so that we can announce the flaw and the advisory in association with the pending next release. Due to ship on June 24, 2020.\n\nDoes anyone (reading this) think we need to handle this with more urgency?","markdown_message":"\u003cp\u003eSuggested plan: I write up a security advisory for this flaw and request a CVE in time so that we can announce the flaw and the advisory in association with the pending next release. Due to ship on June 24, 2020.\u003c/p\u003e\n\n\u003cp\u003eDoes anyone (reading this) think we need to handle this with more urgency?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-18T10:54:07.228Z","updated_at":"2020-05-18T10:54:07.228Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8034756,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T12:43:40.378Z","updated_at":"2020-05-18T12:43:40.378Z","additional_data":{"old_severity":"High (8.6)","new_severity":"Medium (5.5)","old_severity_id":722466,"new_severity_id":725110},"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8035630,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This is my current Security Advisory draft. Also attached below.\n\nPartial password leak over DNS on HTTP redirect\n===============================================\n\nProject curl Security Advisory, June 24th 2020 -\n[Permalink](https://curl.haxx.se/docs/CVE-2020-RRRR.html)\n\nVULNERABILITY\n-------------\n\nlibcurl can be tricked to prepend a part of the password to the host name\nbefore it resolves it, potentially leaking the partial password over the\nnetwork and to the DNS server(s).\n\nlibcurl can be given a username and password for HTTP authentication when\nrequesting an HTTP resource - used for HTTP Authentication such as Basic,\nDigest, NTLM and similar. The credentials are set, either together with\n`CURLOPT_USERPWD` or separately with `CURLOPT_USERNAME` and\n`CURLOPT_PASSWORD`. Important detail: these strings are given to libcurl as\nplain C strings and they are not supposed to be URL encoded.\n\nIn addition, libcurl also allows the credentials to be set in the URL, using\nthe standard RFC 3986 format: `http://user:password@host/path`. In this case,\nthe name and password are URL encoded as that's how they appear in URLs.\n\nIf the options are set, they override the credentials set in the URL.\n\nInternally, this is handled by storing the credentials in the \"URL object\" so\nthat there is only a single set of credentials stored associated with this\nsingle URL.\n\nWhen libcurl handles a relative redirect (as opposed to an absolute URL\nredirect) for an HTTP transfer, the server is only sending a new path to the\nclient and that path is applied on to the existing URL. That \"applying\" of the\nrelative path on top of an absolute URL is done by libcurl first generating a\nfull absolute URL out of all the components it has, then it applies the\nredirect and finally it deconstructs the URL again into its separate\ncomponents.\n\nThis security vulnerability originates in the fact that curl did not correctly\nURL encode the credential data when set using one of the `curl_easy_setopt`\noptions described above. This made curl generate a badly formatted full URL\nwhen it would do a redirect and the final re-parsing of the URL would then go\nbad and wrongly consider a part of the password field to belong to the host\nname.\n\nThe wrong host name would then be used in a name resolve lookup, potentially\nleaking the host name + partial password in clear text over the network (if\nplain DNS was used) and in particular to the used DNS server(s).\n\nThe password leak is triggered if an at sign (`@`) is used in the password\nfield, like this: `passw@rd123`. If we also consider a user `dan`, curl would\ngenerate a full URL like:\n\n `https://dan:passw@rd123@example.com/path`\n \n... while a correct one should have been:\n\n `https://dan:passw%40rd123@example.com/path`\n\n... when parsing the wrongly generated URL, libcurl would end up with user\n`dan` and password `pass` talking to the host `rd123@example.com`. That bad\nhost name would then be passed on to the name resolver function in use (and\nfor all typical cases return a \"cannot resolve host name\" error).\n\nThere's no hint in the name resolve as to how large portion of the password\nthat is actually prepended to the host name (ie an observer won't know how\nmuch data there was on the left side of the `@`), but it can of course be a\nsignificant enough clue for an attacker to figure out the rest.\n\nWe are not aware of any exploit of this flaw.\n\nINFO\n----\n\nRequirements to trigger this flaw.\n\n 1. a password set with a `@` in it\n 2. an HTTP transfer\n 3. a *relative* redirect that curl follows (`CURLOPT_FOLLOWLOCATION` enabled)\n\nThis bug was brought in commit\n[46e164069d](https://github.com/curl/curl/commit/46e164069d), first shipped in\ncurl 7.62.0.\n\nThis flaw can happen to users of the curl tool as well as for applications\nusing libcurl.\n\nThis bug was reported and inadvertently fixed and pushed to the public source\nrespository before anyone realized its security impact.\n\nThe effects of this flaw is somewhat reduced if DNS-over-HTTPS is used, since\nthen at least the name won't be observable on the network by a passive\nby-stander but only by the DoH server.\n\nThe Common Vulnerabilities and Exposures (CVE) project has assigned the name\nCVE-2020-RRRR to this issue.\n\nCWE-200: Exposure of Sensitive Information to an Unauthorized Actor\n\nSeverity: 5.5 (Medium)\n\nAFFECTED VERSIONS\n-----------------\n\n- Affected versions: libcurl 7.62.0 to and including 7.70.0\n- Not affected versions: libcurl \u003c 7.62.0\n\nlibcurl is used by many applications, but not always advertised as such.\n\nTHE SOLUTION\n------------\n\nA [fix for CVE-2020-RRRR](https://github.com/curl/curl/commit/600a8cded447cd)\n\nRECOMMENDATIONS\n--------------\n\nWe suggest you take one of the following actions immediately, in order of\npreference:\n\n A - Upgrade curl to version 7.71.0\n \n B - Apply the patch on your libcurl version and rebuild\n\n C - Disable `CURLOPT_FOLLOWLOCATION` or redirects to HTTP(S).\n \nTIMELINE\n--------\n\nThis issue was first reported to the curl project on May 14, 2020. The initial\nfix was done, verified and pushed to git on the same day. (As a regular\nnon-security related fix.)\n\nOn May 15, 2020, the bug was reported again but then with the security impact\nhighlighted.\n\nThis advisory was posted on June 24th 2020.\n\nCREDITS\n-------\n\nThe security issue was reported by Marek Szlagor. The initial bug report was\ndone by Gregory Jefferis and Jeroen Ooms. Patched by Daniel Stenberg.\n\nThanks a lot!\n","markdown_message":"\u003cp\u003eThis is my current Security Advisory draft. Also attached below.\u003c/p\u003e\n\n\u003ch1 id=\"partial-password-leak-over-dns-on-http-redirect\"\u003ePartial password leak over DNS on HTTP redirect\u003c/h1\u003e\n\n\u003cp\u003eProject curl Security Advisory, June 24th 2020 -\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fcurl.haxx.se%2Fdocs%2FCVE-2020-RRRR.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ePermalink\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"vulnerability\"\u003eVULNERABILITY\u003c/h2\u003e\n\n\u003cp\u003elibcurl can be tricked to prepend a part of the password to the host name\u003cbr\u003e\nbefore it resolves it, potentially leaking the partial password over the\u003cbr\u003e\nnetwork and to the DNS server(s).\u003c/p\u003e\n\n\u003cp\u003elibcurl can be given a username and password for HTTP authentication when\u003cbr\u003e\nrequesting an HTTP resource - used for HTTP Authentication such as Basic,\u003cbr\u003e\nDigest, NTLM and similar. The credentials are set, either together with\u003cbr\u003e\n\u003ccode\u003eCURLOPT_USERPWD\u003c/code\u003e or separately with \u003ccode\u003eCURLOPT_USERNAME\u003c/code\u003e and\u003cbr\u003e\n\u003ccode\u003eCURLOPT_PASSWORD\u003c/code\u003e. Important detail: these strings are given to libcurl as\u003cbr\u003e\nplain C strings and they are not supposed to be URL encoded.\u003c/p\u003e\n\n\u003cp\u003eIn addition, libcurl also allows the credentials to be set in the URL, using\u003cbr\u003e\nthe standard RFC 3986 format: \u003ccode\u003ehttp://user:password@host/path\u003c/code\u003e. In this case,\u003cbr\u003e\nthe name and password are URL encoded as that\u0026#39;s how they appear in URLs.\u003c/p\u003e\n\n\u003cp\u003eIf the options are set, they override the credentials set in the URL.\u003c/p\u003e\n\n\u003cp\u003eInternally, this is handled by storing the credentials in the \u0026quot;URL object\u0026quot; so\u003cbr\u003e\nthat there is only a single set of credentials stored associated with this\u003cbr\u003e\nsingle URL.\u003c/p\u003e\n\n\u003cp\u003eWhen libcurl handles a relative redirect (as opposed to an absolute URL\u003cbr\u003e\nredirect) for an HTTP transfer, the server is only sending a new path to the\u003cbr\u003e\nclient and that path is applied on to the existing URL. That \u0026quot;applying\u0026quot; of the\u003cbr\u003e\nrelative path on top of an absolute URL is done by libcurl first generating a\u003cbr\u003e\nfull absolute URL out of all the components it has, then it applies the\u003cbr\u003e\nredirect and finally it deconstructs the URL again into its separate\u003cbr\u003e\ncomponents.\u003c/p\u003e\n\n\u003cp\u003eThis security vulnerability originates in the fact that curl did not correctly\u003cbr\u003e\nURL encode the credential data when set using one of the \u003ccode\u003ecurl_easy_setopt\u003c/code\u003e\u003cbr\u003e\noptions described above. This made curl generate a badly formatted full URL\u003cbr\u003e\nwhen it would do a redirect and the final re-parsing of the URL would then go\u003cbr\u003e\nbad and wrongly consider a part of the password field to belong to the host\u003cbr\u003e\nname.\u003c/p\u003e\n\n\u003cp\u003eThe wrong host name would then be used in a name resolve lookup, potentially\u003cbr\u003e\nleaking the host name + partial password in clear text over the network (if\u003cbr\u003e\nplain DNS was used) and in particular to the used DNS server(s).\u003c/p\u003e\n\n\u003cp\u003eThe password leak is triggered if an at sign (\u003ccode\u003e@\u003c/code\u003e) is used in the password\u003cbr\u003e\nfield, like this: \u003ccode\u003epassw@rd123\u003c/code\u003e. If we also consider a user \u003ccode\u003edan\u003c/code\u003e, curl would\u003cbr\u003e\ngenerate a full URL like:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://dan:passw@rd123@example.com/path\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e... while a correct one should have been:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ehttps://dan:passw%40rd123@example.com/path\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e... when parsing the wrongly generated URL, libcurl would end up with user\u003cbr\u003e\n\u003ccode\u003edan\u003c/code\u003e and password \u003ccode\u003epass\u003c/code\u003e talking to the host \u003ccode\u003erd123@example.com\u003c/code\u003e. That bad\u003cbr\u003e\nhost name would then be passed on to the name resolver function in use (and\u003cbr\u003e\nfor all typical cases return a \u0026quot;cannot resolve host name\u0026quot; error).\u003c/p\u003e\n\n\u003cp\u003eThere\u0026#39;s no hint in the name resolve as to how large portion of the password\u003cbr\u003e\nthat is actually prepended to the host name (ie an observer won\u0026#39;t know how\u003cbr\u003e\nmuch data there was on the left side of the \u003ccode\u003e@\u003c/code\u003e), but it can of course be a\u003cbr\u003e\nsignificant enough clue for an attacker to figure out the rest.\u003c/p\u003e\n\n\u003cp\u003eWe are not aware of any exploit of this flaw.\u003c/p\u003e\n\n\u003ch2 id=\"info\"\u003eINFO\u003c/h2\u003e\n\n\u003cp\u003eRequirements to trigger this flaw.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ea password set with a \u003ccode\u003e@\u003c/code\u003e in it\u003c/li\u003e\n\u003cli\u003ean HTTP transfer\u003c/li\u003e\n\u003cli\u003ea \u003cem\u003erelative\u003c/em\u003e redirect that curl follows (\u003ccode\u003eCURLOPT_FOLLOWLOCATION\u003c/code\u003e enabled)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThis bug was brought in commit\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl%2Fcommit%2F46e164069d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e46e164069d\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, first shipped in\u003cbr\u003e\ncurl 7.62.0.\u003c/p\u003e\n\n\u003cp\u003eThis flaw can happen to users of the curl tool as well as for applications\u003cbr\u003e\nusing libcurl.\u003c/p\u003e\n\n\u003cp\u003eThis bug was reported and inadvertently fixed and pushed to the public source\u003cbr\u003e\nrespository before anyone realized its security impact.\u003c/p\u003e\n\n\u003cp\u003eThe effects of this flaw is somewhat reduced if DNS-over-HTTPS is used, since\u003cbr\u003e\nthen at least the name won\u0026#39;t be observable on the network by a passive\u003cbr\u003e\nby-stander but only by the DoH server.\u003c/p\u003e\n\n\u003cp\u003eThe Common Vulnerabilities and Exposures (CVE) project has assigned the name\u003cbr\u003e\nCVE-2020-RRRR to this issue.\u003c/p\u003e\n\n\u003cp\u003eCWE-200: Exposure of Sensitive Information to an Unauthorized Actor\u003c/p\u003e\n\n\u003cp\u003eSeverity: 5.5 (Medium)\u003c/p\u003e\n\n\u003ch2 id=\"affected-versions\"\u003eAFFECTED VERSIONS\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAffected versions: libcurl 7.62.0 to and including 7.70.0\u003c/li\u003e\n\u003cli\u003eNot affected versions: libcurl \u0026lt; 7.62.0\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003elibcurl is used by many applications, but not always advertised as such.\u003c/p\u003e\n\n\u003ch2 id=\"the-solution\"\u003eTHE SOLUTION\u003c/h2\u003e\n\n\u003cp\u003eA \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fcurl%2Fcurl%2Fcommit%2F600a8cded447cd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003efix for CVE-2020-RRRR\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"recommendations\"\u003eRECOMMENDATIONS\u003c/h2\u003e\n\n\u003cp\u003eWe suggest you take one of the following actions immediately, in order of\u003cbr\u003e\npreference:\u003c/p\u003e\n\n\u003cp\u003eA - Upgrade curl to version 7.71.0\u003c/p\u003e\n\n\u003cp\u003eB - Apply the patch on your libcurl version and rebuild\u003c/p\u003e\n\n\u003cp\u003eC - Disable \u003ccode\u003eCURLOPT_FOLLOWLOCATION\u003c/code\u003e or redirects to HTTP(S).\u003c/p\u003e\n\n\u003ch2 id=\"timeline\"\u003eTIMELINE\u003c/h2\u003e\n\n\u003cp\u003eThis issue was first reported to the curl project on May 14, 2020. The initial\u003cbr\u003e\nfix was done, verified and pushed to git on the same day. (As a regular\u003cbr\u003e\nnon-security related fix.)\u003c/p\u003e\n\n\u003cp\u003eOn May 15, 2020, the bug was reported again but then with the security impact\u003cbr\u003e\nhighlighted.\u003c/p\u003e\n\n\u003cp\u003eThis advisory was posted on June 24th 2020.\u003c/p\u003e\n\n\u003ch2 id=\"credits\"\u003eCREDITS\u003c/h2\u003e\n\n\u003cp\u003eThe security issue was reported by Marek Szlagor. The initial bug report was\u003cbr\u003e\ndone by Gregory Jefferis and Jeroen Ooms. Patched by Daniel Stenberg.\u003c/p\u003e\n\n\u003cp\u003eThanks a lot!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-18T13:38:45.585Z","updated_at":"2020-05-18T13:38:45.585Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":832846,"filename":"CVE-2020-RRRR.md","type":"text/markdown","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/C9piHhYfUWdscVwdy12ZMjyW?response-content-disposition=attachment%3B%20filename%3D%22CVE-2020-RRRR.md%22%3B%20filename%2A%3DUTF-8%27%27CVE-2020-RRRR.md\u0026response-content-type=text%2Fmarkdown\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRAVCXZTG%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070421Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCDC1SbghdXLcy9ot06DANg74r5EiCC3XZ9CQGAdi%2BmbgIhALBQDzrYaszHyI6V41WOAEV%2Fa%2FxVgBgdKj18DrlZlW1RKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgxgXaQ5tEaz15kO93YqkQPMn8lqJM5b%2F2UF4vgQzRZODqw%2FjPEjzpD61mE7LpyVCQKuiixef4EDRyTs5YaVZ%2BSeI6BYbm829Q00SoHZnAn9tGULy0VEKf9Lyq8uAs7eAOStN9gpb9p9GsQ2vxpwHzC%2F%2FjQuXDX8lTd6eIkj3L4VFhPdt4MGf%2FwzTbeirX69pmEGa7VpqUl%2BzQFSRmiyNkLz0iIRuGyUxcUtEFnAa4dcYImN8d5Xmzj3VKwszN5CZZekG0f6wVgiDQt2PU05Sm4mXV8F7Zsd2gCjxy0LByxZo8wVIQRR7XpJjeAXw7Y%2BrcntwG4VG16O2JBB13PV47avtAluDB7xEmxCn7fC%2B0gCkgtqX5FvemeTqZkzDj%2BNAE87%2BEwY1GKygDSgK%2BDrUlCwwYU%2FB1k9vGEpOa46oz6dP6MWDopeRWpW%2Fh2qwIShnMsIk%2BmfjH9n%2FnOGNwWwQp93Hlr6OPw%2F8tYLstkLZrNH3jzkkWMoWcsrv71HzpJiG6RZtm22uXPNaQTbmOYqMX%2BCryjdGcVIctKAsj5EliP0zjCb4Kr%2FBTrqAW3ufL%2FR%2FpkxPRO%2BUhyyvDPzgPmCSraR2g7lBy3KlX6LZ3JukP4SRvLInSvSu0w4T7VQh0EVNyALDb1flUgqzAKwYanyEiiHqHeCF6g4fX5%2Fuz8knjUQsnKmjOQfBtyaMe0qlW%2BHWCfwsR%2Fh2SNKi%2BVT7%2FCT2Ct%2Fia0RQuGDOtTr7KGlRg89Qz6oCZtR4isqOEM5yt6saYHHNTOAelO07weXRwFwKuKqmrZYMA5sa9p7XKqJAwmjMWMyFxAcEDHOluiNcMsa9JfilicFsycW11kxP5ZdIbUgRRdK1IdlTu3Ykx5X3L1RmsfWjw%3D%3D\u0026X-Amz-Signature=7216ed390a2ca960df627f84660a0187a2512465475ca48d052a785871a0f1b8"}],"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8045840,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It looks good, thank you!","markdown_message":"\u003cp\u003eIt looks good, thank you!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-19T09:04:10.987Z","updated_at":"2020-05-19T09:04:10.987Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8046084,"is_internal":false,"editable":false,"type":"Activities::ReportVulnerabilityTypesUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-19T09:28:07.879Z","updated_at":"2020-05-19T09:28:07.879Z","additional_data":{"added_weaknesses":[{"id":18,"name":"Information Disclosure"}],"removed_weaknesses":[{"id":87,"name":"Insufficiently Protected Credentials"}]},"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8046122,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-19T09:32:19.137Z","updated_at":"2020-05-19T09:32:19.137Z","cve_ids":["CVE-2020-8169"],"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8048625,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-19T14:24:34.066Z","updated_at":"2020-05-19T14:24:34.066Z","additional_data":{"old_title":"curl and curllib send user credentials in dns request on relative redirect","new_title":"Partial password leak over DNS on HTTP redirect"},"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8176063,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2020-06-02T08:50:50.191Z","updated_at":"2020-06-02T08:50:50.191Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8197323,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"The curl security team has decided to reward hacker @mszpl  with the amount of 400 USD for finding and reporting this issue. Many thanks for your great work!\n\nThis report was technically not within policy, but the curl security team has decided that it was still a valuable report that highlighted a part of the issue that was previously missed. Thus still rewarding the reporter as a sign of our gratitude, just maybe a little lower than it could otherwise have been.\n\nThank you @mszpl!","markdown_message":"\u003cp\u003eThe curl security team has decided to reward hacker \u003ca href=\"/mszpl\"\u003e@mszpl\u003c/a\u003e  with the amount of 400 USD for finding and reporting this issue. Many thanks for your great work!\u003c/p\u003e\n\n\u003cp\u003eThis report was technically not within policy, but the curl security team has decided that it was still a valuable report that highlighted a part of the issue that was previously missed. Thus still rewarding the reporter as a sign of our gratitude, just maybe a little lower than it could otherwise have been.\u003c/p\u003e\n\n\u003cp\u003eThank you \u003ca href=\"/mszpl\"\u003e@mszpl\u003c/a\u003e!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-04T07:46:15.942Z","updated_at":"2020-06-04T07:46:15.942Z","actor":{"url":"/curl","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"curl"}},"bounty_amount":"400.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"curl","collaborator":{"username":"mszpl","url":"/mszpl"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8199572,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for the bounty!\nI just wondered how was final score set? Why not:\n* Attack Vector - network (part of the password is still sent in DNS request over a network to and to the remote server)\n* Attack Complexity - low\n* Privileges Required - none\n* User Interaction - none (user is not doing anything special, remote server have control over this issue)\n* Scope - unchanged \n* Confidentiality / Integrity / Availability - low\n\nEg.\nhttps://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L","markdown_message":"\u003cp\u003eThank you for the bounty!\u003cbr\u003e\nI just wondered how was final score set? Why not:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAttack Vector - network (part of the password is still sent in DNS request over a network to and to the remote server)\u003c/li\u003e\n\u003cli\u003eAttack Complexity - low\u003c/li\u003e\n\u003cli\u003ePrivileges Required - none\u003c/li\u003e\n\u003cli\u003eUser Interaction - none (user is not doing anything special, remote server have control over this issue)\u003c/li\u003e\n\u003cli\u003eScope - unchanged \u003c/li\u003e\n\u003cli\u003eConfidentiality / Integrity / Availability - low\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEg.\u003cbr\u003e\n\u003ca title=\"https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\" href=\"/redirect?url=https%3A%2F%2Fwww.first.org%2Fcvss%2Fcalculator%2F3.0%23CVSS%3A3.0%2FAV%3AN%2FAC%3AL%2FPR%3AN%2FUI%3AN%2FS%3AU%2FC%3AL%2FI%3AL%2FA%3AL\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-04T11:39:29.593Z","updated_at":"2020-06-04T11:39:29.593Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8204296,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Because I consider it to be attack complexity (AC) high. It's really hard for an attacker to make the user to pick a password with an @-letter in it for a site that the attacker controls and can make a redirect for and then also be able to actually get the leaked information.","markdown_message":"\u003cp\u003eBecause I consider it to be attack complexity (AC) high. It\u0026#39;s really hard for an attacker to make the user to pick a password with an @-letter in it for a site that the attacker controls and can make a redirect for and then also be able to actually get the leaked information.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-04T18:57:22.863Z","updated_at":"2020-06-04T18:57:22.863Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8204478,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I understand you point and need to agree, thanks for explanation!","markdown_message":"\u003cp\u003eI understand you point and need to agree, thanks for explanation!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-04T19:23:46.523Z","updated_at":"2020-06-04T19:23:46.523Z","actor":{"username":"mszpl","cleared":false,"url":"/mszpl","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8391881,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Published!","markdown_message":"\u003cp\u003ePublished!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-24T06:49:29.576Z","updated_at":"2020-06-24T06:49:29.576Z","actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"mszpl","url":"/mszpl"},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9730769,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Let's disclose the details for the world","markdown_message":"\u003cp\u003eLet\u0026#39;s disclose the details for the world\u003c/p\u003e\n","automated_response":false,"created_at":"2020-11-05T08:32:04.259Z","updated_at":"2020-11-05T08:32:04.259Z","first_to_agree":true,"actor":{"username":"bagder","cleared":false,"url":"/bagder","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/459/380/963f64725677dda4f5113219588e7d0c1ab9abaa_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":10012060,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-12-05T08:32:06.381Z","updated_at":"2020-12-05T08:32:06.381Z","actor":{"url":"/curl","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/035/663/2faf4c279d437d64bfda6d23d62ce1833813a4d9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"curl"}},"genius_execution_id":null,"team_handle":"curl","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}