{"id":219607,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMTk2MDc=","url":"https://hackerone.com/reports/219607","title":"Dovecot authentication is vulnerable to timing attacks.","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2017-04-08T20:22:49.639Z","submitted_at":"2017-04-08T20:22:49.639Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"edoverflow","url":"/edoverflow","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":8906,"url":"https://hackerone.com/open-xchange","handle":"open-xchange","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Open-Xchange","twitter_handle":"openxchange","website":"https://www.open-xchange.com/","about":"Messaging, collaboration and office productivity software for service providers"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-04-13T09:14:06.074Z","bug_reporter_agreed_on_going_public_at":"2017-04-11T17:34:28.050Z","team_member_agreed_on_going_public_at":"2017-04-13T09:14:06.043Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Dear Dovecot bug bounty team,\n\nDovecot is vulnerable to timing attacks, because the `verify_credentials()` function in CRAM-MD5 performs a byte-by-byte comparison, which terminates early when two characters do not match.\n\n# Summary\n---\n\nTiming attacks are a type of side channel attack where one can discover valuable information by recording the time it takes for a cryptographic algorithm to execute.\n\n### üëé Don't use `memcmp()` here:\n\n~~~\nif (i == 0) {\n  /* verify response */\n  if (memcmp(response_hex, request - \u003e response, 32) != 0) {\n    auth_request_log_info( \u0026 request - \u003e auth_request,\n      AUTH_SUBSYS_MECH,\n      \"password mismatch\");\n    return FALSE;\n  }\n} else {\n  request - \u003e rspauth =\n    p_strconcat(request - \u003e pool, \"rspauth=\",\n      response_hex, NULL);\n}\n~~~\n\nLink to source code: https://github.com/dovecot/core/blob/master/src/auth/mech-digest-md5.c\n\nThe same applies in https://github.com/dovecot/core/blob/master/src/auth/mech-cram-md5.c:\n\n~~~\nif (memcmp(response_hex, request - \u003e response, sizeof(digest) * 2) != 0) {\n  auth_request_log_info( \u0026 request - \u003e auth_request, AUTH_SUBSYS_MECH,\n    \"password mismatch\");\n  return FALSE;\n}\n~~~\n\n`memcmp()` does a byte-by-byte comparison of two values and as soon as the two differentiate it terminates. This means the longer it takes until the operation returns, the more correct characters the attacker has guessed.\n\nLink to source code: \n\n### üëç Use this instead:\n\nI would highly recommend you use OpenSSL's `CRYPTO_memcmp()`.\n\nOn a side note, this issue appears in other places too, so I will have another thorough look.\n\nBest regards,\nEd","vulnerability_information_html":"\u003cp\u003eDear Dovecot bug bounty team,\u003c/p\u003e\n\n\u003cp\u003eDovecot is vulnerable to timing attacks, because the \u003ccode\u003everify_credentials()\u003c/code\u003e function in CRAM-MD5 performs a byte-by-byte comparison, which terminates early when two characters do not match.\u003c/p\u003e\n\n\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eTiming attacks are a type of side channel attack where one can discover valuable information by recording the time it takes for a cryptographic algorithm to execute.\u003c/p\u003e\n\n\u003ch3 id=\"don-t-use-memcmp-here\"\u003eüëé Don\u0026#39;t use \u003ccode\u003ememcmp()\u003c/code\u003e here:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eif (i == 0) {\n  /* verify response */\n  if (memcmp(response_hex, request - \u0026gt; response, 32) != 0) {\n    auth_request_log_info( \u0026amp; request - \u0026gt; auth_request,\n      AUTH_SUBSYS_MECH,\n      \u0026quot;password mismatch\u0026quot;);\n    return FALSE;\n  }\n} else {\n  request - \u0026gt; rspauth =\n    p_strconcat(request - \u0026gt; pool, \u0026quot;rspauth=\u0026quot;,\n      response_hex, NULL);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLink to source code: \u003ca title=\"https://github.com/dovecot/core/blob/master/src/auth/mech-digest-md5.c\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fblob%2Fmaster%2Fsrc%2Fauth%2Fmech-digest-md5.c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/blob/master/src/auth/mech-digest-md5.c\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe same applies in \u003ca title=\"https://github.com/dovecot/core/blob/master/src/auth/mech-cram-md5.c:\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fblob%2Fmaster%2Fsrc%2Fauth%2Fmech-cram-md5.c%3A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/blob/master/src/auth/mech-cram-md5.c:\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eif (memcmp(response_hex, request - \u0026gt; response, sizeof(digest) * 2) != 0) {\n  auth_request_log_info( \u0026amp; request - \u0026gt; auth_request, AUTH_SUBSYS_MECH,\n    \u0026quot;password mismatch\u0026quot;);\n  return FALSE;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003ememcmp()\u003c/code\u003e does a byte-by-byte comparison of two values and as soon as the two differentiate it terminates. This means the longer it takes until the operation returns, the more correct characters the attacker has guessed.\u003c/p\u003e\n\n\u003cp\u003eLink to source code: \u003c/p\u003e\n\n\u003ch3 id=\"use-this-instead\"\u003eüëç Use this instead:\u003c/h3\u003e\n\n\u003cp\u003eI would highly recommend you use OpenSSL\u0026#39;s \u003ccode\u003eCRYPTO_memcmp()\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOn a side note, this issue appears in other places too, so I will have another thorough look.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nEd\u003c/p\u003e\n","bounty_amount":"600.0","formatted_bounty":"$600","weakness":{"id":32,"name":"Cryptographic Issues - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-05-11T17:34:28.084Z","allow_singular_disclosure_after":-114693918.68376829,"singular_disclosure_allowed":true,"vote_count":16,"voters":["tk0","bogdantcaciuc","cuso4","muhammad_uwais","eveeez","ahsan","japz","drstache","hacklad","spetr0x","and 6 more..."],"severity":{"rating":"medium","score":4.8,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"low","integrity":"low","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1600336,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nInteresting reminder of timing issues and I think we need to think through more of those. However, I think specifically in this case:\n\n1) CRAM-MD5 has a unique random challenge for every authentication request, which is used to generate the final HMAC-MD5 based responses that are being compared. So this means that the final responses are practically two random 256bit values being compared. The memcmp() timing attack won't tell anything else beyond \"matches\" vs \"doesn't match\", which will be obvious anyway. On the next authentication attempt it's comparing again two different values. So it's not possible to incrementally attempt to determine the password using a timing attack.\n\n2) Dovecot doesn't immediately return failure to client when an authentication fails. Instead, it queues the failure and every 2 seconds it sends out all the pending auth failures. This already makes the timing attacks much more difficult. I guess it might make some sense to add a bit of further randomness to use 2s +- 100ms or something, although as described elsewhere it doesn't fully prevent timing attack issues, only makes them somewhat more difficult. Still, could be worth it.\n\nIf we were talking about plaintext authentication against a plaintext password then yes, a timing attack could be possible against that, although I think pretty unlikely to be successful on a real system. Still, that's something that we could fix. Quick googling suggests double-hmac comparisons with a random key.\n\nThere are probably various timing attacks against checking whether a username exists or not, but preventing those is likely not practical.\n","markdown_message":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003eInteresting reminder of timing issues and I think we need to think through more of those. However, I think specifically in this case:\u003c/p\u003e\n\n\u003cp\u003e1) CRAM-MD5 has a unique random challenge for every authentication request, which is used to generate the final HMAC-MD5 based responses that are being compared. So this means that the final responses are practically two random 256bit values being compared. The memcmp() timing attack won\u0026#39;t tell anything else beyond \u0026quot;matches\u0026quot; vs \u0026quot;doesn\u0026#39;t match\u0026quot;, which will be obvious anyway. On the next authentication attempt it\u0026#39;s comparing again two different values. So it\u0026#39;s not possible to incrementally attempt to determine the password using a timing attack.\u003c/p\u003e\n\n\u003cp\u003e2) Dovecot doesn\u0026#39;t immediately return failure to client when an authentication fails. Instead, it queues the failure and every 2 seconds it sends out all the pending auth failures. This already makes the timing attacks much more difficult. I guess it might make some sense to add a bit of further randomness to use 2s +- 100ms or something, although as described elsewhere it doesn\u0026#39;t fully prevent timing attack issues, only makes them somewhat more difficult. Still, could be worth it.\u003c/p\u003e\n\n\u003cp\u003eIf we were talking about plaintext authentication against a plaintext password then yes, a timing attack could be possible against that, although I think pretty unlikely to be successful on a real system. Still, that\u0026#39;s something that we could fix. Quick googling suggests double-hmac comparisons with a random key.\u003c/p\u003e\n\n\u003cp\u003eThere are probably various timing attacks against checking whether a username exists or not, but preventing those is likely not practical.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-08T21:23:42.143Z","updated_at":"2017-04-08T21:23:42.143Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1600344,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @tss,\n\n\u003e 1) CRAM-MD5 has a unique random challenge for every authentication request, which is used to generate the final HMAC-MD5 based responses that are being compared. So this means that the final responses are practically two random 256bit values being compared. The memcmp() timing attack won't tell anything else beyond \"matches\" vs \"doesn't match\", which will be obvious anyway. On the next authentication attempt it's comparing again two different values. So it's not possible to incrementally attempt to determine the password using a timing attack.\n\nOK, so in this particular instance `memcmp()` is not an issue, but there appear to many other places susceptible to timing attacks which we should look into.\n\n\u003e 2) Dovecot doesn't immediately return failure to client when an authentication fails. Instead, it queues the failure and every 2 seconds it sends out all the pending auth failures. This already makes the timing attacks much more difficult. I guess it might make some sense to add a bit of further randomness to use 2s +- 100ms or something, although as described elsewhere it doesn't fully prevent timing attack issues, only makes them somewhat more difficult. Still, could be worth it.\n\nAs you already stated, this only makes the attack a little harder, since an adversary can simply create more queries and average them out in order to get the same result.\n\nBest regards,\nEd","markdown_message":"\u003cp\u003eHi \u003ca href=\"/tss\"\u003e@tss\u003c/a\u003e,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e1) CRAM-MD5 has a unique random challenge for every authentication request, which is used to generate the final HMAC-MD5 based responses that are being compared. So this means that the final responses are practically two random 256bit values being compared. The memcmp() timing attack won\u0026#39;t tell anything else beyond \u0026quot;matches\u0026quot; vs \u0026quot;doesn\u0026#39;t match\u0026quot;, which will be obvious anyway. On the next authentication attempt it\u0026#39;s comparing again two different values. So it\u0026#39;s not possible to incrementally attempt to determine the password using a timing attack.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOK, so in this particular instance \u003ccode\u003ememcmp()\u003c/code\u003e is not an issue, but there appear to many other places susceptible to timing attacks which we should look into.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e2) Dovecot doesn\u0026#39;t immediately return failure to client when an authentication fails. Instead, it queues the failure and every 2 seconds it sends out all the pending auth failures. This already makes the timing attacks much more difficult. I guess it might make some sense to add a bit of further randomness to use 2s +- 100ms or something, although as described elsewhere it doesn\u0026#39;t fully prevent timing attack issues, only makes them somewhat more difficult. Still, could be worth it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs you already stated, this only makes the attack a little harder, since an adversary can simply create more queries and average them out in order to get the same result.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nEd\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-08T21:31:58.714Z","updated_at":"2017-04-08T21:31:58.714Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1600347,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Although.. the double-hmac doesn't seem to be very useful, maybe that was only intended for languages that make it more difficult to do constant time memcmp() comparisons. I was first thinking it might prevent leaking the length of the password, but it doesn't. So might as well just first fail immediately if password lengths don't match, and if they do use CRYPTO_memcmp()-like implementation for doing the plaintext password comparison.\n","markdown_message":"\u003cp\u003eAlthough.. the double-hmac doesn\u0026#39;t seem to be very useful, maybe that was only intended for languages that make it more difficult to do constant time memcmp() comparisons. I was first thinking it might prevent leaking the length of the password, but it doesn\u0026#39;t. So might as well just first fail immediately if password lengths don\u0026#39;t match, and if they do use CRYPTO_memcmp()-like implementation for doing the plaintext password comparison.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-08T21:40:00.368Z","updated_at":"2017-04-08T21:40:00.368Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1600362,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e If we were talking about plaintext authentication against a plaintext password then yes, a timing attack could be possible against that, **although I think pretty unlikely to be successful on a real system.**\n\n[I beg to differ.](http://www.cs.rice.edu/~dwallach/pub/crosby-timing2009.pdf) ;)\n\n\u003e So might as well just first fail immediately if password lengths don't match, and if they do use CRYPTO_memcmp()-like implementation for doing the plaintext password comparison.\n\nThat sounds like a reasonable approach.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eIf we were talking about plaintext authentication against a plaintext password then yes, a timing attack could be possible against that, \u003cstrong\u003ealthough I think pretty unlikely to be successful on a real system.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"/redirect?url=http%3A%2F%2Fwww.cs.rice.edu%2F~dwallach%2Fpub%2Fcrosby-timing2009.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eI beg to differ.\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e ;)\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSo might as well just first fail immediately if password lengths don\u0026#39;t match, and if they do use CRYPTO_memcmp()-like implementation for doing the plaintext password comparison.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThat sounds like a reasonable approach.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-08T22:01:34.174Z","updated_at":"2017-04-08T22:01:34.174Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1600568,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-09T05:34:37.450Z","updated_at":"2017-04-09T05:34:37.450Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1601797,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The attached patch contains all the timing related issues I've thought of so far. Can you think of something else that could be fixed?","markdown_message":"\u003cp\u003eThe attached patch contains all the timing related issues I\u0026#39;ve thought of so far. Can you think of something else that could be fixed?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-10T07:41:38.071Z","updated_at":"2017-04-10T07:41:38.071Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":174603,"filename":"timing.diff","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/174/603/8c23165a726752ec2a26b6db44f51612c5b62a4a/timing.diff?response-content-disposition=attachment%3B%20filename%3D%22timing.diff%22%3B%20filename%2A%3DUTF-8%27%27timing.diff\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQUYGCYHJT%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045946Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIAGSCCKi0CRpYJMt3KX5x%2BNM9j2K4mM4glLH6mZ%2B8ExKAiEAlsZG1%2FfIYq0ODDSxwLnZfWyc08bfINN86QAI3Hqr4MgqtAMIURABGgwwMTM2MTkyNzQ4NDkiDG9txF7r12Yekik2WSqRA6NC8vsgwir7JTQr5zVnxH1x6efNaMXQv0rW73VsI4xDf6Ldo8AdQq%2B7eYd4BvolwrfpyHLOFrZnF4wc7R9rEQKh%2FswFKL9GQ6Lp2ujYTvyC5dhdjS4Sq%2F%2BYvPk3joZ%2BEwcDqk%2B5AvxLFqoiv3Y3ts7f9HYBqcl%2Fu20T7ZA6XxU9V7asrN5LT6SJz4xOu7iZzuPeZs4%2BFaw8tgu5A3W6CYmUUmbBs9q%2FQ%2FCO3t50tS7Dm5k%2BKM04Ar1VaXlWDuLdZKMC%2FS80%2FwDwH66vWVAjLib7jCkgBWXGEa9VryBHJJUl3qrXQrTIED1gUKeOoKk3fYvvyyIMJs3ja%2BbbO56fim%2BodEtN1FBU6g%2BuddJ4Qz5521XYpzwatC5mjJs6D50zWyfJnn9Xf%2FrDe3EacAX3oOhEBj%2Fu9S%2B46jeCaMjfEHwW8T%2FFnFpu%2FZf3e1NchqIFhOkEcnGH%2FqNmQtJ54g5I6x8j4N2c70CE7tuCZI1qjgi%2BfUfSwopFGky44IARFjLnTewCnMtMfFUa7haJa9C%2BcuqvMJDfqf8FOusB7%2BAWx%2FH2B4H9I7hLf9GkPQtz9yMVcytbF7umUu9c2W6aIn%2FKCYsmcfqyPQD%2Fe6EdfKQiWwtKrHes32q91jeUCiYfrRJFByq7uDxHGN0MingOOUWy72n3fdpooUwYjRfpac06PpxBSGvwEeiL%2BJlq9wl2E%2FMxojMrovyONCSYEoBpeEbNgMNFb9rpTiIW%2BX8OzRH6ra3L9dgd9y8nuqoCkIGYzNActVtKbpERxbtmkIoGAgtSCCLLfHT65g2k6G9afrZJZC86IhNmvJrDSG%2BKELC3%2BeAfU64DhUDssT9Dd%2Bm2pU0nRk1s8PUjuQ%3D%3D\u0026X-Amz-Signature=5cb65d4698238c57c4ed9fae41beb1da36eaaf9df371e4da224e6cb993bebd8d"}],"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1602745,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Looks good to me, but you appear to have left out `/src/auth/password-scheme-pbkdf2.c`:\n\n~~~diff\n- return memcmp(key1, key2, sizeof(key1)) == 0 ? 1 : 0;\n+ return mem_equals_timing_safe(key1, key2, sizeof(key1)) == 0 ? 1 : 0;\n~~~\n\nLink to source code: https://github.com/dovecot/core/blob/master/src/auth/password-scheme-pbkdf2.c#L81","markdown_message":"\u003cp\u003eLooks good to me, but you appear to have left out \u003ccode\u003e/src/auth/password-scheme-pbkdf2.c\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gd\"\u003e- return memcmp(key1, key2, sizeof(key1)) == 0 ? 1 : 0;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+ return mem_equals_timing_safe(key1, key2, sizeof(key1)) == 0 ? 1 : 0;\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLink to source code: \u003ca title=\"https://github.com/dovecot/core/blob/master/src/auth/password-scheme-pbkdf2.c#L81\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fblob%2Fmaster%2Fsrc%2Fauth%2Fpassword-scheme-pbkdf2.c%23L81\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/blob/master/src/auth/password-scheme-pbkdf2.c#L81\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-10T16:42:57.629Z","updated_at":"2017-04-10T16:42:57.629Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1604652,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"These fixes are now in Github:\n\nhttps://github.com/dovecot/core/commit/9464dc83df5da54457ff0b629d02e543e43d53bf\nhttps://github.com/dovecot/core/commit/f1d759d0b4860cac29b5077ee423f9de8bb7d300\nhttps://github.com/dovecot/core/commit/2656508b1a5782070c0f4d6d3dfe2ac54c964370\nhttps://github.com/dovecot/core/commit/e18b4e41d9718a199a1980688787c2743c870002\nhttps://github.com/dovecot/core/commit/ace06232cfa0e99ecca1040e8553b3216d025768","markdown_message":"\u003cp\u003eThese fixes are now in Github:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/dovecot/core/commit/9464dc83df5da54457ff0b629d02e543e43d53bf\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2F9464dc83df5da54457ff0b629d02e543e43d53bf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/9464dc83df5da54457ff0b629d02e543e43d53bf\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://github.com/dovecot/core/commit/f1d759d0b4860cac29b5077ee423f9de8bb7d300\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2Ff1d759d0b4860cac29b5077ee423f9de8bb7d300\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/f1d759d0b4860cac29b5077ee423f9de8bb7d300\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://github.com/dovecot/core/commit/2656508b1a5782070c0f4d6d3dfe2ac54c964370\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2F2656508b1a5782070c0f4d6d3dfe2ac54c964370\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/2656508b1a5782070c0f4d6d3dfe2ac54c964370\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://github.com/dovecot/core/commit/e18b4e41d9718a199a1980688787c2743c870002\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2Fe18b4e41d9718a199a1980688787c2743c870002\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/e18b4e41d9718a199a1980688787c2743c870002\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://github.com/dovecot/core/commit/ace06232cfa0e99ecca1040e8553b3216d025768\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2Face06232cfa0e99ecca1040e8553b3216d025768\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/ace06232cfa0e99ecca1040e8553b3216d025768\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T13:02:01.159Z","updated_at":"2017-04-11T13:02:01.159Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1604660,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fantastic work! I just have one final question, would you mind clarifying exactly what you mean in commit `ace06232cfa0e99ecca1040e8553b3216d025768`?\n\n\u003e It's unlikely these could be used to perform timing attacks, since the\nattacker would have to have broken MD5/SHA badly enough to be able to\nquickly generate string that result in wanted hashes.","markdown_message":"\u003cp\u003eFantastic work! I just have one final question, would you mind clarifying exactly what you mean in commit \u003ccode\u003eace06232cfa0e99ecca1040e8553b3216d025768\u003c/code\u003e?\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt\u0026#39;s unlikely these could be used to perform timing attacks, since the\u003cbr\u003e\nattacker would have to have broken MD5/SHA badly enough to be able to\u003cbr\u003e\nquickly generate string that result in wanted hashes.\u003c/p\u003e\n\u003c/blockquote\u003e\n","automated_response":false,"created_at":"2017-04-11T13:08:15.788Z","updated_at":"2017-04-11T13:08:15.788Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1604689,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Normally a timing attack against plaintext authentication would try a single character at a time to figure out if it's a correct character, and if yes then continue to the next character. With password hashes the similar attack would have to keep changing the next byte in the password hash, keeping the previous bytes the same. And the attacker can't directly feed hashes to Dovecot - they have to be plaintext password strings. So if it attacker has determined e.g. that \"001122334455\" is the correct prefix so far and they want to try \"66\" as the next byte, they can't just add \"66\" there but need to figure out which hash(password) has such a prefix. And the further along you get the closer to \"forever\" it takes to try to find out such password strings.\n","markdown_message":"\u003cp\u003eNormally a timing attack against plaintext authentication would try a single character at a time to figure out if it\u0026#39;s a correct character, and if yes then continue to the next character. With password hashes the similar attack would have to keep changing the next byte in the password hash, keeping the previous bytes the same. And the attacker can\u0026#39;t directly feed hashes to Dovecot - they have to be plaintext password strings. So if it attacker has determined e.g. that \u0026quot;001122334455\u0026quot; is the correct prefix so far and they want to try \u0026quot;66\u0026quot; as the next byte, they can\u0026#39;t just add \u0026quot;66\u0026quot; there but need to figure out which hash(password) has such a prefix. And the further along you get the closer to \u0026quot;forever\u0026quot; it takes to try to find out such password strings.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T13:19:43.495Z","updated_at":"2017-04-11T13:19:43.495Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1604694,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Whoops, my bad. You were referring to the possible timing attacks on the hash comparisons. Nevertheless, thank you for the clarification.","markdown_message":"\u003cp\u003eWhoops, my bad. You were referring to the possible timing attacks on the hash comparisons. Nevertheless, thank you for the clarification.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T13:21:59.901Z","updated_at":"2017-04-11T13:21:59.901Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1604721,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I have reviewed the changes and can confirm that this issue has been resolved. Well done on the quick fix.","markdown_message":"\u003cp\u003eI have reviewed the changes and can confirm that this issue has been resolved. Well done on the quick fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T13:31:11.053Z","updated_at":"2017-04-11T13:31:11.053Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1605244,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-11T17:20:11.876Z","updated_at":"2017-04-11T17:20:11.876Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"edoverflow","url":"/edoverflow"},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1605245,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thank you for reporting this issue to us!","markdown_message":"\u003cp\u003eThank you for reporting this issue to us!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T17:20:45.033Z","updated_at":"2017-04-11T17:20:45.033Z","actor":{"url":"/open-xchange","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Open-Xchange"}},"bounty_amount":"600.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"open-xchange","collaborator":{"username":"edoverflow","url":"/edoverflow"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1605284,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Thank you very much @dovecot for the bounty! That was an impressive time to resolution. Can we disclose this report to inform fellow researchers? üòä","markdown_message":"\u003cp\u003eThank you very much \u003ca href=\"/dovecot\"\u003e@dovecot\u003c/a\u003e for the bounty! That was an impressive time to resolution. Can we disclose this report to inform fellow researchers? üòä\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T17:34:28.064Z","updated_at":"2017-04-11T17:34:28.064Z","first_to_agree":true,"actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1605324,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We will review the publication timeline internally, but after 30 days latest.","markdown_message":"\u003cp\u003eWe will review the publication timeline internally, but after 30 days latest.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-04-11T17:43:03.777Z","updated_at":"2017-04-11T17:43:03.777Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1609245,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-13T09:11:39.252Z","updated_at":"2017-04-13T09:11:39.252Z","additional_data":{"old_title":"CRAM-MD5 is vulnerable to timing attacks.","new_title":"Dovecot authentication is vulnerable to timing attacks."},"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1609247,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-13T09:14:06.057Z","updated_at":"2017-04-13T09:14:06.057Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1609248,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-04-13T09:14:06.088Z","updated_at":"2017-04-13T09:14:06.088Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2117508,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @akituomi,\n\nWould it be possible to allocate a CVE ID for this issue?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/akituomi\"\u003e@akituomi\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eWould it be possible to allocate a CVE ID for this issue?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-10-31T14:15:41.956Z","updated_at":"2017-10-31T14:15:41.956Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2120783,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @edio, we will consider this.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/edio\"\u003e@edio\u003c/a\u003e, we will consider this.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-11-01T13:13:52.179Z","updated_at":"2017-11-01T13:13:52.179Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":3772,"category":"team","content":"It is possible under some circumstances to measure responses for authentication attempts, which can be used to assist in brute force attacks. While this issue is real, the actual practical attack is very difficult to carry out.","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eIt is possible under some circumstances to measure responses for authentication attempts, which can be used to assist in brute force attacks. While this issue is real, the actual practical attack is very difficult to carry out.\u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}