{"id":146416,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDY0MTY=","url":"https://hackerone.com/reports/146416","title":"Ruby:HTTP Header injection in 'net/http'","state":"Closed","substate":"informative","readable_substate":"Informative","created_at":"2016-06-22T08:46:41.429Z","submitted_at":"2016-06-22T08:46:41.429Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"rootredrain","url":"/rootredrain","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7724,"url":"https://hackerone.com/ruby","handle":"ruby","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby","twitter_handle":"","website":"https://www.ruby-lang.org","about":"A Programmer's Best Friend"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-02-27T02:02:52.833Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2016-06-24T08:20:42.915Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi,\n\nI would like to report a HTTP Header injection vulnerability in 'net/http' that allows attackers to inject arbitrary headers in request even create a new evil request.\n\n###PoC\n\n```\nrequire 'net/http'\nhttp = Net::HTTP.new('192.168.30.214','80')\nres = http.get(\"/r.php HTTP/1.1\\r\\nx-injection: memeda\")\n\n```\n{F100919}\n\n###Example\nServer Code:\n```\n#!/usr/bin/env ruby\nrequire 'sinatra'\nrequire 'uri'\nrequire 'net/http'\n\nget '/' do\n  'hello world'\nend\n\npost '/' do\n  ip = params[:ip]\n  port = params[:port]\n  path = params[:path]\n\n  # do what you want\n  http = Net::HTTP.new ip, port.to_i\n  res = http.get path\n\n  res.body\n\nend\n```\npost data:\n\n```\nip=192.168.30.214\u0026port=80\u0026path=/r.php%20HTTP/1.1%0d%0ax-injection: memeda\n```\n\nprint_r all HTTP Headers：\n\n{F100918}\n\n\n###Create an evil request\n\npost data:\n\n{F100920}\n\nserver log:\n{F100921}\n\n\n###Suggestion:\n\nShould validate URI legality before send request\n\nbtw，\n\nCloud I have a CVEID with this vulnerability? reported by @redrain(rootredrain@gmail.com) and @ztz(ztz5651483@gmail.com) ","vulnerability_information_html":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003eI would like to report a HTTP Header injection vulnerability in \u0026#39;net/http\u0026#39; that allows attackers to inject arbitrary headers in request even create a new evil request.\u003c/p\u003e\n\n\u003ch3 id=\"poc\"\u003ePoC\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003erequire \u0026#39;net/http\u0026#39;\nhttp = Net::HTTP.new(\u0026#39;192.168.30.214\u0026#39;,\u0026#39;80\u0026#39;)\nres = http.get(\u0026quot;/r.php HTTP/1.1\\r\\nx-injection: memeda\u0026quot;)\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"222333.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?response-content-disposition=attachment%3B%20filename%3D%22222333.png%22%3B%20filename%2A%3DUTF-8%27%27222333.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=7038c908128431c78cacce2794c8289afbd7323457beaec18752ff9e416e1147\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?response-content-disposition=attachment%3B%20filename%3D%22222333.png%22%3B%20filename%2A%3DUTF-8%27%27222333.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=7038c908128431c78cacce2794c8289afbd7323457beaec18752ff9e416e1147\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"example\"\u003eExample\u003c/h3\u003e\n\n\u003cp\u003eServer Code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env ruby\u003c/span\u003e\n\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;sinatra\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;uri\u0026#39;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;net/http\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:ip\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:port\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# do what you want\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_i\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebody\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003epost data:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eip=192.168.30.214\u0026amp;port=80\u0026amp;path=/r.php%20HTTP/1.1%0d%0ax-injection: memeda\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eprint_r all HTTP Headers：\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"123123.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?response-content-disposition=attachment%3B%20filename%3D%22123123.png%22%3B%20filename%2A%3DUTF-8%27%27123123.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=136527973cd96e73bf93047eec95aa1af90752df7d0784a1be761b4c7b91ebea\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?response-content-disposition=attachment%3B%20filename%3D%22123123.png%22%3B%20filename%2A%3DUTF-8%27%27123123.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=136527973cd96e73bf93047eec95aa1af90752df7d0784a1be761b4c7b91ebea\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"create-an-evil-request\"\u003eCreate an evil request\u003c/h3\u003e\n\n\u003cp\u003epost data:\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"4444.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?response-content-disposition=attachment%3B%20filename%3D%224444.png%22%3B%20filename%2A%3DUTF-8%27%274444.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=65e5e1bd434687682528f73364408bd99191d0a0559e321c4d0eb7dc8cea3ba3\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?response-content-disposition=attachment%3B%20filename%3D%224444.png%22%3B%20filename%2A%3DUTF-8%27%274444.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=65e5e1bd434687682528f73364408bd99191d0a0559e321c4d0eb7dc8cea3ba3\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eserver log:\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"5555.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?response-content-disposition=attachment%3B%20filename%3D%225555.png%22%3B%20filename%2A%3DUTF-8%27%275555.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=ced9f2b7601cc8aec0b4801a67d072912b52371ce5d632a5b69518bcb02e37a3\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?response-content-disposition=attachment%3B%20filename%3D%225555.png%22%3B%20filename%2A%3DUTF-8%27%275555.png\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043103Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026amp;X-Amz-Signature=ced9f2b7601cc8aec0b4801a67d072912b52371ce5d632a5b69518bcb02e37a3\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch3 id=\"suggestion\"\u003eSuggestion:\u003c/h3\u003e\n\n\u003cp\u003eShould validate URI legality before send request\u003c/p\u003e\n\n\u003cp\u003ebtw，\u003c/p\u003e\n\n\u003cp\u003eCloud I have a CVEID with this vulnerability? reported by \u003ca href=\"/redrain\"\u003e@redrain\u003c/a\u003e(\u003ca title=\"rootredrain@gmail.com\" href=\"mailto:rootredrain@gmail.com\" rel=\"nofollow noopener noreferrer\"\u003erootredrain@gmail.com\u003c/a\u003e) and \u003ca href=\"/ztz\"\u003e@ztz\u003c/a\u003e(\u003ca title=\"ztz5651483@gmail.com\" href=\"mailto:ztz5651483@gmail.com\" rel=\"nofollow noopener noreferrer\"\u003eztz5651483@gmail.com\u003c/a\u003e) \u003c/p\u003e\n","weakness":{"id":53,"name":"Open Redirect"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":100918,"file_name":"123123.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/918/7b7d13febcf1981da6154a3813ea2fb9fa631290/123123.png?response-content-disposition=attachment%3B%20filename%3D%22123123.png%22%3B%20filename%2A%3DUTF-8%27%27123123.png\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T043103Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=136527973cd96e73bf93047eec95aa1af90752df7d0784a1be761b4c7b91ebea","file_size":132962,"type":"image/jpeg"},{"id":100919,"file_name":"222333.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/919/2c568749f0b375686b0b23366eda8989332f1114/222333.png?response-content-disposition=attachment%3B%20filename%3D%22222333.png%22%3B%20filename%2A%3DUTF-8%27%27222333.png\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T043103Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=7038c908128431c78cacce2794c8289afbd7323457beaec18752ff9e416e1147","file_size":344655,"type":"image/jpeg"},{"id":100920,"file_name":"4444.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/920/51dc9ad18ecf75f937229311a374f32cd08a11bc/4444.png?response-content-disposition=attachment%3B%20filename%3D%224444.png%22%3B%20filename%2A%3DUTF-8%27%274444.png\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T043103Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=65e5e1bd434687682528f73364408bd99191d0a0559e321c4d0eb7dc8cea3ba3","file_size":62514,"type":"image/jpeg"},{"id":100921,"file_name":"5555.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/100/921/6cee949a6cfe9a176c7fafcb1904c3978a1cf6d0/5555.png?response-content-disposition=attachment%3B%20filename%3D%225555.png%22%3B%20filename%2A%3DUTF-8%27%275555.png\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQT27VLVF5%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T043103Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDyDghanG6vysQhpIAbM6%2FNloTNBCfelRP1BGB1eeXDqQIgbh0u2InfYPRbM%2F0t24amgCOkVvoWkVHPo82TR%2BcSzPAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDG%2B9r1w6aCtbN7N%2FgSqRA8D1stzGXUi9998X9PqljCsxgqGb%2Fp5uwkl6HJ0ecyYUUOvKKK5bmjBmyhHU2siTJ5oMPHjZxACmC8QQR3zoStgvndU2Zk5FbI60XrAqVuUH%2BAK8pT26qvrZcq89M6eB7hRHvO%2BlRluLVtVVrfnC9UY0ATKZRmiYQyw9njaWy8e1cjtpV8uOzRbjAhSciTaQQ4Rof7K88HsyWXiwgfBdP3a0%2F0Eg3oYuiHO02sK0kJaBKVYS07wec5XsHKb5ikjLS61g4AVfdD4E0s3BTqyyWJeUCuyZ2YF95UI2CgkxcN5uOwwloEhHGonUYBlgrAIqXt%2FcecQNzktOM4Kjb30muwbzt0arTqS1XHySraj31WYHm2Cjy8AzyWIgNzu3Fq1xIENb3SovWG27JzCLGUyEU3ScE8nRNwiiydbGzKllImVZY%2BlC%2Bix1yqgNQOGSyxfVhY5J1d45Od%2BL4mUjygcLy%2FfzSKLf2qk3Prr%2BvcoxR9uUbkbtYRAEtizE%2BcIlRuTm3EFnBIvoMHCuplZLf4vZOpMrMLy9qv8FOusBWsgqdyTGkJS5%2BgtM3tHipB468LJZahmRjNSAud9TlniHiRJFpE4feQDaRgu4UD5waPGdkb1Mb3i2BGePA4gRyDu2hwL2UgW1yGpknpSCsy8uyMOhlVuIUyq7t0qBeid6h%2BvKgio2%2B05MKsls9XtVWxBqwW4LqYzc6KBQa0dOAdmkMORLktM2DWUfeoN%2FP12TUiKzRe%2BPGjaA3xBRgCZ2zNYmbNzYsoqOBfPEmbGygz2YZR0LAXBWrVpPc%2FJcYMLT6Jiu%2B2LCo6XyNRnu8YlFqwJ3EhjYkRvFzarUXssQ7cQHuLkop%2BkUTr8Vig%3D%3D\u0026X-Amz-Signature=ced9f2b7601cc8aec0b4801a67d072912b52371ce5d632a5b69518bcb02e37a3","file_size":32262,"type":"image/jpeg"}],"allow_singular_disclosure_at":null,"vote_count":4,"voters":["bobrov","rbcafe","spetr0x","hi_ztz"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1027895,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The problem is this line in lib/net/http/generic_request.rb:324\n\n```ruby\n  def write_header(sock, ver, path)\n    buf = \"#{@method} #{path} HTTP/#{ver}\\r\\n\"\n    each_capitalized do |k,v|\n      buf \u003c\u003c \"#{k}: #{v}\\r\\n\"\n    end\n    buf \u003c\u003c \"\\r\\n\"\n    sock.write buf\n  end\n```\n\n`\"#{@method} #{path} HTTP/#{ver}\\r\\n\"` should be checked here to avoid malicious input\n","markdown_message":"\u003cp\u003eThe problem is this line in lib/net/http/generic_request.rb:324\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ewrite_header\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ever\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"vi\"\u003e@method\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e HTTP/\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ever\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eeach_capitalized\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e: \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esock\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ewrite\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e\u0026quot;#{@method} #{path} HTTP/#{ver}\\r\\n\u0026quot;\u003c/code\u003e should be checked here to avoid malicious input\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-22T08:59:32.371Z","updated_at":"2016-06-22T08:59:32.371Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1031083,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for your report.\n\nWe don't consider this a vulnerability because Net::HTTP#get is not designed to accept malicious input.\nApplications have responsibility to verify input syntactically and semantically (accepting all RFC2616-compliant input would not be a good idea).\n\nSo we would like to handle this as a normal issue.","markdown_message":"\u003cp\u003eThanks for your report.\u003c/p\u003e\n\n\u003cp\u003eWe don\u0026#39;t consider this a vulnerability because Net::HTTP#get is not designed to accept malicious input.\u003cbr\u003e\nApplications have responsibility to verify input syntactically and semantically (accepting all RFC2616-compliant input would not be a good idea).\u003c/p\u003e\n\n\u003cp\u003eSo we would like to handle this as a normal issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T01:01:54.660Z","updated_at":"2016-06-24T01:01:54.660Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033509,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi shugo,\n\nThanks for the reply. Please don't leave this problem to developers, they have uneven level at developing. \n\nFor example, assume we have a demo website, the only thing do is generate a new HTTP request:\n\n```ruby\n#!/usr/bin/env ruby\nrequire 'sinatra'\n\nget '/' do\n  'hello world'\nend\n\npost '/' do\n  ip = params[:ip]\n  port = params[:port]\n  path = params[:path]\n\n  # send the request to another site\n  http = Net::HTTP.new ip, port.to_i\n  res = http.get path\n\n  res.body\nend\n```\n\nIt's a common demand, right ?\n\nBut web developer may not realized that __sinatra__ will auto decode url. \nAttacker can encode __\\r\\n__ to __%0a%0d__, send to the __sinatra__, __sinatra__ will decode url to __\\r\\n__ and pass to the __path__, finally cause a HTTP Header Injection or CRLF Injection.\n\nPlease assume all input is malicious. Here is a similar vulnerability in python: [CVE-2016-5699](http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html)\n \nHere is  what another HTTP lib  __Faraday__ do may change your mind.\n\nlib/faraday/connection.rb:308\n\n```ruby\ndef url_prefix=(url, encoder = nil)\n  uri = url_prefix = Utils.URI(url)\n  self.path_prefix = uri.path\n  # ... ... ...\n  uri\nend\n```\n\n`uri = url_prefix = Utils.URI(url)` try to convert `url` to __URI__, It will raise an error when `url` is invalid.\n\nlib/faraday/connection.rb:399\n\n```ruby\ndef build_exclusive_url(url = nil, params = nil, params_encoder = nil)\n  url = nil if url.respond_to?(:empty?) and url.empty?\n  base = url_prefix\n  # ... ... ...\n  uri = url ? base + url : base\n  # ... ... ...\nend\n```\n\n`uri = url ? base + url : base` will trigger another examination `convert_to_uri`:\n\n```ruby\ndef convert_to_uri(uri)\n  if uri.is_a?(URI::Generic)\n    uri\n  elsif uri = String.try_convert(uri)\n    parse(uri)\n  else\n    raise ArgumentError,\n          \"bad argument (expected URI object or URI string)\"\n  end\nend\n```\n\nIf url is invalid, it will raise an error.\n\nPlease let me know if you need more info.","markdown_message":"\u003cp\u003eHi shugo,\u003c/p\u003e\n\n\u003cp\u003eThanks for the reply. Please don\u0026#39;t leave this problem to developers, they have uneven level at developing. \u003c/p\u003e\n\n\u003cp\u003eFor example, assume we have a demo website, the only thing do is generate a new HTTP request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e#!/usr/bin/env ruby\u003c/span\u003e\n\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;sinatra\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eget\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eip\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:ip\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:port\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# send the request to another site\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eNet\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_i\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eget\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ebody\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt\u0026#39;s a common demand, right ?\u003c/p\u003e\n\n\u003cp\u003eBut web developer may not realized that \u003cstrong\u003esinatra\u003c/strong\u003e will auto decode url. \u003cbr\u003e\nAttacker can encode \u003cstrong\u003e\\r\\n\u003c/strong\u003e to \u003cstrong\u003e%0a%0d\u003c/strong\u003e, send to the \u003cstrong\u003esinatra\u003c/strong\u003e, \u003cstrong\u003esinatra\u003c/strong\u003e will decode url to \u003cstrong\u003e\\r\\n\u003c/strong\u003e and pass to the \u003cstrong\u003epath\u003c/strong\u003e, finally cause a HTTP Header Injection or CRLF Injection.\u003c/p\u003e\n\n\u003cp\u003ePlease assume all input is malicious. Here is a similar vulnerability in python: \u003ca href=\"/redirect?url=http%3A%2F%2Fblog.blindspotsecurity.com%2F2016%2F06%2Fadvisory-http-header-injection-in.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eCVE-2016-5699\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere is  what another HTTP lib  \u003cstrong\u003eFaraday\u003c/strong\u003e do may change your mind.\u003c/p\u003e\n\n\u003cp\u003elib/faraday/connection.rb:308\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eurl_prefix\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eencoder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eurl_prefix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eUtils\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eURI\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003epath_prefix\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003epath\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ... ... ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003euri\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003euri = url_prefix = Utils.URI(url)\u003c/code\u003e try to convert \u003ccode\u003eurl\u003c/code\u003e to \u003cstrong\u003eURI\u003c/strong\u003e, It will raise an error when \u003ccode\u003eurl\u003c/code\u003e is invalid.\u003c/p\u003e\n\n\u003cp\u003elib/faraday/connection.rb:399\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuild_exclusive_url\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparams\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparams_encoder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erespond_to?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:empty?\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eempty?\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eurl_prefix\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ... ... ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ebase\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ... ... ...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003euri = url ? base + url : base\u003c/code\u003e will trigger another examination \u003ccode\u003econvert_to_uri\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003econvert_to_uri\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eURI\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eGeneric\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003euri\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etry_convert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"no\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n          \u003cspan class=\"s2\"\u003e\u0026quot;bad argument (expected URI object or URI string)\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf url is invalid, it will raise an error.\u003c/p\u003e\n\n\u003cp\u003ePlease let me know if you need more info.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T06:58:50.665Z","updated_at":"2016-06-24T06:58:50.665Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1033513,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e It's a common demand, right ?\n\nI'm not sure about that.\n\nI think this is a bug we should probably address, but I don't think we should consider this a vulnerability.  Fetching arbitrary paths from user input seems pretty dubious.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eIt\u0026#39;s a common demand, right ?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI\u0026#39;m not sure about that.\u003c/p\u003e\n\n\u003cp\u003eI think this is a bug we should probably address, but I don\u0026#39;t think we should consider this a vulnerability.  Fetching arbitrary paths from user input seems pretty dubious.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T07:05:44.063Z","updated_at":"2016-06-24T07:05:44.063Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033525,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi tenderlove,\n\nHere is my point :\nAll input can not be trusted.\n\nWe should validate url in Net::HTTP","markdown_message":"\u003cp\u003eHi tenderlove,\u003c/p\u003e\n\n\u003cp\u003eHere is my point :\u003cbr\u003e\nAll input can not be trusted.\u003c/p\u003e\n\n\u003cp\u003eWe should validate url in Net::HTTP\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T07:25:00.360Z","updated_at":"2016-06-24T07:25:00.360Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1033528,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e All input can not be trusted.\n\nYes, people should be *whitelisting* paths passed in.  An open proxy is already a vulnerability, regardless of header injection.\n\nAs I said, we should treat this as a bug.  But since an open proxy is already a security problem (that we cannot fix), then I don't think this bug should be treated as a security issue.","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eAll input can not be trusted.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYes, people should be \u003cem\u003ewhitelisting\u003c/em\u003e paths passed in.  An open proxy is already a vulnerability, regardless of header injection.\u003c/p\u003e\n\n\u003cp\u003eAs I said, we should treat this as a bug.  But since an open proxy is already a security problem (that we cannot fix), then I don\u0026#39;t think this bug should be treated as a security issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T07:28:46.260Z","updated_at":"2016-06-24T07:28:46.260Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033543,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e But web developer may not realized that sinatra will auto decode url. \n\u003e Attacker can encode \\r\\n to %0a%0d, send to the sinatra, sinatra will decode url to \\r\\n and pass to the path, finally cause a HTTP Header Injection or CRLF Injection.\n\nIn that case, it seems to be a bug of that application, not Net::HTTP#get.\n\nI'm not against adding argument verification to Net::HTTP#get, though.\n","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eBut web developer may not realized that sinatra will auto decode url. \u003cbr\u003e\nAttacker can encode \\r\\n to %0a%0d, send to the sinatra, sinatra will decode url to \\r\\n and pass to the path, finally cause a HTTP Header Injection or CRLF Injection.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn that case, it seems to be a bug of that application, not Net::HTTP#get.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m not against adding argument verification to Net::HTTP#get, though.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T08:06:40.871Z","updated_at":"2016-06-24T08:06:40.871Z","actor":{"username":"shugo","cleared":false,"url":"/shugo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/076/177/c63f990ae1ef62a77c2ff1e5b2db5e4dd3db2557_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033548,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"\u003e But since an open proxy is already a security problem\n\nYes, an open proxy is already a vulnerability and you can't fix that, but attack scenarios is not only include an open proxy, but also include many other parts.\n\nA site like google image, user can paste image url on it, then site will request the resource. It's possible to suffer this attack.\n\nSome video sites allow user reference outside resource. It's possible to suffer this attack.\n\nSo you can not treat it occur in an unusual scenarios. I still consider it was a security issue.\n","markdown_message":"\u003cblockquote\u003e\n\u003cp\u003eBut since an open proxy is already a security problem\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYes, an open proxy is already a vulnerability and you can\u0026#39;t fix that, but attack scenarios is not only include an open proxy, but also include many other parts.\u003c/p\u003e\n\n\u003cp\u003eA site like google image, user can paste image url on it, then site will request the resource. It\u0026#39;s possible to suffer this attack.\u003c/p\u003e\n\n\u003cp\u003eSome video sites allow user reference outside resource. It\u0026#39;s possible to suffer this attack.\u003c/p\u003e\n\n\u003cp\u003eSo you can not treat it occur in an unusual scenarios. I still consider it was a security issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T08:11:42.724Z","updated_at":"2016-06-24T08:11:42.724Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1033549,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If you believe this is not a issue, please allow the public disclosure.","markdown_message":"\u003cp\u003eIf you believe this is not a issue, please allow the public disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T08:13:19.243Z","updated_at":"2016-06-24T08:13:19.243Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1033554,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"I've closed as informative, and I'll allow public disclosure.","markdown_message":"\u003cp\u003eI\u0026#39;ve closed as informative, and I\u0026#39;ll allow public disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T08:17:39.517Z","updated_at":"2016-06-24T08:17:39.517Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033558,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-06-24T08:20:42.949Z","updated_at":"2016-06-24T08:20:42.949Z","first_to_agree":true,"actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1033562,"is_internal":false,"editable":false,"type":"Activities::HackerRequestedMediation","message":"The HTTP scheme handler accepts percent-encoded values as part of the URL.\n\nThe generic_request.rb allows unsafe characters, it dosen't have any safe filtration, attackers can cause actual security threat. so we consider it is a vulnerability","markdown_message":"\u003cp\u003eThe HTTP scheme handler accepts percent-encoded values as part of the URL.\u003c/p\u003e\n\n\u003cp\u003eThe generic_request.rb allows unsafe characters, it dosen\u0026#39;t have any safe filtration, attackers can cause actual security threat. so we consider it is a vulnerability\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-24T08:27:25.846Z","updated_at":"2016-06-24T08:27:25.846Z","actor":{"username":"rootredrain","cleared":false,"url":"/rootredrain","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/070/636/d17a946e0ff96b57ee1ba2548c5631023bccf077_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1507062,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2017-02-27T02:02:52.810Z","updated_at":"2017-02-27T02:02:52.810Z","actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}