{"id":361341,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zNjEzNDE=","url":"https://hackerone.com/reports/361341","title":"Unsafe deserialization in Libera Pay allows to escalate a SQL injection to Remote Command Execution","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2018-06-03T13:37:46.400Z","submitted_at":"2018-06-03T13:37:46.400Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"kapytein","url":"/kapytein","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/H1zdsrnjSBH6Y8oB1YSvGJx2/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":28411,"url":"https://hackerone.com/liberapay","handle":"liberapay","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/028/411/c0a012abdcef38b417e29616505b1a3b4ed87b81_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/028/411/c0a012abdcef38b417e29616505b1a3b4ed87b81_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Liberapay","twitter_handle":"liberapay","website":"https://liberapay.com","about":"An open source platform designed to facilitate recurrent donations."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-06-04T17:42:54.585Z","bug_reporter_agreed_on_going_public_at":"2018-06-04T17:42:54.496Z","team_member_agreed_on_going_public_at":"2018-06-04T17:30:23.624Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello.\n\nThere isn't a direct vulnerability, however a SQL injection would easily be escalated to a Remote Code Execution. I can't directly exploit it due to the restriction on team names (it does not accept hexdecimal values). I, however, submit this issue in advance and will attempt to escalate this issue further, if possible together with you.\n\n**Vulnerability details**\n\nThe vulnerability relies in the serializer \u0026 deserializier used for notifications of users. It is using [pickles](https://github.com/liberapay/liberapay.com/blob/8546e2212f08f0d0ad71008ccf679744c3e8fb81/liberapay/utils/__init__.py#L370), which is known to be unsafe. You can basically craft any object, and pickles will happily execute the object. This allows unsafe deserialization, which could lead to Remote Code Execution.\n\nIn this case, as far as I have seen, it is used for notifications. As far as I have seen, the deserializer is only used to render notifications, in `render_notifications`, as seen [here](https://github.com/liberapay/liberapay.com/blob/8546e2212f08f0d0ad71008ccf679744c3e8fb81/liberapay/models/participant.py#L1083). \n\n```python\n  for id, event, notif_context, is_new, ts in notifs:\n            try:\n                notif_context = deserialize(notif_context)\n```\nThe `render_notifications` function is then used on the notifications template page, as seen here:\n\n```\n\n# NOTE: don't factor the render_notifications() call here, it'll break escaping\n\n[---] application/json via json_dump\nparticipant.render_notifications(state)\n\n[---] text/html\n% extends \"templates/base.html\"\n```\n\nThere is no other place where the deserializer is used, as far as I have seen. The serializer is used in the `notify` function, as seen [here](https://github.com/liberapay/liberapay.com/blob/9ad0dc79183b052df4e1ca5f23914450991f6888/liberapay/models/participant.py#L1010), thus, in the future, whenever unrestrictive input is taken from the user into this function, it will directly allow Remote Code Execution.\n\n**Proof of Concept**\n1. Invite an user into your team.\n2. Update the context of the notification in the table notifications, by running the SQL query:\n\nUPDATE notifications SET context = E'\\\\x80027d710028580400000061736432710158030000006c6f6c71025801000000627103580500000033303030307104580100000063710563706f7369780a73797374656d0a7106580c000000736c656570203530303030307107857108527109752e' WHERE id = 43;`\n\n3. Log in as the user who is invited to your team, browse to notifications and notices that the sleep command was used (basically, it will hang).\n\n## Impact\n\nThis could allow remote code execution if a SQL injection is escalated.","vulnerability_information_html":"\u003cp\u003eHello.\u003c/p\u003e\n\n\u003cp\u003eThere isn\u0026#39;t a direct vulnerability, however a SQL injection would easily be escalated to a Remote Code Execution. I can\u0026#39;t directly exploit it due to the restriction on team names (it does not accept hexdecimal values). I, however, submit this issue in advance and will attempt to escalate this issue further, if possible together with you.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVulnerability details\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eThe vulnerability relies in the serializer \u0026amp; deserializier used for notifications of users. It is using \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F8546e2212f08f0d0ad71008ccf679744c3e8fb81%2Fliberapay%2Futils%2F__init__.py%23L370\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003epickles\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, which is known to be unsafe. You can basically craft any object, and pickles will happily execute the object. This allows unsafe deserialization, which could lead to Remote Code Execution.\u003c/p\u003e\n\n\u003cp\u003eIn this case, as far as I have seen, it is used for notifications. As far as I have seen, the deserializer is only used to render notifications, in \u003ccode\u003erender_notifications\u003c/code\u003e, as seen \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F8546e2212f08f0d0ad71008ccf679744c3e8fb81%2Fliberapay%2Fmodels%2Fparticipant.py%23L1083\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"nb\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eevent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enotif_context\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eis_new\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ets\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003enotifs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n            \u003cspan class=\"k\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n                \u003cspan class=\"n\"\u003enotif_context\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edeserialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enotif_context\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003erender_notifications\u003c/code\u003e function is then used on the notifications template page, as seen here:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\n# NOTE: don\u0026#39;t factor the render_notifications() call here, it\u0026#39;ll break escaping\n\n[---] application/json via json_dump\nparticipant.render_notifications(state)\n\n[---] text/html\n% extends \u0026quot;templates/base.html\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere is no other place where the deserializer is used, as far as I have seen. The serializer is used in the \u003ccode\u003enotify\u003c/code\u003e function, as seen \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fblob%2F9ad0dc79183b052df4e1ca5f23914450991f6888%2Fliberapay%2Fmodels%2Fparticipant.py%23L1010\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, thus, in the future, whenever unrestrictive input is taken from the user into this function, it will directly allow Remote Code Execution.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eProof of Concept\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eInvite an user into your team.\u003c/li\u003e\n\u003cli\u003eUpdate the context of the notification in the table notifications, by running the SQL query:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eUPDATE notifications SET context = E\u0026#39;\\x80027d710028580400000061736432710158030000006c6f6c71025801000000627103580500000033303030307104580100000063710563706f7369780a73797374656d0a7106580c000000736c656570203530303030307107857108527109752e\u0026#39; WHERE id = 43;`\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eLog in as the user who is invited to your team, browse to notifications and notices that the sleep command was used (basically, it will hang).\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThis could allow remote code execution if a SQL injection is escalated.\u003c/p\u003e\n","weakness":{"id":52,"name":"Deserialization of Untrusted Data"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-07-04T17:30:23.719Z","allow_singular_disclosure_after":-78495177.71617997,"singular_disclosure_allowed":true,"vote_count":16,"voters":["kapytein","europa","emitrani","edoverflow","eveeez","apapedulimu","an0nym0us","dz_samir","ifrahiman","grampae","and 6 more..."],"structured_scope":{"databaseId":8927,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/liberapay/liberapay.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2835497,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your submission! I am currently reviewing your report.","markdown_message":"\u003cp\u003eThank you for your submission! I am currently reviewing your report.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-03T13:40:51.452Z","updated_at":"2018-06-03T13:40:51.452Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2835516,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"We are triaging this report to indicate that we have reviewed your report and are working on constructing a proof of concept locally.","markdown_message":"\u003cp\u003eWe are triaging this report to indicate that we have reviewed your report and are working on constructing a proof of concept locally.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-03T13:49:36.763Z","updated_at":"2018-06-03T13:49:36.763Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2838284,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This potential vulnerability, which we were already aware of, now has a ticket in our public issue tracker: \u003chttps://github.com/liberapay/liberapay.com/issues/1132\u003e.","markdown_message":"\u003cp\u003eThis potential vulnerability, which we were already aware of, now has a ticket in our public issue tracker: \u003ca title=\"https://github.com/liberapay/liberapay.com/issues/1132\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fissues%2F1132\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/liberapay/liberapay.com/issues/1132\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-04T09:59:49.517Z","updated_at":"2018-06-04T09:59:49.517Z","actor":{"username":"changaco","cleared":false,"url":"/changaco","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/057/214/a4a950c93bb68bb76a61cf02b1484a518e8c7a90_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2838506,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Basically, what is happening currently, is the folllowing:\n\n{F305081}\n\n(Visualized to keep things simple, and clear)\n\nThis does not seem to be exploitable directly, even when you remove the name restrictions locally (my assumptions stated in the report were wrong). Given the fact that you `binascii.hexlify()` the data in the `serialize` function, the data stays a `bytes` object and thus will be loaded as a `bytes` object via pickle.\n\n**In which cases is this exploitable?**\n\n1. Calling the `deserialize` function directly on input which is not (verified to be) serialized before.\n2. A SQL injection.\n\nI haven't been able to find both potential issues in your code, making this unexploitable directly and thus more a theoretical risk. When an error is made, and non-verified serialized input is taken into, for example, the context field of the table notifications through the `notify` function, this will be immediate exploitable. However, I don't think that could happen too quickly. You are basically currently controlling what object is loaded by `pickle`, making it save unless errors are being made.\n\nIt was interesting to investigate this issue, and I've learnt a lot from it. As discussed with @edoverflow via Slack, I'd love to self-close this issue to avoid losing reputation/signal due to the informative/N/A report state (in order to self-close this report, I need you to re-open the report to the New or Needs More Info state).\n\nThank you!","markdown_message":"\u003cp\u003eBasically, what is happening currently, is the folllowing:\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"IVIF3zD.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?response-content-disposition=attachment%3B%20filename%3D%22IVIF3zD.jpg%22%3B%20filename%2A%3DUTF-8%27%27IVIF3zD.jpg\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T054321Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026amp;X-Amz-Signature=7db37fa5abeddc95f66e70de925b4d184679cbfff5c9247f65216161ff388d58\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?response-content-disposition=attachment%3B%20filename%3D%22IVIF3zD.jpg%22%3B%20filename%2A%3DUTF-8%27%27IVIF3zD.jpg\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T054321Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026amp;X-Amz-Signature=7db37fa5abeddc95f66e70de925b4d184679cbfff5c9247f65216161ff388d58\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e(Visualized to keep things simple, and clear)\u003c/p\u003e\n\n\u003cp\u003eThis does not seem to be exploitable directly, even when you remove the name restrictions locally (my assumptions stated in the report were wrong). Given the fact that you \u003ccode\u003ebinascii.hexlify()\u003c/code\u003e the data in the \u003ccode\u003eserialize\u003c/code\u003e function, the data stays a \u003ccode\u003ebytes\u003c/code\u003e object and thus will be loaded as a \u003ccode\u003ebytes\u003c/code\u003e object via pickle.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIn which cases is this exploitable?\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eCalling the \u003ccode\u003edeserialize\u003c/code\u003e function directly on input which is not (verified to be) serialized before.\u003c/li\u003e\n\u003cli\u003eA SQL injection.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI haven\u0026#39;t been able to find both potential issues in your code, making this unexploitable directly and thus more a theoretical risk. When an error is made, and non-verified serialized input is taken into, for example, the context field of the table notifications through the \u003ccode\u003enotify\u003c/code\u003e function, this will be immediate exploitable. However, I don\u0026#39;t think that could happen too quickly. You are basically currently controlling what object is loaded by \u003ccode\u003epickle\u003c/code\u003e, making it save unless errors are being made.\u003c/p\u003e\n\n\u003cp\u003eIt was interesting to investigate this issue, and I\u0026#39;ve learnt a lot from it. As discussed with \u003ca href=\"/edoverflow\"\u003e@edoverflow\u003c/a\u003e via Slack, I\u0026#39;d love to self-close this issue to avoid losing reputation/signal due to the informative/N/A report state (in order to self-close this report, I need you to re-open the report to the New or Needs More Info state).\u003c/p\u003e\n\n\u003cp\u003eThank you!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-04T11:36:40.828Z","updated_at":"2018-06-04T11:43:46.543Z","actor":{"username":"kapytein","cleared":true,"url":"/kapytein","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/H1zdsrnjSBH6Y8oB1YSvGJx2/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":305081,"filename":"IVIF3zD.jpg","type":"image/jpeg","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?response-content-disposition=attachment%3B%20filename%3D%22IVIF3zD.jpg%22%3B%20filename%2A%3DUTF-8%27%27IVIF3zD.jpg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T054321Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026X-Amz-Signature=7db37fa5abeddc95f66e70de925b4d184679cbfff5c9247f65216161ff388d58"}],"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2838673,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"@kapytein In recognition of the quality of your report I am closing it as Resolved to reward you with reputation points. :-)","markdown_message":"\u003cp\u003e\u003ca href=\"/kapytein\"\u003e@kapytein\u003c/a\u003e In recognition of the quality of your report I am closing it as Resolved to reward you with reputation points. :-)\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-04T12:39:14.189Z","updated_at":"2018-06-04T12:39:14.189Z","actor":{"username":"changaco","cleared":false,"url":"/changaco","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/057/214/a4a950c93bb68bb76a61cf02b1484a518e8c7a90_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"kapytein","url":"/kapytein"},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2840084,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"The vulnerability is not exploitable.","markdown_message":"\u003cp\u003eThe vulnerability is not exploitable.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-04T17:29:53.943Z","updated_at":"2018-06-04T17:29:53.943Z","actor":{"url":"/liberapay","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/028/411/c0a012abdcef38b417e29616505b1a3b4ed87b81_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Liberapay"}},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2840086,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-04T17:30:23.667Z","updated_at":"2018-06-04T17:30:23.667Z","first_to_agree":true,"actor":{"username":"changaco","cleared":false,"url":"/changaco","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/057/214/a4a950c93bb68bb76a61cf02b1484a518e8c7a90_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2840154,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Sure, let's go for disclosure. Totally agree that no bounty is awarded.","markdown_message":"\u003cp\u003eSure, let\u0026#39;s go for disclosure. Totally agree that no bounty is awarded.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-06-04T17:42:54.530Z","updated_at":"2018-06-04T17:42:54.530Z","actor":{"username":"kapytein","cleared":true,"url":"/kapytein","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/H1zdsrnjSBH6Y8oB1YSvGJx2/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2840155,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-04T17:42:54.628Z","updated_at":"2018-06-04T17:42:54.628Z","actor":{"username":"kapytein","cleared":true,"url":"/kapytein","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/H1zdsrnjSBH6Y8oB1YSvGJx2/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4199326,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This issue is now truly resolved as we have stopped using `pickle` and switched to CBOR ([RFC7049](https://tools.ietf.org/html/rfc7049)). See [#1454](https://github.com/liberapay/liberapay.com/pull/1454) and [#1455](https://github.com/liberapay/liberapay.com/pull/1455) for details.","markdown_message":"\u003cp\u003eThis issue is now truly resolved as we have stopped using \u003ccode\u003epickle\u003c/code\u003e and switched to CBOR (\u003ca href=\"/redirect?url=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7049\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eRFC7049\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). See \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fpull%2F1454\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e#1454\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fliberapay%2Fliberapay.com%2Fpull%2F1455\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e#1455\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e for details.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-02-24T08:41:34.426Z","updated_at":"2019-02-24T08:41:34.426Z","actor":{"username":"changaco","cleared":false,"url":"/changaco","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/057/214/a4a950c93bb68bb76a61cf02b1484a518e8c7a90_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"liberapay","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":7614,"category":"researcher","content":"This issue is only exploitable in case of a SQL injection. In the first case, I thought that this was not exploitable due to the fact that there were certain username restrictions. I removed them, took a closer look, and later noticed that this was not exploitable because of other reasons, as further explained in my second comment on this report. (or maybe you actually find a way to exploit this? :D).\n\nI visualized my observations, which made me conclude that this is not exploitable.\n{F305081}","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eThis issue is only exploitable in case of a SQL injection. In the first case, I thought that this was not exploitable due to the fact that there were certain username restrictions. I removed them, took a closer look, and later noticed that this was not exploitable because of other reasons, as further explained in my second comment on this report. (or maybe you actually find a way to exploit this? :D).\u003c/p\u003e\n\n\u003cp\u003eI visualized my observations, which made me conclude that this is not exploitable.\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"IVIF3zD.jpg\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?response-content-disposition=attachment%3B%20filename%3D%22IVIF3zD.jpg%22%3B%20filename%2A%3DUTF-8%27%27IVIF3zD.jpg\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T054321Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026amp;X-Amz-Signature=7db37fa5abeddc95f66e70de925b4d184679cbfff5c9247f65216161ff388d58\" data-attachment-type=\"image/jpeg\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/305/081/ffbf0059440425d7f2c3b9efb0a9771cacc85d40/IVIF3zD.jpg?response-content-disposition=attachment%3B%20filename%3D%22IVIF3zD.jpg%22%3B%20filename%2A%3DUTF-8%27%27IVIF3zD.jpg\u0026amp;response-content-type=image%2Fjpeg\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T054321Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026amp;X-Amz-Signature=7db37fa5abeddc95f66e70de925b4d184679cbfff5c9247f65216161ff388d58\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n"}]}