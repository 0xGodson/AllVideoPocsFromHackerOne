{"id":42702,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MjcwMg==","url":"https://hackerone.com/reports/42702","title":"APIs for channels allow HTML entities that may cause XSS issue","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-01-06T18:33:35.843Z","submitted_at":"2015-01-06T18:33:35.843Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"artem","url":"/artem","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/2i1RS84yiWXNaegFdcLMbwu9/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":56,"url":"https://hackerone.com/vimeo","handle":"vimeo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Vimeo","twitter_handle":"vimeo","website":"https://vimeo.com","about":"Make life worth watching"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2015-01-08T21:37:35.134Z","bug_reporter_agreed_on_going_public_at":"2015-01-08T20:54:43.816Z","team_member_agreed_on_going_public_at":"2015-01-08T21:37:34.593Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello,\r\n\r\nI found Vimeo's bug bounty program on [1]. Please find below details of a security issue I found.\r\n\r\nFirst, APIs for channels [2] allow you to put HTML and javascript to name or description of a channel. For example, an attacker can use a Python script like the following to put javascript to an existing channel:\r\n\r\nimport httplib, urllib\r\nserver = \"api.vimeo.com\"\r\nendpoint = \"/channels/855545\"\r\nparams = urllib.urlencode({'name': 'my channel\u003cscript\u003ealert(document.cookie)\u003c/script\u003e', 'description': 'bug bounty', 'privacy': 'anybody'})\r\nheaders = {\"Authorization\": \"Bearer [token]\", \"Content-Type\": \"application/x-www-form-urlencoded\"}\r\nconn = httplib.HTTPSConnection(server)\r\nconn.request(\"PATCH\", endpoint, params, headers)\r\nresp = conn.getresponse()\r\nprint resp.status, resp.reason\r\ndata = resp.read()\r\nprint data\r\nconn.close()\r\n\r\nI created a channel that contains javascript in description:\r\n\r\nhttps://vimeo.com/channels/855545\r\n\r\nSecond, most of Vimeo's pages cut or encode HTML entities before they are printed out. For example, the page above doesn't execute the injected code. But I found at least two pages that don't encode HTML entities:\r\n\r\nhttps://vimeo.com/album/create\r\nhttps://vimeo.com/channels/\u003cchannel_id\u003e/settings/videos\r\n\r\nWhen you create an album you can add videos to this album (\"Add videos to this Album\" select box on the page above). The select box contains channels you subscribed to or moderate. The page doesn't encode HTML entities when it builds the select box, so the code I injected to name of my channel is successfully executed on this page.\r\n\r\nTechnically this is a stored XSS vulnerability that allows to inject a javascript code on Vimeo's page. But it might be hard to exploit because an attacker needs to do the following:\r\n- make a victim subscribe to a malicious channel, or modify an existing channel a vicim has subscribed to\r\n- make a victim to open https://vimeo.com/album/create page\r\nBoth steps might be not so easy to do, but they are still possible.\r\n\r\nI found some other APIs that allow to put HTML entities, but I have not checked all APIs. The problem may be fixed by making APIs encode or cut HTML entities, but it may probably cause some compatibility issues. Another way is to encode or cut HTML entities before channel name is printed out on the page above. This way, other Vimeo's pages need to be checked.\r\n\r\n[1] https://bugcrowd.com/list-of-bug-bounty-programs\r\n[2] https://developer.vimeo.com/api/endpoints/channels#/{channel_id}\r\n\r\nArtem","vulnerability_information_html":"\u003cp\u003eHello,\u003c/p\u003e\n\n\u003cp\u003eI found Vimeo\u0026#39;s bug bounty program on [1]. Please find below details of a security issue I found.\u003c/p\u003e\n\n\u003cp\u003eFirst, APIs for channels [2] allow you to put HTML and javascript to name or description of a channel. For example, an attacker can use a Python script like the following to put javascript to an existing channel:\u003c/p\u003e\n\n\u003cp\u003eimport httplib, urllib\u003cbr\u003e\nserver = \u0026quot;api.vimeo.com\u0026quot;\u003cbr\u003e\nendpoint = \u0026quot;/channels/855545\u0026quot;\u003cbr\u003e\nparams = urllib.urlencode({\u0026#39;name\u0026#39;: \u0026#39;my channel\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;\u0026#39;, \u0026#39;description\u0026#39;: \u0026#39;bug bounty\u0026#39;, \u0026#39;privacy\u0026#39;: \u0026#39;anybody\u0026#39;})\u003cbr\u003e\nheaders = {\u0026quot;Authorization\u0026quot;: \u0026quot;Bearer [token]\u0026quot;, \u0026quot;Content-Type\u0026quot;: \u0026quot;application/x-www-form-urlencoded\u0026quot;}\u003cbr\u003e\nconn = httplib.HTTPSConnection(server)\u003cbr\u003e\nconn.request(\u0026quot;PATCH\u0026quot;, endpoint, params, headers)\u003cbr\u003e\nresp = conn.getresponse()\u003cbr\u003e\nprint resp.status, resp.reason\u003cbr\u003e\ndata = resp.read()\u003cbr\u003e\nprint data\u003cbr\u003e\nconn.close()\u003c/p\u003e\n\n\u003cp\u003eI created a channel that contains javascript in description:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://vimeo.com/channels/855545\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fchannels%2F855545\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/channels/855545\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSecond, most of Vimeo\u0026#39;s pages cut or encode HTML entities before they are printed out. For example, the page above doesn\u0026#39;t execute the injected code. But I found at least two pages that don\u0026#39;t encode HTML entities:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://vimeo.com/album/create\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Falbum%2Fcreate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/album/create\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://vimeo.com/channels/\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fchannels%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/channels/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026lt;channel_id\u0026gt;/settings/videos\u003c/p\u003e\n\n\u003cp\u003eWhen you create an album you can add videos to this album (\u0026quot;Add videos to this Album\u0026quot; select box on the page above). The select box contains channels you subscribed to or moderate. The page doesn\u0026#39;t encode HTML entities when it builds the select box, so the code I injected to name of my channel is successfully executed on this page.\u003c/p\u003e\n\n\u003cp\u003eTechnically this is a stored XSS vulnerability that allows to inject a javascript code on Vimeo\u0026#39;s page. But it might be hard to exploit because an attacker needs to do the following:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003emake a victim subscribe to a malicious channel, or modify an existing channel a vicim has subscribed to\u003c/li\u003e\n\u003cli\u003emake a victim to open \u003ca title=\"https://vimeo.com/album/create\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Falbum%2Fcreate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/album/create\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e page\nBoth steps might be not so easy to do, but they are still possible.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI found some other APIs that allow to put HTML entities, but I have not checked all APIs. The problem may be fixed by making APIs encode or cut HTML entities, but it may probably cause some compatibility issues. Another way is to encode or cut HTML entities before channel name is printed out on the page above. This way, other Vimeo\u0026#39;s pages need to be checked.\u003c/p\u003e\n\n\u003cp\u003e[1] \u003ca title=\"https://bugcrowd.com/list-of-bug-bounty-programs\" href=\"/redirect?url=https%3A%2F%2Fbugcrowd.com%2Flist-of-bug-bounty-programs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugcrowd.com/list-of-bug-bounty-programs\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n[2] \u003ca title=\"https://developer.vimeo.com/api/endpoints/channels#/%7Bchannel_id%7D\" href=\"/redirect?url=https%3A%2F%2Fdeveloper.vimeo.com%2Fapi%2Fendpoints%2Fchannels%23%2F%257Bchannel_id%257D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://developer.vimeo.com/api/endpoints/channels#/%7Bchannel_id%7D\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eArtem\u003c/p\u003e\n","bounty_amount":"100.0","formatted_bounty":"$100","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-02-07T20:54:44.394Z","allow_singular_disclosure_after":-185878916.29077774,"singular_disclosure_allowed":true,"vote_count":0,"voters":[],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":304543,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks Artem,\n\nWe've patched the API part of this bug, and are investigating other places where the API may be affected. We're still looking into the site-based XSS.\n\nThanks!","markdown_message":"\u003cp\u003eThanks Artem,\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve patched the API part of this bug, and are investigating other places where the API may be affected. We\u0026#39;re still looking into the site-based XSS.\u003c/p\u003e\n\n\u003cp\u003eThanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-06T20:31:37.913Z","updated_at":"2015-01-06T20:31:37.913Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":304601,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"We've patched the channel pages now. This will be going live soon as well as a credit in the HoF. Thanks again!","markdown_message":"\u003cp\u003eWe\u0026#39;ve patched the channel pages now. This will be going live soon as well as a credit in the HoF. Thanks again!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-06T21:48:23.813Z","updated_at":"2015-01-06T21:48:23.813Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"artem","url":"/artem"},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":306442,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-01-08T20:54:43.841Z","updated_at":"2015-01-08T20:54:43.841Z","first_to_agree":true,"actor":{"username":"artem","cleared":false,"url":"/artem","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/2i1RS84yiWXNaegFdcLMbwu9/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":306558,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-01-08T21:37:34.618Z","updated_at":"2015-01-08T21:37:34.618Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":306559,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-01-08T21:37:35.165Z","updated_at":"2015-01-08T21:37:35.165Z","actor":{"username":"andrewp","cleared":false,"url":"/andrewp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/966/b9d700976d0952781d36b6dbd46cb36c8ec59da9_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":309770,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-01-13T19:31:54.779Z","updated_at":"2015-01-13T19:31:54.779Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"bounty_amount":"100.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"vimeo","collaborator":{"username":"artem","url":"/artem"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":310383,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!","markdown_message":"\u003cp\u003eThanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-01-14T06:32:19.316Z","updated_at":"2015-01-14T06:32:19.316Z","actor":{"username":"artem","cleared":false,"url":"/artem","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/2i1RS84yiWXNaegFdcLMbwu9/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}