{"id":126197,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMjYxOTc=","url":"https://hackerone.com/reports/126197","title":"XSS In archive.uber.com Due to Mime Sniffing in IE","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-03-26T17:00:44.769Z","submitted_at":"2016-03-26T17:00:44.769Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ddworken","url":"/ddworken","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":314,"url":"https://hackerone.com/uber","handle":"uber","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Uber","twitter_handle":"","website":"https://www.uber.com","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2016-04-06T21:27:51.396Z","bug_reporter_agreed_on_going_public_at":"2016-04-01T22:07:52.433Z","team_member_agreed_on_going_public_at":"2016-04-06T21:27:46.789Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"```archive.uber.com``` hosts a mirror of pypi at ```archive.uber.com/pypi/simple/```. It mirrors all of the ```.tar.gz``` that are uploaded to pypi. The MIME type of all the ```.tar.gz``` files is ```application/octet-stream```. Since the MIME type is not specified, browsers will automatically try to determine the type of the file. Chrome and Firefox both do so by looking the first few bytes of the file. Internet explorer scans the first 256 bytes of the file for ```html``` and if it finds ```html``` it will interpret the file as HTML. So by creating a ```.tar.gz``` that contains ```\u003chtml\u003e\u003cscript\u003ealert(0)\u003c/script\u003e\u003c/html\u003e``` one can inject javascript into the page. \n\nBy default pypi doesn't allow you to create the ```.tar.gz``` manually (instead it creates it and uploads it with the same command). This can be bypassed by first building the ```.tar.gz``` by doing ```python setup.py sdist``` to build the ```.tar.gz``` before uploading it with an external program. After we create the ```.tar.gz``` we need to modify it so that it contains our inject HTML. Thankfully pypi doesn't validate a ```.tar.gz``` to check whether it is valid, so we can simply edit the ```.tar.gz``` and blindly insert the injected HTML. ```nano``` works just fine for this. Then we need to upload the modified/malicious ```.tar.gz```. In order to upload our modified ```.tar.gz``` we use twine (```pip install twine```) and run ```twine upload dist/evil.tar.gz```. \n\nI have done all of the above and uploaded it here: ```https://pypi.python.org/packages/source/I/IgnoreMe_mime/IgnoreMe_mime-1.0.1.tar.gz#md5=6a9aa8e15f726b161680fbb854281775```. Note that if you open that link in internet explorer you will get an ```alert(0)``` box. \n\nSo far this has not been mirrored to ```archive.uber.com``` but as far as I can tell it is only a matter of time until it is pulled into that mirror. Once it is pulled into ```archive.uber.com``` it will work identically (since both pypi and uber fail to set a MIME type for these files). \n\nOn a sidenote, while researching this vulnerability I discovered that pypi is also vulnerable (hence why the above link works). I am also reporting this to their security team. \n\nIn order to patch this you need to either correctly specify the MIME type of the ```.tar.gz``` files or disable content sniffing. \n\nThanks,\nDavid Dworken","vulnerability_information_html":"\u003cp\u003e\u003ccode\u003earchive.uber.com\u003c/code\u003e hosts a mirror of pypi at \u003ccode\u003earchive.uber.com/pypi/simple/\u003c/code\u003e. It mirrors all of the \u003ccode\u003e.tar.gz\u003c/code\u003e that are uploaded to pypi. The MIME type of all the \u003ccode\u003e.tar.gz\u003c/code\u003e files is \u003ccode\u003eapplication/octet-stream\u003c/code\u003e. Since the MIME type is not specified, browsers will automatically try to determine the type of the file. Chrome and Firefox both do so by looking the first few bytes of the file. Internet explorer scans the first 256 bytes of the file for \u003ccode\u003ehtml\u003c/code\u003e and if it finds \u003ccode\u003ehtml\u003c/code\u003e it will interpret the file as HTML. So by creating a \u003ccode\u003e.tar.gz\u003c/code\u003e that contains \u003ccode\u003e\u0026lt;html\u0026gt;\u0026lt;script\u0026gt;alert(0)\u0026lt;/script\u0026gt;\u0026lt;/html\u0026gt;\u003c/code\u003e one can inject javascript into the page. \u003c/p\u003e\n\n\u003cp\u003eBy default pypi doesn\u0026#39;t allow you to create the \u003ccode\u003e.tar.gz\u003c/code\u003e manually (instead it creates it and uploads it with the same command). This can be bypassed by first building the \u003ccode\u003e.tar.gz\u003c/code\u003e by doing \u003ccode\u003epython setup.py sdist\u003c/code\u003e to build the \u003ccode\u003e.tar.gz\u003c/code\u003e before uploading it with an external program. After we create the \u003ccode\u003e.tar.gz\u003c/code\u003e we need to modify it so that it contains our inject HTML. Thankfully pypi doesn\u0026#39;t validate a \u003ccode\u003e.tar.gz\u003c/code\u003e to check whether it is valid, so we can simply edit the \u003ccode\u003e.tar.gz\u003c/code\u003e and blindly insert the injected HTML. \u003ccode\u003enano\u003c/code\u003e works just fine for this. Then we need to upload the modified/malicious \u003ccode\u003e.tar.gz\u003c/code\u003e. In order to upload our modified \u003ccode\u003e.tar.gz\u003c/code\u003e we use twine (\u003ccode\u003epip install twine\u003c/code\u003e) and run \u003ccode\u003etwine upload dist/evil.tar.gz\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eI have done all of the above and uploaded it here: \u003ccode\u003ehttps://pypi.python.org/packages/source/I/IgnoreMe_mime/IgnoreMe_mime-1.0.1.tar.gz#md5=6a9aa8e15f726b161680fbb854281775\u003c/code\u003e. Note that if you open that link in internet explorer you will get an \u003ccode\u003ealert(0)\u003c/code\u003e box. \u003c/p\u003e\n\n\u003cp\u003eSo far this has not been mirrored to \u003ccode\u003earchive.uber.com\u003c/code\u003e but as far as I can tell it is only a matter of time until it is pulled into that mirror. Once it is pulled into \u003ccode\u003earchive.uber.com\u003c/code\u003e it will work identically (since both pypi and uber fail to set a MIME type for these files). \u003c/p\u003e\n\n\u003cp\u003eOn a sidenote, while researching this vulnerability I discovered that pypi is also vulnerable (hence why the above link works). I am also reporting this to their security team. \u003c/p\u003e\n\n\u003cp\u003eIn order to patch this you need to either correctly specify the MIME type of the \u003ccode\u003e.tar.gz\u003c/code\u003e files or disable content sniffing. \u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","bounty_amount":"750.0","formatted_bounty":"$750","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2016-05-01T22:07:53.030Z","allow_singular_disclosure_after":-147075303.52211753,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":872561,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just realized I did not specifically note that this XSS is stored/persistent. \n\nThanks,\nDavid Dworken","markdown_message":"\u003cp\u003eJust realized I did not specifically note that this XSS is stored/persistent. \u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-26T17:58:58.448Z","updated_at":"2016-03-26T17:58:58.448Z","actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":874349,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Please note that pypi has now patched this on their end by adding the ```nosniff``` header. Thus the example link to pypi will no longer work. \n\nThanks,\nDavid Dworken","markdown_message":"\u003cp\u003ePlease note that pypi has now patched this on their end by adding the \u003ccode\u003enosniff\u003c/code\u003e header. Thus the example link to pypi will no longer work. \u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-28T13:52:15.948Z","updated_at":"2016-03-28T13:52:15.948Z","actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":875097,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Thank you for your report.\n\nFrom your last comment, it sounds as if this issue was fixed by pypi, and is no longer exploitable.  Can you confirm this is true, or do you have another PoC that you wish to submit around this issue?\n\nThanks, and good luck with your future bug hunting.","markdown_message":"\u003cp\u003eThank you for your report.\u003c/p\u003e\n\n\u003cp\u003eFrom your last comment, it sounds as if this issue was fixed by pypi, and is no longer exploitable.  Can you confirm this is true, or do you have another PoC that you wish to submit around this issue?\u003c/p\u003e\n\n\u003cp\u003eThanks, and good luck with your future bug hunting.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-28T19:26:23.803Z","updated_at":"2016-03-28T19:26:23.803Z","actor":{"username":"bugtriage-josh","cleared":false,"url":"/bugtriage-josh","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":875123,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Both pypi and Uber are vulnerable to this. I contacted both Uber and pypi to report this. They have already fixed it. \n\nAs far as another PoC, I have already submitted a PoC. It is the one hosted at the above pypi link. Once Uber updates the mirror (which seems to happen in some sort of periodic fashion-likely somehow related to Uber's deployment process) it will be pulled into archive.uber.com. \n\nIn terms of how you can verify that archive.uber.com is vulnerable, you have two options: \n\n1. Update Uber's mirror of pypi and then download the ```.tar.gz``` from archive.uber.com\n2. Examination\n    -  Look at the headers sent by archive.uber.com and note that they are ```application/octet-stream```. \n    - Read about Internet Explorer's MIME sniffing ([here](https://msdn.microsoft.com/en-us/library/ms775147(v=vs.85).aspx))\n    - See that Internet Explorer will sniff a file with ```application/octet-stream``` and interpret it as HTML if it contains ```html``` within the first 256 bytes of the file based off of reading the above spec. \n    -  Examine the ```.tar.gz``` that I uploaded to pypi and note that it contains ```html``` within the first 256 bytes of the file\n    - Look at the rest of the ```.tar.gz``` and note that the full code is ```\u003chtml\u003e\u003cscript\u003ealert(0)\u003c/script\u003e\u003c/html\u003e``` which runs ```alert(0)```\n\nSorry about any confusion related to pypi. The PoC just used them as an example of another website that was vulnerable in an identical manner. \n\nThanks,\nDavid Dworken","markdown_message":"\u003cp\u003eBoth pypi and Uber are vulnerable to this. I contacted both Uber and pypi to report this. They have already fixed it. \u003c/p\u003e\n\n\u003cp\u003eAs far as another PoC, I have already submitted a PoC. It is the one hosted at the above pypi link. Once Uber updates the mirror (which seems to happen in some sort of periodic fashion-likely somehow related to Uber\u0026#39;s deployment process) it will be pulled into archive.uber.com. \u003c/p\u003e\n\n\u003cp\u003eIn terms of how you can verify that archive.uber.com is vulnerable, you have two options: \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUpdate Uber\u0026#39;s mirror of pypi and then download the \u003ccode\u003e.tar.gz\u003c/code\u003e from archive.uber.com\u003c/li\u003e\n\u003cli\u003eExamination\n\n\u003cul\u003e\n\u003cli\u003e Look at the headers sent by archive.uber.com and note that they are \u003ccode\u003eapplication/octet-stream\u003c/code\u003e. \u003c/li\u003e\n\u003cli\u003eRead about Internet Explorer\u0026#39;s MIME sniffing (\u003ca href=\"/redirect?url=https%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fms775147%28v%3Dvs.85%29.aspx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eSee that Internet Explorer will sniff a file with \u003ccode\u003eapplication/octet-stream\u003c/code\u003e and interpret it as HTML if it contains \u003ccode\u003ehtml\u003c/code\u003e within the first 256 bytes of the file based off of reading the above spec. \u003c/li\u003e\n\u003cli\u003e Examine the \u003ccode\u003e.tar.gz\u003c/code\u003e that I uploaded to pypi and note that it contains \u003ccode\u003ehtml\u003c/code\u003e within the first 256 bytes of the file\u003c/li\u003e\n\u003cli\u003eLook at the rest of the \u003ccode\u003e.tar.gz\u003c/code\u003e and note that the full code is \u003ccode\u003e\u0026lt;html\u0026gt;\u0026lt;script\u0026gt;alert(0)\u0026lt;/script\u0026gt;\u0026lt;/html\u0026gt;\u003c/code\u003e which runs \u003ccode\u003ealert(0)\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSorry about any confusion related to pypi. The PoC just used them as an example of another website that was vulnerable in an identical manner. \u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-28T19:37:34.291Z","updated_at":"2016-03-28T19:37:34.291Z","actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":875494,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for another great report, @ddworken! :)\n\nI agree with your assessment here, and your suggested fix of adding `X-Content-Type-Options: nosniff` to prevent questionable `Content-Type` sniffing behaviour. I've triaged the issue internally, and I'll update you with any progress on fixing it.","markdown_message":"\u003cp\u003eThanks for another great report, \u003ca href=\"/ddworken\"\u003e@ddworken\u003c/a\u003e! :)\u003c/p\u003e\n\n\u003cp\u003eI agree with your assessment here, and your suggested fix of adding \u003ccode\u003eX-Content-Type-Options: nosniff\u003c/code\u003e to prevent questionable \u003ccode\u003eContent-Type\u003c/code\u003e sniffing behaviour. I\u0026#39;ve triaged the issue internally, and I\u0026#39;ll update you with any progress on fixing it.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-28T22:38:35.765Z","updated_at":"2016-03-28T22:38:35.765Z","actor":{"username":"jmilne-uber","cleared":false,"url":"/jmilne-uber","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/043/902/2b5f98bcf2caa1f7275fda76934a396babd077a5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":875500,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great! Thank you very much. ","markdown_message":"\u003cp\u003eGreat! Thank you very much. \u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-28T22:40:16.285Z","updated_at":"2016-03-28T22:40:16.285Z","actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":883901,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"@ddworken,\n\nThis should now be adding the `'X-Content-Type-Options: nosniff` - can you verify this is fixed?\n\nThanks,\nRob","markdown_message":"\u003cp\u003e\u003ca href=\"/ddworken\"\u003e@ddworken\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThis should now be adding the \u003ccode\u003e\u0026#39;X-Content-Type-Options: nosniff\u003c/code\u003e - can you verify this is fixed?\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nRob\u003c/p\u003e\n","automated_response":false,"created_at":"2016-04-01T20:59:47.324Z","updated_at":"2016-04-01T20:59:47.324Z","actor":{"username":"fletcher","cleared":false,"url":"/fletcher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/090/8b777383ddc3ab23063609c8beb1cb1f689a75c1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"ddworken","url":"/ddworken"},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":884055,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Yup, I can confirm that this is fixed. \n\nThanks,\nDavid Dworken","markdown_message":"\u003cp\u003eYup, I can confirm that this is fixed. \u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","automated_response":false,"created_at":"2016-04-01T22:07:52.463Z","updated_at":"2016-04-01T22:07:52.463Z","first_to_agree":true,"actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":892744,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for the cool bug and nice work!\n\nThe award amount of $750 is based on this XSS only affecting certain versions of IE, and archive.uber.com being a less sensitive domain.\n\nGood luck bug hunting and look forward to your future reports!","markdown_message":"\u003cp\u003eThanks for the cool bug and nice work!\u003c/p\u003e\n\n\u003cp\u003eThe award amount of $750 is based on this XSS only affecting certain versions of IE, and archive.uber.com being a less sensitive domain.\u003c/p\u003e\n\n\u003cp\u003eGood luck bug hunting and look forward to your future reports!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-04-06T21:27:05.535Z","updated_at":"2016-04-06T21:27:05.535Z","actor":{"url":"/uber","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Uber"}},"bounty_amount":"750.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"uber","collaborator":{"username":"ddworken","url":"/ddworken"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":892746,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-04-06T21:27:46.822Z","updated_at":"2016-04-06T21:27:46.822Z","actor":{"username":"fletcher","cleared":false,"url":"/fletcher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/090/8b777383ddc3ab23063609c8beb1cb1f689a75c1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":892749,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-04-06T21:27:56.897Z","updated_at":"2016-04-06T21:27:56.897Z","actor":{"username":"fletcher","cleared":false,"url":"/fletcher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/090/8b777383ddc3ab23063609c8beb1cb1f689a75c1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":892757,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great! Thank you very much for the bounty and the quick response time!\n\nThanks,\nDavid Dworken","markdown_message":"\u003cp\u003eGreat! Thank you very much for the bounty and the quick response time!\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDavid Dworken\u003c/p\u003e\n","automated_response":false,"created_at":"2016-04-06T21:31:59.544Z","updated_at":"2016-04-06T21:31:59.544Z","actor":{"username":"ddworken","cleared":true,"url":"/ddworken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/344/0f539160a7134b9d14cd1f9c8e38bbc32c3b3604_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":1784,"category":"researcher","content":"archive.uber.com mirrors pypi. When downloading ```.tar.gz``` files from archive.uber.com, the MIME type is ```application/octet-stream```. Injecting ```\u003chtml\u003e\u003cscript\u003ealert(0)\u003c/script\u003e``` into the start of the ```.tar.gz``` causes an XSS in Internet Explorer due to MIME sniffing. ","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003earchive.uber.com mirrors pypi. When downloading \u003ccode\u003e.tar.gz\u003c/code\u003e files from archive.uber.com, the MIME type is \u003ccode\u003eapplication/octet-stream\u003c/code\u003e. Injecting \u003ccode\u003e\u0026lt;html\u0026gt;\u0026lt;script\u0026gt;alert(0)\u0026lt;/script\u0026gt;\u003c/code\u003e into the start of the \u003ccode\u003e.tar.gz\u003c/code\u003e causes an XSS in Internet Explorer due to MIME sniffing. \u003c/p\u003e\n"}]}