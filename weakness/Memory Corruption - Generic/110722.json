{"id":110722,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMTA3MjI=","url":"https://hackerone.com/reports/110722","title":"Heap BufferOver Flow in escapeshellargs and escapeshellcmd functions","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-01-14T17:23:22.482Z","submitted_at":"2016-01-14T17:23:22.482Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"libnex","url":"/libnex","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/468/f5a6e39ea76748aa48e36e0087eb8b09ff892d6c_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:38:12.891Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:38:09.822Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"1) Bug report: https://bugs.php.net/bug.php?id=71270\n2) Patch submitted and accepted: https://github.com/php/php-src/commit/2871c70efaaaa0f102557a17c727fd4d5204dd4b\n\n---Description---\n\n\n1)I found this vulnerability using a custom PHP engine fuzzer that I wrote. There exist a heap-based buffer over flow that allows one to write a user tainted data pass an allocated buffer. This vulnerability lies in the following functions:\n\tescapeshellarg \n\tescapeshellcmd \n\n2) On a default php installation, the memory limit is set to 128MB and this vulnerability is not triggerable. My analysis shows that this is triggerable when memory limit is roughly \u003e 1024mb. A quick search on github shows that it's not uncommon to see code like \"ini_set('memory_limit', -1);\"\n\n\n3)I've created a POC that triggers the buffer over write with 0x414141414141.....\n\n4) A string of 1024mb is created and passed into escapeshellarg. \"l\" contains the length of this string:\n\nBreakpoint 2, php_escape_shell_arg (str=0x7fffad469028 'A' \u003crepeats 200 times\u003e...) at /home/elaw/php-7.0.0/ext/standard/exec.c:343\n343             int x, y = 0, l = (int)strlen(str);\n\ngdb-peda$ print l\n$43 = 0x40000000            // 1024mb\n\n\n\n5) This length \"l\" is then passed into zend_string_alloc as \"4 * l + 2\" which results in an integer overflow:\n\nTemporary breakpoint 3, php_escape_shell_arg (str=0x7fffad000018 'A' \u003crepeats 200 times\u003e...) at /home/elaw/php-7.0.1/ext/standard/exec.c:348\n348             cmd = zend_string_alloc(4 * l + 2, 0); /* worst case */\n\n\ngdb-peda$ print 4* l + 2\n$44 = 0x2 \t\t\t\t   //Overflow\n\n\n6) Stepping into zend_string_alloc to verify the integer overflow. Notice len=0x2:\nzend_string_alloc (persistent=0x0, len=0x2) at /home/elaw/php-7.0.0/Zend/zend_string.h:121      \n121             zend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);\n\n\n7) Lets confirm the overflow again in the allocated (zend_string *) cmd. Notice cmd.len=0x2:\ngdb-peda$ p *cmd\n$52 = {\n  gc = {\n    refcount = 0x1,\n    u = {\n      v = {\n        type = 0x6,\n        flags = 0x0,\n        gc_info = 0x0\n      },\n      type_info = 0x6\n    }\n  },\n  h = 0x0,\n  len = 0x2,\n  val = \"1\"\n}\n\n\n\n8) The loops then writes pass the allocated buffer in\n\n258\t\tfor (x = 0, y = 0; x \u003c l; x++) {\n....\n321       ZSTR_VAL(cmd)[y++] = str[x];\n\n\n\n9) Verifying the buffer overflow in \ngdb-peda$ p (zend_string *)cmd.len\n$9 = (zend_string *) 0x2\ngdb-peda$ x/100b (zend_string *)cmd.val\n0x1625a58:      0x27    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a60:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a68:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a70:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a78:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a80:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a88:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a90:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625a98:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625aa0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625aa8:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625ab0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\n0x1625ab8:      0x41    0x41    0x41    0x41\n\n\n10) The vulnerability for php_escape_shell_cmd is identical.","vulnerability_information_html":"\u003cp\u003e1) Bug report: \u003ca title=\"https://bugs.php.net/bug.php?id=71270\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D71270\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=71270\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n2) Patch submitted and accepted: \u003ca title=\"https://github.com/php/php-src/commit/2871c70efaaaa0f102557a17c727fd4d5204dd4b\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fphp%2Fphp-src%2Fcommit%2F2871c70efaaaa0f102557a17c727fd4d5204dd4b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/php/php-src/commit/2871c70efaaaa0f102557a17c727fd4d5204dd4b\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e---Description---\u003c/p\u003e\n\n\u003cp\u003e1)I found this vulnerability using a custom PHP engine fuzzer that I wrote. There exist a heap-based buffer over flow that allows one to write a user tainted data pass an allocated buffer. This vulnerability lies in the following functions:\u003cbr\u003e\n    escapeshellarg \u003cbr\u003e\n    escapeshellcmd \u003c/p\u003e\n\n\u003cp\u003e2) On a default php installation, the memory limit is set to 128MB and this vulnerability is not triggerable. My analysis shows that this is triggerable when memory limit is roughly \u0026gt; 1024mb. A quick search on github shows that it\u0026#39;s not uncommon to see code like \u0026quot;ini_set(\u0026#39;memory_limit\u0026#39;, -1);\u0026quot;\u003c/p\u003e\n\n\u003cp\u003e3)I\u0026#39;ve created a POC that triggers the buffer over write with 0x414141414141.....\u003c/p\u003e\n\n\u003cp\u003e4) A string of 1024mb is created and passed into escapeshellarg. \u0026quot;l\u0026quot; contains the length of this string:\u003c/p\u003e\n\n\u003cp\u003eBreakpoint 2, php_escape_shell_arg (str=0x7fffad469028 \u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...) at /home/elaw/php-7.0.0/ext/standard/exec.c:343\u003cbr\u003e\n343             int x, y = 0, l = (int)strlen(str);\u003c/p\u003e\n\n\u003cp\u003egdb-peda$ print l\u003cbr\u003e\n$43 = 0x40000000            // 1024mb\u003c/p\u003e\n\n\u003cp\u003e5) This length \u0026quot;l\u0026quot; is then passed into zend_string_alloc as \u0026quot;4 * l + 2\u0026quot; which results in an integer overflow:\u003c/p\u003e\n\n\u003cp\u003eTemporary breakpoint 3, php_escape_shell_arg (str=0x7fffad000018 \u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...) at /home/elaw/php-7.0.1/ext/standard/exec.c:348\u003cbr\u003e\n348             cmd = zend_string_alloc(4 * l + 2, 0); /* worst case */\u003c/p\u003e\n\n\u003cp\u003egdb-peda$ print 4* l + 2\u003cbr\u003e\n$44 = 0x2                  //Overflow\u003c/p\u003e\n\n\u003cp\u003e6) Stepping into zend_string_alloc to verify the integer overflow. Notice len=0x2:\u003cbr\u003e\nzend_string_alloc (persistent=0x0, len=0x2) at /home/elaw/php-7.0.0/Zend/zend_string.h:121\u003cbr\u003e\u003cbr\u003e\n121             zend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);\u003c/p\u003e\n\n\u003cp\u003e7) Lets confirm the overflow again in the allocated (zend_string *) cmd. Notice cmd.len=0x2:\u003cbr\u003e\ngdb-peda$ p *cmd\u003cbr\u003e\n$52 = {\u003cbr\u003e\n  gc = {\u003cbr\u003e\n    refcount = 0x1,\u003cbr\u003e\n    u = {\u003cbr\u003e\n      v = {\u003cbr\u003e\n        type = 0x6,\u003cbr\u003e\n        flags = 0x0,\u003cbr\u003e\n        gc_info = 0x0\u003cbr\u003e\n      },\u003cbr\u003e\n      type_info = 0x6\u003cbr\u003e\n    }\u003cbr\u003e\n  },\u003cbr\u003e\n  h = 0x0,\u003cbr\u003e\n  len = 0x2,\u003cbr\u003e\n  val = \u0026quot;1\u0026quot;\u003cbr\u003e\n}\u003c/p\u003e\n\n\u003cp\u003e8) The loops then writes pass the allocated buffer in\u003c/p\u003e\n\n\u003cp\u003e258     for (x = 0, y = 0; x \u0026lt; l; x++) {\u003cbr\u003e\n....\u003cbr\u003e\n321       ZSTR_VAL(cmd)[y++] = str[x];\u003c/p\u003e\n\n\u003cp\u003e9) Verifying the buffer overflow in \u003cbr\u003e\ngdb-peda$ p (zend_string *)cmd.len\u003cbr\u003e\n$9 = (zend_string *) 0x2\u003cbr\u003e\ngdb-peda$ x/100b (zend_string *)cmd.val\u003cbr\u003e\n0x1625a58:      0x27    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a60:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a68:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a70:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a78:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a80:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a88:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a90:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625a98:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625aa0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625aa8:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625ab0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41\u003cbr\u003e\n0x1625ab8:      0x41    0x41    0x41    0x41\u003c/p\u003e\n\n\u003cp\u003e10) The vulnerability for php_escape_shell_cmd is identical.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:38:09.903Z","allow_singular_disclosure_after":-35663885.3831809,"singular_disclosure_allowed":true,"vote_count":2,"voters":["libnex","dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":758774,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2016-1904","markdown_message":"\u003cp\u003eCVE-2016-1904\u003c/p\u003e\n","automated_response":false,"created_at":"2016-01-15T00:57:09.336Z","updated_at":"2016-01-15T00:57:09.336Z","actor":{"username":"libnex","cleared":false,"url":"/libnex","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/468/f5a6e39ea76748aa48e36e0087eb8b09ff892d6c_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":935012,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-01T00:02:40.416Z","updated_at":"2016-05-01T00:02:40.416Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"libnex","url":"/libnex"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":935013,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-01T00:02:46.425Z","updated_at":"2016-05-01T00:02:46.425Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"libnex","url":"/libnex"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026473,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:38:09.841Z","updated_at":"2019-10-13T09:38:09.841Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285864,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:38:12.915Z","updated_at":"2019-11-12T09:38:12.915Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}