{"id":287245,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODcyNDU=","url":"https://hackerone.com/reports/287245","title":"Blind SSRF in \"Integrations\" by abusing a bug in Ruby's native resolver.","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2017-11-03T23:32:34.644Z","submitted_at":"2017-11-03T23:32:34.644Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"edoverflow","url":"/edoverflow","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2017-0904"],"singular_disclosure_disabled":false,"disclosed_at":"2017-11-09T18:36:34.928Z","bug_reporter_agreed_on_going_public_at":"2017-11-09T18:36:34.824Z","team_member_agreed_on_going_public_at":"2017-11-09T18:36:16.271Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Summary\n\nHackerOne allows bug bounty programs to integrate their reports queue with issue tracking tools such as Jira and Phabricator. By abusing a bug that I discovered in Ruby's native resolver, I am able to bypass the SSRF filter and could potentially scan your internal network.\n\n# Vulnerability Details\n\nHackerOne uses the [private_address_check](https://github.com/jtdowney/private_address_check) gem to prevent SSRF on the \"Integrations\" panel: https://hackerone.com/{BBP}/integrations. The actual filtering takes place in [lib/private_address_check.rb](https://github.com/jtdowney/private_address_check/blob/c95a538542d8d5bd8b969d9d8d95753e74fb7e52/lib/private_address_check.rb). The process starts by attempting to resolve the user-supplied URL with `Resolv::getaddresses` and then compares the returned value with a the values in the blacklist. I discovered a bug in `Resolv::getaddresses` that allows me to return an empty value, which is not included in the blacklist and therefore completely bypasses any checks.\n\n```ruby\ndef resolves_to_private_address?(hostname)\n    ips = Resolv.getaddresses(hostname)\n    ips.any? do |ip| \n      private_address?(ip)\n    end\nend\n```\n\nThe bypass consists of providing encoded IP addresses that when forwarded on to the operating system in `lib/resolv.rb` return an empty value.\n\n```\nhttp://0177.1:22/\nhttp://0x7f.1:22/\nhttp://127.000.001:22/\n```\n\nI discovered the bug in `Resolv::getaddresses` by running it on different Linux machines and noticing that the outputs vary. Until the Ruby Core come up with a better solution I suggest not relying on this library for any security-related features.\n\n**Machine 1** returned the following:\n\n```\nirb(main):001:0\u003e require 'resolv'\nirb(main):002:0\u003e Resolv.getaddresses(\"127.000.000.1\")\n=\u003e []\n```\n\nAnd **Machine 2** returned this:\n\n```\nirb(main):001:0\u003e require 'resolv'\nirb(main):002:0\u003e Resolv.getaddresses(\"127.000.000.1\")\n=\u003e [\"127.0.0.1\"]\n```\n\n# Exploit\n\nAdmittedly, I was unable to actually exploit this issue and I am still playing around to see if I can exfiltrate valuable data. The current issue only consists of a filter bypass.\n\n# Mitigation\n\nI would suggest using `Socket.getaddrinfo()` as it is more reliable and is not affected by this bug. Something along the lines of this should work:\n\n```ruby\nrequire \"socket\"\n...\ndef resolves_to_private_address?(hostname)\n  ips = Socket.getaddrinfo(hostname, nil).sample[3]\n  ips.any? do |ip| \n    private_address?(ip)\n  end\nend\n```\n\nMy suggested patch can be found here: {F236338}.","vulnerability_information_html":"\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003cp\u003eHackerOne allows bug bounty programs to integrate their reports queue with issue tracking tools such as Jira and Phabricator. By abusing a bug that I discovered in Ruby\u0026#39;s native resolver, I am able to bypass the SSRF filter and could potentially scan your internal network.\u003c/p\u003e\n\n\u003ch1 id=\"vulnerability-details\"\u003eVulnerability Details\u003c/h1\u003e\n\n\u003cp\u003eHackerOne uses the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fjtdowney%2Fprivate_address_check\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eprivate_address_check\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e gem to prevent SSRF on the \u0026quot;Integrations\u0026quot; panel: \u003ca title=\"https://hackerone.com/%7BBBP%7D/integrations\" href=\"https://hackerone.com/%7BBBP%7D/integrations\"\u003ehttps://hackerone.com/%7BBBP%7D/integrations\u003c/a\u003e. The actual filtering takes place in \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fjtdowney%2Fprivate_address_check%2Fblob%2Fc95a538542d8d5bd8b969d9d8d95753e74fb7e52%2Flib%2Fprivate_address_check.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003elib/private_address_check.rb\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. The process starts by attempting to resolve the user-supplied URL with \u003ccode\u003eResolv::getaddresses\u003c/code\u003e and then compares the returned value with a the values in the blacklist. I discovered a bug in \u003ccode\u003eResolv::getaddresses\u003c/code\u003e that allows me to return an empty value, which is not included in the blacklist and therefore completely bypasses any checks.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eresolves_to_private_address?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehostname\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eResolv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003egetaddresses\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehostname\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eips\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eany?\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \n      \u003cspan class=\"n\"\u003eprivate_address?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe bypass consists of providing encoded IP addresses that when forwarded on to the operating system in \u003ccode\u003elib/resolv.rb\u003c/code\u003e return an empty value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehttp://0177.1:22/\nhttp://0x7f.1:22/\nhttp://127.000.001:22/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI discovered the bug in \u003ccode\u003eResolv::getaddresses\u003c/code\u003e by running it on different Linux machines and noticing that the outputs vary. Until the Ruby Core come up with a better solution I suggest not relying on this library for any security-related features.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMachine 1\u003c/strong\u003e returned the following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eirb(main):001:0\u0026gt; require \u0026#39;resolv\u0026#39;\nirb(main):002:0\u0026gt; Resolv.getaddresses(\u0026quot;127.000.000.1\u0026quot;)\n=\u0026gt; []\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd \u003cstrong\u003eMachine 2\u003c/strong\u003e returned this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eirb(main):001:0\u0026gt; require \u0026#39;resolv\u0026#39;\nirb(main):002:0\u0026gt; Resolv.getaddresses(\u0026quot;127.000.000.1\u0026quot;)\n=\u0026gt; [\u0026quot;127.0.0.1\u0026quot;]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch1 id=\"exploit\"\u003eExploit\u003c/h1\u003e\n\n\u003cp\u003eAdmittedly, I was unable to actually exploit this issue and I am still playing around to see if I can exfiltrate valuable data. The current issue only consists of a filter bypass.\u003c/p\u003e\n\n\u003ch1 id=\"mitigation\"\u003eMitigation\u003c/h1\u003e\n\n\u003cp\u003eI would suggest using \u003ccode\u003eSocket.getaddrinfo()\u003c/code\u003e as it is more reliable and is not affected by this bug. Something along the lines of this should work:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;socket\u0026quot;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eresolves_to_private_address?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehostname\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eips\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eSocket\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003egetaddrinfo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehostname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003esample\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eips\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eany?\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \n    \u003cspan class=\"n\"\u003eprivate_address?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eip\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMy suggested patch can be found here: \u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"private_address_check.rb.patch\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/236/338/c4d5f99300f382c15f80045ba1ad2ef17315989e/private_address_check.rb.patch?response-content-disposition=attachment%3B%20filename%3D%22private_address_check.rb.patch%22%3B%20filename%2A%3DUTF-8%27%27private_address_check.rb.patch\u0026amp;response-content-type=text%2Fx-ruby\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ4IZIDGEJ%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T052419Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHgvhPRXI%2B7x6zNGnfFbWtzZacTUlKPt3VwSApQji3YyAiEA2Y%2FuJ72LgjXuchHTkycORzGcHp9y6ZUl%2BeyKz%2FFfjlAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDHblJHa0bCSVtoiX8yqRA7Ct%2F1l8ihdf2xXnJNUaJGv7nq%2F1b1xXdqHLpOjb5bN22Ac%2BQjHl%2Bna1KjqQx0Qu8Fcs0WQUm6dGPZbHLiP%2FRkIHh6FlY41MtajX39mvBrMgWCmioQD4vc7NSsiqHLG4GmvgnIM0wWXfwwv%2Fmq%2BjRWJQacOyz7e9kYXzI%2BQkViUKmcuV48xoXGswHYXnPSqKC6IqSk0Rgc6j2xAmne60g5PNHQf%2BehWLSoXupow19n2vF%2BE4dhw1ZLX%2B9fBct02t5%2B41MEA5z30yhC52UxDX9%2BedHi3rXpTTyV%2FX%2BWfdeGSGSqmwrTAcipCpz01NR%2Fkk3srD5BLQB%2B6BdeDlwwcltfcgYdKO39yRPNyZePA9ihdN%2B4YHA7%2FY9ufCPbEevGDvtv3mVStbES31aUOxSmGNj%2B8fMMJqFBAtD4Qx54l8UFyMf%2BQ8PPbA0OLpU9rjip1L0zxevK6IGISP%2FPlDldWsNQvfi1Xn6QvRkmL1ANNGXqycx5MDUJExPyV801VOQ68%2FfbB87Cmdd8xIJWUNtmpsIgDtMO2wqv8FOusBRxy8OOzTGCKFydY5xn2aZtaPj3obazs55j%2BS5FoY%2BdkqAuB4pbyPDlTBBI%2Fe4ZIYYBH9t51VaQaRwrhKPTTntuBcC2b5uuKcGXYq9rnIAgbUHulNqSoxgZep0wAjzrLEFeECcDfqDCjG1QyXJkGQyq3UjLElJNKzeGgK4y5hW9emXis3wfoUPLixiL7W8M52b0Q9HQrT0RxnkkNSLj7aPyOAVCPImHNwjJ%2FI2KIbB5iD4e9PbxcHFvjKgkNUQh2pESECovpzx%2BAz7wsT%2FUMRieGT%2BFtMt1o90%2BewPxe95i025ZqzwWI1aVcXtA%3D%3D\u0026amp;X-Amz-Signature=b5518ec0dcfeba0193834e5f1d8a0e7ffa321ae82da8b0978e4c9259f2426ec0\" data-attachment-type=\"text/x-ruby\"\u003eprivate_address_check.rb.patch (F236338)\u003c/a\u003e.\u003c/p\u003e\n","weakness":{"id":68,"name":"Server-Side Request Forgery (SSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":236338,"file_name":"private_address_check.rb.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/236/338/c4d5f99300f382c15f80045ba1ad2ef17315989e/private_address_check.rb.patch?response-content-disposition=attachment%3B%20filename%3D%22private_address_check.rb.patch%22%3B%20filename%2A%3DUTF-8%27%27private_address_check.rb.patch\u0026response-content-type=text%2Fx-ruby\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4IZIDGEJ%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T052419Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHgvhPRXI%2B7x6zNGnfFbWtzZacTUlKPt3VwSApQji3YyAiEA2Y%2FuJ72LgjXuchHTkycORzGcHp9y6ZUl%2BeyKz%2FFfjlAqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDHblJHa0bCSVtoiX8yqRA7Ct%2F1l8ihdf2xXnJNUaJGv7nq%2F1b1xXdqHLpOjb5bN22Ac%2BQjHl%2Bna1KjqQx0Qu8Fcs0WQUm6dGPZbHLiP%2FRkIHh6FlY41MtajX39mvBrMgWCmioQD4vc7NSsiqHLG4GmvgnIM0wWXfwwv%2Fmq%2BjRWJQacOyz7e9kYXzI%2BQkViUKmcuV48xoXGswHYXnPSqKC6IqSk0Rgc6j2xAmne60g5PNHQf%2BehWLSoXupow19n2vF%2BE4dhw1ZLX%2B9fBct02t5%2B41MEA5z30yhC52UxDX9%2BedHi3rXpTTyV%2FX%2BWfdeGSGSqmwrTAcipCpz01NR%2Fkk3srD5BLQB%2B6BdeDlwwcltfcgYdKO39yRPNyZePA9ihdN%2B4YHA7%2FY9ufCPbEevGDvtv3mVStbES31aUOxSmGNj%2B8fMMJqFBAtD4Qx54l8UFyMf%2BQ8PPbA0OLpU9rjip1L0zxevK6IGISP%2FPlDldWsNQvfi1Xn6QvRkmL1ANNGXqycx5MDUJExPyV801VOQ68%2FfbB87Cmdd8xIJWUNtmpsIgDtMO2wqv8FOusBRxy8OOzTGCKFydY5xn2aZtaPj3obazs55j%2BS5FoY%2BdkqAuB4pbyPDlTBBI%2Fe4ZIYYBH9t51VaQaRwrhKPTTntuBcC2b5uuKcGXYq9rnIAgbUHulNqSoxgZep0wAjzrLEFeECcDfqDCjG1QyXJkGQyq3UjLElJNKzeGgK4y5hW9emXis3wfoUPLixiL7W8M52b0Q9HQrT0RxnkkNSLj7aPyOAVCPImHNwjJ%2FI2KIbB5iD4e9PbxcHFvjKgkNUQh2pESECovpzx%2BAz7wsT%2FUMRieGT%2BFtMt1o90%2BewPxe95i025ZqzwWI1aVcXtA%3D%3D\u0026X-Amz-Signature=b5518ec0dcfeba0193834e5f1d8a0e7ffa321ae82da8b0978e4c9259f2426ec0","file_size":697,"type":"text/x-ruby"}],"allow_singular_disclosure_at":"2017-12-09T18:36:16.465Z","allow_singular_disclosure_after":-96374882.86661562,"singular_disclosure_allowed":true,"vote_count":27,"voters":["sp1d3rs","jensec","cdl","hunter","michiel","bl4de","yumi","ysx","gamliel","eveeez","and 17 more..."],"structured_scope":{"databaseId":3,"asset_type":"URL","asset_identifier":"https://hackerone.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2137840,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @edio - We are investigating this now, thanks for your report. I'll have more information to share soon. Thanks! ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/edio\"\u003e@edio\u003c/a\u003e - We are investigating this now, thanks for your report. I\u0026#39;ll have more information to share soon. Thanks! \u003c/p\u003e\n","automated_response":false,"created_at":"2017-11-06T19:07:59.283Z","updated_at":"2017-11-06T19:07:59.283Z","actor":{"username":"coffeecup","cleared":false,"url":"/coffeecup","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/163/756/b715ab701f6ba35c13cf00277bf23f9ab1a5e1cb_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2138104,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-06T20:15:48.585Z","updated_at":"2017-11-06T20:15:48.585Z","cve_ids":["CVE-2017-0904"],"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2147004,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-09T18:34:57.155Z","updated_at":"2017-11-09T18:34:57.155Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"edoverflow","url":"/edoverflow"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2147007,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"Hi @edio - thanks again for reporting this to us. Due to the lack of impact, this report isn't eligible for a monetary reward. Happy hacking!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/edio\"\u003e@edio\u003c/a\u003e - thanks again for reporting this to us. Due to the lack of impact, this report isn\u0026#39;t eligible for a monetary reward. Happy hacking!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-11-09T18:35:57.636Z","updated_at":"2017-11-09T18:35:57.636Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2147008,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-09T18:36:16.354Z","updated_at":"2017-11-09T18:36:16.354Z","first_to_agree":true,"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2147012,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-09T18:36:34.857Z","updated_at":"2017-11-09T18:36:34.857Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2147013,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-09T18:36:34.969Z","updated_at":"2017-11-09T18:36:34.969Z","actor":{"username":"edoverflow","cleared":true,"url":"/edoverflow","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/116/374/9a3cf4d62b2f507a0d33808aacbad863ec4455ac_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}