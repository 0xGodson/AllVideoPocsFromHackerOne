{"id":706934,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MDY5MzQ=","url":"https://hackerone.com/reports/706934","title":"Variant of CVE-2013-0269 (Denial of Service and Unsafe Object Creation Vulnerability in JSON)","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-10-03T05:19:48.551Z","submitted_at":"2019-10-03T05:19:48.551Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jeremyevans","url":"/jeremyevans","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7724,"url":"https://hackerone.com/ruby","handle":"ruby","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby","twitter_handle":"","website":"https://www.ruby-lang.org","about":"A Programmer's Best Friend"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-04-23T08:36:22.261Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-03-24T08:36:17.096Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"During my recent keyword argument separation work on `rb_scan_args` in the master branch, I discovered what I now think is a vulnerability.\n\nWhile the CVE-2013-0269 change fixed most usage of `JSON.parse`, it ended up not fixing `Kernel#JSON`.  The reason behind this is that internally, in `JSON::Parser#initialize` (in `cParser_initialize` in `ext/json/parser/parser.c`), there is a separate branch taken depending on whether an option hash was provided.  The fix for CVE-2013-026 only fixed one of these branches (when a option hash is provided).  It did not fix the other branch (when no option hash is provided).\n\n`Kernel#JSON` is able to easily hit the case where no option hash is provided, because it does:\n\n```ruby\n  def JSON(object, *args)\n    if object.respond_to? :to_str\n      JSON.parse(object.to_str, args.first)\n```\n\nIn the common case, no extra arguments are provided, and `args.first` is `nil`.  Historically, Ruby has allowed the `rb_scan_args` `:` character to handle a `nil` option hash like no option hash was provided.  This is deprecated in the master branch, and a warning is issued, but it is still supported.\n\nI fixed this in the master branch in the `rb_scan_args` commit, as it was needed to avoid the warning:\nhttps://github.com/ruby/ruby/commit/80b5a0ff2a7709367178f29d4ebe1c54122b1c27#diff-59fb0f5411be4c22009691e1a7f5a185 .  It was only later, when I was going to report this issue upstream that I realized the security implications.\n\nI believe all previously released versions of Ruby since 1.9 (when JSON was included in stdlib) are vulnerable to this. I think this fix should be backported to Ruby 2.4, 2.5, and 2.6, and another CVE issued.\n\nIn addition to `Kernel#JSON`, there are some other vulnerable calls, though they are likely to be less common.\n\nFull example code:\n\n```ruby\n  require 'json'\n\n  class A \u003c Struct.new(:a)\n    def self.json_create(object)\n      new(*object['args'])\n    end\n\n    def to_json(*args)\n      {\n        'json_class'  =\u003e self.class.name,\n        'args'        =\u003e [ a ],\n      }.to_json(*args)\n    end\n  end\n\n  js = A.new(1).to_json\n  p JSON.parse(js) #=\u003e {\"json_class\"=\u003e\"A\", \"args\"=\u003e[1]}\n  p JSON(js)       #=\u003e #\u003cstruct A a=1\u003e\n\n  # Also vulnerable, resulting in #\u003cstruct A a=1\u003e\n  p JSON.parse(js, nil)\n  p JSON[js, nil]\n  p JSON::Parser.new(js).parse\n```\n\n## Impact\n\nThis highly depends on the application using in question.  In order to be vulnerable, `Kernel#JSON` or one of the other vulnerable calls must be called with user provided input.\n\nI am not sure this results in denial of service since Ruby 2.2, due to the support of dynamic symbols.  However, I have not analyzed the related JSON code to determine if it creates dynamic or static symbols when `create_additions` is used.\n\nAssuming that `Kernel#JSON` is called with user-provided input, this allows creation of arbitrary objects where there is a named class that has a `json_create` singleton method..  More precisely, this allows calling `json_create` methods on any named constant with arbitrary arguments (assuming the constant returns a true value for `json_createable?`).  Many Ruby applications use libraries that have objects in constants that support `method_missing` and could possibly be vulnerable.  However, I have not done any research into possible exploitability, which is why I listed severity as Medium.\n\nIf any `json/add/*` files have been required, this could possibly be very dangerous, as those can allow the creation of arbitrary core/stdlib objects.  For example `json/add/ostruct` being required, when combined with this vulnerability, allows the creation of arbitrary objects that support attacker-defined methods with attacker-defined values of any type supported by JSON.  `json/add/regexp` allows the creation of arbitrary Regexps which could easily lead to denial of service, and combined with a vulnerability in the regexp engine (Onigmo), could potentially lead to remote code execution.","vulnerability_information_html":"\u003cp\u003eDuring my recent keyword argument separation work on \u003ccode\u003erb_scan_args\u003c/code\u003e in the master branch, I discovered what I now think is a vulnerability.\u003c/p\u003e\n\n\u003cp\u003eWhile the CVE-2013-0269 change fixed most usage of \u003ccode\u003eJSON.parse\u003c/code\u003e, it ended up not fixing \u003ccode\u003eKernel#JSON\u003c/code\u003e.  The reason behind this is that internally, in \u003ccode\u003eJSON::Parser#initialize\u003c/code\u003e (in \u003ccode\u003ecParser_initialize\u003c/code\u003e in \u003ccode\u003eext/json/parser/parser.c\u003c/code\u003e), there is a separate branch taken depending on whether an option hash was provided.  The fix for CVE-2013-026 only fixed one of these branches (when a option hash is provided).  It did not fix the other branch (when no option hash is provided).\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eKernel#JSON\u003c/code\u003e is able to easily hit the case where no option hash is provided, because it does:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erespond_to?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:to_str\u003c/span\u003e\n      \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_str\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the common case, no extra arguments are provided, and \u003ccode\u003eargs.first\u003c/code\u003e is \u003ccode\u003enil\u003c/code\u003e.  Historically, Ruby has allowed the \u003ccode\u003erb_scan_args\u003c/code\u003e \u003ccode\u003e:\u003c/code\u003e character to handle a \u003ccode\u003enil\u003c/code\u003e option hash like no option hash was provided.  This is deprecated in the master branch, and a warning is issued, but it is still supported.\u003c/p\u003e\n\n\u003cp\u003eI fixed this in the master branch in the \u003ccode\u003erb_scan_args\u003c/code\u003e commit, as it was needed to avoid the warning:\u003cbr\u003e\n\u003ca title=\"https://github.com/ruby/ruby/commit/80b5a0ff2a7709367178f29d4ebe1c54122b1c27#diff-59fb0f5411be4c22009691e1a7f5a185\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fruby%2Fruby%2Fcommit%2F80b5a0ff2a7709367178f29d4ebe1c54122b1c27%23diff-59fb0f5411be4c22009691e1a7f5a185\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/ruby/ruby/commit/80b5a0ff2a7709367178f29d4ebe1c54122b1c27#diff-59fb0f5411be4c22009691e1a7f5a185\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e .  It was only later, when I was going to report this issue upstream that I realized the security implications.\u003c/p\u003e\n\n\u003cp\u003eI believe all previously released versions of Ruby since 1.9 (when JSON was included in stdlib) are vulnerable to this. I think this fix should be backported to Ruby 2.4, 2.5, and 2.6, and another CVE issued.\u003c/p\u003e\n\n\u003cp\u003eIn addition to \u003ccode\u003eKernel#JSON\u003c/code\u003e, there are some other vulnerable calls, though they are likely to be less common.\u003c/p\u003e\n\n\u003cp\u003eFull example code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e  \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;json\u0026#39;\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eA\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eStruct\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:a\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejson_create\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;args\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s1\"\u003e\u0026#39;json_class\u0026#39;\u003c/span\u003e  \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s1\"\u003e\u0026#39;args\u0026#39;\u003c/span\u003e        \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ejs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eA\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ep\u003c/span\u003e \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e#=\u0026gt; {\u0026quot;json_class\u0026quot;=\u0026gt;\u0026quot;A\u0026quot;, \u0026quot;args\u0026quot;=\u0026gt;[1]}\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ep\u003c/span\u003e \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e       \u003cspan class=\"c1\"\u003e#=\u0026gt; #\u0026lt;struct A a=1\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# Also vulnerable, resulting in #\u0026lt;struct A a=1\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ep\u003c/span\u003e \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ep\u003c/span\u003e \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ep\u003c/span\u003e \u003cspan class=\"no\"\u003eJSON\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThis highly depends on the application using in question.  In order to be vulnerable, \u003ccode\u003eKernel#JSON\u003c/code\u003e or one of the other vulnerable calls must be called with user provided input.\u003c/p\u003e\n\n\u003cp\u003eI am not sure this results in denial of service since Ruby 2.2, due to the support of dynamic symbols.  However, I have not analyzed the related JSON code to determine if it creates dynamic or static symbols when \u003ccode\u003ecreate_additions\u003c/code\u003e is used.\u003c/p\u003e\n\n\u003cp\u003eAssuming that \u003ccode\u003eKernel#JSON\u003c/code\u003e is called with user-provided input, this allows creation of arbitrary objects where there is a named class that has a \u003ccode\u003ejson_create\u003c/code\u003e singleton method..  More precisely, this allows calling \u003ccode\u003ejson_create\u003c/code\u003e methods on any named constant with arbitrary arguments (assuming the constant returns a true value for \u003ccode\u003ejson_createable?\u003c/code\u003e).  Many Ruby applications use libraries that have objects in constants that support \u003ccode\u003emethod_missing\u003c/code\u003e and could possibly be vulnerable.  However, I have not done any research into possible exploitability, which is why I listed severity as Medium.\u003c/p\u003e\n\n\u003cp\u003eIf any \u003ccode\u003ejson/add/*\u003c/code\u003e files have been required, this could possibly be very dangerous, as those can allow the creation of arbitrary core/stdlib objects.  For example \u003ccode\u003ejson/add/ostruct\u003c/code\u003e being required, when combined with this vulnerability, allows the creation of arbitrary objects that support attacker-defined methods with attacker-defined values of any type supported by JSON.  \u003ccode\u003ejson/add/regexp\u003c/code\u003e allows the creation of arbitrary Regexps which could easily lead to denial of service, and combined with a vulnerability in the regexp engine (Onigmo), could potentially lead to remote code execution.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":65,"name":"Business Logic Errors"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-04-23T08:36:17.166Z","allow_singular_disclosure_after":-21593037.877329834,"singular_disclosure_allowed":true,"vote_count":17,"voters":["a_d_a_m","mik317","what_web","b69fb2ebda43240ece9dbeb","kratos17","dabyain","adeeshajayanath","pandeyva","aggressive","phi1","and 7 more..."],"severity":{"rating":"medium","author_type":"User"},"structured_scope":{"databaseId":28212,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/ruby/ruby","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":5948489,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Jeremy,\n\nThank you for your report.  I understood as follows:\n\n* [CVE-2013-0269](https://www.ruby-lang.org/en/news/2013/02/22/json-dos-cve-2013-0269/) fixed the issue that `JSON.parse(untrusted_string)` had been exploitable against DoS.\n* However, The following method calls are still exploitable:\n  * `JSON(untrusted_string)`\n  * `JSON.parse(untrusted_string, nil)`\n  * `JSON[untrusted_string, nil]`\n  * `JSON::Parser.new(untrusted_string).parse`\n\nIs my understanding correct?\n\nThe CVE-2013-0269 announcement also notes \"*always* use `JSON.parse`\" for untrusted string.\n\n\u003e PLEASE NOTE: this behavior *does not change* when using `JSON.load`. `JSON.load` should *never* be given input from unknown sources. If you are processing JSON from an unknown source, *always* use `JSON.parse`.\n\nSo, I have no idea whether the method calls are considered harmful.  IMO, `JSON(untrusted_string)` is too easy to fall into the pitfall.  What do other people think?\n","markdown_message":"\u003cp\u003eHi Jeremy,\u003c/p\u003e\n\n\u003cp\u003eThank you for your report.  I understood as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ca href=\"/redirect?url=https%3A%2F%2Fwww.ruby-lang.org%2Fen%2Fnews%2F2013%2F02%2F22%2Fjson-dos-cve-2013-0269%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eCVE-2013-0269\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e fixed the issue that \u003ccode\u003eJSON.parse(untrusted_string)\u003c/code\u003e had been exploitable against DoS.\u003c/li\u003e\n\u003cli\u003eHowever, The following method calls are still exploitable:\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eJSON(untrusted_string)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJSON.parse(untrusted_string, nil)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJSON[untrusted_string, nil]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJSON::Parser.new(untrusted_string).parse\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIs my understanding correct?\u003c/p\u003e\n\n\u003cp\u003eThe CVE-2013-0269 announcement also notes \u0026quot;\u003cem\u003ealways\u003c/em\u003e use \u003ccode\u003eJSON.parse\u003c/code\u003e\u0026quot; for untrusted string.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ePLEASE NOTE: this behavior \u003cem\u003edoes not change\u003c/em\u003e when using \u003ccode\u003eJSON.load\u003c/code\u003e. \u003ccode\u003eJSON.load\u003c/code\u003e should \u003cem\u003enever\u003c/em\u003e be given input from unknown sources. If you are processing JSON from an unknown source, \u003cem\u003ealways\u003c/em\u003e use \u003ccode\u003eJSON.parse\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eSo, I have no idea whether the method calls are considered harmful.  IMO, \u003ccode\u003eJSON(untrusted_string)\u003c/code\u003e is too easy to fall into the pitfall.  What do other people think?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-03T05:22:10.845Z","updated_at":"2019-10-03T05:22:10.845Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5948524,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think your understanding is correct.  I believe this is still a security issue, as in all of these calls, the caller would expect `create_additions` to be set to `false`, not `true`.  Callers would expect that no option hash should be treated the same as the empty option hash.  I expect the `Kernel#JSON` usage is uncommon compared to `JSON.parse`.  I wasn't aware `Kernel#JSON` existed until running into this issue. I expect the other variants are even less likely to actually be used.","markdown_message":"\u003cp\u003eI think your understanding is correct.  I believe this is still a security issue, as in all of these calls, the caller would expect \u003ccode\u003ecreate_additions\u003c/code\u003e to be set to \u003ccode\u003efalse\u003c/code\u003e, not \u003ccode\u003etrue\u003c/code\u003e.  Callers would expect that no option hash should be treated the same as the empty option hash.  I expect the \u003ccode\u003eKernel#JSON\u003c/code\u003e usage is uncommon compared to \u003ccode\u003eJSON.parse\u003c/code\u003e.  I wasn\u0026#39;t aware \u003ccode\u003eKernel#JSON\u003c/code\u003e existed until running into this issue. I expect the other variants are even less likely to actually be used.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-03T05:33:09.766Z","updated_at":"2019-10-03T05:33:09.766Z","actor":{"username":"jeremyevans","cleared":false,"url":"/jeremyevans","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5948550,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2013-0269 is arbitrary ID creation by external data.\nRuby 2.2 and later have Symbol GC, so I don't think this is vulnerable.\n\n```\n$ ruby2.4 -v -rjson -I .ext/x86_64-darwin18/ -r-test-/symbol.bundle -e 'begin JSON(%[{\"json_class\":\"XXX\"}]); rescue ArgumentError, NameError =\u003e e; p e; end; p Bug::Symbol.pinneddown?(\"XXX\")'\nruby 2.4.7p357 (2019-08-28 revision 67796) [x86_64-darwin18]\n#\u003cArgumentError: can't get const XXX: uninitialized constant XXX\u003e\nfalse\n```\n\nAs for the invalid name, `\"foo\"`, it is prevented even in older versions as it raises a `NameError`.\n\n```\n$ ./ruby -v --disable=gems -rjson -r-test-/symbol -e 'begin JSON(%[{\"json_class\":\"foo\"}]); rescue ArgumentError, NameError =\u003e e; p e; end; p Bug::Symbol.interned?(\"foo\")'\nruby 2.1.10p492 (2016-04-22 revision 54691) [x86_64-darwin18.0]\n#\u003cNameError: wrong constant name foo\u003e\nfalse\n```\n","markdown_message":"\u003cp\u003eCVE-2013-0269 is arbitrary ID creation by external data.\u003cbr\u003e\nRuby 2.2 and later have Symbol GC, so I don\u0026#39;t think this is vulnerable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ ruby2.4 -v -rjson -I .ext/x86_64-darwin18/ -r-test-/symbol.bundle -e \u0026#39;begin JSON(%[{\u0026quot;json_class\u0026quot;:\u0026quot;XXX\u0026quot;}]); rescue ArgumentError, NameError =\u0026gt; e; p e; end; p Bug::Symbol.pinneddown?(\u0026quot;XXX\u0026quot;)\u0026#39;\nruby 2.4.7p357 (2019-08-28 revision 67796) [x86_64-darwin18]\n#\u0026lt;ArgumentError: can\u0026#39;t get const XXX: uninitialized constant XXX\u0026gt;\nfalse\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs for the invalid name, \u003ccode\u003e\u0026quot;foo\u0026quot;\u003c/code\u003e, it is prevented even in older versions as it raises a \u003ccode\u003eNameError\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ ./ruby -v --disable=gems -rjson -r-test-/symbol -e \u0026#39;begin JSON(%[{\u0026quot;json_class\u0026quot;:\u0026quot;foo\u0026quot;}]); rescue ArgumentError, NameError =\u0026gt; e; p e; end; p Bug::Symbol.interned?(\u0026quot;foo\u0026quot;)\u0026#39;\nruby 2.1.10p492 (2016-04-22 revision 54691) [x86_64-darwin18.0]\n#\u0026lt;NameError: wrong constant name foo\u0026gt;\nfalse\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2019-10-03T05:45:34.673Z","updated_at":"2019-10-03T05:45:34.673Z","actor":{"username":"nobu","cleared":false,"url":"/nobu","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/083/585/0d7081d0d147b05e9630bb56974707efae6d6721_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5960292,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jeremyevans,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@sodacan\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jeremyevans\"\u003e@jeremyevans\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-04T15:39:44.230Z","updated_at":"2019-10-04T15:39:44.230Z","actor":{"username":"sodacan","cleared":false,"url":"/sodacan","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/397/342/f09b69d30e08f05bbd6f12bf02200844bdf46f11_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5966089,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The previous explanation was partially false.\n* `JSON::GenericObject` is addressed by dynamic `Symbol`, a part of Symbol GC.\n* `\"json_class\"` case is addressed as `Module#const_missing` doesn't create new `ID` since this [get rid of inadvertent ID creation] commit.\n\n[get rid of inadvertent ID creation]: https://git.ruby-lang.org/ruby.git/commit/?id=8eb0c810b228df1f8352c005a7ae882ad4179b4b,","markdown_message":"\u003cp\u003eThe previous explanation was partially false.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003eJSON::GenericObject\u003c/code\u003e is addressed by dynamic \u003ccode\u003eSymbol\u003c/code\u003e, a part of Symbol GC.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003e\u0026quot;json_class\u0026quot;\u003c/code\u003e case is addressed as \u003ccode\u003eModule#const_missing\u003c/code\u003e doesn\u0026#39;t create new \u003ccode\u003eID\u003c/code\u003e since this \u003ca href=\"/redirect?url=https%3A%2F%2Fgit.ruby-lang.org%2Fruby.git%2Fcommit%2F%3Fid%3D8eb0c810b228df1f8352c005a7ae882ad4179b4b%2C\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eget rid of inadvertent ID creation\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e commit.\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2019-10-05T14:53:45.168Z","updated_at":"2019-10-05T14:53:45.168Z","actor":{"username":"nobu","cleared":false,"url":"/nobu","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/083/585/0d7081d0d147b05e9630bb56974707efae6d6721_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6059799,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@jeremyevans Nobu says that this issue seems to be fundamentally resolved because Ruby's Symbol is now (partially) GC'ed.  What do you think?","markdown_message":"\u003cp\u003e\u003ca href=\"/jeremyevans\"\u003e@jeremyevans\u003c/a\u003e Nobu says that this issue seems to be fundamentally resolved because Ruby\u0026#39;s Symbol is now (partially) GC\u0026#39;ed.  What do you think?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-16T23:20:09.142Z","updated_at":"2019-10-16T23:20:09.142Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6060355,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The denial of service vulnerability is probably resolved due to Symbol GC and removal of inadvertent symbol creation (I mentioned that in the initial report).\n\nHowever, I think the insecure object creation vulnerability is not resolved. `Kernel::JSON(user_provided_string)` should not try to call `json_create` or `json_creatable?` on arbitrary classes.","markdown_message":"\u003cp\u003eThe denial of service vulnerability is probably resolved due to Symbol GC and removal of inadvertent symbol creation (I mentioned that in the initial report).\u003c/p\u003e\n\n\u003cp\u003eHowever, I think the insecure object creation vulnerability is not resolved. \u003ccode\u003eKernel::JSON(user_provided_string)\u003c/code\u003e should not try to call \u003ccode\u003ejson_create\u003c/code\u003e or \u003ccode\u003ejson_creatable?\u003c/code\u003e on arbitrary classes.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-17T00:08:20.999Z","updated_at":"2019-10-17T00:08:20.999Z","actor":{"username":"jeremyevans","cleared":false,"url":"/jeremyevans","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6772949,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-15T02:04:15.381Z","updated_at":"2020-01-15T02:04:15.381Z","actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7349816,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This has now been open for over 6 months.  We haven't had another release of ruby 2.4, 2.5, or 2.6 since then, but that sounds like a long time to leave a security issue open.  Is this issue here because the fix is in the json gem?  The json gem released version 2.3.0 with the fix back in December.\n\nIs there an estimate for long this will take to be backported to ruby 2.5 and 2.6?  Do we plan to backport this to 2.4 before it goes out of maintenance at the end of the month?","markdown_message":"\u003cp\u003eThis has now been open for over 6 months.  We haven\u0026#39;t had another release of ruby 2.4, 2.5, or 2.6 since then, but that sounds like a long time to leave a security issue open.  Is this issue here because the fix is in the json gem?  The json gem released version 2.3.0 with the fix back in December.\u003c/p\u003e\n\n\u003cp\u003eIs there an estimate for long this will take to be backported to ruby 2.5 and 2.6?  Do we plan to backport this to 2.4 before it goes out of maintenance at the end of the month?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-18T03:37:14.062Z","updated_at":"2020-03-18T03:37:14.062Z","actor":{"username":"jeremyevans","cleared":false,"url":"/jeremyevans","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7351291,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Jeremy,\n\nI'd like to handle this as a security issue.  Could you please create a patch for 2.4, 2.5 and 2.6?  I'll request a CVE number. ","markdown_message":"\u003cp\u003eHi Jeremy,\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;d like to handle this as a security issue.  Could you please create a patch for 2.4, 2.5 and 2.6?  I\u0026#39;ll request a CVE number. \u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-18T08:01:42.452Z","updated_at":"2020-03-18T08:01:42.452Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7369753,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2020-10663 was assigned and I published https://www.ruby-lang.org/en/news/2020/03/19/json-dos-cve-2020-10663/","markdown_message":"\u003cp\u003eCVE-2020-10663 was assigned and I published \u003ca title=\"https://www.ruby-lang.org/en/news/2020/03/19/json-dos-cve-2020-10663/\" href=\"/redirect?url=https%3A%2F%2Fwww.ruby-lang.org%2Fen%2Fnews%2F2020%2F03%2F19%2Fjson-dos-cve-2020-10663%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.ruby-lang.org/en/news/2020/03/19/json-dos-cve-2020-10663/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-19T14:33:51.519Z","updated_at":"2020-03-19T14:33:51.519Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7369759,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-19T14:34:40.634Z","updated_at":"2020-03-19T14:34:40.634Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"jeremyevans","url":"/jeremyevans"},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7369765,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@hsbt Could you please decide the amount of award?","markdown_message":"\u003cp\u003e\u003ca href=\"/hsbt\"\u003e@hsbt\u003c/a\u003e Could you please decide the amount of award?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-19T14:35:20.836Z","updated_at":"2020-03-19T14:35:20.836Z","actor":{"username":"mame","cleared":false,"url":"/mame","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7407336,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-24T08:36:03.482Z","updated_at":"2020-03-24T08:36:03.482Z","actor":{"url":"/ruby","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"ruby","collaborator":{"username":"jeremyevans","url":"/jeremyevans"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7407338,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-24T08:36:17.113Z","updated_at":"2020-03-24T08:36:17.113Z","first_to_agree":true,"actor":{"username":"hsbt","cleared":false,"url":"/hsbt","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/051/808/c3eeedf7f0d1a3c3eead4e0106bbcc4441e0d9f5_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7763683,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-04-23T08:36:22.319Z","updated_at":"2020-04-23T08:36:22.319Z","actor":{"url":"/ruby","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/724/bb067434deef370d6a0b16c2cbbc030b57c75e92_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby"}},"genius_execution_id":null,"team_handle":"ruby","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}