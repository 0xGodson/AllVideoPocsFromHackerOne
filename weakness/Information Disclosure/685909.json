{"id":685909,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82ODU5MDk=","url":"https://hackerone.com/reports/685909","title":"Searching from Hacktivity returns hits for words in limited disclosure reports that are not visible","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-09-01T11:28:31.585Z","submitted_at":"2019-09-01T11:28:31.585Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"nathand","url":"/nathand","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-08T21:27:56.007Z","bug_reporter_agreed_on_going_public_at":"2019-11-08T21:27:55.912Z","team_member_agreed_on_going_public_at":"2019-11-08T20:47:16.366Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Summary:**\n\nIt appears I'm able to discover words used in limited disclosed reports, that are not publicly visible, by using the search function available from the Hactivity page.\n\n**Description:**\n\nRecently I was investigating a finding for another program which involved exploiting XSS ████. I wondered how relevant exploiting ████ was to programs these days, so I set about searching Hackerone for relevant reports. Normally I'd just use Google for this, but this time I decided to use the Hackerone search in the Hacktivity stream page. To find relevant reports, I first searched for:\n\n```\nxss ███████\n```\n\nOr in URL form: ██████\n\nThis returned a lot of clearly relevant reports. However, when I came across the report #413412 in the search results, entitled \"Reflected XSS on secure.chaturbate.com\", I noticed something a bit odd - it doesn't mention ███████ anywhere in the report that is publicly visible (and in fact that string is nowhere to be found in its markup such as keyword meta data):\n\nhttps://hackerone.com/reports/413412\n\nHowever, in the results, Chaturbate does have a report ██████████ involving XSS ████, so it seems probable this limited report is referencing ██████████, even though what's publicly available does not mention this.\n\nThis had me wondering if I stumbled across a bug in Hackerone report searching, where by I am able to reveal words contained within the hacker's description and/or comments of limited disclosed reports. To test this theory, I wrote a script to perform this search, but while also adding other words, and seeing if this report still gets returned in the results, and try and reveal more content that is not available in the limited public report. For which words to add I used a list of the 'top 3000 English words' and ignored words that are 3 characters or shorter in length, or are very common (than, that, your etc).\n\nThe results proved successful, in the sense I was able to build a lengthy search query that only returns this report, of words that are not found in the limited report (but still seem fairly likely to be matches, given the context). This search string was:\n\n```\nxss ████████ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable\n```\n\nOr in URL form: ███████\n\nWhile this particular example did not reveal any sensitive information for this specific report, I thought this worth reporting due to the obvious potential here to find details in reports that the program may not want to be public.\n\n### Steps To Reproduce\n\n1. Go to the Hacktivity page.\n2. Search for `xss ███ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable`\n3. Note the single result as report #413412, and other than \"XSS\", none of these words appear in the limited disclosed public report.\n\n## Impact\n\nBy abusing this, an attacker could reveal content hidden in a limited disclosed report.","vulnerability_information_html":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eIt appears I\u0026#39;m able to discover words used in limited disclosed reports, that are not publicly visible, by using the search function available from the Hactivity page.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eRecently I was investigating a finding for another program which involved exploiting XSS ████. I wondered how relevant exploiting ████ was to programs these days, so I set about searching Hackerone for relevant reports. Normally I\u0026#39;d just use Google for this, but this time I decided to use the Hackerone search in the Hacktivity stream page. To find relevant reports, I first searched for:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003exss ███████\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr in URL form: ██████\u003c/p\u003e\n\n\u003cp\u003eThis returned a lot of clearly relevant reports. However, when I came across the report \u003ca href=\"/reports/413412\"\u003e#413412\u003c/a\u003e in the search results, entitled \u0026quot;Reflected XSS on secure.chaturbate.com\u0026quot;, I noticed something a bit odd - it doesn\u0026#39;t mention ███████ anywhere in the report that is publicly visible (and in fact that string is nowhere to be found in its markup such as keyword meta data):\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://hackerone.com/reports/413412\" href=\"https://hackerone.com/reports/413412\"\u003ehttps://hackerone.com/reports/413412\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHowever, in the results, Chaturbate does have a report ██████████ involving XSS ████, so it seems probable this limited report is referencing ██████████, even though what\u0026#39;s publicly available does not mention this.\u003c/p\u003e\n\n\u003cp\u003eThis had me wondering if I stumbled across a bug in Hackerone report searching, where by I am able to reveal words contained within the hacker\u0026#39;s description and/or comments of limited disclosed reports. To test this theory, I wrote a script to perform this search, but while also adding other words, and seeing if this report still gets returned in the results, and try and reveal more content that is not available in the limited public report. For which words to add I used a list of the \u0026#39;top 3000 English words\u0026#39; and ignored words that are 3 characters or shorter in length, or are very common (than, that, your etc).\u003c/p\u003e\n\n\u003cp\u003eThe results proved successful, in the sense I was able to build a lengthy search query that only returns this report, of words that are not found in the limited report (but still seem fairly likely to be matches, given the context). This search string was:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003exss ████████ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOr in URL form: ███████\u003c/p\u003e\n\n\u003cp\u003eWhile this particular example did not reveal any sensitive information for this specific report, I thought this worth reporting due to the obvious potential here to find details in reports that the program may not want to be public.\u003c/p\u003e\n\n\u003ch3 id=\"steps-to-reproduce\"\u003eSteps To Reproduce\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eGo to the Hacktivity page.\u003c/li\u003e\n\u003cli\u003eSearch for \u003ccode\u003exss ███ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eNote the single result as report \u003ca href=\"/reports/413412\"\u003e#413412\u003c/a\u003e, and other than \u0026quot;XSS\u0026quot;, none of these words appear in the limited disclosed public report.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eBy abusing this, an attacker could reveal content hidden in a limited disclosed report.\u003c/p\u003e\n","bounty_amount":"2500.0","formatted_bounty":"$2,500","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-12-08T20:47:16.509Z","allow_singular_disclosure_after":-33385848.437428553,"singular_disclosure_allowed":true,"vote_count":123,"voters":["nohats","ak-ka","physuru","oxecho","dirk","thaivu","sultancad","jobert","vampire000","0xfd","and 113 more..."],"severity":{"rating":"medium","score":4.4,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"low","integrity":"none","availability":"none"}},"structured_scope":{"databaseId":3,"asset_type":"URL","asset_identifier":"https://hackerone.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":5708346,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nathand, \n\nThank you for your submission! I can confirm that `xss ████ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable` is ==not== the part of the report found in the search result #413412, But I will check with the team if any particular reason for showing this only result in the search. \n\nRegards. ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! I can confirm that \u003ccode\u003exss ████ against application attack dangerous detect convince deliver direct mail mechanism occur publicly reference remove request responsible scheme script security supply themselves under victim vulnerable\u003c/code\u003e is \u003cmark\u003enot\u003c/mark\u003e the part of the report found in the search result \u003ca href=\"/reports/413412\"\u003e#413412\u003c/a\u003e, But I will check with the team if any particular reason for showing this only result in the search. \u003c/p\u003e\n\n\u003cp\u003eRegards. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-01T17:15:19.591Z","updated_at":"2019-11-08T20:43:24.764Z","actor":{"username":"chessmast3r","cleared":false,"url":"/chessmast3r","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/220/459/6b3c5fca9df9cde7fe36b55238b13d2cea86ea80_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5708917,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @chessmast3r, so you're saying that these terms are not found in the full non-limited report, including '█████████'? FYI I did find that some terms are normalised (e.g. searching for \"against\" seems to also match \"again\").\n\nHappy to close this report on my end if so, although I'm still curious to know what is going on.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/chessmast3r\"\u003e@chessmast3r\u003c/a\u003e, so you\u0026#39;re saying that these terms are not found in the full non-limited report, including \u0026#39;█████████\u0026#39;? FYI I did find that some terms are normalised (e.g. searching for \u0026quot;against\u0026quot; seems to also match \u0026quot;again\u0026quot;).\u003c/p\u003e\n\n\u003cp\u003eHappy to close this report on my end if so, although I\u0026#39;m still curious to know what is going on.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-01T22:03:03.600Z","updated_at":"2019-11-08T20:43:24.757Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5737676,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey team, this now appears to be fixed? the two search links in the above report are no longer returning the #413412 report. ","markdown_message":"\u003cp\u003eHey team, this now appears to be fixed? the two search links in the above report are no longer returning the \u003ca href=\"/reports/413412\"\u003e#413412\u003c/a\u003e report. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-05T11:55:54.120Z","updated_at":"2019-09-05T11:56:35.050Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5737734,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nathand, \n\nNo activity from the team here, will update you as soon as I hear anything. ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eNo activity from the team here, will update you as soon as I hear anything. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-05T12:07:35.893Z","updated_at":"2019-09-05T12:07:35.893Z","actor":{"username":"chessmast3r","cleared":false,"url":"/chessmast3r","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/220/459/6b3c5fca9df9cde7fe36b55238b13d2cea86ea80_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5743445,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hey @nathand,\n\nSorry for the confusion, I was testing some things and reproduced the issue. I'll escalate this to look into it further.\n\nThanks!","markdown_message":"\u003cp\u003eHey \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eSorry for the confusion, I was testing some things and reproduced the issue. I\u0026#39;ll escalate this to look into it further.\u003c/p\u003e\n\n\u003cp\u003eThanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-06T00:02:27.631Z","updated_at":"2019-09-06T00:02:27.631Z","actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5743492,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"No problems @bencode - as mentioned from my end it looks fixed as the two searches in my report are no longer returning the Chaturbate report which I was using to demonstrate this, so I thought maybe a quick fix was applied.","markdown_message":"\u003cp\u003eNo problems \u003ca href=\"/bencode\"\u003e@bencode\u003c/a\u003e - as mentioned from my end it looks fixed as the two searches in my report are no longer returning the Chaturbate report which I was using to demonstrate this, so I thought maybe a quick fix was applied.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-06T00:34:32.920Z","updated_at":"2019-09-06T00:34:32.920Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5985150,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi there @bencode, any news on this one?","markdown_message":"\u003cp\u003eHi there \u003ca href=\"/bencode\"\u003e@bencode\u003c/a\u003e, any news on this one?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-08T11:20:25.009Z","updated_at":"2019-10-08T11:20:25.009Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6016978,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-11T16:51:21.414Z","updated_at":"2019-10-11T16:51:21.414Z","additional_data":{"old_severity":"Medium","new_severity":"Medium (4.4)","old_severity_id":506312,"new_severity_id":536523},"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6016985,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks @nathand, awesome find! We'll get back with an update on this ticket soon.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e, awesome find! We\u0026#39;ll get back with an update on this ticket soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-11T16:51:50.573Z","updated_at":"2019-10-11T16:51:50.573Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"bounty_amount":"2500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"security","collaborator":{"username":"nathand","url":"/nathand"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6019525,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks! I'm keen to hear what the issue was here, this one sounds interesting.","markdown_message":"\u003cp\u003eThanks! I\u0026#39;m keen to hear what the issue was here, this one sounds interesting.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-11T22:52:15.167Z","updated_at":"2019-10-11T22:52:15.167Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6166427,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nathand - \n\nWe did a root cause analysis and found the underlying issue! We've spoken to our engineering team and a fix is under its way. It turns out to be a pretty interesting one. We'll update the report with our RCA later this week. Stay tuned!\n\n-Pei","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e - \u003c/p\u003e\n\n\u003cp\u003eWe did a root cause analysis and found the underlying issue! We\u0026#39;ve spoken to our engineering team and a fix is under its way. It turns out to be a pretty interesting one. We\u0026#39;ll update the report with our RCA later this week. Stay tuned!\u003c/p\u003e\n\n\u003cp\u003e-Pei\u003c/p\u003e\n","automated_response":false,"created_at":"2019-10-29T17:42:30.088Z","updated_at":"2019-10-29T17:42:30.088Z","actor":{"username":"pei","cleared":false,"url":"/pei","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/939/2d83322336a492279dc84d8f92f280c2d54fcb5b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6257586,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hi @nathand - we've released a patch for the security vulnerability you reported. We'll post a root cause analysis later today and then request public disclosure. Thanks again for reporting this to us, this was a cool find!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e - we\u0026#39;ve released a patch for the security vulnerability you reported. We\u0026#39;ll post a root cause analysis later today and then request public disclosure. Thanks again for reporting this to us, this was a cool find!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-08T18:31:03.170Z","updated_at":"2019-11-08T18:31:03.170Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"nathand","url":"/nathand"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6258799,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Hi @nathand - thanks again for this great report! We just posted the root cause analysis as a summary of the report, so we're requesting full public disclosure.\n\nI wanted to clarify one more point that you made in your report: your script did indeed find words that aren't present in the report content. This happened because the CWE description is also indexed. Due to the selected weakness, the words that you found all matched the root of the words from the weakness. This did not disclose any redacted or private vulnerability information.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e - thanks again for this great report! We just posted the root cause analysis as a summary of the report, so we\u0026#39;re requesting full public disclosure.\u003c/p\u003e\n\n\u003cp\u003eI wanted to clarify one more point that you made in your report: your script did indeed find words that aren\u0026#39;t present in the report content. This happened because the CWE description is also indexed. Due to the selected weakness, the words that you found all matched the root of the words from the weakness. This did not disclose any redacted or private vulnerability information.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-08T20:47:16.390Z","updated_at":"2019-11-08T20:47:16.390Z","first_to_agree":true,"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6259115,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-08T21:27:55.942Z","updated_at":"2019-11-08T21:27:55.942Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6259116,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-08T21:27:56.042Z","updated_at":"2019-11-08T21:27:56.042Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":18809,"category":"team","content":"@nathand reported a security vulnerability to HackerOne that allowed a user to determine redacted or private information through search results in very specific cases. We applaud @nathand's thoroughness and effort for disclosing this security vulnerability to us. HackerOne conducted a root cause analysis of the vulnerability and determined that it affected a few publicly disclosed reports. No signs of exploitation were found.\n\n# Root cause analysis\nTo analyze the root cause, it is important to understand the timeline first of the security vulnerability that was reported.\n\n| **Date** | **Item** |\n| ------ | ------ |\n| September 24, 2018 | `glc` submits a [security vulnerability](https://hackerone.com/reports/413412) with `██████` in the title. |\n| September 24, 2018 | `williammmllc` (team member) requests limited disclosure of [#413412](https://hackerone.com/reports/413412). | \n| October 17, 2018 | `glc` (reporter) agrees to disclosure of [#413412](https://hackerone.com/reports/413412). | \n| November, 2018 | HackerOne engineering team rolls out a data migration to backfill the search vector that would be used when Hacktivity Search would be launched (somewhere in the future). At this point, `██████` was stored in the search vector because it was part of the report title. |\n| May 1, 2019| `williammmllc` updates the title and removes the word `██████`. The search vectors are **expected** to be updated, but aren't. |\n| September 1, 2019 | `nathand` submits a security vulnerability to HackerOne that the report shows up in the search results when they search for `██████`. |\n\nThe engineering team that implemented the search functionality designed the feature in a way that the backfill should get the search vectors in the exact same state as when the report would be submitted after the backfill. The backfill ran before Hacktivity Search was released to the public. One of the architectural decisions the team made to keep search vectors up to date, was by hooking into the `after_commit` hook in the `Report` model. This hook would then validate whether the vector had to be updated. Below is an excerpt of that code.\n\n```ruby\nclass Report \u003c ActiveRecord::Base\n  # ...\n  after_commit do\n    update_hacktivity_search_content_async\n  end\n\n  # ...\n\n  def update_hacktivity_search_content_async\n    return unless should_update_hacktivity_search_content?\n\n    # schedule a job to update the vector\n  end\n\n  def should_update_hacktivity_search_content?\n    new? ||\n      previous_changes.keys.include?('title') ||\n      previous_changes.keys.include?('vulnerability_information') ||\n      previous_changes.keys.include?('weakness_id') ||\n      previous_changes.keys.include?('structured_scope_id') ||\n      previous_changes.keys.include?('team_id') ||\n      previous_changes.keys.include?('public_view') ||\n      previous_changes.keys.include?('disclosed_at')\n  end\n\n  # ...\nend\n```\n\nAs can be seen in the code, whenever one of the attributes mentioned in the `should_update_hacktivity_search_content` method would be changed, an asynchronous job would be scheduled to update the vector. This meant that the team didn't have to go through every code path and make sure they triggered the correct job to update the vector. At HackerOne, usage of ActiveRecord hooks is generally discouraged due to the complexity it adds to a request or transaction lifecycle.\n\nThe team looked into the behaviors of the `previous_changes` hash in combination with the `after_commit` hook. Small code snippets were used to track down the exact behavior. Some of those code examples are shared below. \n\nRunning the code below invokes an update of the vector, as expected:\n\n```ruby\nreport = Report.find 123\nreport.update title: 'new title'\n```\n\nBecause the `after_commit` hook is used, it'll execute the code after the transaction has been completed OR immediately when the SQL query is not ran in a transaction block. The following code, when run on a Rails console, will call the hook twice:\n\n```ruby\nreport = Report.find 123\nreport.update title: 'new title'\nreport.update vulnerability_information: 'new information'\n```\n\nHowever, when the code is ran in a transaction block, the Postgres state and Ruby memory state start to diverge. This means that the following code will only trigger the hook once:\n\n```ruby\nActiveRecord::Base.transaction do\n  report = Report.find 123\n  report.update title: 'new title'\n  report.update vulnerability_information: 'new information'\nend\n```\n\nIt is important to know that *every* request (except `show` and `index` actions) is automatically wrapped in a transaction. Subsequently, a number of service objects explicitly create transactions. The behavior described above does *not* change with nested transactions.\n\nThis all matters because a code path that updates a single `Report` object multiple times in a single transaction may cause the `after_commit` hook to miss columns that the engineers expected it to be stored in the `previous_changes` hash. This is especially confusing because in integration tests for some interactions, individual service object are tested, which are not necessarily wrapped in a transaction. This means the behavior in the test suite was not representative of the behavior of other environments.\n\nWhen conducting the root cause analysis, HackerOne established a code pattern that could be used to identify code paths that update `Report` models multiple times during a request lifecycle. A number of code paths were identified, including the scenario where a team member requested disclosure, the reported agreed, and then the team member would update the title of the report. Below is an excerpt of that code path.\n\n**app/controllers/reports_controller.rb**\n```ruby\nclass ReportsController \u003c ApplicationController\n  # ...\n\n  def update\n    report = Report.find_by(id: params[:id])\n\n    # ...\n        interact Interactors::Reports::UpdateTitle, report: report, title: params[:title]\n\n    # ...\n  end\n\n  # ...\nend\n```\n\nThe controller dispatches the interaction to the `UpdateTitle` service object. Because it's called through a controller action, the interaction is automatically wrapped in a transaction.\n\n**app/backend/interactors/reports/update_title.rb**\n```ruby\nmodule Interactors\n  module Reports\n    class UpdateTitle \u003c HackeroneInteractor\n      # ...\n\n      def execute\n        old_title = report.title\n\n        return unless report.update(title: title) # \u003c-- FIRST UPDATE CALL\n\n        interact ::Interactors::Activities::Create, # \u003c-- LOGGING THE TITLE CHANGE\n          # ...\n      end\n\n      # ...\n    end\n  end\nend\n```\n\nThe interaction above contains the first `update` call. If the title is updated, an activity will be created to track the change.\n\n**app/backend/interactors/activities/create.rb**\n```ruby\nmodule Interactors\n  module Activities\n    class Create \u003c HackeroneInteractor\n      # ...\n\n      def execute\n        activity = nil\n\n        ActiveRecord::Base.transaction do # \u003c-- NESTED TRANSACTION\n          activity = interact Commands::Activities::Create,\n            # ...\n\n          if activity.persisted?\n            if subject.is_a? Report\n              # ...\n\n              if !activity.internal? \u0026\u0026\n                  current_user.is_a?(User) \u0026\u0026\n                  current_user.member_of_team?(subject.team) \u0026\u0026\n                  !activity.is_a?(::Activities::BugFiled)\n                subject.stop_timer Report::TIMER_FIRST_PROGRAM_RESPONSE\n                subject.save! # \u003c-- SECOND UPDATE\n        # ...\n      end\n    end\n  end\nend\n```\n\nFollowing the logic above, `subject.save!` is called when the program member updates the title. The `TIMER_FIRST_PROGRAM_RESPONSE` had already stopped for report #413412, but calling `save!` on a model without changes will still clear out the `previous_changes` hash. This means that when the transaction block is committed, `previous_changes` will be an empty hash -- resulting in the job to update the vector **not** to be scheduled. This proved the security vulnerability as reported by @nathand.\n\nWhen going through other code paths, a functional error was discovered, too. After every created activity in the backend of HackerOne, a side effect is called that updates a cache on the `Report` model to track certain dates; for example, when the last public activity was posted and when the last internal activity was posted. Because this was called every time the `Interactors::Activities::Create` service object was invoked, the `previous_changes` hash would typically only contain those attributes and disregard any other attribute that was updated in the request. This resulted in a functional bug where the vector wouldn't be updated at all and default to the name of the program, handle of the program, and the username of the reporter.\n\n# Remediation\nThe engineering team wrote a regression spec to prove the security vulnerability and functional bug. It turned out that [a number of other engineers outside of HackerOne have run into similar problems](https://medium.com/ruby-on-rails/activerecord-transaction-gotchas-277c048dc3ca), letting them to develop a [library that solves this problem](https://github.com/dylanahsmith/ar_transaction_changes). They have proposed to merge this change back into ActiveRecord and [make it a first class citizen of the Rails / ActiveRecord family](http://github.com/dylanahsmith/ar_transaction_changes/issues/16). HackerOne has leveraged this library to mitigate the reported security vulnerability.","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003e\u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e reported a security vulnerability to HackerOne that allowed a user to determine redacted or private information through search results in very specific cases. We applaud \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e\u0026#39;s thoroughness and effort for disclosing this security vulnerability to us. HackerOne conducted a root cause analysis of the vulnerability and determined that it affected a few publicly disclosed reports. No signs of exploitation were found.\u003c/p\u003e\n\n\u003ch1 id=\"root-cause-analysis\"\u003eRoot cause analysis\u003c/h1\u003e\n\n\u003cp\u003eTo analyze the root cause, it is important to understand the timeline first of the security vulnerability that was reported.\u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003cstrong\u003eDate\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eItem\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eSeptember 24, 2018\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003eglc\u003c/code\u003e submits a \u003ca href=\"https://hackerone.com/reports/413412\"\u003esecurity vulnerability\u003c/a\u003e with \u003ccode\u003e██████\u003c/code\u003e in the title.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSeptember 24, 2018\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003ewilliammmllc\u003c/code\u003e (team member) requests limited disclosure of \u003ca href=\"https://hackerone.com/reports/413412\"\u003e#413412\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOctober 17, 2018\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003eglc\u003c/code\u003e (reporter) agrees to disclosure of \u003ca href=\"https://hackerone.com/reports/413412\"\u003e#413412\u003c/a\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eNovember, 2018\u003c/td\u003e\n\u003ctd\u003eHackerOne engineering team rolls out a data migration to backfill the search vector that would be used when Hacktivity Search would be launched (somewhere in the future). At this point, \u003ccode\u003e██████\u003c/code\u003e was stored in the search vector because it was part of the report title.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMay 1, 2019\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003ewilliammmllc\u003c/code\u003e updates the title and removes the word \u003ccode\u003e██████\u003c/code\u003e. The search vectors are \u003cstrong\u003eexpected\u003c/strong\u003e to be updated, but aren\u0026#39;t.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eSeptember 1, 2019\u003c/td\u003e\n\u003ctd\u003e\n\u003ccode\u003enathand\u003c/code\u003e submits a security vulnerability to HackerOne that the report shows up in the search results when they search for \u003ccode\u003e██████\u003c/code\u003e.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe engineering team that implemented the search functionality designed the feature in a way that the backfill should get the search vectors in the exact same state as when the report would be submitted after the backfill. The backfill ran before Hacktivity Search was released to the public. One of the architectural decisions the team made to keep search vectors up to date, was by hooking into the \u003ccode\u003eafter_commit\u003c/code\u003e hook in the \u003ccode\u003eReport\u003c/code\u003e model. This hook would then validate whether the vector had to be updated. Below is an excerpt of that code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eReport\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eBase\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eafter_commit\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eupdate_hacktivity_search_content_async\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eupdate_hacktivity_search_content_async\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003eshould_update_hacktivity_search_content?\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# schedule a job to update the vector\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshould_update_hacktivity_search_content?\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enew?\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;vulnerability_information\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;weakness_id\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;structured_scope_id\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;team_id\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;public_view\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eprevious_changes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;disclosed_at\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs can be seen in the code, whenever one of the attributes mentioned in the \u003ccode\u003eshould_update_hacktivity_search_content\u003c/code\u003e method would be changed, an asynchronous job would be scheduled to update the vector. This meant that the team didn\u0026#39;t have to go through every code path and make sure they triggered the correct job to update the vector. At HackerOne, usage of ActiveRecord hooks is generally discouraged due to the complexity it adds to a request or transaction lifecycle.\u003c/p\u003e\n\n\u003cp\u003eThe team looked into the behaviors of the \u003ccode\u003eprevious_changes\u003c/code\u003e hash in combination with the \u003ccode\u003eafter_commit\u003c/code\u003e hook. Small code snippets were used to track down the exact behavior. Some of those code examples are shared below. \u003c/p\u003e\n\n\u003cp\u003eRunning the code below invokes an update of the vector, as expected:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ereport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e \u003cspan class=\"ss\"\u003etitle: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new title\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBecause the \u003ccode\u003eafter_commit\u003c/code\u003e hook is used, it\u0026#39;ll execute the code after the transaction has been completed OR immediately when the SQL query is not ran in a transaction block. The following code, when run on a Rails console, will call the hook twice:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ereport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e \u003cspan class=\"ss\"\u003etitle: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new title\u0026#39;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e \u003cspan class=\"ss\"\u003evulnerability_information: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new information\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, when the code is ran in a transaction block, the Postgres state and Ruby memory state start to diverge. This means that the following code will only trigger the hook once:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eBase\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etransaction\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ereport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"mi\"\u003e123\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e \u003cspan class=\"ss\"\u003etitle: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new title\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e \u003cspan class=\"ss\"\u003evulnerability_information: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;new information\u0026#39;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is important to know that \u003cem\u003eevery\u003c/em\u003e request (except \u003ccode\u003eshow\u003c/code\u003e and \u003ccode\u003eindex\u003c/code\u003e actions) is automatically wrapped in a transaction. Subsequently, a number of service objects explicitly create transactions. The behavior described above does \u003cem\u003enot\u003c/em\u003e change with nested transactions.\u003c/p\u003e\n\n\u003cp\u003eThis all matters because a code path that updates a single \u003ccode\u003eReport\u003c/code\u003e object multiple times in a single transaction may cause the \u003ccode\u003eafter_commit\u003c/code\u003e hook to miss columns that the engineers expected it to be stored in the \u003ccode\u003eprevious_changes\u003c/code\u003e hash. This is especially confusing because in integration tests for some interactions, individual service object are tested, which are not necessarily wrapped in a transaction. This means the behavior in the test suite was not representative of the behavior of other environments.\u003c/p\u003e\n\n\u003cp\u003eWhen conducting the root cause analysis, HackerOne established a code pattern that could be used to identify code paths that update \u003ccode\u003eReport\u003c/code\u003e models multiple times during a request lifecycle. A number of code paths were identified, including the scenario where a team member requested disclosure, the reported agreed, and then the team member would update the title of the report. Below is an excerpt of that code path.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eapp/controllers/reports_controller.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eReportsController\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eApplicationController\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ereport\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind_by\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n        \u003cspan class=\"n\"\u003einteract\u003c/span\u003e \u003cspan class=\"no\"\u003eInteractors\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eReports\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eUpdateTitle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ereport: \u003c/span\u003e\u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003etitle: \u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:title\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe controller dispatches the interaction to the \u003ccode\u003eUpdateTitle\u003c/code\u003e service object. Because it\u0026#39;s called through a controller action, the interaction is automatically wrapped in a transaction.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eapp/backend/interactors/reports/update_title.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eInteractors\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eReports\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUpdateTitle\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eHackeroneInteractor\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n      \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eold_title\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etitle\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003ereport\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eupdate\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003etitle: \u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;-- FIRST UPDATE CALL\u003c/span\u003e\n\n        \u003cspan class=\"n\"\u003einteract\u003c/span\u003e \u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eInteractors\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eActivities\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;-- LOGGING THE TITLE CHANGE\u003c/span\u003e\n          \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n      \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe interaction above contains the first \u003ccode\u003eupdate\u003c/code\u003e call. If the title is updated, an activity will be created to track the change.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eapp/backend/interactors/activities/create.rb\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eInteractors\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eActivities\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eCreate\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eHackeroneInteractor\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n      \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eactivity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\n\n        \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eBase\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etransaction\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;-- NESTED TRANSACTION\u003c/span\u003e\n          \u003cspan class=\"n\"\u003eactivity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einteract\u003c/span\u003e \u003cspan class=\"no\"\u003eCommands\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eActivities\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eCreate\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n          \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eactivity\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003epersisted?\u003c/span\u003e\n            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\n              \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n              \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eactivity\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einternal?\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ecurrent_user\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                  \u003cspan class=\"n\"\u003ecurrent_user\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emember_of_team?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eteam\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n                  \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003eactivity\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eActivities\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eBugFiled\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estop_timer\u003c/span\u003e \u003cspan class=\"no\"\u003eReport\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTIMER_FIRST_PROGRAM_RESPONSE\u003c/span\u003e\n                \u003cspan class=\"n\"\u003esubject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esave!\u003c/span\u003e \u003cspan class=\"c1\"\u003e# \u0026lt;-- SECOND UPDATE\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFollowing the logic above, \u003ccode\u003esubject.save!\u003c/code\u003e is called when the program member updates the title. The \u003ccode\u003eTIMER_FIRST_PROGRAM_RESPONSE\u003c/code\u003e had already stopped for report \u003ca href=\"/reports/413412\"\u003e#413412\u003c/a\u003e, but calling \u003ccode\u003esave!\u003c/code\u003e on a model without changes will still clear out the \u003ccode\u003eprevious_changes\u003c/code\u003e hash. This means that when the transaction block is committed, \u003ccode\u003eprevious_changes\u003c/code\u003e will be an empty hash -- resulting in the job to update the vector \u003cstrong\u003enot\u003c/strong\u003e to be scheduled. This proved the security vulnerability as reported by \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen going through other code paths, a functional error was discovered, too. After every created activity in the backend of HackerOne, a side effect is called that updates a cache on the \u003ccode\u003eReport\u003c/code\u003e model to track certain dates; for example, when the last public activity was posted and when the last internal activity was posted. Because this was called every time the \u003ccode\u003eInteractors::Activities::Create\u003c/code\u003e service object was invoked, the \u003ccode\u003eprevious_changes\u003c/code\u003e hash would typically only contain those attributes and disregard any other attribute that was updated in the request. This resulted in a functional bug where the vector wouldn\u0026#39;t be updated at all and default to the name of the program, handle of the program, and the username of the reporter.\u003c/p\u003e\n\n\u003ch1 id=\"remediation\"\u003eRemediation\u003c/h1\u003e\n\n\u003cp\u003eThe engineering team wrote a regression spec to prove the security vulnerability and functional bug. It turned out that \u003ca href=\"/redirect?url=https%3A%2F%2Fmedium.com%2Fruby-on-rails%2Factiverecord-transaction-gotchas-277c048dc3ca\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ea number of other engineers outside of HackerOne have run into similar problems\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, letting them to develop a \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdylanahsmith%2Far_transaction_changes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003elibrary that solves this problem\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. They have proposed to merge this change back into ActiveRecord and \u003ca href=\"/redirect?url=http%3A%2F%2Fgithub.com%2Fdylanahsmith%2Far_transaction_changes%2Fissues%2F16\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003emake it a first class citizen of the Rails / ActiveRecord family\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. HackerOne has leveraged this library to mitigate the reported security vulnerability.\u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}