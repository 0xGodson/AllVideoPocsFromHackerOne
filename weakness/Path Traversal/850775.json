{"id":850775,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NTA3NzU=","url":"https://hackerone.com/reports/850775","title":"Windows only: arbitrary file read vulnerability in openssl s_server","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2020-04-15T21:08:34.601Z","submitted_at":"2020-04-15T21:08:34.601Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jobert","url":"/jobert","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":24,"url":"https://hackerone.com/ibb-openssl","handle":"ibb-openssl","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/024/523699736f62cf8e067320163b49e80626b1b3a3_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/024/523699736f62cf8e067320163b49e80626b1b3a3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"OpenSSL (IBB)","twitter_handle":"","website":"https://www.openssl.org","about":""}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-10-10T03:39:09.695Z","bug_reporter_agreed_on_going_public_at":"2020-10-10T03:39:09.652Z","team_member_agreed_on_going_public_at":"2020-10-10T03:26:06.472Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"==(Copied from an email sent to openssl-security@openssl.org on August 15, 2019)==\n\nHi,\n\nThere's an arbitrary file read vulnerability present in openssl s_server when ran on Windows with the -WWW or -HTTP option. To reproduce:\n\n* run `openssl s_server -tls1 -WWW -accept 443`\n* run `.\\curl.exe -k https://127.0.0.1/..\\..\\..\\..\\..\\..\\..\\any-file`\n* observe the contents of any-file, which could be located outside of the running directory, to be returned to the user\n\nThe root cause of this vulnerability seems to come from an incomplete check in path parsing logic: https://github.com/openssl/openssl/blob/master/apps/s_server.c#L3225. Ideally, it'd include a check for a backslash, too. It seems that this particular code has been around for some time.\n\nVulnerable versions seem to include 0.9.6, 0.9.7, 0.9.8, 1.0.0, 1.0.1, 1.0.2, 1.1.0, and 1.1.1.\n\nThis was tested against OpenSSL 1.1.1c on Windows 10 (64-bit).\n\nThe maintainers fixed this in [this commit](https://github.com/openssl/openssl/commit/0a4d6c67480a4d2fce514e08d3efe571f2ee99c9):\n\n```diff\ndiff --git a/apps/s_server.c b/apps/s_server.c\nindex 038046808037..5f58ef68fefa 100644\n--- a/apps/s_server.c\n+++ b/apps/s_server.c\n@@ -3211,6 +3211,12 @@ static int www_body(int s, int stype, int prot, unsigned char *context)\n                 if (e[0] == ' ')\n                     break;\n \n+                if (e[0] == ':') {\n+                    /* Windows drive. We treat this the same way as \"..\" */\n+                    dot = -1;\n+                    break;\n+                }\n+\n                 switch (dot) {\n                 case 1:\n                     dot = (e[0] == '.') ? 2 : 0;\n@@ -3219,11 +3225,11 @@ static int www_body(int s, int stype, int prot, unsigned char *context)\n                     dot = (e[0] == '.') ? 3 : 0;\n                     break;\n                 case 3:\n-                    dot = (e[0] == '/') ? -1 : 0;\n+                    dot = (e[0] == '/' || e[0] == '\\\\') ? -1 : 0;\n                     break;\n                 }\n                 if (dot == 0)\n-                    dot = (e[0] == '/') ? 1 : 0;\n+                    dot = (e[0] == '/' || e[0] == '\\\\') ? 1 : 0;\n             }\n             dot = (dot == 3) || (dot == -1); /* filename contains \"..\"\n                                               * component */\n@@ -3237,11 +3243,11 @@ static int www_body(int s, int stype, int prot, unsigned char *context)\n \n             if (dot) {\n                 BIO_puts(io, text);\n-                BIO_printf(io, \"'%s' contains '..' reference\\r\\n\", p);\n+                BIO_printf(io, \"'%s' contains '..' or ':'\\r\\n\", p);\n                 break;\n             }\n \n-            if (*p == '/') {\n+            if (*p == '/' || *p == '\\\\') {\n                 BIO_puts(io, text);\n                 BIO_printf(io, \"'%s' is an invalid path\\r\\n\", p);\n                 break;\n```\n\n## Impact\n\nAn attacker may be able to read arbitrary files from a user's file system.","vulnerability_information_html":"\u003cp\u003e\u003cmark\u003e(Copied from an email sent to \u003ca title=\"openssl-security@openssl.org\" href=\"mailto:openssl-security@openssl.org\" rel=\"nofollow noopener noreferrer\"\u003eopenssl-security@openssl.org\u003c/a\u003e on August 15, 2019)\u003c/mark\u003e\u003c/p\u003e\n\n\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003eThere\u0026#39;s an arbitrary file read vulnerability present in openssl s_server when ran on Windows with the -WWW or -HTTP option. To reproduce:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003erun \u003ccode\u003eopenssl s_server -tls1 -WWW -accept 443\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003erun \u003ccode\u003e.\\curl.exe -k https://127.0.0.1/..\\..\\..\\..\\..\\..\\..\\any-file\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eobserve the contents of any-file, which could be located outside of the running directory, to be returned to the user\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe root cause of this vulnerability seems to come from an incomplete check in path parsing logic: \u003ca title=\"https://github.com/openssl/openssl/blob/master/apps/s_server.c#L3225\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fmaster%2Fapps%2Fs_server.c%23L3225\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/openssl/openssl/blob/master/apps/s_server.c#L3225\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. Ideally, it\u0026#39;d include a check for a backslash, too. It seems that this particular code has been around for some time.\u003c/p\u003e\n\n\u003cp\u003eVulnerable versions seem to include 0.9.6, 0.9.7, 0.9.8, 1.0.0, 1.0.1, 1.0.2, 1.1.0, and 1.1.1.\u003c/p\u003e\n\n\u003cp\u003eThis was tested against OpenSSL 1.1.1c on Windows 10 (64-bit).\u003c/p\u003e\n\n\u003cp\u003eThe maintainers fixed this in \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fcommit%2F0a4d6c67480a4d2fce514e08d3efe571f2ee99c9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ethis commit\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/apps/s_server.c b/apps/s_server.c\nindex 038046808037..5f58ef68fefa 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/apps/s_server.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/apps/s_server.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -3211,6 +3211,12 @@\u003c/span\u003e static int www_body(int s, int stype, int prot, unsigned char *context)\n                 if (e[0] == \u0026#39; \u0026#39;)\n                     break;\n\n+                if (e[0] == \u0026#39;:\u0026#39;) {\n\u003cspan class=\"gi\"\u003e+                    /* Windows drive. We treat this the same way as \u0026quot;..\u0026quot; */\n+                    dot = -1;\n+                    break;\n+                }\n+\n\u003c/span\u003e                 switch (dot) {\n                 case 1:\n                     dot = (e[0] == \u0026#39;.\u0026#39;) ? 2 : 0;\n\u003cspan class=\"p\"\u003e@@ -3219,11 +3225,11 @@\u003c/span\u003e static int www_body(int s, int stype, int prot, unsigned char *context)\n                     dot = (e[0] == \u0026#39;.\u0026#39;) ? 3 : 0;\n                     break;\n                 case 3:\n\u003cspan class=\"gd\"\u003e-                    dot = (e[0] == \u0026#39;/\u0026#39;) ? -1 : 0;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+                    dot = (e[0] == \u0026#39;/\u0026#39; || e[0] == \u0026#39;\\\\\u0026#39;) ? -1 : 0;\n\u003c/span\u003e                     break;\n                 }\n                 if (dot == 0)\n\u003cspan class=\"gd\"\u003e-                    dot = (e[0] == \u0026#39;/\u0026#39;) ? 1 : 0;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+                    dot = (e[0] == \u0026#39;/\u0026#39; || e[0] == \u0026#39;\\\\\u0026#39;) ? 1 : 0;\n\u003c/span\u003e             }\n             dot = (dot == 3) || (dot == -1); /* filename contains \u0026quot;..\u0026quot;\n                                               * component */\n\u003cspan class=\"p\"\u003e@@ -3237,11 +3243,11 @@\u003c/span\u003e static int www_body(int s, int stype, int prot, unsigned char *context)\n\n             if (dot) {\n                 BIO_puts(io, text);\n\u003cspan class=\"gd\"\u003e-                BIO_printf(io, \u0026quot;\u0026#39;%s\u0026#39; contains \u0026#39;..\u0026#39; reference\\r\\n\u0026quot;, p);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+                BIO_printf(io, \u0026quot;\u0026#39;%s\u0026#39; contains \u0026#39;..\u0026#39; or \u0026#39;:\u0026#39;\\r\\n\u0026quot;, p);\n\u003c/span\u003e                 break;\n             }\n\n-            if (*p == \u0026#39;/\u0026#39;) {\n\u003cspan class=\"gi\"\u003e+            if (*p == \u0026#39;/\u0026#39; || *p == \u0026#39;\\\\\u0026#39;) {\n\u003c/span\u003e                 BIO_puts(io, text);\n                 BIO_printf(io, \u0026quot;\u0026#39;%s\u0026#39; is an invalid path\\r\\n\u0026quot;, p);\n                 break;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attacker may be able to read arbitrary files from a user\u0026#39;s file system.\u003c/p\u003e\n","weakness":{"id":19,"name":"Path Traversal"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-11-09T03:26:06.592Z","allow_singular_disclosure_after":-4332921.269643556,"singular_disclosure_allowed":true,"vote_count":30,"voters":["miszczyk","a_d_a_m","mik317","youngsheldon","badcracker","mosasalman","gamliel","prinzhorn","what_web","zeop","and 20 more..."],"severity":{"rating":"medium","score":5.9,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"none","availability":"none"}},"structured_scope":{"databaseId":38669,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/openssl/openssl","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":7677023,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"No need to consider this for a bounty, I submitted this for the ability to publicly disclose the report for future reference.","markdown_message":"\u003cp\u003eNo need to consider this for a bounty, I submitted this for the ability to publicly disclose the report for future reference.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-15T21:17:49.175Z","updated_at":"2020-04-15T21:17:49.175Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7685178,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @jobert,\n\nThank you for your submission! I have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report.\n\nRegards,\n@nasr0x01","markdown_message":"\u003cp\u003eHello \u003ca href=\"/jobert\"\u003e@jobert\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! I have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/nasr0x01\"\u003e@nasr0x01\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-16T13:19:16.673Z","updated_at":"2020-04-16T13:19:16.673Z","actor":{"username":"nasr0x01","cleared":false,"url":"/nasr0x01","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/386/674/ec2e2c825a554851c42c122ffd61aa8f18b08174_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9478900,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"","markdown_message":"","automated_response":false,"created_at":"2020-10-10T03:25:40.734Z","updated_at":"2020-10-10T03:25:40.734Z","actor":{"url":"/ibb-openssl","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/024/523699736f62cf8e067320163b49e80626b1b3a3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"OpenSSL (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9478902,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks for helping make the Internet safer for all!\n\nHappy hacking.","markdown_message":"\u003cp\u003eThanks for helping make the Internet safer for all!\u003c/p\u003e\n\n\u003cp\u003eHappy hacking.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-10-10T03:26:02.718Z","updated_at":"2020-10-10T03:26:02.718Z","actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"jobert","url":"/jobert"},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9478903,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-10-10T03:26:06.499Z","updated_at":"2020-10-10T03:26:06.499Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":9478930,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-10-10T03:39:09.669Z","updated_at":"2020-10-10T03:39:09.669Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9478931,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-10-10T03:39:09.722Z","updated_at":"2020-10-10T03:39:09.722Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-openssl","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}