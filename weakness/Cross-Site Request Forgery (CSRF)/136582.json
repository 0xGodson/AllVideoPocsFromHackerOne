{"id":136582,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xMzY1ODI=","url":"https://hackerone.com/reports/136582","title":"OAuth 2 Authorization Bypass via CSRF and Cross Site Flashing","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-05-05T18:07:47.074Z","submitted_at":"2016-05-05T18:07:47.074Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"opnsec","url":"/opnsec","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":56,"url":"https://hackerone.com/vimeo","handle":"vimeo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Vimeo","twitter_handle":"vimeo","website":"https://vimeo.com","about":"Make life worth watching"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-10-18T09:39:31.840Z","bug_reporter_agreed_on_going_public_at":"2017-09-18T09:39:25.205Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hello Vimeo Security Team,\n\nThere is a vulnerability in api.vimeo.com/oauth which allows an attacker to gain full App privilege over a Vimeo victim user account without user approval, just by having the victim open a link to the attacker webpage.\n\nProof of Concept link :\nhttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\n\nPOC requirements :\n-Tested on Windows 8.1/10 with Firefox 46, Chrome 50, Internet Explorer 11 \n-Flash must be active\n-You must be logged in Vimeo\n\nPOC instructions :\n1. Open the POC link\n2. Wait a few seconds\n3. The leaked infos from OAuth authorization will show in the box. \n4. You can then check your vimeo Apps setting page at https://vimeo.com/settings/apps to see that the app 'OAuthBypass' is in the list of authorized Apps\n\n----------------------\n\nTechnical info :\n\nThe vulnerability comes from the crossdomain file api.vimeo.com/oauth/crossdomain.xml which is set to 'allow-access-from domain=\"*\" '.This means that any domain can load data with Flash from the directory 'api.vimeo.com/oauth/' AND FROM THE FOLDER'S CHILD DIRECTORIES, including the directory https://api.vimeo.com/oauth/authorize \nThe url https://api.vimeo.com/oauth/authorize should not be accessible to cross domain flashing because it contains the Token to allow the App to gain access to the user account.\n\nYou can verify the Flash behavor in Adobe Flash documentation on security :\nhttp://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751\n\n\"A URL policy file applies only to the directory from which it is loaded \u003cb\u003eand to its child directories.\"\u003cb\u003e\n\nWhat happens when flash AS3 loads https://api.vimeo.com/oauth/authorize is that :\n1. By default Flash check the Master crossdomain.xml file, which in this case is 'permitted-cross-domain-policies=\"by-content-type\" ' which means that the policy will be based on a directory base.  \n2. Then by default Flash will try to load https://api.vimeo.com/oauth/authorize/crossdomain.xml which is not allowing cross site request at all. In this case, flash will not let the cross domain request and the Vimeo OAuth is safe\n\nHOWEVER, if the evil.swf flash calls 'Security.loadPolicyFile(\"api.vimeo.com/oauth/crossdomain.xml\")'\nbefore loading url https://api.vimeo.com/oauth/authorize then Flash will allow cross domain request on api.vimeo.com/oauth/ and on any child directory including https://api.vimeo.com/oauth/authorize. In that case, flash will never check https://api.vimeo.com/oauth/authorize/crossdomain.xml because api.vimeo.com/oauth/crossdomain.xml is enough for him to allow the cross domain request on https://api.vimeo.com/oauth/authorize\n\nI hope my explaination is clear enough. In conclusion, a call to 'Security.loadPolicyFile(\"https://api.vimeo.com/oauth/crossdomain.xml\")' will allow any domain to read the source code of https://api.vimeo.com/oauth/authorize.\n\nFrom there, an attacker can steal the Token of the user and do all the authorization process (Obtaining Authentication credentials via redirect) without the need of user interaction.\n\nVulnerability Mitigation :\n\nTo remove the vulnerability, you just need to move the https://api.vimeo.com/oauth/authorize to another subdomain like www.vimeo.com/oauth/authorize or to another directory like api.vimeo.com/authorize where there is no allowing crossdomain.xml file between the root folder level and the \"authorize\" level.\nTo keep the same implementation for the app developpers you can make a simple redirection from https://api.vimeo.com/oauth/authorize to the new, protected \"authorize\"  location. That way flash will not be able to follow the redirection and only legitimate user will be able to validate App authorization.\n\n-------------\n\nIf you need more info like POC source code or if the POC doesn't work feel free to contact me.\n\nRegards,\n\nEnguerran Gillier\n\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\n\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;\u0026#x2588;","vulnerability_information_html":"\u003cp\u003eHello Vimeo Security Team,\u003c/p\u003e\n\n\u003cp\u003eThere is a vulnerability in api.vimeo.com/oauth which allows an attacker to gain full App privilege over a Vimeo victim user account without user approval, just by having the victim open a link to the attacker webpage.\u003c/p\u003e\n\n\u003cp\u003eProof of Concept link :\u003cbr\u003e\n\u003ca title=\"http://opnsec.com/vimeo/vimeoOAuth2Bypass.html\" href=\"/redirect?url=http%3A%2F%2Fopnsec.com%2Fvimeo%2FvimeoOAuth2Bypass.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ePOC requirements :\u003cbr\u003e\n-Tested on Windows 8.1/10 with Firefox 46, Chrome 50, Internet Explorer 11 \u003cbr\u003e\n-Flash must be active\u003cbr\u003e\n-You must be logged in Vimeo\u003c/p\u003e\n\n\u003cp\u003ePOC instructions :\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the POC link\u003c/li\u003e\n\u003cli\u003eWait a few seconds\u003c/li\u003e\n\u003cli\u003eThe leaked infos from OAuth authorization will show in the box. \u003c/li\u003e\n\u003cli\u003eYou can then check your vimeo Apps setting page at \u003ca title=\"https://vimeo.com/settings/apps\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fsettings%2Fapps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/settings/apps\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to see that the app \u0026#39;OAuthBypass\u0026#39; is in the list of authorized Apps\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eTechnical info :\u003c/p\u003e\n\n\u003cp\u003eThe vulnerability comes from the crossdomain file api.vimeo.com/oauth/crossdomain.xml which is set to \u0026#39;allow-access-from domain=\u0026quot;*\u0026quot; \u0026#39;.This means that any domain can load data with Flash from the directory \u0026#39;api.vimeo.com/oauth/\u0026#39; AND FROM THE FOLDER\u0026#39;S CHILD DIRECTORIES, including the directory \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003cbr\u003e\nThe url \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e should not be accessible to cross domain flashing because it contains the Token to allow the App to gain access to the user account.\u003c/p\u003e\n\n\u003cp\u003eYou can verify the Flash behavor in Adobe Flash documentation on security :\u003cbr\u003e\n\u003ca title=\"http://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751\" href=\"/redirect?url=http%3A%2F%2Fhelp.adobe.com%2Fen_US%2Fas3%2Fdev%2FWS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html%23WS11001817-24CB-48a4-AA10-59468865F751\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://help.adobe.com/en_US/as3/dev/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c85.html#WS11001817-24CB-48a4-AA10-59468865F751\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026quot;A URL policy file applies only to the directory from which it is loaded \u0026lt;b\u0026gt;and to its child directories.\u0026quot;\u0026lt;b\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eWhat happens when flash AS3 loads \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is that :\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eBy default Flash check the Master crossdomain.xml file, which in this case is \u0026#39;permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot; \u0026#39; which means that the policy will be based on a directory base.\u003cbr\u003e\n\u003c/li\u003e\n\u003cli\u003eThen by default Flash will try to load \u003ca title=\"https://api.vimeo.com/oauth/authorize/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which is not allowing cross site request at all. In this case, flash will not let the cross domain request and the Vimeo OAuth is safe\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHOWEVER, if the evil.swf flash calls \u0026#39;Security.loadPolicyFile(\u0026quot;api.vimeo.com/oauth/crossdomain.xml\u0026quot;)\u0026#39;\u003cbr\u003e\nbefore loading url \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e then Flash will allow cross domain request on api.vimeo.com/oauth/ and on any child directory including \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. In that case, flash will never check \u003ca title=\"https://api.vimeo.com/oauth/authorize/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e because api.vimeo.com/oauth/crossdomain.xml is enough for him to allow the cross domain request on \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI hope my explaination is clear enough. In conclusion, a call to \u0026#39;Security.loadPolicyFile(\u0026quot;\u003ca title=\"https://api.vimeo.com/oauth/crossdomain.xml%22)\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fcrossdomain.xml%2522%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/crossdomain.xml%22)\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026#39; will allow any domain to read the source code of \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFrom there, an attacker can steal the Token of the user and do all the authorization process (Obtaining Authentication credentials via redirect) without the need of user interaction.\u003c/p\u003e\n\n\u003cp\u003eVulnerability Mitigation :\u003c/p\u003e\n\n\u003cp\u003eTo remove the vulnerability, you just need to move the \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to another subdomain like \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e or to another directory like api.vimeo.com/authorize where there is no allowing crossdomain.xml file between the root folder level and the \u0026quot;authorize\u0026quot; level.\u003cbr\u003e\nTo keep the same implementation for the app developpers you can make a simple redirection from \u003ca title=\"https://api.vimeo.com/oauth/authorize\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fauthorize\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/authorize\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to the new, protected \u0026quot;authorize\u0026quot;  location. That way flash will not be able to follow the redirection and only legitimate user will be able to validate App authorization.\u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003eIf you need more info like POC source code or if the POC doesn\u0026#39;t work feel free to contact me.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003c/p\u003e\n\n\u003cp\u003eEnguerran Gillier\u003cbr\u003e\n██████████████████\u003cbr\u003e\n██████████████████████\u003c/p\u003e\n","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":45,"name":"Cross-Site Request Forgery (CSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-10-18T09:39:25.247Z","allow_singular_disclosure_after":-100896426.70022914,"singular_disclosure_allowed":true,"vote_count":28,"voters":["jin","sp1d3rs","fizhimchik","bogdantcaciuc","spam404","flashdisk","ysx","gamliel","mpz","r3y","and 18 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":942493,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We don't believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:\r\n\r\n```\r\n\u003csite-control permitted-cross-domain-policies=\"by-content-type\"/\u003e\r\n```\r\n\r\nPer Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access https://vimeo.com/settings a SWF much validate the cross domain policy against https://vimeo.com/settings/crossdomain.xml, which has the most restrictive policy:\r\n\r\n```\r\n\u003ccross-domain-policy\u003e\r\n    \u003callow-access-from domain=\"none\" secure=\"false\"/\u003e\r\n    \u003callow-http-request-headers-from domain=\"none\" headers=\"*\"/\u003e\r\n\u003c/cross-domain-policy\u003e\r\n```\r\n\r\nWe use the \"meta-policy\" style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.\r\n\r\nThe relevant Adobe docs are here: http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\r\n\r\nThis is the PoC that we use to validate this is not a vulnerability: http://paycrea.com/xss.swf?a=get\u0026c=https://vimeo.com/settings (source: https://github.com/evilcos/xss.swf/blob/master/xss_source.txt)\r\n\r\nIf you believe this is still a vulnerability, please provide a proof of concept.","markdown_message":"\u003cp\u003eWe don\u0026#39;t believe this to be a vulnerability. Our root crossdomain.xml file contains the following directive:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;site-control permitted-cross-domain-policies=\u0026quot;by-content-type\u0026quot;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePer Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory. So for example to access \u003ca title=\"https://vimeo.com/settings\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fsettings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/settings\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e a SWF much validate the cross domain policy against \u003ca title=\"https://vimeo.com/settings/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2Fsettings%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/settings/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, which has the most restrictive policy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;cross-domain-policy\u0026gt;\n    \u0026lt;allow-access-from domain=\u0026quot;none\u0026quot; secure=\u0026quot;false\u0026quot;/\u0026gt;\n    \u0026lt;allow-http-request-headers-from domain=\u0026quot;none\u0026quot; headers=\u0026quot;*\u0026quot;/\u0026gt;\n\u0026lt;/cross-domain-policy\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe use the \u0026quot;meta-policy\u0026quot; style because there are a handful of url paths that we make accessible to SWFs, we deny all other requests via the restrictive crossdomain.xml you see above.\u003c/p\u003e\n\n\u003cp\u003eThe relevant Adobe docs are here: \u003ca title=\"http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\" href=\"/redirect?url=http%3A%2F%2Fwww.adobe.com%2Fdevnet-docs%2Facrobatetk%2Ftools%2FAppSec%2Fxdomain.html%23meta-vs-master-policies\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#meta-vs-master-policies\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is the PoC that we use to validate this is not a vulnerability: \u003ca title=\"http://paycrea.com/xss.swf?a=get\u0026amp;c=https://vimeo.com/settings\" href=\"/redirect?url=http%3A%2F%2Fpaycrea.com%2Fxss.swf%3Fa%3Dget%26c%3Dhttps%3A%2F%2Fvimeo.com%2Fsettings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://paycrea.com/xss.swf?a=get\u0026amp;c=https://vimeo.com/settings\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (source: \u003ca title=\"https://github.com/evilcos/xss.swf/blob/master/xss_source.txt\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fevilcos%2Fxss.swf%2Fblob%2Fmaster%2Fxss_source.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/evilcos/xss.swf/blob/master/xss_source.txt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e)\u003c/p\u003e\n\n\u003cp\u003eIf you believe this is still a vulnerability, please provide a proof of concept.\u003c/p\u003e\n","automated_response":true,"created_at":"2016-05-05T18:07:47.302Z","updated_at":"2016-05-05T18:07:47.302Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":942589,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here is the Proof of Concept :\nhttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\n\nJust to answer to your auto response about crossdomain.xml files :\n\"Per Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory.\"\n\nThat's the part that is not correct. Here is a link to the same documentation :\nhttp://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics\n\n\"Non-master policies permit access only to files at or beneath their level in the directory tree\"\n\nThat means that requesting SWF must check for additional crossdomain.xml policies at each subdirectory OR AT ANY PARENT of this subdirectory.\nIf no loadpolicyfile() is called, the SWF will only try the matching directory policy file.\nHowever, if loadpolicyfile() is called on a parent of the subdirectory, and that loaded plicy file allows cross domain request, Flash will allow the cross site request.\n\nI hope it makes sense. Here is a capture of network traffic from the POC swf file.","markdown_message":"\u003cp\u003eHere is the Proof of Concept :\u003cbr\u003e\n\u003ca title=\"http://opnsec.com/vimeo/vimeoOAuth2Bypass.html\" href=\"/redirect?url=http%3A%2F%2Fopnsec.com%2Fvimeo%2FvimeoOAuth2Bypass.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://opnsec.com/vimeo/vimeoOAuth2Bypass.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eJust to answer to your auto response about crossdomain.xml files :\u003cbr\u003e\n\u0026quot;Per Adobe this means that requesting SWFs much check for additional crossdomain.xml policies at each subdirectory.\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eThat\u0026#39;s the part that is not correct. Here is a link to the same documentation :\u003cbr\u003e\n\u003ca title=\"http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics\" href=\"/redirect?url=http%3A%2F%2Fwww.adobe.com%2Fdevnet-docs%2Facrobatetk%2Ftools%2FAppSec%2Fxdomain.html%23policy-file-host-basics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/xdomain.html#policy-file-host-basics\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u0026quot;Non-master policies permit access only to files at or beneath their level in the directory tree\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eThat means that requesting SWF must check for additional crossdomain.xml policies at each subdirectory OR AT ANY PARENT of this subdirectory.\u003cbr\u003e\nIf no loadpolicyfile() is called, the SWF will only try the matching directory policy file.\u003cbr\u003e\nHowever, if loadpolicyfile() is called on a parent of the subdirectory, and that loaded plicy file allows cross domain request, Flash will allow the cross site request.\u003c/p\u003e\n\n\u003cp\u003eI hope it makes sense. Here is a capture of network traffic from the POC swf file.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-05T18:29:04.712Z","updated_at":"2016-05-05T18:29:04.712Z","actor":{"username":"opnsec","cleared":false,"url":"/opnsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":91728,"filename":"Vimeo_OAuth_Bypass.png","type":"image/png","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/091/728/e543562dba9964b5bb11a87af25167c949a50392/Vimeo_OAuth_Bypass.png?response-content-disposition=attachment%3B%20filename%3D%22Vimeo_OAuth_Bypass.png%22%3B%20filename%2A%3DUTF-8%27%27Vimeo_OAuth_Bypass.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4I2F3ZKM%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T042632Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIDUHxZHanlYRSlGPWCM5VffusuDKM5vHXDdIB%2F7JzkbGAiAoWTIT0mF8JINRkIxC8mQbzytm5E2BAjIgE%2B3MmrjAECq0AwhQEAEaDDAxMzYxOTI3NDg0OSIMbhRmnkDNUYXH9R7DKpEDpA4jTDOjlGq73V1v2TUhSglp89Np0O83TA8RCG8D7RiDhlUpBeJtYQFIc3HPVAMSY%2FstiYYucp8o1TS87Sb2LRHgJvUq%2BaSVjhHv7HfYe34wTcVz2uaB%2B07%2FVcpMDfcTHl13jyygC2OBk2%2FrLPaI4iWUA0w4eag9etj8rFy8Wcq2k1fJe6x4DLRj%2BYMFQNuiCb%2BoiIwl5OG19WI1FXfkFXAItu6v1zgK2NF7OXKL8nZe5gNBw1cLFzvmJjIlJXFdaFaJGrxqOixTEVcNzXorh1vOGMsg9qQ7esrdP%2Bn1Qv7FLKJuMyq%2BcR%2Frw5E0HVkRAywDYCcRuVml%2BucnNKkoVLaE3POe%2FdTwmIlI5M4K%2BJubU%2FFyPTLW%2BkWq786t4bUW7He04O09UTb43ubdNr%2FHCtaMwRbxTwmUDG7bGJMxnDojrrchW9x144uzow%2F5avo5AkYj8%2BWpF30IsOtpsCmuLGoQjuU90O330IVGAj5Ov37QS7y5iAICWdeKfDrr8F%2F4o%2F%2FIRHtSkPUUarw0lkzl6WEwrtWp%2FwU67AFR8oCEi3F3HybCC4iDRQUp5CiEybl%2FI%2FGljQelfM%2BGtRCvb1baaWt4qIhQcY24H0URsEcigo7BU2WCVljx8h8sddWnEJsDEXnOPYcwFkJWEZp%2FEjZZx1477ndW7zmQIX03bFtg92kqLQ6GSc8gNg4SBIuWpVQVZPFW035Ji%2FpJ9PTL5A4B2eaNS3on8pfXuw1fMfiZ10%2F4OFNYutRJ0N%2BU8DA5yrnvzlz4wnxAfFpQeWvZDDd8yLMGBav%2BkzNPVuPishbPgTL977GNUbs2LsSN5kDVZH%2FRxSAHKrcDqLBjyNhhg%2BmwZeQGX3qQNA%3D%3D\u0026X-Amz-Signature=fe2454b150e166ceac74d10840b426e2dcb898bc993a6087cbed3d7844e73f8d"}],"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":946840,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello, \nMy last post about policy file mechanism wasn't very clear nor accurate, sorry for that. \n\nHowever the vulnerability is indeed present.\n\nRegards,\n\nEnguerran","markdown_message":"\u003cp\u003eHello, \u003cbr\u003e\nMy last post about policy file mechanism wasn\u0026#39;t very clear nor accurate, sorry for that. \u003c/p\u003e\n\n\u003cp\u003eHowever the vulnerability is indeed present.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003c/p\u003e\n\n\u003cp\u003eEnguerran\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-09T11:53:17.565Z","updated_at":"2016-05-09T11:53:45.572Z","actor":{"username":"opnsec","cleared":false,"url":"/opnsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":947161,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Can you retest this? This issue should be resolved.","markdown_message":"\u003cp\u003eCan you retest this? This issue should be resolved.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-09T15:24:59.959Z","updated_at":"2016-05-09T15:24:59.959Z","actor":{"username":"jayyspence7","cleared":false,"url":"/jayyspence7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":947310,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This issue is resolved for me. https://api.vimeo.com/oauth/crossdomain.xml no longer allows cross domain requests.","markdown_message":"\u003cp\u003eThis issue is resolved for me. \u003ca title=\"https://api.vimeo.com/oauth/crossdomain.xml\" href=\"/redirect?url=https%3A%2F%2Fapi.vimeo.com%2Foauth%2Fcrossdomain.xml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://api.vimeo.com/oauth/crossdomain.xml\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e no longer allows cross domain requests.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-09T16:51:03.410Z","updated_at":"2016-05-09T16:51:03.410Z","actor":{"username":"opnsec","cleared":false,"url":"/opnsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":947374,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-09T17:29:11.323Z","updated_at":"2016-05-09T17:29:11.323Z","actor":{"username":"jayyspence7","cleared":false,"url":"/jayyspence7","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"opnsec","url":"/opnsec"},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":947377,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for helping make Vimeo more secure :)","markdown_message":"\u003cp\u003eThanks for helping make Vimeo more secure :)\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-09T17:29:59.389Z","updated_at":"2016-05-09T17:37:16.429Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"bounty_amount":"1000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"vimeo","collaborator":{"username":"opnsec","url":"/opnsec"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1045032,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks ! Could we publicly disclose this?","markdown_message":"\u003cp\u003eThanks ! Could we publicly disclose this?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-29T12:00:14.278Z","updated_at":"2016-06-29T12:00:14.278Z","actor":{"username":"opnsec","cleared":false,"url":"/opnsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2002980,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-09-18T09:39:25.223Z","updated_at":"2017-09-18T09:39:25.223Z","first_to_agree":true,"actor":{"username":"opnsec","cleared":false,"url":"/opnsec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/871/17ffe7f89623315912b4a69a6441247262583484_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2077361,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-10-18T09:39:31.863Z","updated_at":"2017-10-18T09:39:31.863Z","actor":{"url":"/vimeo","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/056/c3188aa0fc4a95fd486b5ee1f4b2d0b90da111d3_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vimeo"}},"genius_execution_id":null,"team_handle":"vimeo","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}