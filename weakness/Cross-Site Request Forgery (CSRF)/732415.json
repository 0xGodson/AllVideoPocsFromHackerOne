{"id":732415,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI0MTU=","url":"https://hackerone.com/reports/732415","title":"The authenticity_token can be reversed and used to forge valid per_form_csrf_tokens for arbitrary routes","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2019-11-08T14:03:47.855Z","submitted_at":"2019-11-08T14:03:47.855Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jregele","url":"/jregele","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-8166"],"singular_disclosure_disabled":false,"disclosed_at":"2020-08-27T16:25:50.354Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-07-28T16:25:47.942Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"When `per_form_csrf_tokens` is set to `true`, each form should protected against CSRF with a unique token that is not predictable by an attacker. The`per_form_csrf_token` is generated using a HMAC SHA-256 using a key that is exposed in a reversed `authenticity_token`. The `authenticity_token` is a Base64 encoding of\n\n`one_time_pad | (one_time_pad XOR session[:csrf_token])`\n\nBecause the `one_time_pad` is the first half of the `authenticity_token`, it is not secret and an attacker can reverse the token to learn `session[:csrf_token]`.\n\nFrom there the attacker can forge a hash for an arbitrary route (e.g. /articles/2):\n`HMAC ( session[:csrf_token], \"/articles/2#patch\")`\n\nTo reproduce:\n1. Have two Rails routes that accept only per form csrf tokens\n2. Validate that the `authenticity_token` sent in the POST data returns an HTTP 422 when sent in the other form\n3. Forge a per form token with the attached exploit script\n   - the `authenticity_token` parameter is taken from the \u003cmeta\u003e tag in the header of any page for the session\n   - the `route` parameter is the action of the target HTML form (e.g /articles/2)\n   - the `method` parameter is the value from `_method` parameter sent in the POST data (e.g. patch)\n4. Take the forged token from the exploit script, URL-encode it, and send it as the `authenticity_token` in the POST data. For reliability, ensure that:\n   -  the route parameter matches the endpoint,\n   - the `_method` parameter in the POST data matches what used for `method` in the exploit script\n   - the forged `authenticity_token` in the POST data is properly URL-encoded\n\n## Impact\n\nExploitation allow an attacker to forge valid per-form CSRF tokens even in hardened situations where the global `authenticity_token` itself is not allowed.\n\nFor the attack to be successful, an attacker would need a valid global `authenticity_token`. This can be extracted out of a web page without any protections that cookies have (such as HTTP-Only). An attacker could leverage an XSS vulnerability to bypass per-form CSRF on unrelated pages. Because the token can be forged for any form, code execution on a page without forms could still lead to attackers bypassing CSRF protections of forms related to password changes, deletion of data, creation of new users, etc.","vulnerability_information_html":"\u003cp\u003eWhen \u003ccode\u003eper_form_csrf_tokens\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e, each form should protected against CSRF with a unique token that is not predictable by an attacker. The\u003ccode\u003eper_form_csrf_token\u003c/code\u003e is generated using a HMAC SHA-256 using a key that is exposed in a reversed \u003ccode\u003eauthenticity_token\u003c/code\u003e. The \u003ccode\u003eauthenticity_token\u003c/code\u003e is a Base64 encoding of\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eone_time_pad | (one_time_pad XOR session[:csrf_token])\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eBecause the \u003ccode\u003eone_time_pad\u003c/code\u003e is the first half of the \u003ccode\u003eauthenticity_token\u003c/code\u003e, it is not secret and an attacker can reverse the token to learn \u003ccode\u003esession[:csrf_token]\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFrom there the attacker can forge a hash for an arbitrary route (e.g. /articles/2):\u003cbr\u003e\n\u003ccode\u003eHMAC ( session[:csrf_token], \u0026quot;/articles/2#patch\u0026quot;)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eTo reproduce:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eHave two Rails routes that accept only per form csrf tokens\u003c/li\u003e\n\u003cli\u003eValidate that the \u003ccode\u003eauthenticity_token\u003c/code\u003e sent in the POST data returns an HTTP 422 when sent in the other form\u003c/li\u003e\n\u003cli\u003eForge a per form token with the attached exploit script\n\n\u003cul\u003e\n\u003cli\u003ethe \u003ccode\u003eauthenticity_token\u003c/code\u003e parameter is taken from the \u0026lt;meta\u0026gt; tag in the header of any page for the session\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003eroute\u003c/code\u003e parameter is the action of the target HTML form (e.g /articles/2)\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003emethod\u003c/code\u003e parameter is the value from \u003ccode\u003e_method\u003c/code\u003e parameter sent in the POST data (e.g. patch)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTake the forged token from the exploit script, URL-encode it, and send it as the \u003ccode\u003eauthenticity_token\u003c/code\u003e in the POST data. For reliability, ensure that:\n\n\u003cul\u003e\n\u003cli\u003e the route parameter matches the endpoint,\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e_method\u003c/code\u003e parameter in the POST data matches what used for \u003ccode\u003emethod\u003c/code\u003e in the exploit script\u003c/li\u003e\n\u003cli\u003ethe forged \u003ccode\u003eauthenticity_token\u003c/code\u003e in the POST data is properly URL-encoded\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eExploitation allow an attacker to forge valid per-form CSRF tokens even in hardened situations where the global \u003ccode\u003eauthenticity_token\u003c/code\u003e itself is not allowed.\u003c/p\u003e\n\n\u003cp\u003eFor the attack to be successful, an attacker would need a valid global \u003ccode\u003eauthenticity_token\u003c/code\u003e. This can be extracted out of a web page without any protections that cookies have (such as HTTP-Only). An attacker could leverage an XSS vulnerability to bypass per-form CSRF on unrelated pages. Because the token can be forged for any form, code execution on a page without forms could still lead to attackers bypassing CSRF protections of forms related to password changes, deletion of data, creation of new users, etc.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":45,"name":"Cross-Site Request Forgery (CSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":629421,"file_name":"perform_csrftoken_forgery.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/SgetMcZgZhZF1JVrLGfTPudN?response-content-disposition=attachment%3B%20filename%3D%22perform_csrftoken_forgery.py%22%3B%20filename%2A%3DUTF-8%27%27perform_csrftoken_forgery.py\u0026response-content-type=text%2Fx-python-script\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=c253cd6580fc4a82c5a076df16008ba36a9c4d9c3617dbee5a3ec6ad34e0047b","file_size":2199,"type":"text/x-python-script"}],"allow_singular_disclosure_at":"2020-08-27T16:25:48.083Z","allow_singular_disclosure_after":-10678657.56174756,"singular_disclosure_allowed":true,"vote_count":4,"voters":["yxw21","everybodyhurts","dmc3","n3tra"],"severity":{"rating":"medium","score":5.9,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"low","user_interaction":"none","scope":"unchanged","confidentiality":"low","integrity":"high","availability":"none"}},"structured_scope":{"databaseId":160,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/rails/rails","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6270965,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jregele \n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@ktistai","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-10T09:26:24.017Z","updated_at":"2019-11-10T09:26:24.017Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6274372,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hi @jregele \n\nDo you happen to have the code that you have used for testing? Also, any information regarding how to actually use it (installation and setup) would be really appreciated, as it would speed up the triage time. \n\nThanks, \n@ktistai ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eDo you happen to have the code that you have used for testing? Also, any information regarding how to actually use it (installation and setup) would be really appreciated, as it would speed up the triage time. \u003c/p\u003e\n\n\u003cp\u003eThanks, \u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e \u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-11T07:35:01.098Z","updated_at":"2019-11-11T07:35:01.098Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6292288,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi @ktistai,\n\nYes, I can give you detailed instructions. Please forgive me if they are overly detailed in case you are familiar with Burp Suite, but it may be the quickest way to actually demonstrate the vulnerability. I built a sample Rails app using the tutorial found here \n\nhttps://guides.rubyonrails.org/getting_started.html\n\nUnzip the attached archive which includes all the source code. From the root directory of the app, you will need to run\n`rails db:migrate`\n\nI also made a quick and dirty edit in request_forgery_protection.rb and set\n`self.per_form_csrf_tokens = true`\nThis edit is in the Rails code itself. I'm sure there is a way to configure the application but this worked for the PoC. If this isn't set then the per-form CSRF tokens won't be checked at all.\n\nFrom there, here are detailed instructions\n1. Run `rails serve` and navigate to http://0.0.0.0:3000/articles/new\n2. View the page source \n3. Copy the csrf-token from the \u003cmeta\u003e tag at the top of the page\ni.e. `\u003cmeta name=\"csrf-token\" content=\"BxSRVq2osX+j+78Orj9AUQGThHexC1WBf8/jGFVWbOp9lpIYN+oDZATSceHWGpIhkyG6Du+eHMfqOLm9IM+hFA==\" /\u003e`\n4. Create 2 articles. Title and text can be anything, but it is useful for them to be distinct (i.e. asdf/asdf and qwer/qwer)\n5. Go to http://0.0.0.0:3000/articles/ and see the articles that have been created.\n6. Use Burp Suite as an intercepting proxy (there is a free community edition). Intercepting traffic on localhost can be problematic, but loading the application at 0.0.0.0:3000 will work. (optional: Under Target -\u003e Scope, under \"Include in scope\", click \"Add\" and enter http://0.0.0.0:3000/. Then Proxy -\u003e Options -\u003e Intercept Client Requests, make sure \"Intercept requests based on the following rules\" is checked. Then make sure that the \"is in target scope\" rule is enabled. This will filter out all other requests from the proxy.)\n7. Make sure proxy inteception is working based on your OS and Browser. Under Proxy -\u003e Intercept, make sure the \"Intercept is on\" button is pressed. Load http://0.0.0.0:3000/articles/ in the browser. The request should be intercepted by Burp suite\n8. Disable interception in Burp\n9. click 'edit' for one of the articles. \n10. Enable interception in Burp\n11. On the web page, click 'Update Article'. The POST request will appear in the intercept window in Burp\n12. In Burp proxy, right click the intercepted request and select \"Send to Repeater\"\n13. Go the the repeater tab and see something like:\n\n`POST /articles/1 HTTP/1.1\nHost: 0.0.0.0:3000\nContent-Length: 210\nCache-Control: max-age=0\nOrigin: http://0.0.0.0:3000\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\nReferer: http://0.0.0.0:3000/articles/1/edit\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nCookie: csrftoken=9tlkrMsUDODKWNM9Qq3kbv6Pd84tHDu7mUIAWVwQExhwiD1guG55U38DfrkINYVg; _blog_session=Qe%2FKflKKyab%2BJysm56C5YkRBtuwqRkdJNtwtxyY6FM4llpNxDru%2BijMX1hdSJwzRUMDRHvo2Wa5uWpWFHZpkChbgqB9zuiFoNegHSRrwZP1PW5p7fKWgUFBBfSfqrtcdRVSMrN48FBDRHa2TqQ6OYwBzuKbyWjsCbn%2BoG45hFdBfCwmzPbmg%2Bx5nqaWO6%2B7Gmv3002gueqhwxlPaB7xbCvpnPMItQmEX%2BNygnxU2RXenVHDSSvAmxlAR8haUSQW0RWwV7%2F47ZVhARZyICbd8RfUNzuGW--hZ9kG6mEU8XQZEIw--HmlncMiDDC7XsQQCyKHASw%3D%3D\nConnection: close\n\n_method=patch\u0026authenticity_token=uNPIL0xLS%2BQuvXsY%2FoPYxujT%2FLZdWOvME%2FNJkYYFx3aLL1l6AJuIUMBFGlH7vio7x2u0W%2FbrrVcCbLsxV%2FGlSw%3D%3D\u0026article%5Btitle%5D=zxcv\u0026article%5Btext%5D=zxcvzxcv\u0026commit=Update+Article`\n\n14. Click Send.\n15. The response pane should show an HTTP/1.1 302 Found in the top line. The bottom of the request will read:\n`\u003chtml\u003e\u003cbody\u003eYou are being \u003ca href=\"http://0.0.0.0:3000/articles/1\"\u003eredirected\u003c/a\u003e.\u003c/body\u003e\u003c/html\u003e`\nThis is what a successful form post looks like.\n\n16. Change the top line of the request to `POST /articles/2`, where the 2 here is a different number than the articles/1 in the previous request. If per-form CSRF tokens are enabled, the server will respond with a 422 message and an error page. If the server does not return a 422, per-form-csrf-tokens are not enabled. See my note about editing request_forgery_protection.rb. If that file has been successfully edited, restart the rails server.\n\n17. Run the exploit to forge an `authenticity_token` for the request. Usage of the exploit script is as follows:\n`python perform_csrftoken_forgery.py \u003ccsrf-token from step 3\u003e \u003croute\u003e \u003cmethod\u003e`\nThis requires the csrf-token gathered in step 3. If the request that failed was `/articles/2`, use \"articles/2\" for the route. The method here is \"patch\" (no quotes). So if we are forging a token to edit /articles/2, we would run the exploit as follows\n`python perform_csrftoken_forgery.py \u003ccsrf-token from step 3\u003e \"articles/2\" patch`\n\n\n18. Copy the output token and in Burpsuite go to the Decoder tab. Paste the forged token into the pane, and then click \"Encode as ...\" and select URL.\n\n19. Copy the URL encoded string and go back to the Repeater tab. \n20. Replace the value of the authenticity_token with the URL encoded forged token. You can also change the title or article values, but make sure not to change any of the %5D or %5B characters. Click send\n21. The form will be accepted and the server will respond with a 302 response like it did in the first request. This means the forged token was accepted as valid.\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eYes, I can give you detailed instructions. Please forgive me if they are overly detailed in case you are familiar with Burp Suite, but it may be the quickest way to actually demonstrate the vulnerability. I built a sample Rails app using the tutorial found here \u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://guides.rubyonrails.org/getting_started.html\" href=\"/redirect?url=https%3A%2F%2Fguides.rubyonrails.org%2Fgetting_started.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://guides.rubyonrails.org/getting_started.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eUnzip the attached archive which includes all the source code. From the root directory of the app, you will need to run\u003cbr\u003e\n\u003ccode\u003erails db:migrate\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eI also made a quick and dirty edit in request_forgery_protection.rb and set\u003cbr\u003e\n\u003ccode\u003eself.per_form_csrf_tokens = true\u003c/code\u003e\u003cbr\u003e\nThis edit is in the Rails code itself. I\u0026#39;m sure there is a way to configure the application but this worked for the PoC. If this isn\u0026#39;t set then the per-form CSRF tokens won\u0026#39;t be checked at all.\u003c/p\u003e\n\n\u003cp\u003eFrom there, here are detailed instructions\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eRun \u003ccode\u003erails serve\u003c/code\u003e and navigate to \u003ca title=\"http://0.0.0.0:3000/articles/new\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000%2Farticles%2Fnew\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000/articles/new\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eView the page source \u003c/li\u003e\n\u003cli\u003eCopy the csrf-token from the \u0026lt;meta\u0026gt; tag at the top of the page\ni.e. \u003ccode\u003e\u0026lt;meta name=\u0026quot;csrf-token\u0026quot; content=\u0026quot;BxSRVq2osX+j+78Orj9AUQGThHexC1WBf8/jGFVWbOp9lpIYN+oDZATSceHWGpIhkyG6Du+eHMfqOLm9IM+hFA==\u0026quot; /\u0026gt;\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate 2 articles. Title and text can be anything, but it is useful for them to be distinct (i.e. asdf/asdf and qwer/qwer)\u003c/li\u003e\n\u003cli\u003eGo to \u003ca title=\"http://0.0.0.0:3000/articles/\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000%2Farticles%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000/articles/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and see the articles that have been created.\u003c/li\u003e\n\u003cli\u003eUse Burp Suite as an intercepting proxy (there is a free community edition). Intercepting traffic on localhost can be problematic, but loading the application at 0.0.0.0:3000 will work. (optional: Under Target -\u0026gt; Scope, under \u0026quot;Include in scope\u0026quot;, click \u0026quot;Add\u0026quot; and enter \u003ca title=\"http://0.0.0.0:3000/\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. Then Proxy -\u0026gt; Options -\u0026gt; Intercept Client Requests, make sure \u0026quot;Intercept requests based on the following rules\u0026quot; is checked. Then make sure that the \u0026quot;is in target scope\u0026quot; rule is enabled. This will filter out all other requests from the proxy.)\u003c/li\u003e\n\u003cli\u003eMake sure proxy inteception is working based on your OS and Browser. Under Proxy -\u0026gt; Intercept, make sure the \u0026quot;Intercept is on\u0026quot; button is pressed. Load \u003ca title=\"http://0.0.0.0:3000/articles/\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000%2Farticles%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000/articles/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e in the browser. The request should be intercepted by Burp suite\u003c/li\u003e\n\u003cli\u003eDisable interception in Burp\u003c/li\u003e\n\u003cli\u003eclick \u0026#39;edit\u0026#39; for one of the articles. \u003c/li\u003e\n\u003cli\u003eEnable interception in Burp\u003c/li\u003e\n\u003cli\u003eOn the web page, click \u0026#39;Update Article\u0026#39;. The POST request will appear in the intercept window in Burp\u003c/li\u003e\n\u003cli\u003eIn Burp proxy, right click the intercepted request and select \u0026quot;Send to Repeater\u0026quot;\u003c/li\u003e\n\u003cli\u003eGo the the repeater tab and see something like:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e`POST /articles/1 HTTP/1.1\u003cbr\u003e\nHost: 0.0.0.0:3000\u003cbr\u003e\nContent-Length: 210\u003cbr\u003e\nCache-Control: max-age=0\u003cbr\u003e\nOrigin: \u003ca title=\"http://0.0.0.0:3000\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nUpgrade-Insecure-Requests: 1\u003cbr\u003e\nContent-Type: application/x-www-form-urlencoded\u003cbr\u003e\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36\u003cbr\u003e\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,\u003cem\u003e/\u003c/em\u003e;q=0.8,application/signed-exchange;v=b3\u003cbr\u003e\nReferer: \u003ca title=\"http://0.0.0.0:3000/articles/1/edit\" href=\"/redirect?url=http%3A%2F%2F0.0.0.0%3A3000%2Farticles%2F1%2Fedit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://0.0.0.0:3000/articles/1/edit\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nAccept-Encoding: gzip, deflate\u003cbr\u003e\nAccept-Language: en-US,en;q=0.9\u003cbr\u003e\nCookie: csrftoken=9tlkrMsUDODKWNM9Qq3kbv6Pd84tHDu7mUIAWVwQExhwiD1guG55U38DfrkINYVg; _blog_session=Qe%2FKflKKyab%2BJysm56C5YkRBtuwqRkdJNtwtxyY6FM4llpNxDru%2BijMX1hdSJwzRUMDRHvo2Wa5uWpWFHZpkChbgqB9zuiFoNegHSRrwZP1PW5p7fKWgUFBBfSfqrtcdRVSMrN48FBDRHa2TqQ6OYwBzuKbyWjsCbn%2BoG45hFdBfCwmzPbmg%2Bx5nqaWO6%2B7Gmv3002gueqhwxlPaB7xbCvpnPMItQmEX%2BNygnxU2RXenVHDSSvAmxlAR8haUSQW0RWwV7%2F47ZVhARZyICbd8RfUNzuGW--hZ9kG6mEU8XQZEIw--HmlncMiDDC7XsQQCyKHASw%3D%3D\u003cbr\u003e\nConnection: close\u003c/p\u003e\n\n\u003cp\u003e_method=patch\u0026amp;authenticity_token=uNPIL0xLS%2BQuvXsY%2FoPYxujT%2FLZdWOvME%2FNJkYYFx3aLL1l6AJuIUMBFGlH7vio7x2u0W%2FbrrVcCbLsxV%2FGlSw%3D%3D\u0026amp;article%5Btitle%5D=zxcv\u0026amp;article%5Btext%5D=zxcvzxcv\u0026amp;commit=Update+Article`\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eClick Send.\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe response pane should show an HTTP/1.1 302 Found in the top line. The bottom of the request will read:\u003cbr\u003e\n\u003ccode\u003e\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;You are being \u0026lt;a href=\u0026quot;http://0.0.0.0:3000/articles/1\u0026quot;\u0026gt;redirected\u0026lt;/a\u0026gt;.\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u003c/code\u003e\u003cbr\u003e\nThis is what a successful form post looks like.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eChange the top line of the request to \u003ccode\u003ePOST /articles/2\u003c/code\u003e, where the 2 here is a different number than the articles/1 in the previous request. If per-form CSRF tokens are enabled, the server will respond with a 422 message and an error page. If the server does not return a 422, per-form-csrf-tokens are not enabled. See my note about editing request_forgery_protection.rb. If that file has been successfully edited, restart the rails server.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eRun the exploit to forge an \u003ccode\u003eauthenticity_token\u003c/code\u003e for the request. Usage of the exploit script is as follows:\u003cbr\u003e\n\u003ccode\u003epython perform_csrftoken_forgery.py \u0026lt;csrf-token from step 3\u0026gt; \u0026lt;route\u0026gt; \u0026lt;method\u0026gt;\u003c/code\u003e\u003cbr\u003e\nThis requires the csrf-token gathered in step 3. If the request that failed was \u003ccode\u003e/articles/2\u003c/code\u003e, use \u0026quot;articles/2\u0026quot; for the route. The method here is \u0026quot;patch\u0026quot; (no quotes). So if we are forging a token to edit /articles/2, we would run the exploit as follows\u003cbr\u003e\n\u003ccode\u003epython perform_csrftoken_forgery.py \u0026lt;csrf-token from step 3\u0026gt; \u0026quot;articles/2\u0026quot; patch\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCopy the output token and in Burpsuite go to the Decoder tab. Paste the forged token into the pane, and then click \u0026quot;Encode as ...\u0026quot; and select URL.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCopy the URL encoded string and go back to the Repeater tab. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eReplace the value of the authenticity_token with the URL encoded forged token. You can also change the title or article values, but make sure not to change any of the %5D or %5B characters. Click send\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe form will be accepted and the server will respond with a 302 response like it did in the first request. This means the forged token was accepted as valid.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2019-11-12T21:59:06.064Z","updated_at":"2019-11-12T21:59:06.064Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":632807,"filename":"blog.zip","type":"application/zip","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/obekYAEuJr4DWc7YiKJESzjV?response-content-disposition=attachment%3B%20filename%3D%22blog.zip%22%3B%20filename%2A%3DUTF-8%27%27blog.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=ee2714f887e82b51836264e35a7b53c69d5d556d0b6f370c43ddcb704c2ba476"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6292359,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also, I wanted to add that the pentest where I discovered this, I found the client is passing authenticity_tokens and csrf-tokens around in URLs. This means that the token could be exposed by means other than XSS, such as in browser history, proxy and server logs, etc. If an attacker would to discover a token in any of these avenues, they could bypass all CSRF protections, even per-form csrf protections.\n\nThe actual vulnerable code is in `request_forgery_protection.rb` in the `masked_authenticity_token` method\n\n`one_time_pad = SecureRandom.random_bytes(AUTHENTICITY_TOKEN_LENGTH)\n        encrypted_csrf_token = xor_byte_strings(one_time_pad, raw_token)\n        masked_token = one_time_pad + encrypted_csrf_token\n        Base64.strict_encode64(masked_token)`\n\nA more secure way to handle this would be to use an HMAC using the `raw_token` as the key. The one_time_pad could be replaced as random data that is then prepended to the hash. The random data could be exposed to the user, but the raw_token would remain secret to only the server.","markdown_message":"\u003cp\u003eAlso, I wanted to add that the pentest where I discovered this, I found the client is passing authenticity_tokens and csrf-tokens around in URLs. This means that the token could be exposed by means other than XSS, such as in browser history, proxy and server logs, etc. If an attacker would to discover a token in any of these avenues, they could bypass all CSRF protections, even per-form csrf protections.\u003c/p\u003e\n\n\u003cp\u003eThe actual vulnerable code is in \u003ccode\u003erequest_forgery_protection.rb\u003c/code\u003e in the \u003ccode\u003emasked_authenticity_token\u003c/code\u003e method\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eone_time_pad = SecureRandom.random_bytes(AUTHENTICITY_TOKEN_LENGTH)\u003cbr\u003e\n        encrypted_csrf_token = xor_byte_strings(one_time_pad, raw_token)\u003cbr\u003e\n        masked_token = one_time_pad + encrypted_csrf_token\u003cbr\u003e\n        Base64.strict_encode64(masked_token)\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eA more secure way to handle this would be to use an HMAC using the \u003ccode\u003eraw_token\u003c/code\u003e as the key. The one_time_pad could be replaced as random data that is then prepended to the hash. The random data could be exposed to the user, but the raw_token would remain secret to only the server.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-12T22:10:04.728Z","updated_at":"2019-11-12T22:10:04.728Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6324587,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@jregele, \n\nI finally managed to install Ruby and make that blog/article submission work . Leaving this here so that you know there is something happening in the background. Apologies for the delay. \n\n","markdown_message":"\u003cp\u003e\u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eI finally managed to install Ruby and make that blog/article submission work . Leaving this here so that you know there is something happening in the background. Apologies for the delay. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-16T13:27:19.496Z","updated_at":"2019-11-16T13:27:19.496Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6324662,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"LE: not quite finished, I need to enable editing on the articles.","markdown_message":"\u003cp\u003eLE: not quite finished, I need to enable editing on the articles.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-16T13:48:57.735Z","updated_at":"2019-11-16T13:48:57.735Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6324736,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hi @jregele\n\nAt ```step 4, or 17 if the numbering would be right) Run the exploit to forge an authenticity_token for the request. Usage of the exploit script is as follows:``` I am getting an error: \n\n```\npython perform_csrftoken_forgery.py \"dqi3Es2zNAPek2IUZQQZS4FMWVwXT7Sjcu9mmcxMp%2FU6eUpv43dxUXxLXyQOOIESlSF78Iu9Vk%2BGLnSCONhyqg%3D%3D\" articles/2 patch\nTraceback (most recent call last):\n  File \"perform_csrftoken_forgery.py\", line 49, in \u003cmodule\u003e\n    session_csrf = reverse_authenticity_token(args.authenticity_token)\n  File \"perform_csrftoken_forgery.py\", line 23, in reverse_authenticity_token\n    real_csrf_token = xor_bytes(list(one_time_pad), list(masked_csrf_token))\n  File \"perform_csrftoken_forgery.py\", line 11, in xor_bytes\n    assert len(key) == len(buf)\nAssertionError\n```\n\nWhat did I do wrong? \n\nThanks, \n@ktistai","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAt \u003ccode\u003estep 4, or 17 if the numbering would be right) Run the exploit to forge an authenticity_token for the request. Usage of the exploit script is as follows:\u003c/code\u003e I am getting an error: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003epython perform_csrftoken_forgery.py \u0026quot;dqi3Es2zNAPek2IUZQQZS4FMWVwXT7Sjcu9mmcxMp%2FU6eUpv43dxUXxLXyQOOIESlSF78Iu9Vk%2BGLnSCONhyqg%3D%3D\u0026quot; articles/2 patch\nTraceback (most recent call last):\n  File \u0026quot;perform_csrftoken_forgery.py\u0026quot;, line 49, in \u0026lt;module\u0026gt;\n    session_csrf = reverse_authenticity_token(args.authenticity_token)\n  File \u0026quot;perform_csrftoken_forgery.py\u0026quot;, line 23, in reverse_authenticity_token\n    real_csrf_token = xor_bytes(list(one_time_pad), list(masked_csrf_token))\n  File \u0026quot;perform_csrftoken_forgery.py\u0026quot;, line 11, in xor_bytes\n    assert len(key) == len(buf)\nAssertionError\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat did I do wrong? \u003c/p\u003e\n\n\u003cp\u003eThanks, \u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-16T14:17:23.322Z","updated_at":"2019-11-16T14:17:23.322Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6328714,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"The authenticity token is URL-encoded, so there are additional bytes. You could use the Decoder tab in Burp, and run Decode as -\u003e URL. That will give you the base64 encoded version. \nI got it to work with this:\n`perform_csrftoken_forgery.py dqi3Es2zNAPek2IUZQQZS4FMWVwXT7Sjcu9mmcxMp/U6eUpv43dxUXxLXyQOOIESlSF78Iu9Vk+GLnSCONhyqg== articles/2 patch`\n\nLet me know if you have any more questions. I will have limited connectivity the next 2 days, but after wednesday should be back to normal.\n\nBest,\nJustin","markdown_message":"\u003cp\u003eThe authenticity token is URL-encoded, so there are additional bytes. You could use the Decoder tab in Burp, and run Decode as -\u0026gt; URL. That will give you the base64 encoded version. \u003cbr\u003e\nI got it to work with this:\u003cbr\u003e\n\u003ccode\u003eperform_csrftoken_forgery.py dqi3Es2zNAPek2IUZQQZS4FMWVwXT7Sjcu9mmcxMp/U6eUpv43dxUXxLXyQOOIESlSF78Iu9Vk+GLnSCONhyqg== articles/2 patch\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eLet me know if you have any more questions. I will have limited connectivity the next 2 days, but after wednesday should be back to normal.\u003c/p\u003e\n\n\u003cp\u003eBest,\u003cbr\u003e\nJustin\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-17T16:31:59.244Z","updated_at":"2019-11-17T16:31:59.244Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6333140,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hi @jregele \n\nThanks, that did work. However, it is still not working so how exactly do you have to change the ```request_forgery_protection.rb``` file? I found in there a reference to ```self.per_form_csrf_tokens = false```  and modified it to be ```true```. Is there anything else?\n\n```\nStarted GET \"/articles\" for 192.168.178.10 at 2019-11-18 13:53:33 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#index as HTML\n  Rendering articles/index.html.erb within layouts/application\n  Article Load (0.2ms)  SELECT \"articles\".* FROM \"articles\"\n  ↳ app/views/articles/index.html.erb:10\n  Rendered articles/index.html.erb within layouts/application (Duration: 17.9ms | Allocations: 1683)\n[Webpacker] Everything's up-to-date. Nothing to do\nCompleted 200 OK in 83ms (Views: 82.0ms | ActiveRecord: 0.2ms | Allocations: 5101)\n\n\nStarted GET \"/articles/2/edit\" for 192.168.178.10 at 2019-11-18 13:53:34 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#edit as HTML\n  Parameters: {\"id\"=\u003e\"2\"}\n  Article Load (0.1ms)  SELECT \"articles\".* FROM \"articles\" WHERE \"articles\".\"id\" = ? LIMIT ?  [[\"id\", 2], [\"LIMIT\", 1]]\n  ↳ app/controllers/articles_controller.rb:15:in `edit'\n  Rendering articles/edit.html.erb within layouts/application\n  Rendered articles/_form.html.erb (Duration: 21.4ms | Allocations: 724)\n  Rendered articles/edit.html.erb within layouts/application (Duration: 24.5ms | Allocations: 1570)\n[Webpacker] Everything's up-to-date. Nothing to do\nCompleted 200 OK in 47ms (Views: 44.2ms | ActiveRecord: 0.1ms | Allocations: 5501)\n\n\nStarted PATCH \"/articles/2\" for 192.168.178.10 at 2019-11-18 13:54:06 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#update as HTML\n  Parameters: {\"authenticity_token\"=\u003e\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtuqgNMsUiVNbYzoh/C9ZCHULmakV28BVI7rna5Pyapg==\", \"article\"=\u003e{\"title\"=\u003e\"test12313213\", \"text\"=\u003e\"test1231231\"}, \"commit\"=\u003e\"Update Article\", \"id\"=\u003e\"2\"}\nCan't verify CSRF token authenticity.\nCompleted 422 Unprocessable Entity in 1ms (ActiveRecord: 0.0ms | Allocations: 676)\n\n\n  \nActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):\n  \nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:217:in `handle_unverified_request'\nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:249:in `handle_unverified_request'\nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:244:in `verify_authenticity_token'\n\n```\n\n\nThese are my actual logs at the latest try. I am always getting that 422 Error. \n\nThanks, \n@ktistai\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThanks, that did work. However, it is still not working so how exactly do you have to change the \u003ccode\u003erequest_forgery_protection.rb\u003c/code\u003e file? I found in there a reference to \u003ccode\u003eself.per_form_csrf_tokens = false\u003c/code\u003e  and modified it to be \u003ccode\u003etrue\u003c/code\u003e. Is there anything else?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eStarted GET \u0026quot;/articles\u0026quot; for 192.168.178.10 at 2019-11-18 13:53:33 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#index as HTML\n  Rendering articles/index.html.erb within layouts/application\n  Article Load (0.2ms)  SELECT \u0026quot;articles\u0026quot;.* FROM \u0026quot;articles\u0026quot;\n  ↳ app/views/articles/index.html.erb:10\n  Rendered articles/index.html.erb within layouts/application (Duration: 17.9ms | Allocations: 1683)\n[Webpacker] Everything\u0026#39;s up-to-date. Nothing to do\nCompleted 200 OK in 83ms (Views: 82.0ms | ActiveRecord: 0.2ms | Allocations: 5101)\n\n\nStarted GET \u0026quot;/articles/2/edit\u0026quot; for 192.168.178.10 at 2019-11-18 13:53:34 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#edit as HTML\n  Parameters: {\u0026quot;id\u0026quot;=\u0026gt;\u0026quot;2\u0026quot;}\n  Article Load (0.1ms)  SELECT \u0026quot;articles\u0026quot;.* FROM \u0026quot;articles\u0026quot; WHERE \u0026quot;articles\u0026quot;.\u0026quot;id\u0026quot; = ? LIMIT ?  [[\u0026quot;id\u0026quot;, 2], [\u0026quot;LIMIT\u0026quot;, 1]]\n  ↳ app/controllers/articles_controller.rb:15:in `edit\u0026#39;\n  Rendering articles/edit.html.erb within layouts/application\n  Rendered articles/_form.html.erb (Duration: 21.4ms | Allocations: 724)\n  Rendered articles/edit.html.erb within layouts/application (Duration: 24.5ms | Allocations: 1570)\n[Webpacker] Everything\u0026#39;s up-to-date. Nothing to do\nCompleted 200 OK in 47ms (Views: 44.2ms | ActiveRecord: 0.1ms | Allocations: 5501)\n\n\nStarted PATCH \u0026quot;/articles/2\u0026quot; for 192.168.178.10 at 2019-11-18 13:54:06 +0100\nCannot render console from 192.168.178.10! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nProcessing by ArticlesController#update as HTML\n  Parameters: {\u0026quot;authenticity_token\u0026quot;=\u0026gt;\u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtuqgNMsUiVNbYzoh/C9ZCHULmakV28BVI7rna5Pyapg==\u0026quot;, \u0026quot;article\u0026quot;=\u0026gt;{\u0026quot;title\u0026quot;=\u0026gt;\u0026quot;test12313213\u0026quot;, \u0026quot;text\u0026quot;=\u0026gt;\u0026quot;test1231231\u0026quot;}, \u0026quot;commit\u0026quot;=\u0026gt;\u0026quot;Update Article\u0026quot;, \u0026quot;id\u0026quot;=\u0026gt;\u0026quot;2\u0026quot;}\nCan\u0026#39;t verify CSRF token authenticity.\nCompleted 422 Unprocessable Entity in 1ms (ActiveRecord: 0.0ms | Allocations: 676)\n\n\n\nActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):\n\nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:217:in `handle_unverified_request\u0026#39;\nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:249:in `handle_unverified_request\u0026#39;\nactionpack (6.0.1) lib/action_controller/metal/request_forgery_protection.rb:244:in `verify_authenticity_token\u0026#39;\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese are my actual logs at the latest try. I am always getting that 422 Error. \u003c/p\u003e\n\n\u003cp\u003eThanks, \u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-18T12:55:55.057Z","updated_at":"2019-11-18T12:57:43.678Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6360790,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Yes changing that line in `request_forgery_protection.rb` looks like it worked successfully. Odd it wasn't working for you though. Were you using the same token from the previous session in the new session? I've been traveling the past few days but should be to my final destination by later today. It might be useful to do a call so we can screen share and go through the steps. I got it to work relatively quickly, but it does involve some crypto and hashing, so if there is 1 bit off, it won't work. Let me know if and when you're available to do that.\n\nBest,\nJustin","markdown_message":"\u003cp\u003eYes changing that line in \u003ccode\u003erequest_forgery_protection.rb\u003c/code\u003e looks like it worked successfully. Odd it wasn\u0026#39;t working for you though. Were you using the same token from the previous session in the new session? I\u0026#39;ve been traveling the past few days but should be to my final destination by later today. It might be useful to do a call so we can screen share and go through the steps. I got it to work relatively quickly, but it does involve some crypto and hashing, so if there is 1 bit off, it won\u0026#39;t work. Let me know if and when you\u0026#39;re available to do that.\u003c/p\u003e\n\n\u003cp\u003eBest,\u003cbr\u003e\nJustin\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-20T18:05:23.941Z","updated_at":"2019-11-20T18:05:23.941Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6367335,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"@jregele \n\nI do agree, because of the complexities involved any small mistake may make it fail. We can use keybase, where my id is ```ktistai```. \n\nThanks \n@ktistai","markdown_message":"\u003cp\u003e\u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eI do agree, because of the complexities involved any small mistake may make it fail. We can use keybase, where my id is \u003ccode\u003ektistai\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eThanks \u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-21T10:12:20.281Z","updated_at":"2019-11-21T10:12:20.281Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6375251,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"I figured out what is most likely going wrong. There are 2 things.\n1. the route needs to have a slash in the beginning, so `/articles/2` instead of `articles/2`. I stepped through the code in a debugger to make sure.\n2. The token that needs to be fed to the python script needs to come from the \u003cmeta\u003e tag with the name `csrf-token` at the top of the page source. It isn't URL encoded, which is why I never had to URL decode before using the script. I think you were pulling the token from the form submission request. Once per-form tokens are enabled, the `authenticity_token` in the form will already be hashed. So what the python script does it reverse the `csrf-token` in the \u003cmeta\u003e tag to get the internal token, and then hashes it with the new route.\n\nI'm going to make a video of it tomorrow to show the steps because jet lag is killing me at the moment.\n\nBest,\nJustin","markdown_message":"\u003cp\u003eI figured out what is most likely going wrong. There are 2 things.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003ethe route needs to have a slash in the beginning, so \u003ccode\u003e/articles/2\u003c/code\u003e instead of \u003ccode\u003earticles/2\u003c/code\u003e. I stepped through the code in a debugger to make sure.\u003c/li\u003e\n\u003cli\u003eThe token that needs to be fed to the python script needs to come from the \u0026lt;meta\u0026gt; tag with the name \u003ccode\u003ecsrf-token\u003c/code\u003e at the top of the page source. It isn\u0026#39;t URL encoded, which is why I never had to URL decode before using the script. I think you were pulling the token from the form submission request. Once per-form tokens are enabled, the \u003ccode\u003eauthenticity_token\u003c/code\u003e in the form will already be hashed. So what the python script does it reverse the \u003ccode\u003ecsrf-token\u003c/code\u003e in the \u0026lt;meta\u0026gt; tag to get the internal token, and then hashes it with the new route.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI\u0026#39;m going to make a video of it tomorrow to show the steps because jet lag is killing me at the moment.\u003c/p\u003e\n\n\u003cp\u003eBest,\u003cbr\u003e\nJustin\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-22T04:53:56.841Z","updated_at":"2019-11-22T04:53:56.841Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6377037,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-22T09:43:21.690Z","updated_at":"2019-11-22T09:43:21.690Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6386692,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Attached is the demo video","markdown_message":"\u003cp\u003eAttached is the demo video\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-23T17:25:59.338Z","updated_at":"2019-11-23T17:25:59.338Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":642052,"filename":"demo.zip","type":"application/zip","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/A7ZArJbqg7UVP7oAHb22NeTP?response-content-disposition=attachment%3B%20filename%3D%22demo.zip%22%3B%20filename%2A%3DUTF-8%27%27demo.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=8fd3292f639b61ebf7e45b0f916aa53ef1a097d8a4a1780a7cbb9eea303b852f"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6392592,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hello @jregele \n\nThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\n\nRegards,\n@ktistai","markdown_message":"\u003cp\u003eHello \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThank you for your submission! We were able to validate your report, and have submitted it to the appropriate remediation team for review. They will let us know the final ruling on this report, and when/if a fix will be implemented. Please note that the status and severity are subject to change.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\n\u003ca href=\"/ktistai\"\u003e@ktistai\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-25T07:46:19.209Z","updated_at":"2019-11-25T07:46:19.209Z","actor":{"username":"ktistai","cleared":false,"url":"/ktistai","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/322/520/01cd21dce301646646276fd9125cffd448fbffd6_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7992109,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jregele,\n\nI've prepared the following patches and advisory to address this issue. Would you mind taking a look?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve prepared the following patches and advisory to address this issue. Would you mind taking a look?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-13T17:47:31.571Z","updated_at":"2020-05-13T17:47:31.571Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":827088,"filename":"0001-6.0.x-HMAC-raw-CSRF-token-before-masking-it-so-it-cannot-b.patch","type":"text/x-patch","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/U5YxKn1RM4RhisjZ3ipJoqhm?response-content-disposition=attachment%3B%20filename%3D%220001-6.0.x-HMAC-raw-CSRF-token-before-masking-it-so-it-cannot-b.patch%22%3B%20filename%2A%3DUTF-8%27%270001-6.0.x-HMAC-raw-CSRF-token-before-masking-it-so-it-cannot-b.patch\u0026response-content-type=text%2Fx-patch\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=7f497109a9f3428f42431703a3ae3572487f51511d9c07536c3322608d2974e7"},{"id":827087,"filename":"0001-5.2-backport-HMAC-raw-CSRF-token-before-masking-it-s.patch","type":"text/x-patch","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/YSTj3EZuY5owWE4iaNQ46G6R?response-content-disposition=attachment%3B%20filename%3D%220001-5.2-backport-HMAC-raw-CSRF-token-before-masking-it-s.patch%22%3B%20filename%2A%3DUTF-8%27%270001-5.2-backport-HMAC-raw-CSRF-token-before-masking-it-s.patch\u0026response-content-type=text%2Fx-patch\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=d56473032548d1f5b2357b6e44d6902a71c0488c0db352c4bfb7aa25ffc99e19"},{"id":827086,"filename":"732415_advisory.txt","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/d86GQeSNe9DpprXRkSGU7KMm?response-content-disposition=attachment%3B%20filename%3D%22732415_advisory.txt%22%3B%20filename%2A%3DUTF-8%27%27732415_advisory.txt\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6SZWJ7EV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T064325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQDnUzI%2BFGOFBLAScWuVOL4Lj3JmbbQAzP3Z0CGixtLCuAIgQzjjEEfRLfyvyTUcWPuh1TmLwtvXfhn4Y1cmYaMrO6cqtAMIVRABGgwwMTM2MTkyNzQ4NDkiDGp%2BpnVA5musWTL7NCqRA8%2FtWDfuTNl%2BTEZ8%2F83sOgEjGfhPO7hqas9S5YFvyrG29udKPmtcuewMHQFGoWh6uvbSTE9LPEkFDl6RosJJJY3ZsFaD9BGxtIOBINUPfZd26XnOL01fuCQ8x%2BiErJvv8vHBR5mWXV7L6t7A2%2F5H8dY91iEQFmPdZboRnRed4t2q9jcZCwrkzHwMk8bNRFkfRqzqUB6%2Buk39e4oyKwiyqROwDwnoUxIOrVdA29STuUYzszGBQ%2B3Eg%2Fr4I9Ys7sDaoYDHJAVEt%2F6kVnewTLU3uHfL%2F%2FzDR0ZnJa5Oo%2BmValn4%2Fn34Ke7o7csnn3piiGYIK4mihEWUVtJZnq0bZ%2BEU14q4ZLfb79tvTTKy5%2B9XC3vM1tWdFU6K%2F2PISAY5LoVEscNgJL0aQIq7sAX0f00Uyo2TeQTR%2B9TUOeUvW40metpNAt6ZQ8u0%2BuTZij%2FLNaYEe6v5RA7Fg8wzm%2Bu7IVusddMT4HgUuba3afxdFVj8x9iXROa6QZZ%2BdlHYNGywE8eJxO3jkpwbaZpUg8PZ17ztcb5%2BMLHSqv8FOusBshs3Z1RNetRK0o6yVAL2zGdldUlxbnMrusEP31v5WyfcSXKYrW1oJGSAAOlTEHZOawyDOEVKZdmLftLsa7vpv4NkkvDc0MjvNZjQrLWiuTmEalVC704buBLYftchmedTLOrsCMIpwWkxoPJnEqO2VZwPnup4B1lMH%2B%2FHO0btRwbDEfX1bZu7nae%2FPoCvN9o%2FT1iQ8GcaSv5OUJxppuy2cagjSuiUWEkOXPhYiBKpxTQMFIMtd6%2FpRtJ2YeCQgmRXXl1K6ayBDQAQxWFeKQPM5vtrAzDrzE9Adaqtb3AdlxqDjg74xdcM9YFdyg%3D%3D\u0026X-Amz-Signature=4819e4d83cbe02bd51bec93f659f7d700963c7a7d75e2781051bdd9b36d502ca"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8038245,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Shipped","markdown_message":"\u003cp\u003eShipped\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-18T16:09:48.346Z","updated_at":"2020-05-18T16:09:48.346Z","actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"jregele","url":"/jregele"},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8040508,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jack_mccracken, of course would be happy to take a look. Let me rebuild my environment and patch rails and I will get back to you.\n\nCheers.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jack_mccracken\"\u003e@jack_mccracken\u003c/a\u003e, of course would be happy to take a look. Let me rebuild my environment and patch rails and I will get back to you.\u003c/p\u003e\n\n\u003cp\u003eCheers.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-18T19:22:54.539Z","updated_at":"2020-05-18T19:22:54.539Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8040978,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T19:42:58.181Z","updated_at":"2020-05-18T19:42:58.181Z","additional_data":{"old_severity":"High (7.1)","new_severity":"Medium (5.9)","old_severity_id":559812,"new_severity_id":725610},"actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8040998,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T19:45:17.112Z","updated_at":"2020-05-18T19:45:17.112Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby on Rails"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"rails","collaborator":{"username":"jregele","url":"/jregele"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8040999,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T19:45:25.623Z","updated_at":"2020-05-18T19:45:25.623Z","first_to_agree":true,"actor":{"username":"tenderlove","cleared":false,"url":"/tenderlove","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/318/60d828744b5d16813ecbf975fdc453dc4a933f4f_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8059371,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @jack_mccracken, I applied the patch, but not quite sure if something didn't fully work, as I'm still able to exploit the issue. I see you added hmac for the global csrf token, but I'm still able to forge a per_form_csrf_token using the authenticity token. Perhaps something is wrong with my environment, but it looks like the authenticity token still exposes the session[:_csrf_token] that is used to forge the request.","markdown_message":"\u003cp\u003eHey \u003ca href=\"/jack_mccracken\"\u003e@jack_mccracken\u003c/a\u003e, I applied the patch, but not quite sure if something didn\u0026#39;t fully work, as I\u0026#39;m still able to exploit the issue. I see you added hmac for the global csrf token, but I\u0026#39;m still able to forge a per_form_csrf_token using the authenticity token. Perhaps something is wrong with my environment, but it looks like the authenticity token still exposes the session[:_csrf_token] that is used to forge the request.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-05-20T14:58:52.146Z","updated_at":"2020-05-20T14:58:52.146Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8257618,"is_internal":false,"editable":false,"type":"Activities::CancelledDisclosureRequest","message":"Hi @jregele,\n\nThanks for letting me know. Are you still able to replicate this on the latest Rails (6.0.3.1)?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThanks for letting me know. Are you still able to replicate this on the latest Rails (6.0.3.1)?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-06-10T19:57:28.333Z","updated_at":"2020-06-10T19:57:28.333Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8781752,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Jack,\nJust saw this, I'm justing wrapping up my writeup on the issue, and looking at 6.0.3.1, I wasn't able to get it to work. Also looks like you fixed it by protecting the internal token with another HMAC that is used as the global token. ","markdown_message":"\u003cp\u003eHi Jack,\u003cbr\u003e\nJust saw this, I\u0026#39;m justing wrapping up my writeup on the issue, and looking at 6.0.3.1, I wasn\u0026#39;t able to get it to work. Also looks like you fixed it by protecting the internal token with another HMAC that is used as the global token. \u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-28T15:55:10.491Z","updated_at":"2020-07-28T15:55:10.491Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8782808,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Awesome! Thanks for letting us know. I'll re-add the request for disclosure.","markdown_message":"\u003cp\u003eAwesome! Thanks for letting us know. I\u0026#39;ll re-add the request for disclosure.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-28T16:25:47.980Z","updated_at":"2020-07-28T16:25:47.980Z","first_to_agree":true,"actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8791402,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok cool. Should I wait to release my writeup until after I hear back then?","markdown_message":"\u003cp\u003eOk cool. Should I wait to release my writeup until after I hear back then?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-07-29T11:34:52.805Z","updated_at":"2020-07-29T11:34:52.805Z","actor":{"username":"jregele","cleared":false,"url":"/jregele","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9057483,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-08-27T16:25:50.404Z","updated_at":"2020-08-27T16:25:50.404Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby on Rails"}},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":9057860,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jregele,\n\nSorry I missed your comment! This issue has been disclosed via a patch/CVE and now on HackerOne so feel free to write about it.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jregele\"\u003e@jregele\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eSorry I missed your comment! This issue has been disclosed via a patch/CVE and now on HackerOne so feel free to write about it.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-08-27T17:13:05.471Z","updated_at":"2020-08-27T17:13:05.471Z","actor":{"username":"jack_mccracken","cleared":false,"url":"/jack_mccracken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/164/342/6543dc397b4dbb2c24dc81f92a42de654a3e6a99_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}