{"id":47280,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzI4MA==","url":"https://hackerone.com/reports/47280","title":"JSON keys are not properly escaped","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2015-02-10T01:00:04.032Z","submitted_at":"2015-02-10T01:00:04.032Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"einstein_","url":"/einstein_","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2015-3226"],"singular_disclosure_disabled":false,"disclosed_at":"2015-06-16T19:38:34.244Z","bug_reporter_agreed_on_going_public_at":"2015-06-16T19:38:33.941Z","team_member_agreed_on_going_public_at":"2015-06-16T19:17:21.898Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Rails does not escape hash keys properly in `to_json` when generating json.\r\n\r\nValues are escaped as expected\r\n```ruby\r\nirb(main):001:0\u003e {\"a\"=\u003e\"\u003c\u003e\"}.to_json\r\n=\u003e \"{\\\"a\\\":\\\"\\\\u003c\\\\u003e\\\"}\"\r\n```\r\n\r\nHowever keys are not:\r\n```ruby\r\nirb(main):002:0\u003e {\"\u003c\u003e\"=\u003e\"a\"}.to_json\r\n=\u003e \"{\\\"\u003c\u003e\\\":\\\"a\\\"}\"\r\n```\r\n\r\nThis is because the `json` gem calls `.to_s` on the keys [here](https://github.com/flori/json/blob/259dee6c9bdda08ed0c1fc2e69bfbb2d377faba0/ext/json/ext/generator/generator.c#L738) which transforms the `EscapedString` back into a simple `String` so it doesn't go through the escaping process that values go through [here](https://github.com/EiNSTeiN-/rails/blob/3820788e4c2825dd77c779ba5b3bc29689e04e1d/activesupport/lib/active_support/json/encoding.rb#L54-L60).\r\n\r\n**Security consideration**: this issue is a vector for XSS when an arbitrary value is used as a key and reflected in a javascript tag. Consider this piece of code:\r\n```ruby\r\njavascript_tag \"var json=#{params.to_json}\"\r\n```\r\nWhen params is something like `{\"\u003c/script\u003e\u003cscript\u003ealert(1)//\"=\u003e\"xss\"}` then `\u003c\u003e` are not escaped as they should and the javascript tag looks like this:\r\n```html\r\n\u003cscript\u003e\r\n//\u003c![CDATA[\r\nvar json={\"\u003c/script\u003e\u003cscript\u003ealert(1)//\":\"xss\"}\r\n//]]\u003e\r\n\u003c/script\u003e\r\n```\r\nThe `\u003c/script\u003e` inside the json object will terminate the opening script tag because it has precedence over everything else, and `alert(1)` is executed.\r\n\r\nI believe this issue also applies to 4.2-stable and master.\r\n\r\nNote that I opened a PR for a related issue in the json gem (https://github.com/flori/json/pull/235) which occurs when `ActiveSupport.escape_html_entities_in_json = false` because the forward slash is never escaped (neither in rails nor in the json gem). It might be worth fixing this in rails as well.","vulnerability_information_html":"\u003cp\u003eRails does not escape hash keys properly in \u003ccode\u003eto_json\u003c/code\u003e when generating json.\u003c/p\u003e\n\n\u003cp\u003eValues are escaped as expected\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eirb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\u003cspan class=\"mo\"\u003e001\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026lt;\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\n\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;{\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\\\\\u003c/span\u003e\u003cspan class=\"s2\"\u003eu003c\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s2\"\u003eu003e\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e}\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever keys are not:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003eirb\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\u003cspan class=\"mo\"\u003e002\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026lt;\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\n\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;{\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003ea\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e}\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is because the \u003ccode\u003ejson\u003c/code\u003e gem calls \u003ccode\u003e.to_s\u003c/code\u003e on the keys \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fflori%2Fjson%2Fblob%2F259dee6c9bdda08ed0c1fc2e69bfbb2d377faba0%2Fext%2Fjson%2Fext%2Fgenerator%2Fgenerator.c%23L738\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which transforms the \u003ccode\u003eEscapedString\u003c/code\u003e back into a simple \u003ccode\u003eString\u003c/code\u003e so it doesn\u0026#39;t go through the escaping process that values go through \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FEiNSTeiN-%2Frails%2Fblob%2F3820788e4c2825dd77c779ba5b3bc29689e04e1d%2Factivesupport%2Flib%2Factive_support%2Fjson%2Fencoding.rb%23L54-L60\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehere\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eSecurity consideration\u003c/strong\u003e: this issue is a vector for XSS when an arbitrary value is used as a key and reflected in a javascript tag. Consider this piece of code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;var json=\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_json\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen params is something like \u003ccode\u003e{\u0026quot;\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(1)//\u0026quot;=\u0026gt;\u0026quot;xss\u0026quot;}\u003c/code\u003e then \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e are not escaped as they should and the javascript tag looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;script\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;!\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eCDATA\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003ealert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"c1\"\u003e//\u0026quot;:\u0026quot;xss\u0026quot;}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e//]]\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/script\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e inside the json object will terminate the opening script tag because it has precedence over everything else, and \u003ccode\u003ealert(1)\u003c/code\u003e is executed.\u003c/p\u003e\n\n\u003cp\u003eI believe this issue also applies to 4.2-stable and master.\u003c/p\u003e\n\n\u003cp\u003eNote that I opened a PR for a related issue in the json gem (\u003ca title=\"https://github.com/flori/json/pull/235\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fflori%2Fjson%2Fpull%2F235\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/flori/json/pull/235\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) which occurs when \u003ccode\u003eActiveSupport.escape_html_entities_in_json = false\u003c/code\u003e because the forward slash is never escaped (neither in rails nor in the json gem). It might be worth fixing this in rails as well.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2015-07-16T19:17:22.246Z","allow_singular_disclosure_after":-172147551.78768992,"singular_disclosure_allowed":true,"vote_count":6,"voters":["jensec","eveeez","khizer47","cr4xerbik4sh","cryptographer","spetr0x"],"severity":{"rating":"high","score":7.2,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"low","integrity":"low","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":328789,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's a patch for 4.1-stable:\n\n```patch\ndiff --git a/activesupport/lib/active_support/json/encoding.rb b/activesupport/lib/active_support/json/encoding.rb\nindex f29d422..d0f67b1 100644\n--- a/activesupport/lib/active_support/json/encoding.rb\n+++ b/activesupport/lib/active_support/json/encoding.rb\n@@ -58,6 +58,10 @@ def to_json(*)\n                 super.gsub ESCAPE_REGEX_WITHOUT_HTML_ENTITIES, ESCAPED_CHARS\n               end\n             end\n+\n+            def to_s\n+              self\n+            end\n           end\n \n           # Mark these as private so we don't leak encoding-specific constructs\ndiff --git a/activesupport/test/json/encoding_test.rb b/activesupport/test/json/encoding_test.rb\nindex c4283ee..b75c67c 100644\n--- a/activesupport/test/json/encoding_test.rb\n+++ b/activesupport/test/json/encoding_test.rb\n@@ -143,6 +143,13 @@ def test_hash_encoding\n     assert_equal %({\\\"a\\\":\\\"b\\\",\\\"c\\\":\\\"d\\\"}), sorted_json(ActiveSupport::JSON.encode(:a =\u003e :b, :c =\u003e :d))\n   end\n \n+  def test_hash_keys_encoding\n+    ActiveSupport.escape_html_entities_in_json = true\n+    assert_equal \"{\\\"\\\\u003c\\\\u003e\\\":\\\"\\\\u003c\\\\u003e\\\"}\", ActiveSupport::JSON.encode(\"\u003c\u003e\" =\u003e \"\u003c\u003e\")\n+  ensure\n+    ActiveSupport.escape_html_entities_in_json = false\n+  end\n+\n   def test_utf8_string_encoded_properly\n     result = ActiveSupport::JSON.encode('€2.99')\n     assert_equal '\"€2.99\"', result\n```","markdown_message":"\u003cp\u003eHere\u0026#39;s a patch for 4.1-stable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/activesupport/lib/active_support/json/encoding.rb b/activesupport/lib/active_support/json/encoding.rb\nindex f29d422..d0f67b1 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/activesupport/lib/active_support/json/encoding.rb\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/activesupport/lib/active_support/json/encoding.rb\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -58,6 +58,10 @@\u003c/span\u003e def to_json(*)\n                 super.gsub ESCAPE_REGEX_WITHOUT_HTML_ENTITIES, ESCAPED_CHARS\n               end\n             end\n\u003cspan class=\"gi\"\u003e+\n+            def to_s\n+              self\n+            end\n\u003c/span\u003e           end\n\n           # Mark these as private so we don\u0026#39;t leak encoding-specific constructs\n\u003cspan class=\"gh\"\u003ediff --git a/activesupport/test/json/encoding_test.rb b/activesupport/test/json/encoding_test.rb\nindex c4283ee..b75c67c 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/activesupport/test/json/encoding_test.rb\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/activesupport/test/json/encoding_test.rb\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -143,6 +143,13 @@\u003c/span\u003e def test_hash_encoding\n     assert_equal %({\\\u0026quot;a\\\u0026quot;:\\\u0026quot;b\\\u0026quot;,\\\u0026quot;c\\\u0026quot;:\\\u0026quot;d\\\u0026quot;}), sorted_json(ActiveSupport::JSON.encode(:a =\u0026gt; :b, :c =\u0026gt; :d))\n   end\n\n+  def test_hash_keys_encoding\n\u003cspan class=\"gi\"\u003e+    ActiveSupport.escape_html_entities_in_json = true\n+    assert_equal \u0026quot;{\\\u0026quot;\\\\u003c\\\\u003e\\\u0026quot;:\\\u0026quot;\\\\u003c\\\\u003e\\\u0026quot;}\u0026quot;, ActiveSupport::JSON.encode(\u0026quot;\u0026lt;\u0026gt;\u0026quot; =\u0026gt; \u0026quot;\u0026lt;\u0026gt;\u0026quot;)\n+  ensure\n+    ActiveSupport.escape_html_entities_in_json = false\n+  end\n+\n\u003c/span\u003e   def test_utf8_string_encoded_properly\n     result = ActiveSupport::JSON.encode(\u0026#39;€2.99\u0026#39;)\n     assert_equal \u0026#39;\u0026quot;€2.99\u0026quot;\u0026#39;, result\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2015-02-10T01:00:35.596Z","updated_at":"2015-02-10T01:00:35.596Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":329060,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @einstein_, just to confirm we got your report and we agree with the proposed solution. We will prepare the advisory and post it back to review.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/einstein_\"\u003e@einstein_\u003c/a\u003e, just to confirm we got your report and we agree with the proposed solution. We will prepare the advisory and post it back to review.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-10T13:58:34.484Z","updated_at":"2015-02-10T13:58:34.484Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":338590,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I was researching the impact and possible workarounds for this XSS vulnerability and found that it is only possible due to `javascript_tag` marking the content as HTML safe by default. I'm missing any case where this issue can also lead XSS?\n\nAlso I can't think in any possible workaround, do you have any in mind?","markdown_message":"\u003cp\u003eI was researching the impact and possible workarounds for this XSS vulnerability and found that it is only possible due to \u003ccode\u003ejavascript_tag\u003c/code\u003e marking the content as HTML safe by default. I\u0026#39;m missing any case where this issue can also lead XSS?\u003c/p\u003e\n\n\u003cp\u003eAlso I can\u0026#39;t think in any possible workaround, do you have any in mind?\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T19:56:33.110Z","updated_at":"2015-02-23T19:56:33.110Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":338616,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here is the first draft of the advisory and the patches for 4.1.9 and 4.2.0. I'm planning to release 4.1.9.1 and 4.2.0.1 including just security releases and 4.2.1 and 4.1.10 with bug fixes and the security patches.\n\nLet me know what you think.\n\n@einstein_ about the credits how do you want it? We usually do \"Thanks to XXX of Company for reporting the vulnerability to us and working closely with us on a fix.\"","markdown_message":"\u003cp\u003eHere is the first draft of the advisory and the patches for 4.1.9 and 4.2.0. I\u0026#39;m planning to release 4.1.9.1 and 4.2.0.1 including just security releases and 4.2.1 and 4.1.10 with bug fixes and the security patches.\u003c/p\u003e\n\n\u003cp\u003eLet me know what you think.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/einstein_\"\u003e@einstein_\u003c/a\u003e about the credits how do you want it? We usually do \u0026quot;Thanks to XXX of Company for reporting the vulnerability to us and working closely with us on a fix.\u0026quot;\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T20:20:26.206Z","updated_at":"2015-02-23T20:20:26.206Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":30156,"filename":"4-1-to_json_xss.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/030/156/3102adeed80cffbb4db0ff5619475afa49041f3c/4-1-to_json_xss.patch?response-content-disposition=attachment%3B%20filename%3D%224-1-to_json_xss.patch%22%3B%20filename%2A%3DUTF-8%27%274-1-to_json_xss.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=cd3114daea39ff9be14f3a2d62c525ee4625d359c0064ff8d960b72ff09cf5fa"},{"id":30157,"filename":"4-2-to_json_xss.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/030/157/7097fd92c3502cf09b8f610d14f0825c1c767b25/4-2-to_json_xss.patch?response-content-disposition=attachment%3B%20filename%3D%224-2-to_json_xss.patch%22%3B%20filename%2A%3DUTF-8%27%274-2-to_json_xss.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=e13ce02f264d6e91cd2cf5835a857f1f9dba5ce05d0cd1387764a9e3d029f35b"},{"id":30158,"filename":"advisory.txt","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/030/158/e9c498ca457fcb9e717053026c4a8f64a2f9072e/advisory.txt?response-content-disposition=attachment%3B%20filename%3D%22advisory.txt%22%3B%20filename%2A%3DUTF-8%27%27advisory.txt\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=1851da854a72f4d50710ef5a8e9e112bc8e1bd2ff2a13d2a46409b05f9b0f606"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":338668,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The javascript_tag use case might very well be the only one, I didn't look for other vectors since our specific use case was inside a javascript_tag call too. The example form my report would lead to a XSS only inside of a `\u003cscript\u003e` tag because of the precedence of `\u003c/script\u003e` over anything else.\n\nWe ended up monkey-patching `content_tag_string` like below in order to prevent this from happening in the future, because `\u003c/script\u003e` is never a valid sequence in a script tag no matter how it got there:\n\n```ruby\nmodule ActionView\n  module Helpers\n    module TagHelper\n\n      private\n\n      alias_method :orig_content_tag_string, :content_tag_string\n      def content_tag_string(name, content, options, escape = true)\n        if name.to_s.downcase == \"script\" \u0026\u0026 content =~ /\\\u003c\\s*\\/\\s*script[^\\\u003e]*\u003e/i\n          raise ArgumentError, \"Blocked XSS: string \u003c/script\u003e found inside tag content.\"\n        end\n        orig_content_tag_string(name, content, options, escape)\n      end\n    end\n  end\nend\n```\n\nwith the following tests:\n```ruby\nrequire 'test_helper'\n\nclass ActionViewContentTagTest \u003c ActiveSupport::TestCase\n  include ActionView::Helpers::TagHelper\n  include ActionView::Helpers::JavaScriptHelper\n\n  test \"script tags cannot contain \u003c/script\u003e\" do\n    assert_raise ArgumentError do\n      javascript_tag \"foo\u003c/script\u003ebar\"\n    end\n  end\n\n  test \"script tags cannot contain malformed \u003c/script\u003e\" do\n    assert_raise ArgumentError do\n      javascript_tag \"foo\u003c   /    script\u003ebar\"\n    end\n    assert_raise ArgumentError do\n      javascript_tag \"foo\u003c / script   bla\u003ebar\"\n    end\n  end\n\n  test \"script tags can contain \u003c/script\u003e when forward slash is escaped\" do\n    assert_nothing_raised do\n      javascript_tag \"foo\u003c\\\\/script\u003ebar\"\n    end\n  end\nend\n```\n\nI'm not sure this is something you'd want in rails, but I don't see a better way to protect against this.\n\nAlso note that the provided patch (my original patch as well as your official ones) offers no protection when `ActiveSupport.escape_html_entities_in_json = false`. That would require encoding the forward slash character in [ESCAPE_REGEX_WITHOUT_HTML_ENTITIES](https://github.com/rails/rails/blob/88b334ec696ffe1fa08b934780f4ab27030c5c76/activesupport/lib/active_support/json/encoding.rb#L49) (i.e. encode `/` as `\\/`). That would protect against the `\u003c/script\u003e` vector even when `ActiveSupport.escape_html_entities_in_json = false` until https://github.com/flori/json/pull/235 is merged.\n","markdown_message":"\u003cp\u003eThe javascript_tag use case might very well be the only one, I didn\u0026#39;t look for other vectors since our specific use case was inside a javascript_tag call too. The example form my report would lead to a XSS only inside of a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag because of the precedence of \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e over anything else.\u003c/p\u003e\n\n\u003cp\u003eWe ended up monkey-patching \u003ccode\u003econtent_tag_string\u003c/code\u003e like below in order to prevent this from happening in the future, because \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e is never a valid sequence in a script tag no matter how it got there:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eActionView\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eHelpers\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eTagHelper\u003c/span\u003e\n\n      \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n      \u003cspan class=\"kp\"\u003ealias_method\u003c/span\u003e \u003cspan class=\"ss\"\u003e:orig_content_tag_string\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:content_tag_string\u003c/span\u003e\n      \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003econtent_tag_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eescape\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edowncase\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;script\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e \u003cspan class=\"o\"\u003e=~\u003c/span\u003e \u003cspan class=\"sr\"\u003e/\\\u0026lt;\\s*\\/\\s*script[^\\\u0026gt;]*\u0026gt;/i\u003c/span\u003e\n          \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"no\"\u003eArgumentError\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;Blocked XSS: string \u0026lt;/script\u0026gt; found inside tag content.\u0026quot;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eorig_content_tag_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eescape\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewith the following tests:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;test_helper\u0026#39;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eActionViewContentTagTest\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eActiveSupport\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTestCase\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003einclude\u003c/span\u003e \u003cspan class=\"no\"\u003eActionView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHelpers\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eTagHelper\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003einclude\u003c/span\u003e \u003cspan class=\"no\"\u003eActionView\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eHelpers\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eJavaScriptHelper\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;script tags cannot contain \u0026lt;/script\u0026gt;\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert_raise\u003c/span\u003e \u003cspan class=\"no\"\u003eArgumentError\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;foo\u0026lt;/script\u0026gt;bar\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;script tags cannot contain malformed \u0026lt;/script\u0026gt;\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert_raise\u003c/span\u003e \u003cspan class=\"no\"\u003eArgumentError\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;foo\u0026lt;   /    script\u0026gt;bar\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert_raise\u003c/span\u003e \u003cspan class=\"no\"\u003eArgumentError\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;foo\u0026lt; / script   bla\u0026gt;bar\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"nb\"\u003etest\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;script tags can contain \u0026lt;/script\u0026gt; when forward slash is escaped\u0026quot;\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert_nothing_raised\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;foo\u0026lt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\\\u003c/span\u003e\u003cspan class=\"s2\"\u003e/script\u0026gt;bar\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI\u0026#39;m not sure this is something you\u0026#39;d want in rails, but I don\u0026#39;t see a better way to protect against this.\u003c/p\u003e\n\n\u003cp\u003eAlso note that the provided patch (my original patch as well as your official ones) offers no protection when \u003ccode\u003eActiveSupport.escape_html_entities_in_json = false\u003c/code\u003e. That would require encoding the forward slash character in \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fblob%2F88b334ec696ffe1fa08b934780f4ab27030c5c76%2Factivesupport%2Flib%2Factive_support%2Fjson%2Fencoding.rb%23L49\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eESCAPE_REGEX_WITHOUT_HTML_ENTITIES\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (i.e. encode \u003ccode\u003e/\u003c/code\u003e as \u003ccode\u003e\\/\u003c/code\u003e). That would protect against the \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e vector even when \u003ccode\u003eActiveSupport.escape_html_entities_in_json = false\u003c/code\u003e until \u003ca title=\"https://github.com/flori/json/pull/235\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fflori%2Fjson%2Fpull%2F235\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/flori/json/pull/235\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is merged.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T21:11:36.993Z","updated_at":"2015-02-23T21:23:01.397Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338670,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"For the credit: \"Thanks to Francois Chagnon of Shopify\"","markdown_message":"\u003cp\u003eFor the credit: \u0026quot;Thanks to Francois Chagnon of Shopify\u0026quot;\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T21:12:02.438Z","updated_at":"2015-02-23T21:12:02.438Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338750,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm not sure if we should care about `escape_html_entities_in_json` being `false`. It is true by default and it is a good practice to keep it true.\n\nFor example, even with your patch, if `escape_html_entities_in_json` is false, we still have the same problem:\n\n```\n\u003cscript\u003e\n  var foo = \u003c%= params.to_json.html_safe %\u003e\n\u003c/script\u003e","markdown_message":"\u003cp\u003eI\u0026#39;m not sure if we should care about \u003ccode\u003eescape_html_entities_in_json\u003c/code\u003e being \u003ccode\u003efalse\u003c/code\u003e. It is true by default and it is a good practice to keep it true.\u003c/p\u003e\n\n\u003cp\u003eFor example, even with your patch, if \u003ccode\u003eescape_html_entities_in_json\u003c/code\u003e is false, we still have the same problem:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\n  var foo = \u0026lt;%= params.to_json.html_safe %\u0026gt;\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2015-02-23T22:39:03.871Z","updated_at":"2015-02-23T22:39:03.871Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":338768,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Escaping `/` as `\\/` will fix this xss vector in all cases since `params.to_json.html_safe` would look like `{'foo': '\u003c\\/script\u003e'}` when `escape_html_entities_in_json=false`. I think the proper place to fix this is in the `json` lib, but I thought it was worth mentioning since both issues are somewhat related. The forward slash not being escaped is is a slightly different issues from the one I originally reported here, the only link between them is that they are both exploitable with the string `\u003c/script\u003e`. Escaping html entities successfully prevents this xss vector, but if either json or rails had escaped `/`, this would not have been a security issue in the first place (it might still have been a escaping bug, but not a security issue).\n","markdown_message":"\u003cp\u003eEscaping \u003ccode\u003e/\u003c/code\u003e as \u003ccode\u003e\\/\u003c/code\u003e will fix this xss vector in all cases since \u003ccode\u003eparams.to_json.html_safe\u003c/code\u003e would look like \u003ccode\u003e{\u0026#39;foo\u0026#39;: \u0026#39;\u0026lt;\\/script\u0026gt;\u0026#39;}\u003c/code\u003e when \u003ccode\u003eescape_html_entities_in_json=false\u003c/code\u003e. I think the proper place to fix this is in the \u003ccode\u003ejson\u003c/code\u003e lib, but I thought it was worth mentioning since both issues are somewhat related. The forward slash not being escaped is is a slightly different issues from the one I originally reported here, the only link between them is that they are both exploitable with the string \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e. Escaping html entities successfully prevents this xss vector, but if either json or rails had escaped \u003ccode\u003e/\u003c/code\u003e, this would not have been a security issue in the first place (it might still have been a escaping bug, but not a security issue).\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T23:03:52.163Z","updated_at":"2015-02-23T23:03:52.163Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338773,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'm sorry if I misunderstood your last message, were you talking about the `content_tag_string` patch? Indeed it does nothing when javascript_tag is not used. This patch is useful in case someone does the following for example:\n```erb\n\u003c%= javascript_tag do %\u003e\n  var foo = \"\u003c%= foo.gsub('\"', '\\\"') %\u003e\";\n\u003c% end %\u003e\n```\nThis does successfully prevent the javascript string from being terminated when `foo='\";alert'`, but does nothing when `foo=\"\u003c/script\u003e\"`. I agree this would be a terrible way to escape strings, and I don't see why anyone would do this, but the monkey patch will save the day in case someone tries really hard to roll out their own way of escaping strings.\n","markdown_message":"\u003cp\u003eI\u0026#39;m sorry if I misunderstood your last message, were you talking about the \u003ccode\u003econtent_tag_string\u003c/code\u003e patch? Indeed it does nothing when javascript_tag is not used. This patch is useful in case someone does the following for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight erb\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003ejavascript_tag\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  var foo = \u0026quot;\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003egsub\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026quot;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\\\u0026quot;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\u0026quot;;\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis does successfully prevent the javascript string from being terminated when \u003ccode\u003efoo=\u0026#39;\u0026quot;;alert\u0026#39;\u003c/code\u003e, but does nothing when \u003ccode\u003efoo=\u0026quot;\u0026lt;/script\u0026gt;\u0026quot;\u003c/code\u003e. I agree this would be a terrible way to escape strings, and I don\u0026#39;t see why anyone would do this, but the monkey patch will save the day in case someone tries really hard to roll out their own way of escaping strings.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-23T23:21:21.736Z","updated_at":"2015-02-23T23:27:04.574Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338799,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"So you are right, the `javascript_tag` patch is not a viable workaround for this issue, it's an additional patch that fixes the problem in a different scenario.\n\nWould this work as a workaround? Suggest that people add this monkey patch as an initializer:\n```ruby\nmodule ActiveSupport\n  module JSON\n    module Encoding\n      private\n      class EscapedString\n        def to_s\n          self\n        end\n      end\n    end\n  end\nend\n```","markdown_message":"\u003cp\u003eSo you are right, the \u003ccode\u003ejavascript_tag\u003c/code\u003e patch is not a viable workaround for this issue, it\u0026#39;s an additional patch that fixes the problem in a different scenario.\u003c/p\u003e\n\n\u003cp\u003eWould this work as a workaround? Suggest that people add this monkey patch as an initializer:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eActiveSupport\u003c/span\u003e\n  \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eJSON\u003c/span\u003e\n    \u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eEncoding\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEscapedString\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\n          \u003cspan class=\"nb\"\u003eself\u003c/span\u003e\n        \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2015-02-24T00:03:29.958Z","updated_at":"2015-02-24T00:03:29.958Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":338806,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Should the impact section mention this is a xss vulnerability only when to_json.html_safe is used inside of a script tag?\n\nFor example:\n\nImpact\n------\nThis helper, or its indirect call `Hash#to_json`, in combination with `html_safe` is vulnerable to an XSS attack when used inside a `\u003cscript\u003e` element.\n","markdown_message":"\u003cp\u003eShould the impact section mention this is a xss vulnerability only when to_json.html_safe is used inside of a script tag?\u003c/p\u003e\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThis helper, or its indirect call \u003ccode\u003eHash#to_json\u003c/code\u003e, in combination with \u003ccode\u003ehtml_safe\u003c/code\u003e is vulnerable to an XSS attack when used inside a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-24T00:21:19.940Z","updated_at":"2015-02-24T00:24:09.693Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":339192,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I think we should also include the `javascript_tag` case in the impact section.\n\nThat monkey patch can be a good workaround.\n\nMaybe we should also apply a fix in `javascript_tag` to always escape `\u003c/script\u003e`. I'll take a look.","markdown_message":"\u003cp\u003eI think we should also include the \u003ccode\u003ejavascript_tag\u003c/code\u003e case in the impact section.\u003c/p\u003e\n\n\u003cp\u003eThat monkey patch can be a good workaround.\u003c/p\u003e\n\n\u003cp\u003eMaybe we should also apply a fix in \u003ccode\u003ejavascript_tag\u003c/code\u003e to always escape \u003ccode\u003e\u0026lt;/script\u0026gt;\u003c/code\u003e. I\u0026#39;ll take a look.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-02-24T16:13:15.402Z","updated_at":"2015-02-24T16:13:15.402Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":367675,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Rafael, do you have a tentative date for the release of a advisory/fix?","markdown_message":"\u003cp\u003eRafael, do you have a tentative date for the release of a advisory/fix?\u003c/p\u003e\n","automated_response":false,"created_at":"2015-04-01T19:59:00.625Z","updated_at":"2015-04-01T19:59:00.625Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":376571,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I'll request the CVE today and I believe next week we can release. I'll update here the updated advisory and patches.","markdown_message":"\u003cp\u003eI\u0026#39;ll request the CVE today and I believe next week we can release. I\u0026#39;ll update here the updated advisory and patches.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-04-09T20:54:33.999Z","updated_at":"2015-04-09T20:54:33.999Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":376785,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here updated version of patches and advisory","markdown_message":"\u003cp\u003eHere updated version of patches and advisory\u003c/p\u003e\n","automated_response":false,"created_at":"2015-04-09T23:33:53.310Z","updated_at":"2015-04-09T23:33:53.310Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":34141,"filename":"advisory.txt","type":"text/x-ruby","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/034/141/8b13476ea74a82abbb0c519da686ce994a6d577d/advisory.txt?response-content-disposition=attachment%3B%20filename%3D%22advisory.txt%22%3B%20filename%2A%3DUTF-8%27%27advisory.txt\u0026response-content-type=text%2Fx-ruby\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=78e380bf22ac14d07f3cdf6e947873e1679786ae2f42627b52238130573a5b03"},{"id":34140,"filename":"4-2-to_json_xss.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/034/140/1ccfd1e07bc6e3b508d05a6ac48a6bda03eb3655/4-2-to_json_xss.patch?response-content-disposition=attachment%3B%20filename%3D%224-2-to_json_xss.patch%22%3B%20filename%2A%3DUTF-8%27%274-2-to_json_xss.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=6c0def9f0f224d91275c4fca7b794c43423a57d7f12bbac8e5476dc23ce106f4"},{"id":34139,"filename":"4-1-to_json_xss.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/034/139/edc2e536f650f5adf207ca24d36ac0d965797888/4-1-to_json_xss.patch?response-content-disposition=attachment%3B%20filename%3D%224-1-to_json_xss.patch%22%3B%20filename%2A%3DUTF-8%27%274-1-to_json_xss.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=081c818b51e30ffb07357fbc293148a1143cf12b7b141ffc8c9b2c73dee2b829"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":376821,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I reworded the advisory with some inputs of the Rails Core members","markdown_message":"\u003cp\u003eI reworded the advisory with some inputs of the Rails Core members\u003c/p\u003e\n","automated_response":false,"created_at":"2015-04-10T01:54:20.225Z","updated_at":"2015-04-10T01:54:20.225Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":34152,"filename":"advisory.txt","type":"text/x-ruby","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/034/152/8fa933257dfa8c99eff5ff7e7a49d375ec873154/advisory.txt?response-content-disposition=attachment%3B%20filename%3D%22advisory.txt%22%3B%20filename%2A%3DUTF-8%27%27advisory.txt\u0026response-content-type=text%2Fx-ruby\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQR2ZO7R4K%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIGl53Fw9OoAeZDdXqNqIaPWdVjolNnalaCHAwbXpszPSAiEAwdHCK3x2n8ED7sSzsn1sTIqS3bguKd2LFUdH90SxxboqtAMIVhABGgwwMTM2MTkyNzQ4NDkiDFnQ3ZZHIU4UMAvXOCqRA3wF0%2FhaPHMfYMs5a29VvIgRVY2eUJjhO2ZyE9nrbvBw99qQYURMnfpjG6qzK9RhUhaxnystL8FSjs1I9wVhv7kK6fGlwNHgR0S%2FwzzOYB4EaUAuHPPjDIaplYQHDQfhD3Jzk627x6y1whtGyRm1%2FbLU%2FMLC%2FEl2Y0VF3B2XYbmjMyMbEo%2F3JA2NhxILkWnIEx9Dc5OuLgUgvtMmXd8zqzlhwWk%2Fkbzt%2FA4PPw5G1805sqkgAV2ZtRMBvyI%2FHqrdrdjVcpE0L%2Fb3v3BTHE1AxOXymRI68r5QkUXAwvQReRh0UHKevdP2OKVlaJqNW4QPWf8V9sf08LOD6%2FIWFP2z6T0Ge7kmECxaLuqLfuqbJATPZaoduqk5WANfTo41R4vwOd0PfkzuCu4ENGZautDQdqCTqc5v4f3nC%2FmEA3lzVbD2GfnKNN5i6QTsolJiL8iHwoY3qRGnqUpWe6styqCssbnT2On6kImCyLv8PqTQIgD5tzKTZ%2Bk7rSp%2FUGyNQ%2Fzf7CwFfbirN8%2BZ0cy8FDVRQPOIMNrtqv8FOusBG5VJhuS959dYt8SgxT1B5qInUKkmqkB9xSwqpRIrJhHLlMpiW9hAt%2BdMLFZZhmn8J5%2BdfXBiq%2FwOuwlyUwREyyNiqFLd5q%2F2oDa1jv2FMMsir1my4yAqcT0R%2BuM9KWMCRIN%2F27CpS4%2BgKGfRpQrYqZnwFoh5vyTAfyKuQbQpvNQ5z0%2F7hQPQ1Fud3gWbMbKSBMyuMEkDvn42ZK0k1WvIYPRa53VXsGPwtTo7PZ2laExqLJsXRcULDGCx08GryRt%2B5IBSaDHktFU1HTGALrwf1yRufEBKHtOimqOWitGuYxfwQnKZ1ht%2BjmX2WQ%3D%3D\u0026X-Amz-Signature=2d606e670d3cde253598a7c05c986a8e89d58648da2304e57e0637c1541d2f52"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":376916,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"The advisory and patches look good. One small thing, there is a typo: `directely` should read `directly`\n","markdown_message":"\u003cp\u003eThe advisory and patches look good. One small thing, there is a typo: \u003ccode\u003edirectely\u003c/code\u003e should read \u003ccode\u003edirectly\u003c/code\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2015-04-10T05:06:46.667Z","updated_at":"2015-04-10T05:06:46.667Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":473006,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-15T17:22:54.405Z","updated_at":"2015-06-15T17:22:54.405Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":473009,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-15T17:22:54.916Z","updated_at":"2015-06-15T17:22:54.916Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474500,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-16T19:17:13.709Z","updated_at":"2015-06-16T19:17:13.709Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"einstein_","url":"/einstein_"},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474501,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-16T19:17:21.937Z","updated_at":"2015-06-16T19:17:21.937Z","first_to_agree":true,"actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":474535,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-16T19:38:33.999Z","updated_at":"2015-06-16T19:38:33.999Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":474536,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-16T19:38:34.292Z","updated_at":"2015-06-16T19:38:34.292Z","actor":{"username":"einstein_","cleared":false,"url":"/einstein_","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2202445,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-05T18:40:17.501Z","updated_at":"2017-12-05T18:40:17.501Z","additional_data":{"old_severity":null,"new_severity":"High (7.2)","old_severity_id":null,"new_severity_id":99524},"actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2202446,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-05T18:40:38.186Z","updated_at":"2017-12-05T18:40:38.186Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby on Rails"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"rails","collaborator":{"username":"einstein_","url":"/einstein_"},"actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":166,"category":"team","content":"XSS Vulnerability in ActiveSupport::JSON.encode \n\nThere is an XSS vulnerability in the ActiveSupport::JSON.encode method in Ruby on Rails. \nThis vulnerability has been assigned the CVE identifier CVE-2015-3226. \n\nVersions Affected:  3.0.x, 3.1.x, 3.2.x, 4.1.x, 4.2.x. \nNot affected:       4.0.x. \nFixed Versions:     4.2.2, 4.1.11 \n\nImpact \n------ \nWhen a `Hash` containing user-controlled data is encode as JSON (either through \n`Hash#to_json` or `ActiveSupport::JSON.encode`), Rails does not perform adequate \nescaping that matches the guarantee implied by the `escape_html_entities_in_json` \noption (which is enabled by default). If this resulting JSON string is subsequently \ninserted directly into an HTML page, the page will be vulnerable to XSS attacks. \n\nFor example, the following code snippet is vulnerable to this attack: \n\n    \u003c%= javascript_tag \"var data = #{user_supplied_data.to_json};\" %\u003e \n\nSimilarly, the following is also vulnerable: \n\n    \u003cscript\u003e \n      var data = \u003c%= ActiveSupport::JSON.encode(user_supplied_data).html_safe %\u003e; \n    \u003c/script\u003e \n\nAll applications that renders JSON-encoded strings that contains user-controlled \ndata in their views should either upgrade to one of the FIXED versions or use \nthe suggested workaround immediately. \n\nReleases \n-------- \nThe FIXED releases are available at the normal locations. \n\nWorkarounds \n----------- \nTo work around this problem add an initializer with the following code: \n\n    module ActiveSupport \n      module JSON \n        module Encoding \n          private \n          class EscapedString \n            def to_s \n              self \n            end \n          end \n        end \n      end \n    end \n\nPatches \n------- \nTo aid users who aren't able to upgrade immediately we have provided patches for the two \nsupported release series.  They are in git-am format and consist of a single changeset. \n\n* 4-1-to_json_xss.patch - Patch for 4.1 series \n* 4-2-to_json_xss.patch - Patch for 4.2 series \n\nPlease note that only the 4.1.x and 4.2.x series are supported at present. \nUsers of earlier unsupported releases are advised to upgrade as soon as possible as we cannot \nguarantee the continued availability of security fixes for unsupported releases. \n\nCredits \n------- \n\nThanks to Francois Chagnon of Shopify for reporting the vulnerability to us, and working \nwith us on a fix. \n","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eXSS Vulnerability in ActiveSupport::JSON.encode \u003c/p\u003e\n\n\u003cp\u003eThere is an XSS vulnerability in the ActiveSupport::JSON.encode method in Ruby on Rails. \u003cbr\u003e\nThis vulnerability has been assigned the CVE identifier CVE-2015-3226. \u003c/p\u003e\n\n\u003cp\u003eVersions Affected:  3.0.x, 3.1.x, 3.2.x, 4.1.x, 4.2.x. \u003cbr\u003e\nNot affected:       4.0.x. \u003cbr\u003e\nFixed Versions:     4.2.2, 4.1.11 \u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact \u003c/h2\u003e\n\n\u003cp\u003eWhen a \u003ccode\u003eHash\u003c/code\u003e containing user-controlled data is encode as JSON (either through \u003cbr\u003e\n\u003ccode\u003eHash#to_json\u003c/code\u003e or \u003ccode\u003eActiveSupport::JSON.encode\u003c/code\u003e), Rails does not perform adequate \u003cbr\u003e\nescaping that matches the guarantee implied by the \u003ccode\u003eescape_html_entities_in_json\u003c/code\u003e \u003cbr\u003e\noption (which is enabled by default). If this resulting JSON string is subsequently \u003cbr\u003e\ninserted directly into an HTML page, the page will be vulnerable to XSS attacks. \u003c/p\u003e\n\n\u003cp\u003eFor example, the following code snippet is vulnerable to this attack: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;%= javascript_tag \u0026quot;var data = #{user_supplied_data.to_json};\u0026quot; %\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSimilarly, the following is also vulnerable: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;script\u0026gt; \n  var data = \u0026lt;%= ActiveSupport::JSON.encode(user_supplied_data).html_safe %\u0026gt;; \n\u0026lt;/script\u0026gt; \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAll applications that renders JSON-encoded strings that contains user-controlled \u003cbr\u003e\ndata in their views should either upgrade to one of the FIXED versions or use \u003cbr\u003e\nthe suggested workaround immediately. \u003c/p\u003e\n\n\u003ch2 id=\"releases\"\u003eReleases \u003c/h2\u003e\n\n\u003cp\u003eThe FIXED releases are available at the normal locations. \u003c/p\u003e\n\n\u003ch2 id=\"workarounds\"\u003eWorkarounds \u003c/h2\u003e\n\n\u003cp\u003eTo work around this problem add an initializer with the following code: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emodule ActiveSupport \n  module JSON \n    module Encoding \n      private \n      class EscapedString \n        def to_s \n          self \n        end \n      end \n    end \n  end \nend \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"patches\"\u003ePatches \u003c/h2\u003e\n\n\u003cp\u003eTo aid users who aren\u0026#39;t able to upgrade immediately we have provided patches for the two \u003cbr\u003e\nsupported release series.  They are in git-am format and consist of a single changeset. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e4-1-to_json_xss.patch - Patch for 4.1 series \u003c/li\u003e\n\u003cli\u003e4-2-to_json_xss.patch - Patch for 4.2 series \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003ePlease note that only the 4.1.x and 4.2.x series are supported at present. \u003cbr\u003e\nUsers of earlier unsupported releases are advised to upgrade as soon as possible as we cannot \u003cbr\u003e\nguarantee the continued availability of security fixes for unsupported releases. \u003c/p\u003e\n\n\u003ch2 id=\"credits\"\u003eCredits \u003c/h2\u003e\n\n\u003cp\u003eThanks to Francois Chagnon of Shopify for reporting the vulnerability to us, and working \u003cbr\u003e\nwith us on a fix. \u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}