{"id":227344,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMjczNDQ=","url":"https://hackerone.com/reports/227344","title":"CVE-2017-8798 - miniupnp getHTTPResponse chunked encoding integer signedness error","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2017-05-09T21:29:06.805Z","submitted_at":"2017-05-09T21:29:06.805Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hxd","url":"/hxd","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":20,"url":"https://hackerone.com/internet","handle":"internet","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"The Internet","twitter_handle":null,"website":"","about":"Hack all the things."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T23:48:49.780Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T23:48:40.232Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"### Integer signedness error in miniupnpc [1]  allows remote attackers to cause a denial of service condition (access violation and heap corruption) via specially crafted HTTP response\n\nAn integer signedness error was found in miniupnp's `miniwget` allowing \nan unauthenticated remote entity typically located on the\nlocal network segment to trigger a heap corruption or an access violation\nin miniupnp's http response parser when processing a specially crafted\nchunked-encoded response to a request for the xml root description url.\n\n* affects\n * all versions \u003e= `v1.4.20101221` (released 21/12/2010; `~6 years ago`)\n * all configurations as its a core part of the library\n* impact\n * DoS (access violation due to buffer overread memcpy)\n * Heap Overwrite (pot. race RCE in multithreaded envs)\n* requirements\n  * no user interaction, unauth, low complexity\n* how widespread is this software?\n * miniupnpc is compiled into a wide range of network applications and embedded device firmware.\n * blockchain clients: `bitcoind` and almost all forks, `CPP ethereum`, ...\n * p2p filesharing applications: `qBittorrent`, `Transmission`, ...\n * network device firmware: `dlink`, `linksys`, probably `synology` or anything that allows IGD management / portforwarding\n * numerous hits for `miniwget` on google or github.  closed source obviously not included but its likely to find this lib packed with embedded devices.\n* disclosure\n * provided detailed description, PoC and patch\n * status: fixed; within 8 days.\n\nThe vulnerable component is a HTTP file download method called \n`miniwget` (precisely `getHTTPResponse`) that fails to properly handle \ninvalid chunked-encoded HTTP responses. The root cause is a bounds check\nthat mistakenly casts an unsigned attacker-provided chunksize to signed \nint leading to an incorrect decision on the destination heap buffer size \nwhen copying data from the server response to an internal buffer. The \nattacker controls both the size of the internal buffer as well as the \nnumber of bytes to copy. In order for this attack to succeed, the number \nof bytes to copy must be negative.\n\nattacker controls:\n* `int content_length`\n* `unsigned int chunksize`\n* `bytestocopy` if `(int) chunksize` is negative (or at least \u003c `n-i` ~ 1900 bytes)\n* length of `content_buf` if `bytestocopy` is negative\n\nIn the end, the attacker has almost full control of the following two methods\n* `realloc(content_buf, content_length)`\n* `memcpy(content_buf+x, http_response, chunksize)`\n\n\naffected methods (almost all exposed API):\n\n        basically all `miniwget*` and `UPNP_*` methods.\n        * getHTTPResponse (vulnerable)\n          * miniwget3\n           * miniwget2\n            * miniwget\n            * miniwget_getaddr\n             * UPNP_GetIGDFromUrl\n             * UPNP_GetValidIGD\n              * UPnP_selectigd\n          * UPNP_Get*\n          * UPNP_Check*\n          * UPNP_Delete*\n          * UPNP_Update*\n          * UPNP_Add*\n\n\nThis vulnerability is easily exploitable with an attacker being on the same network segment/multicast domain by answering SSDP discovery requests (1) (or sending notification requests) providing an URL to the attacker controlled webserver. Answering this request (2) makes upnp clients download a description file from that webserver (3)(4) in order to learn more about the capabilities of the Internet Gateway Device (IGD). By providing a negative chunk length in the chunked-encoded answer (4) to this request the malicious webserver triggers the vulnerability. This way one malicous client could exploit all other clients in the same multicast domain. (Funny sidenote: I had to implement a target ip filter otherwise the PoC would attract devices like a magnet and crash all of them)\n\n```\n      client (miniupnpc)                         server (poc.py)\n          |                                         |\n          |                                         |\n          | SSDP:  Discovery - M-SEARCH             |\n      1.  | --------------------------------------\u003e |\n          |                                         |\n          | SSDP:  Reply - Location Header          |\n      2.  | \u003c-------------------------------------- |\n          |                                         |\n          | SCPD:  GET (Location Header/xxxx.xml)   |\n      3.  | --------------------------------------\u003e |\n          |                                         |\n          | SCPD:  HTTP chunked-encoded reply       |\n      4.  | \u003c-------------------------------------- |\n          |                                         |\n\n```\n*Note*: the vulnerability is basically not bound to the adjacent network since `miniwget` could also be used to download arbitrary files on the internet. This is just the most common/typical vector, otherwise the CVSS score would be higher.\n\n##### Disclosure\n\ncoordinated disclosure and reported to the miniupnp project owner, provided `detailed vulnerability analysis`, a one-click exploit all `PoC` and a minimal `patch`. The patch was accepted with minor changes. Fixed within a few days of first contact (May 1st -\u003eMay 9th). \n\ndetails and the actual research material that was securely shared with the miniupnp project is going to be be pushed to the following github repository once vendors picked up the changes: https://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798\n\nVendor response [2] and Patch [3]\n\n‚ù§ Thanks to miniupnp for treating this with priority. \n\n  [1] http://miniupnp.free.fr\n  [2] http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20170509.tar.gz\n  [3] https://github.com/miniupnp/miniupnp/commit/f0f1f4b22d6a98536377a1bb07e7c20e4703d229","vulnerability_information_html":"\u003ch3 id=\"integer-signedness-error-in-miniupnpc-1-allows-remote-attackers-to-cause-a-denial-of-service-condition-access-violation-and-heap-corruption-via-specially-crafted-http-response\"\u003eInteger signedness error in miniupnpc [1]  allows remote attackers to cause a denial of service condition (access violation and heap corruption) via specially crafted HTTP response\u003c/h3\u003e\n\n\u003cp\u003eAn integer signedness error was found in miniupnp\u0026#39;s \u003ccode\u003eminiwget\u003c/code\u003e allowing \u003cbr\u003e\nan unauthenticated remote entity typically located on the\u003cbr\u003e\nlocal network segment to trigger a heap corruption or an access violation\u003cbr\u003e\nin miniupnp\u0026#39;s http response parser when processing a specially crafted\u003cbr\u003e\nchunked-encoded response to a request for the xml root description url.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eaffects\n\n\u003cul\u003e\n\u003cli\u003eall versions \u0026gt;= \u003ccode\u003ev1.4.20101221\u003c/code\u003e (released 21/12/2010; \u003ccode\u003e~6 years ago\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eall configurations as its a core part of the library\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eimpact\n\n\u003cul\u003e\n\u003cli\u003eDoS (access violation due to buffer overread memcpy)\u003c/li\u003e\n\u003cli\u003eHeap Overwrite (pot. race RCE in multithreaded envs)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003erequirements\n\n\u003cul\u003e\n\u003cli\u003eno user interaction, unauth, low complexity\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ehow widespread is this software?\n\n\u003cul\u003e\n\u003cli\u003eminiupnpc is compiled into a wide range of network applications and embedded device firmware.\u003c/li\u003e\n\u003cli\u003eblockchain clients: \u003ccode\u003ebitcoind\u003c/code\u003e and almost all forks, \u003ccode\u003eCPP ethereum\u003c/code\u003e, ...\u003c/li\u003e\n\u003cli\u003ep2p filesharing applications: \u003ccode\u003eqBittorrent\u003c/code\u003e, \u003ccode\u003eTransmission\u003c/code\u003e, ...\u003c/li\u003e\n\u003cli\u003enetwork device firmware: \u003ccode\u003edlink\u003c/code\u003e, \u003ccode\u003elinksys\u003c/code\u003e, probably \u003ccode\u003esynology\u003c/code\u003e or anything that allows IGD management / portforwarding\u003c/li\u003e\n\u003cli\u003enumerous hits for \u003ccode\u003eminiwget\u003c/code\u003e on google or github.  closed source obviously not included but its likely to find this lib packed with embedded devices.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003edisclosure\n\n\u003cul\u003e\n\u003cli\u003eprovided detailed description, PoC and patch\u003c/li\u003e\n\u003cli\u003estatus: fixed; within 8 days.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe vulnerable component is a HTTP file download method called \u003cbr\u003e\n\u003ccode\u003eminiwget\u003c/code\u003e (precisely \u003ccode\u003egetHTTPResponse\u003c/code\u003e) that fails to properly handle \u003cbr\u003e\ninvalid chunked-encoded HTTP responses. The root cause is a bounds check\u003cbr\u003e\nthat mistakenly casts an unsigned attacker-provided chunksize to signed \u003cbr\u003e\nint leading to an incorrect decision on the destination heap buffer size \u003cbr\u003e\nwhen copying data from the server response to an internal buffer. The \u003cbr\u003e\nattacker controls both the size of the internal buffer as well as the \u003cbr\u003e\nnumber of bytes to copy. In order for this attack to succeed, the number \u003cbr\u003e\nof bytes to copy must be negative.\u003c/p\u003e\n\n\u003cp\u003eattacker controls:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eint content_length\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eunsigned int chunksize\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003ebytestocopy\u003c/code\u003e if \u003ccode\u003e(int) chunksize\u003c/code\u003e is negative (or at least \u0026lt; \u003ccode\u003en-i\u003c/code\u003e ~ 1900 bytes)\u003c/li\u003e\n\u003cli\u003elength of \u003ccode\u003econtent_buf\u003c/code\u003e if \u003ccode\u003ebytestocopy\u003c/code\u003e is negative\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn the end, the attacker has almost full control of the following two methods\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erealloc(content_buf, content_length)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ememcpy(content_buf+x, http_response, chunksize)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eaffected methods (almost all exposed API):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    basically all `miniwget*` and `UPNP_*` methods.\n    * getHTTPResponse (vulnerable)\n      * miniwget3\n       * miniwget2\n        * miniwget\n        * miniwget_getaddr\n         * UPNP_GetIGDFromUrl\n         * UPNP_GetValidIGD\n          * UPnP_selectigd\n      * UPNP_Get*\n      * UPNP_Check*\n      * UPNP_Delete*\n      * UPNP_Update*\n      * UPNP_Add*\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis vulnerability is easily exploitable with an attacker being on the same network segment/multicast domain by answering SSDP discovery requests (1) (or sending notification requests) providing an URL to the attacker controlled webserver. Answering this request (2) makes upnp clients download a description file from that webserver (3)(4) in order to learn more about the capabilities of the Internet Gateway Device (IGD). By providing a negative chunk length in the chunked-encoded answer (4) to this request the malicious webserver triggers the vulnerability. This way one malicous client could exploit all other clients in the same multicast domain. (Funny sidenote: I had to implement a target ip filter otherwise the PoC would attract devices like a magnet and crash all of them)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e      client (miniupnpc)                         server (poc.py)\n          |                                         |\n          |                                         |\n          | SSDP:  Discovery - M-SEARCH             |\n      1.  | --------------------------------------\u0026gt; |\n          |                                         |\n          | SSDP:  Reply - Location Header          |\n      2.  | \u0026lt;-------------------------------------- |\n          |                                         |\n          | SCPD:  GET (Location Header/xxxx.xml)   |\n      3.  | --------------------------------------\u0026gt; |\n          |                                         |\n          | SCPD:  HTTP chunked-encoded reply       |\n      4.  | \u0026lt;-------------------------------------- |\n          |                                         |\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: the vulnerability is basically not bound to the adjacent network since \u003ccode\u003eminiwget\u003c/code\u003e could also be used to download arbitrary files on the internet. This is just the most common/typical vector, otherwise the CVSS score would be higher.\u003c/p\u003e\n\n\u003ch5 id=\"disclosure\"\u003eDisclosure\u003c/h5\u003e\n\n\u003cp\u003ecoordinated disclosure and reported to the miniupnp project owner, provided \u003ccode\u003edetailed vulnerability analysis\u003c/code\u003e, a one-click exploit all \u003ccode\u003ePoC\u003c/code\u003e and a minimal \u003ccode\u003epatch\u003c/code\u003e. The patch was accepted with minor changes. Fixed within a few days of first contact (May 1st -\u0026gt;May 9th). \u003c/p\u003e\n\n\u003cp\u003edetails and the actual research material that was securely shared with the miniupnp project is going to be be pushed to the following github repository once vendors picked up the changes: \u003ca title=\"https://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftintinweb%2Fpub%2Ftree%2Fmaster%2Fpocs%2Fcve-2017-8798\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eVendor response [2] and Patch [3]\u003c/p\u003e\n\n\u003cp\u003e‚ù§ Thanks to miniupnp for treating this with priority. \u003c/p\u003e\n\n\u003cp\u003e[1] \u003ca title=\"http://miniupnp.free.fr\" href=\"/redirect?url=http%3A%2F%2Fminiupnp.free.fr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://miniupnp.free.fr\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n  [2] \u003ca title=\"http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20170509.tar.gz\" href=\"/redirect?url=http%3A%2F%2Fminiupnp.free.fr%2Ffiles%2Fchangelog.php%3Ffile%3Dminiupnpc-2.0.20170509.tar.gz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20170509.tar.gz\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n  [3] \u003ca title=\"https://github.com/miniupnp/miniupnp/commit/f0f1f4b22d6a98536377a1bb07e7c20e4703d229\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fminiupnp%2Fminiupnp%2Fcommit%2Ff0f1f4b22d6a98536377a1bb07e7c20e4703d229\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/miniupnp/miniupnp/commit/f0f1f4b22d6a98536377a1bb07e7c20e4703d229\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","weakness":{"id":15,"name":"Integer Overflow"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T23:48:40.348Z","allow_singular_disclosure_after":-35615679.104505315,"singular_disclosure_allowed":true,"vote_count":2,"voters":["base_64","spetr0x"],"severity":{"rating":"high","score":7.1,"author_type":"User","metrics":{"attack_vector":"adjacent","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1664466,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"*Note*: I'll update this thread once I've posted the advisory and pushed detailed information, PoC and original patch to https://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798 (likely within the next days)","markdown_message":"\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: I\u0026#39;ll update this thread once I\u0026#39;ve posted the advisory and pushed detailed information, PoC and original patch to \u003ca title=\"https://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftintinweb%2Fpub%2Ftree%2Fmaster%2Fpocs%2Fcve-2017-8798\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/tintinweb/pub/tree/master/pocs/cve-2017-8798\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (likely within the next days)\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-09T21:31:00.069Z","updated_at":"2017-05-09T21:31:00.069Z","actor":{"username":"hxd","cleared":false,"url":"/hxd","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1669118,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Fix is available, vulnerability details are now public:\n* http://www.openwall.com/lists/oss-security/2017/05/11/2\n* https://github.com/tintinweb/pub/blob/master/pocs/cve-2017-8798/poc.py","markdown_message":"\u003cp\u003eFix is available, vulnerability details are now public:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"http://www.openwall.com/lists/oss-security/2017/05/11/2\" href=\"/redirect?url=http%3A%2F%2Fwww.openwall.com%2Flists%2Foss-security%2F2017%2F05%2F11%2F2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://www.openwall.com/lists/oss-security/2017/05/11/2\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca title=\"https://github.com/tintinweb/pub/blob/master/pocs/cve-2017-8798/poc.py\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Ftintinweb%2Fpub%2Fblob%2Fmaster%2Fpocs%2Fcve-2017-8798%2Fpoc.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/tintinweb/pub/blob/master/pocs/cve-2017-8798/poc.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2017-05-11T22:08:19.304Z","updated_at":"2017-05-11T22:08:19.304Z","actor":{"username":"hxd","cleared":false,"url":"/hxd","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709807,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"Thank you for the finding and the detailed write-up! Unfortunately, this doesn't quite hit the program's eligibility criteria.","markdown_message":"\u003cp\u003eThank you for the finding and the detailed write-up! Unfortunately, this doesn\u0026#39;t quite hit the program\u0026#39;s eligibility criteria.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-30T15:13:06.720Z","updated_at":"2017-05-30T15:13:06.720Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709808,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-05-30T15:13:12.250Z","updated_at":"2017-05-30T15:13:12.250Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hxd","url":"/hxd"},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6028951,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T23:48:40.257Z","updated_at":"2019-10-13T23:48:40.257Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6293062,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T23:48:49.800Z","updated_at":"2019-11-12T23:48:49.800Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}