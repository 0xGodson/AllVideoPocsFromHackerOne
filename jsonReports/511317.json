{"id":511317,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTEzMTc=","url":"https://hackerone.com/reports/511317","title":"Potential use-after-free due to struct array_entry_t lacking an explicit copy constructor","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2019-03-17T16:55:25.401Z","submitted_at":"2019-03-17T16:55:25.401Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"guido","url":"/guido","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":7731,"url":"https://hackerone.com/monero","handle":"monero","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Monero","twitter_handle":"monero","website":"https://getmonero.org","about":" Monero: the secure, private, untraceable cryptocurrency"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-05-10T20:02:23.754Z","bug_reporter_agreed_on_going_public_at":"2019-04-10T20:02:20.346Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"```struct array_entry_t``` in ```contrib/epee/include/storages/portable_storage_base.h``` does not implement a copy constructor.\n\nWherever there is code that attempts to copy-construct ```array_entry_t```, the compiler inserts a copy constructor for ```array_entry_t``` that merely copies over the values.\n\nThe struct possesses an iterator (```mutable typename entry_container\u003ct_entry_type\u003e::type::const_iterator m_it```) which is copied over by the implicit copy constructor (inserted ad-hoc by the compiler).\n\nThis leads to a situation where ```m_it``` points to a different ```m_array_entry```. If that ```m_array_entry``` is deleted, then dereferencing ```m_it``` constitutes a use-after-free bug.\n\n```cpp\n#include \u003cstorages/portable_storage_base.h\u003e\n\nint main(void)\n{\n    /* Construct the first array_entry_t */\n    auto ae = new epee::serialization::array_entry_t\u003cuint64_t\u003e;\n\n    /* Insert two values */\n    ae-\u003einsert_first_val(111);\n    ae-\u003einsert_next_value(999);\n\n    /* Moves the iterator from the first element to the second element. */\n    ae-\u003eget_first_val();\n    /* The iterator is now at the value 999 */\n\n    /* Construct a new array_entry_t using the one already created.\n     * Invokes the copy constructor.\n     */\n    auto ae2 = new epee::serialization::array_entry_t\u003cuint64_t\u003e(*ae);\n\n    /* Delete the first array_entry_t */\n    delete ae;\n\n    /* ae2.m_it now still points to the array of the first array_entry_t,\n     * but that array was deleted in the statement above, so dereferencing it\n     * will be a use after free.\n     *\n     * Let's try:\n     */\n\n    auto res = ae2-\u003eget_next_val();\n    if ( res != nullptr ) {\n        /* Dereferencing freed pointer (use after free) */\n        printf(\"%zu\\n\", *res);\n    }\n\n    delete ae2;\n\n    return 0;\n}\n```\n\nCompile (from the monero source root path):\n\n```\nclang++ -g -I contrib/epee/include/ poc.cpp -fsanitize=address\n```\n\nNote that the implicit copy constructor is in fact called when serialization is performed using ```epee::serialization::portable_storage::load_from_binary```.\nHowever, I haven't observed an actual use-after-free, hence 'low' severity for this report.\nIn my opinion it is nonetheless something that ought to be addressed because future code dealing with ```array_entry_t``` and its methods could inadvertently lead to use-after-free.\n\nPatch:\n```\nFrom da7c7fe3766777eadd058a4682de5527bc5f5904 Mon Sep 17 00:00:00 2001\nFrom: Guido Vranken \u003cguidovranken@gmail.com\u003e\nDate: Sun, 17 Mar 2019 17:39:37 +0100\nSubject: [PATCH] Implement array_entry_t copy constructor\n\nManually initialize the array_entry_t iterator to ensure it points\nto the correct m_array, thereby preventing a potential use-after-free\nsituation.\n\nSigned-off-by: Guido Vranken \u003cguidovranken@gmail.com\u003e\n---\n contrib/epee/include/storages/portable_storage_base.h | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/contrib/epee/include/storages/portable_storage_base.h b/contrib/epee/include/storages/portable_storage_base.h\nindex da84fd8e..ca7c81dd 100644\n--- a/contrib/epee/include/storages/portable_storage_base.h\n+++ b/contrib/epee/include/storages/portable_storage_base.h\n@@ -82,6 +82,7 @@ namespace epee\n     struct array_entry_t\n     {\n       array_entry_t():m_it(m_array.end()){}        \n+      array_entry_t(const array_entry_t\u0026 other):m_array(other.m_array), m_it(m_array.end()){}\n \n       const t_entry_type* get_first_val() const \n       {\n-- \n2.17.1\n\n\n```\n\n## Impact\n\nUse-after-free; information disclosure, RCE","vulnerability_information_html":"\u003cp\u003e\u003ccode\u003estruct array_entry_t\u003c/code\u003e in \u003ccode\u003econtrib/epee/include/storages/portable_storage_base.h\u003c/code\u003e does not implement a copy constructor.\u003c/p\u003e\n\n\u003cp\u003eWherever there is code that attempts to copy-construct \u003ccode\u003earray_entry_t\u003c/code\u003e, the compiler inserts a copy constructor for \u003ccode\u003earray_entry_t\u003c/code\u003e that merely copies over the values.\u003c/p\u003e\n\n\u003cp\u003eThe struct possesses an iterator (\u003ccode\u003emutable typename entry_container\u0026lt;t_entry_type\u0026gt;::type::const_iterator m_it\u003c/code\u003e) which is copied over by the implicit copy constructor (inserted ad-hoc by the compiler).\u003c/p\u003e\n\n\u003cp\u003eThis leads to a situation where \u003ccode\u003em_it\u003c/code\u003e points to a different \u003ccode\u003em_array_entry\u003c/code\u003e. If that \u003ccode\u003em_array_entry\u003c/code\u003e is deleted, then dereferencing \u003ccode\u003em_it\u003c/code\u003e constitutes a use-after-free bug.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight cpp\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;storages/portable_storage_base.h\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* Construct the first array_entry_t */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eae\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eepee\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eserialization\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray_entry_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Insert two values */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eae\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_first_val\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e111\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eae\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003einsert_next_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e999\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Moves the iterator from the first element to the second element. */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eae\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_first_val\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* The iterator is now at the value 999 */\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Construct a new array_entry_t using the one already created.\n     * Invokes the copy constructor.\n     */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eae2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eepee\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eserialization\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray_entry_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003euint64_t\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eae\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* Delete the first array_entry_t */\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eae\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"cm\"\u003e/* ae2.m_it now still points to the array of the first array_entry_t,\n     * but that array was deleted in the statement above, so dereferencing it\n     * will be a use after free.\n     *\n     * Let\u0026#39;s try:\n     */\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eae2\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eget_next_val\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eres\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003enullptr\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"cm\"\u003e/* Dereferencing freed pointer (use after free) */\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;%zu\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eres\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edelete\u003c/span\u003e \u003cspan class=\"n\"\u003eae2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCompile (from the monero source root path):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclang++ -g -I contrib/epee/include/ poc.cpp -fsanitize=address\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that the implicit copy constructor is in fact called when serialization is performed using \u003ccode\u003eepee::serialization::portable_storage::load_from_binary\u003c/code\u003e.\u003cbr\u003e\nHowever, I haven\u0026#39;t observed an actual use-after-free, hence \u0026#39;low\u0026#39; severity for this report.\u003cbr\u003e\nIn my opinion it is nonetheless something that ought to be addressed because future code dealing with \u003ccode\u003earray_entry_t\u003c/code\u003e and its methods could inadvertently lead to use-after-free.\u003c/p\u003e\n\n\u003cp\u003ePatch:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003eFrom da7c7fe3766777eadd058a4682de5527bc5f5904 Mon Sep 17 00:00:00 2001\nFrom: Guido Vranken \u0026lt;guidovranken@gmail.com\u0026gt;\nDate: Sun, 17 Mar 2019 17:39:37 +0100\nSubject: [PATCH] Implement array_entry_t copy constructor\n\u003c/span\u003e\nManually initialize the array_entry_t iterator to ensure it points\n\u003cspan class=\"p\"\u003eto the correct m_array, thereby preventing a potential use-after-free\nsituation.\n\u003c/span\u003e\nSigned-off-by: Guido Vranken \u0026lt;guidovranken@gmail.com\u0026gt;\n\u003cspan class=\"p\"\u003e---\n\u003c/span\u003e contrib/epee/include/storages/portable_storage_base.h | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/contrib/epee/include/storages/portable_storage_base.h b/contrib/epee/include/storages/portable_storage_base.h\n\u003cspan class=\"gh\"\u003eindex da84fd8e..ca7c81dd 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/contrib/epee/include/storages/portable_storage_base.h\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/contrib/epee/include/storages/portable_storage_base.h\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -82,6 +82,7 @@\u003c/span\u003e namespace epee\n     struct array_entry_t\n     {\n       array_entry_t():m_it(m_array.end()){}        \n\u003cspan class=\"gi\"\u003e+      array_entry_t(const array_entry_t\u0026amp; other):m_array(other.m_array), m_it(m_array.end()){}\n\u003c/span\u003e\n       const t_entry_type* get_first_val() const \n       {\n\u003cspan class=\"gd\"\u003e-- \n\u003c/span\u003e\u003cspan class=\"p\"\u003e2.17.1\n\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eUse-after-free; information disclosure, RCE\u003c/p\u003e\n","weakness":{"id":50,"name":"Use After Free"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-05-10T20:02:20.398Z","allow_singular_disclosure_after":-51703827.32223754,"singular_disclosure_allowed":true,"vote_count":9,"voters":["mygf","cryptographer","odvlv","t3kk1","xakerwan","masterward","aarohakkinen","coffeejunkie","javier_vel"],"severity":{"rating":"low","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4342509,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the patch. You can PR it to github if you like, or I'll do it if you'd rather not.","markdown_message":"\u003cp\u003eThanks for the patch. You can PR it to github if you like, or I\u0026#39;ll do it if you\u0026#39;d rather not.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-17T23:34:55.654Z","updated_at":"2019-03-17T23:34:55.654Z","actor":{"username":"moneromooo","cleared":false,"url":"/moneromooo","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4342510,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-17T23:35:32.312Z","updated_at":"2019-03-17T23:35:32.312Z","actor":{"username":"moneromooo","cleared":false,"url":"/moneromooo","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4342521,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"See https://github.com/monero-project/monero/pull/5309","markdown_message":"\u003cp\u003eSee \u003ca title=\"https://github.com/monero-project/monero/pull/5309\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmonero-project%2Fmonero%2Fpull%2F5309\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/monero-project/monero/pull/5309\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-17T23:51:40.546Z","updated_at":"2019-03-17T23:51:40.546Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4352290,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks","markdown_message":"\u003cp\u003eThanks\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-19T11:25:25.398Z","updated_at":"2019-03-19T11:25:25.398Z","actor":{"username":"moneromooo","cleared":false,"url":"/moneromooo","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4369818,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@guido please post an XMR address if you'd like bounty.","markdown_message":"\u003cp\u003e\u003ca href=\"/guido\"\u003e@guido\u003c/a\u003e please post an XMR address if you\u0026#39;d like bounty.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-21T22:48:47.826Z","updated_at":"2019-03-21T22:48:47.826Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4369822,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"48XB817vPzmEhwEGvw5zcLSnT1aRMBbN1jQUnUXMLpoyJE7jgXpdPsUNYgXg3ddcKbA2u3wpGqmHhT3DbTZCMjmV6vSY3bt","markdown_message":"\u003cp\u003e48XB817vPzmEhwEGvw5zcLSnT1aRMBbN1jQUnUXMLpoyJE7jgXpdPsUNYgXg3ddcKbA2u3wpGqmHhT3DbTZCMjmV6vSY3bt\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-21T22:50:54.578Z","updated_at":"2019-03-21T22:50:54.578Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4532409,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sent 2 XMR: dce9f50e04a511c0a686ff7c39a04f75959a93bd9b96fc35ef4548190de17706","markdown_message":"\u003cp\u003eSent 2 XMR: dce9f50e04a511c0a686ff7c39a04f75959a93bd9b96fc35ef4548190de17706\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-10T19:05:20.782Z","updated_at":"2019-04-10T19:05:20.782Z","actor":{"username":"luigi1111w","cleared":false,"url":"/luigi1111w","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4532412,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!","markdown_message":"\u003cp\u003eThanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-10T19:06:36.104Z","updated_at":"2019-04-10T19:06:36.104Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4532676,"is_internal":false,"editable":false,"type":"Activities::SwagAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-10T20:01:00.250Z","updated_at":"2019-04-10T20:01:00.250Z","actor":{"url":"/monero","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Monero"}},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4532680,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-10T20:01:28.605Z","updated_at":"2019-04-10T20:01:28.605Z","actor":{"username":"anonimal","cleared":false,"url":"/anonimal","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/040/857/f23cc3be09a21e17bc43975987c10ba2b6427239_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4532686,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-10T20:02:20.371Z","updated_at":"2019-04-10T20:02:20.371Z","first_to_agree":true,"actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4812150,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-10T20:02:23.777Z","updated_at":"2019-05-10T20:02:23.777Z","actor":{"url":"/monero","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/731/55634f7fcd917725c7a5771cc6e7c9b4d5fe0c22_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Monero"}},"genius_execution_id":null,"team_handle":"monero","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}