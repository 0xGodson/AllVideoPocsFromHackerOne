{"id":164821,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjQ4MjE=","url":"https://hackerone.com/reports/164821","title":"OX Guard: DOM Based Cross-Site Scripting (#2)","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2016-08-31T19:08:42.136Z","submitted_at":"2016-08-31T19:08:42.136Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dejavuln","url":"/dejavuln","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/045/064/2158310e1f704a15f20abf07331e73795f2e8153_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":8906,"url":"https://hackerone.com/open-xchange","handle":"open-xchange","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Open-Xchange","twitter_handle":"openxchange","website":"https://www.open-xchange.com/","about":"Messaging, collaboration and office productivity software for service providers"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-12-19T20:09:13.712Z","bug_reporter_agreed_on_going_public_at":"2017-11-19T20:09:11.749Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary\n\nOX Guard's \"Guest Reader\" is vulnerable to DOM Based XSS. \n\nWhile this report is closely related to #158853, it is not a duplicate. I've had a look at the code introduced by commit 7fdbd307662f0041ed5e45b2f73c6530b79c6124, which I believe was supposed to protect against #158853. Today's report describes how to bypass this protection in order to exploit the original vulnerability with identical ease and impact.\n\nThe vulnerable parameter is still \"templid\". The reader.js script (see below) takes the parameter's value and injects it into the page/DOM without encoding or properly sanitizing it first.  \n\n## PoC:\n```\nhttps://sandbox.open-xchange.com/guard/reader/reader.html?templid=1%27%22%3E%3Cscript%3Ealert%28%27XSS%20@%20%27%2bdocument.domain%29%3C%2fscript%3E\n```\n{F116282}\n\n## Vulnerable script/code:\n\n```\ntemplid = getURLParameter(\"templid\");\nif (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n}\nif (templid !== null) {\n    $('head').append('\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"./templates/' + templid + '-style.css\"\u003e');\n}\n```\n\n## Details\n\nQuick comparison with the previous code:\n\n```\n$ git diff b67aed12e6184cd06e24253154eab83925ff1fc7 7fdbd307662f0041ed5e45b2f73c6530b79c6124\n\n[...]\n-if (templid == null) {   // If no template ID, see if we have a default from config.js\n+if (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n```\n\n`isNaN(parseInt(templid))` was apparently added to check whether the `templid` variable contains a number, and nothing else. Expected behavior seems to be that only a \"clean\" number can be parsed by `parseInt()`, which would otherwise return `NaN`, causing `isNaN()` to return `true`, leading `templid` to be overwritten with a safe value inside the If statement. \n\nThe problem with this approach is that `parseInt()` does not simply attempt to convert the entire supplied parameter to an integer. Instead, as the name suggests, `parseInt()` tries to **parse** the parameter. Quote from [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt):\n\n\u003e **_Return value_**\n\u003e An integer number parsed from the given string. If the **first** character cannot be converted to a number, NaN is returned.\n\nConsequently, any HTML/JS code preceded by a number will pass the `isNaN(parseInt(templid))` check.\n\nExamples:\n\n```\n\u003e parseInt(\"Hello\");\nNaN\n\n\u003e parseInt(\"4ello\");\n4\n\n\u003e isNaN(parseInt(\"Hello\"));\ntrue\n\n\u003e isNaN(parseInt(\"4ello\"));\nfalse\n```\n","vulnerability_information_html":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eOX Guard\u0026#39;s \u0026quot;Guest Reader\u0026quot; is vulnerable to DOM Based XSS. \u003c/p\u003e\n\n\u003cp\u003eWhile this report is closely related to \u003ca href=\"/reports/158853\"\u003e#158853\u003c/a\u003e, it is not a duplicate. I\u0026#39;ve had a look at the code introduced by commit 7fdbd307662f0041ed5e45b2f73c6530b79c6124, which I believe was supposed to protect against \u003ca href=\"/reports/158853\"\u003e#158853\u003c/a\u003e. Today\u0026#39;s report describes how to bypass this protection in order to exploit the original vulnerability with identical ease and impact.\u003c/p\u003e\n\n\u003cp\u003eThe vulnerable parameter is still \u0026quot;templid\u0026quot;. The reader.js script (see below) takes the parameter\u0026#39;s value and injects it into the page/DOM without encoding or properly sanitizing it first.  \u003c/p\u003e\n\n\u003ch2 id=\"poc\"\u003ePoC:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ehttps://sandbox.open-xchange.com/guard/reader/reader.html?templid=1%27%22%3E%3Cscript%3Ealert%28%27XSS%20@%20%27%2bdocument.domain%29%3C%2fscript%3E\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"xss.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?response-content-disposition=attachment%3B%20filename%3D%22xss.png%22%3B%20filename%2A%3DUTF-8%27%27xss.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ2CQCXB7P%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043836Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCKfc9uxh22FGIBSKNqNzEdwAGilNzlyCJlRQkk6L7ywwIgTF9zV46T%2F8NjN%2BIYnxBP9uKa%2FXVMex8eb6F8QfoW3wEqtAMIURABGgwwMTM2MTkyNzQ4NDkiDJ5ZNSNolCYK8UaqCyqRAzNhE%2Fm3zPdEHRm5WUEnZo0COkaeE9dAwJeLRl1TZ11d43Lhd%2FMikAINQoGyi4r4ILldIaNgVmSsjmb0fcorizPel9Yzwr4cFLsZOlxR5w1wIcH9%2B%2FXSVM%2FPyc6y3YiLMP%2BnfwLJ7AL67U%2BsYNgwrwRQCUMORslIWy4Bee0CRE37pQRcD%2BpnBGoZEqEgw%2FHEeFzSipLRBmOXQXxK8U%2FyZbCwKI3Y7jZdrKPqHfhEodvEeD0Wwknnt5JRb8OwCuT7%2BjnXPx7Ftl6fh7ZHEZSimVCNgNXHtQ7MayTMvGyEcE%2FGEdWIy%2BvUTFD59Sbk%2B4fSP5XGoClsVLqX8UQRsOAbpYFv8pGdRWsta2NjZfh4swj28Z1ENJENNBr0wiLwpBy4s4wlkmS86icFZ53iBsI3EOJmZJ5DZ5redWS7l%2BgYoOpzpgENRZcaEYNEAzZuOnjhHMp0RSoAnDuPybSiBCQrW8JftW%2Buq0QzjkbBqzj7nPJ0%2FbXQQzRl4pJZycpxagVMpzjAmvRed9%2BHfODrR1Wa1B9bMPDlqf8FOusBVFGMNirRKMu5AkI7qGagYnYSG4HpDqpKcH5QuM0jUoRkB5r%2BZWkCPAsBHe6t6p0Cfzk0IF3j5b1WbHsN2UHZ8rtF%2BtQ%2F7OawY4eFB8qp9BuOlUA1okg7%2BXvgui2gDL6mFoU2mzqz8v%2BmiFTIaBj8QjYyPX%2Ft4bj%2FyE7%2BzfsRuoeKoPtREJbjscDMF4yK366F0eCTIiw1cnRHt2i638RsSrY3MoN%2BD241aZxfV0getVCLrP4EjZE1CMOAzzhsZEa%2B%2BPrZg0WXd5TN40IoVxY7vjGdJo5rtxp6xBPK%2FbNPk5gPBu93zpBV2vOdiQ%3D%3D\u0026amp;X-Amz-Signature=a4425e196412f8e9cec1c390f868961e81f03163d5025f13d28cc835bf746885\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?response-content-disposition=attachment%3B%20filename%3D%22xss.png%22%3B%20filename%2A%3DUTF-8%27%27xss.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ2CQCXB7P%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T043836Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCKfc9uxh22FGIBSKNqNzEdwAGilNzlyCJlRQkk6L7ywwIgTF9zV46T%2F8NjN%2BIYnxBP9uKa%2FXVMex8eb6F8QfoW3wEqtAMIURABGgwwMTM2MTkyNzQ4NDkiDJ5ZNSNolCYK8UaqCyqRAzNhE%2Fm3zPdEHRm5WUEnZo0COkaeE9dAwJeLRl1TZ11d43Lhd%2FMikAINQoGyi4r4ILldIaNgVmSsjmb0fcorizPel9Yzwr4cFLsZOlxR5w1wIcH9%2B%2FXSVM%2FPyc6y3YiLMP%2BnfwLJ7AL67U%2BsYNgwrwRQCUMORslIWy4Bee0CRE37pQRcD%2BpnBGoZEqEgw%2FHEeFzSipLRBmOXQXxK8U%2FyZbCwKI3Y7jZdrKPqHfhEodvEeD0Wwknnt5JRb8OwCuT7%2BjnXPx7Ftl6fh7ZHEZSimVCNgNXHtQ7MayTMvGyEcE%2FGEdWIy%2BvUTFD59Sbk%2B4fSP5XGoClsVLqX8UQRsOAbpYFv8pGdRWsta2NjZfh4swj28Z1ENJENNBr0wiLwpBy4s4wlkmS86icFZ53iBsI3EOJmZJ5DZ5redWS7l%2BgYoOpzpgENRZcaEYNEAzZuOnjhHMp0RSoAnDuPybSiBCQrW8JftW%2Buq0QzjkbBqzj7nPJ0%2FbXQQzRl4pJZycpxagVMpzjAmvRed9%2BHfODrR1Wa1B9bMPDlqf8FOusBVFGMNirRKMu5AkI7qGagYnYSG4HpDqpKcH5QuM0jUoRkB5r%2BZWkCPAsBHe6t6p0Cfzk0IF3j5b1WbHsN2UHZ8rtF%2BtQ%2F7OawY4eFB8qp9BuOlUA1okg7%2BXvgui2gDL6mFoU2mzqz8v%2BmiFTIaBj8QjYyPX%2Ft4bj%2FyE7%2BzfsRuoeKoPtREJbjscDMF4yK366F0eCTIiw1cnRHt2i638RsSrY3MoN%2BD241aZxfV0getVCLrP4EjZE1CMOAzzhsZEa%2B%2BPrZg0WXd5TN40IoVxY7vjGdJo5rtxp6xBPK%2FbNPk5gPBu93zpBV2vOdiQ%3D%3D\u0026amp;X-Amz-Signature=a4425e196412f8e9cec1c390f868961e81f03163d5025f13d28cc835bf746885\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"vulnerable-script-code\"\u003eVulnerable script/code:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003etemplid = getURLParameter(\u0026quot;templid\u0026quot;);\nif (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n}\nif (templid !== null) {\n    $(\u0026#39;head\u0026#39;).append(\u0026#39;\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;./templates/\u0026#39; + templid + \u0026#39;-style.css\u0026quot;\u0026gt;\u0026#39;);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"details\"\u003eDetails\u003c/h2\u003e\n\n\u003cp\u003eQuick comparison with the previous code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ git diff b67aed12e6184cd06e24253154eab83925ff1fc7 7fdbd307662f0041ed5e45b2f73c6530b79c6124\n\n[...]\n-if (templid == null) {   // If no template ID, see if we have a default from config.js\n+if (templid == null || isNaN(parseInt(templid))) {   // If no clean template ID, see if we have a default from config.js\n[...]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003eisNaN(parseInt(templid))\u003c/code\u003e was apparently added to check whether the \u003ccode\u003etemplid\u003c/code\u003e variable contains a number, and nothing else. Expected behavior seems to be that only a \u0026quot;clean\u0026quot; number can be parsed by \u003ccode\u003eparseInt()\u003c/code\u003e, which would otherwise return \u003ccode\u003eNaN\u003c/code\u003e, causing \u003ccode\u003eisNaN()\u003c/code\u003e to return \u003ccode\u003etrue\u003c/code\u003e, leading \u003ccode\u003etemplid\u003c/code\u003e to be overwritten with a safe value inside the If statement. \u003c/p\u003e\n\n\u003cp\u003eThe problem with this approach is that \u003ccode\u003eparseInt()\u003c/code\u003e does not simply attempt to convert the entire supplied parameter to an integer. Instead, as the name suggests, \u003ccode\u003eparseInt()\u003c/code\u003e tries to \u003cstrong\u003eparse\u003c/strong\u003e the parameter. Quote from \u003ca href=\"/redirect?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FparseInt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cu\u003eReturn value\u003c/u\u003e\u003c/strong\u003e\u003cbr\u003e\nAn integer number parsed from the given string. If the \u003cstrong\u003efirst\u003c/strong\u003e character cannot be converted to a number, NaN is returned.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eConsequently, any HTML/JS code preceded by a number will pass the \u003ccode\u003eisNaN(parseInt(templid))\u003c/code\u003e check.\u003c/p\u003e\n\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026gt; parseInt(\u0026quot;Hello\u0026quot;);\nNaN\n\n\u0026gt; parseInt(\u0026quot;4ello\u0026quot;);\n4\n\n\u0026gt; isNaN(parseInt(\u0026quot;Hello\u0026quot;));\ntrue\n\n\u0026gt; isNaN(parseInt(\u0026quot;4ello\u0026quot;));\nfalse\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":116282,"file_name":"xss.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/116/282/cf93d6b101f8bb9fdbe7d209436be43f292c26e6/xss.png?response-content-disposition=attachment%3B%20filename%3D%22xss.png%22%3B%20filename%2A%3DUTF-8%27%27xss.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2CQCXB7P%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T043836Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIQCKfc9uxh22FGIBSKNqNzEdwAGilNzlyCJlRQkk6L7ywwIgTF9zV46T%2F8NjN%2BIYnxBP9uKa%2FXVMex8eb6F8QfoW3wEqtAMIURABGgwwMTM2MTkyNzQ4NDkiDJ5ZNSNolCYK8UaqCyqRAzNhE%2Fm3zPdEHRm5WUEnZo0COkaeE9dAwJeLRl1TZ11d43Lhd%2FMikAINQoGyi4r4ILldIaNgVmSsjmb0fcorizPel9Yzwr4cFLsZOlxR5w1wIcH9%2B%2FXSVM%2FPyc6y3YiLMP%2BnfwLJ7AL67U%2BsYNgwrwRQCUMORslIWy4Bee0CRE37pQRcD%2BpnBGoZEqEgw%2FHEeFzSipLRBmOXQXxK8U%2FyZbCwKI3Y7jZdrKPqHfhEodvEeD0Wwknnt5JRb8OwCuT7%2BjnXPx7Ftl6fh7ZHEZSimVCNgNXHtQ7MayTMvGyEcE%2FGEdWIy%2BvUTFD59Sbk%2B4fSP5XGoClsVLqX8UQRsOAbpYFv8pGdRWsta2NjZfh4swj28Z1ENJENNBr0wiLwpBy4s4wlkmS86icFZ53iBsI3EOJmZJ5DZ5redWS7l%2BgYoOpzpgENRZcaEYNEAzZuOnjhHMp0RSoAnDuPybSiBCQrW8JftW%2Buq0QzjkbBqzj7nPJ0%2FbXQQzRl4pJZycpxagVMpzjAmvRed9%2BHfODrR1Wa1B9bMPDlqf8FOusBVFGMNirRKMu5AkI7qGagYnYSG4HpDqpKcH5QuM0jUoRkB5r%2BZWkCPAsBHe6t6p0Cfzk0IF3j5b1WbHsN2UHZ8rtF%2BtQ%2F7OawY4eFB8qp9BuOlUA1okg7%2BXvgui2gDL6mFoU2mzqz8v%2BmiFTIaBj8QjYyPX%2Ft4bj%2FyE7%2BzfsRuoeKoPtREJbjscDMF4yK366F0eCTIiw1cnRHt2i638RsSrY3MoN%2BD241aZxfV0getVCLrP4EjZE1CMOAzzhsZEa%2B%2BPrZg0WXd5TN40IoVxY7vjGdJo5rtxp6xBPK%2FbNPk5gPBu93zpBV2vOdiQ%3D%3D\u0026X-Amz-Signature=a4425e196412f8e9cec1c390f868961e81f03163d5025f13d28cc835bf746885","file_size":35372,"type":"image/png"}],"allow_singular_disclosure_at":"2017-12-19T20:09:11.833Z","allow_singular_disclosure_after":-95502564.4512532,"singular_disclosure_allowed":true,"vote_count":12,"voters":["sp1d3rs","bugdiscloseguys","eveeez","1337ibrahim","cr4xerbik4sh","bigbug","sumit7","666reda","spetr0x","a1905813079","and 2 more..."],"severity":{"rating":"medium","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1173678,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thanks for the report, we're looking into it.","markdown_message":"\u003cp\u003eThanks for the report, we\u0026#39;re looking into it.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-05T09:12:12.426Z","updated_at":"2016-09-05T09:12:12.426Z","actor":{"username":"mheiland","cleared":false,"url":"/mheiland","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/425JKsXEnCYsDU1VA48SXXZV/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1214817,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-25T12:26:31.281Z","updated_at":"2016-09-25T12:26:31.281Z","actor":{"username":"mheiland","cleared":false,"url":"/mheiland","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/425JKsXEnCYsDU1VA48SXXZV/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dejavuln","url":"/dejavuln"},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1215682,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-26T08:27:47.258Z","updated_at":"2016-09-26T08:27:47.258Z","actor":{"url":"/open-xchange","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Open-Xchange"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"open-xchange","collaborator":{"username":"dejavuln","url":"/dejavuln"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2168842,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-19T20:09:11.783Z","updated_at":"2017-11-19T20:09:11.783Z","first_to_agree":true,"actor":{"username":"dejavuln","cleared":false,"url":"/dejavuln","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/045/064/2158310e1f704a15f20abf07331e73795f2e8153_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2236071,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-12-19T20:09:13.753Z","updated_at":"2017-12-19T20:09:13.753Z","actor":{"url":"/open-xchange","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Open-Xchange"}},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4916982,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-24T12:18:01.482Z","updated_at":"2019-05-24T12:18:01.482Z","additional_data":{"old_severity":null,"new_severity":"Medium","old_severity_id":null,"new_severity_id":401086},"actor":{"username":"mheiland","cleared":false,"url":"/mheiland","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/425JKsXEnCYsDU1VA48SXXZV/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}