{"id":409850,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MDk4NTA=","url":"https://hackerone.com/reports/409850","title":"XSS in steam react chat client","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2018-09-14T17:20:41.901Z","submitted_at":"2018-09-14T17:20:41.901Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"zemnmez","url":"/zemnmez","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/005/901/3bc595305f55caeb2f1b1b1b5bc1f5c82a20dca6_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23363,"url":"https://hackerone.com/valve","handle":"valve","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Valve","twitter_handle":"","website":"https://www.valvesoftware.com","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-01-07T20:00:19.267Z","bug_reporter_agreed_on_going_public_at":"2019-01-03T14:42:24.766Z","team_member_agreed_on_going_public_at":"2019-01-07T20:00:19.172Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The Steam chat client both sends and receives bbcode format chat messages. These map to HTML elements, and notably the [url] bbcode tag is supported for arbitrary URLs. React has strong XSS mitigations but does not mitigate `javascript:` URI based XSS.\n\nThis is rather difficult to exploit as the client transmits sanitised messages and receives over a binary WebSocket. I've attached a video of executing this XSS, which is persistent.\n\n## Impact\n\nI strongly believe an attacker could get remote code execution in Steam via this method. The Steam chat client uses the same codebase as the steam web chat client, and, I imagine does so using electron or some other webview system. These systems all expose functions which allow arbitrary calls to system to allow them to be competitive with e.g. windows forms.","vulnerability_information_html":"\u003cp\u003eThe Steam chat client both sends and receives bbcode format chat messages. These map to HTML elements, and notably the [url] bbcode tag is supported for arbitrary URLs. React has strong XSS mitigations but does not mitigate \u003ccode\u003ejavascript:\u003c/code\u003e URI based XSS.\u003c/p\u003e\n\n\u003cp\u003eThis is rather difficult to exploit as the client transmits sanitised messages and receives over a binary WebSocket. I\u0026#39;ve attached a video of executing this XSS, which is persistent.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eI strongly believe an attacker could get remote code execution in Steam via this method. The Steam chat client uses the same codebase as the steam web chat client, and, I imagine does so using electron or some other webview system. These systems all expose functions which allow arbitrary calls to system to allow them to be competitive with e.g. windows forms.\u003c/p\u003e\n","bounty_amount":"7500.0","formatted_bounty":"$7,500","weakness":{"id":62,"name":"Cross-site Scripting (XSS) - Stored"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":346331,"file_name":"steam-xss-1-render.mp4","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/346/331/1014b78fc2fc9ba4bc9498c65d6029f123f99c97/steam-xss-1-render.mp4?response-content-disposition=attachment%3B%20filename%3D%22steam-xss-1-render.mp4%22%3B%20filename%2A%3DUTF-8%27%27steam-xss-1-render.mp4\u0026response-content-type=video%2Fmp4\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRVDVIAIN%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055254Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCIE32Mqh2tZr%2BOU5TpCkMAcCIP7cUR4Cmx6knF0aE1pAIhANosl%2BxHV6Q%2F51LP%2Fec3HeAsrkcv3Oonagtggk2l2fcHKrQDCFYQARoMMDEzNjE5Mjc0ODQ5IgyvivkNb%2F%2FihtanvJsqkQOxVl0vet745bZV8lQI5KYtwTWpcIFAsML7JxymD3vn9i8QCWhlYeT2MW%2B9baTQMb%2BdveMhrdwbKcBh3ip%2ByweQnVl9ueQzetzoXpB5k2WZrDCF3m0PA%2BCv6ox3XmJRewIkURiq4Ztl%2BHyUPdAtuOYZDYkHGUB8OqZgDmy0YoWLDqNPzGZK7dX7v62QUuo2TiCO%2BWHnWiVN2sIAHkLQ1c0cRYR2hre0%2FHfkXdHak9EM%2FJlTAH%2BQnt3DZGo6v788Hni0I1X%2F70QyGnfzTEgA8%2Fvb6vKESyULs14SrfKtlo9En1u2T1%2B79JNxVdhJNX%2BfERg06V3dMkcO%2BhECVPAWHzRrJ3bTOIIfgttUE3yW5ViJmecveb28ezf1szEuiXvW%2BZQUdTtFctgvSq22L57hu2QitzJ%2F7EFXuPPyfSKn70goiFML2nsYjayzP2jOzI85Wf0PZwwCg%2BTr7Ldre4VPxLs2y%2BAhqKPahi9iLDrk5IVFZPWBWrmRjgRlhjIP7aYZzYQEoqoD%2F3susXDMHlsiMv8yoDDN6ar%2FBTrqAdSZzhKXhWU9aDM9pF9urQto0LgyoOSxshu8McAhBrfa%2FReNxxcISybiMxPssa8oRShR7XUSBWuVRE7CnX5MQKY6UeaUB8HDokdym3sz7IA0tuq64XmfywVqSVqOZTRnXaNG%2BObO1m4FlOQ%2FC4n%2Fbe50N8rAEPnkWd81lyuaeMezjo4O%2BlEpCZ%2ByBXnfl88Bjx8KUaMIVJ5VHQ8J6PBiG%2FjOWow2rty2SDO%2BTqlQJxjPwbenYT7WUyEPOBmi%2FZgSy9qD6EP%2B5GMYGk0q2R6LmuTGm6QPTGNHaZ%2BHqK3PMyvOo0eC1hMcq6KJ8g%3D%3D\u0026X-Amz-Signature=6eee338c5b7d4541bf8290db145b391d6f914d9375e31528343ea41a0d4b2f12","file_size":18681414,"type":"video/mp4"}],"allow_singular_disclosure_at":null,"vote_count":442,"voters":["ikuamike","san1t1z3r","xmppwocky","kiyell","njbooher","ermilov","cookiem0nster","nekz","arif_y","demon1c","and 432 more..."],"severity":{"rating":"critical","score":9.3,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"required","scope":"changed","confidentiality":"high","integrity":"high","availability":"none"}},"structured_scope":{"databaseId":2430,"asset_type":"URL","asset_identifier":"steamcommunity.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3340215,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @zemnmez \n\nThanks for your submission. We are currently reviewing your report and will get back to you once we have additional information to share.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/zemnmez\"\u003e@zemnmez\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThanks for your submission. We are currently reviewing your report and will get back to you once we have additional information to share.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-15T00:29:03.708Z","updated_at":"2018-09-15T00:29:03.708Z","actor":{"username":"spacecore","cleared":false,"url":"/spacecore","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HEZj9dxuvXmEYBRfi6xzVDpD/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3341727,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"OK. so there's a trivial way to reach RCE using this bug. From my tests, because the Steam Chat Client is run inside the Steam CEF context, any steam:// commands it issues (through uri syntax) are immediately evaluated and trusted (whereas if they're issued from a browser there's a confirmation window) as though they were issued from e.g. the game listing inside the steam client.\n\nYou can issue, therefore steam://run/[GAMEID] and it will run any installed game, without confirmation, and with command line parameters","markdown_message":"\u003cp\u003eOK. so there\u0026#39;s a trivial way to reach RCE using this bug. From my tests, because the Steam Chat Client is run inside the Steam CEF context, any steam:// commands it issues (through uri syntax) are immediately evaluated and trusted (whereas if they\u0026#39;re issued from a browser there\u0026#39;s a confirmation window) as though they were issued from e.g. the game listing inside the steam client.\u003c/p\u003e\n\n\u003cp\u003eYou can issue, therefore steam://run/[GAMEID] and it will run any installed game, without confirmation, and with command line parameters\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-15T15:41:36.877Z","updated_at":"2018-09-15T15:41:36.877Z","actor":{"username":"zemnmez","cleared":false,"url":"/zemnmez","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/005/901/3bc595305f55caeb2f1b1b1b5bc1f5c82a20dca6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3349939,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the additional details â€” we will consider the additional impact of `steam://` URLs when determining final report severity. However, I do want to note that launching an installed app isn't enough to qualify as generalized RCE unless you can demonstrate a way to use that functionality to run arbitrary code.\n\nThanks again for your report. We should have more information soon.","markdown_message":"\u003cp\u003eThanks for the additional details â€” we will consider the additional impact of \u003ccode\u003esteam://\u003c/code\u003e URLs when determining final report severity. However, I do want to note that launching an installed app isn\u0026#39;t enough to qualify as generalized RCE unless you can demonstrate a way to use that functionality to run arbitrary code.\u003c/p\u003e\n\n\u003cp\u003eThanks again for your report. We should have more information soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-17T17:13:07.507Z","updated_at":"2018-09-17T17:13:07.507Z","actor":{"username":"spacecore","cleared":false,"url":"/spacecore","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HEZj9dxuvXmEYBRfi6xzVDpD/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3351617,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe you can use the XSS to accept a game invite via ackguestpass, use `remoteactions` to remotely install it, then issue a `steam://` url to run it","markdown_message":"\u003cp\u003eI believe you can use the XSS to accept a game invite via ackguestpass, use \u003ccode\u003eremoteactions\u003c/code\u003e to remotely install it, then issue a \u003ccode\u003esteam://\u003c/code\u003e url to run it\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-18T01:39:33.956Z","updated_at":"2018-09-18T01:39:58.113Z","actor":{"username":"zemnmez","cleared":false,"url":"/zemnmez","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/005/901/3bc595305f55caeb2f1b1b1b5bc1f5c82a20dca6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3375823,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"as per my research in https://hackerone.com/reports/411329#activity-3375819 you can use the openexternalforpid protocol i.e. `steam://openexternalforpid/10400/file:///C:/Windows/cmd.exe` to remotely initiate process calls on the victim's PC. I can provide another PoC video of this if needed, but the TL;DR is you can use the previously mentioned bug to send `[url=steam://openexternalforpid/10400/file:///C:/Windows/cmd.exe]click me[/url]` and you win :)","markdown_message":"\u003cp\u003eas per my research in \u003ca title=\"https://hackerone.com/reports/411329#activity-3375819\" href=\"https://hackerone.com/reports/411329#activity-3375819\"\u003ehttps://hackerone.com/reports/411329#activity-3375819\u003c/a\u003e you can use the openexternalforpid protocol i.e. \u003ccode\u003esteam://openexternalforpid/10400/file:///C:/Windows/cmd.exe\u003c/code\u003e to remotely initiate process calls on the victim\u0026#39;s PC. I can provide another PoC video of this if needed, but the TL;DR is you can use the previously mentioned bug to send \u003ccode\u003e[url=steam://openexternalforpid/10400/file:///C:/Windows/cmd.exe]click me[/url]\u003c/code\u003e and you win :)\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-23T12:47:26.555Z","updated_at":"2018-09-23T12:47:26.555Z","actor":{"username":"zemnmez","cleared":false,"url":"/zemnmez","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/005/901/3bc595305f55caeb2f1b1b1b5bc1f5c82a20dca6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3417148,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-01T23:19:16.062Z","updated_at":"2018-10-01T23:19:16.062Z","additional_data":{"old_severity":"Critical","new_severity":"Critical (9.6)","old_severity_id":210191,"new_severity_id":217921},"actor":{"username":"afarnsworth","cleared":false,"url":"/afarnsworth","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417163,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We have removed the ability to send [url] tags for anything but http links, however we are still working on a fix for steam://openexternalforpid in general to prevent that to be abused.","markdown_message":"\u003cp\u003eWe have removed the ability to send [url] tags for anything but http links, however we are still working on a fix for steam://openexternalforpid in general to prevent that to be abused.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-01T23:22:16.733Z","updated_at":"2018-10-01T23:22:16.733Z","actor":{"username":"afarnsworth","cleared":false,"url":"/afarnsworth","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417315,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-02T00:11:40.326Z","updated_at":"2018-10-02T00:11:40.326Z","additional_data":{"old_severity":"Critical (9.6)","new_severity":"Medium (6.3)","old_severity_id":217921,"new_severity_id":217954},"actor":{"username":"jonp","cleared":false,"url":"/jonp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/203/578/6de63d2fdd8c70309cf4326359d3e816a7633b5c_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417316,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-02T00:12:44.442Z","updated_at":"2018-10-02T00:12:44.442Z","additional_data":{"old_severity":"Medium (6.3)","new_severity":"High (7.6)","old_severity_id":217954,"new_severity_id":217955},"actor":{"username":"jonp","cleared":false,"url":"/jonp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/203/578/6de63d2fdd8c70309cf4326359d3e816a7633b5c_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3417348,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-02T00:22:33.995Z","updated_at":"2018-10-02T00:22:33.995Z","additional_data":{"old_severity":"High (7.6)","new_severity":"Critical (9.3)","old_severity_id":217955,"new_severity_id":217960},"actor":{"username":"afarnsworth","cleared":false,"url":"/afarnsworth","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3442223,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks for the report! We have deployed a fix to the Steam Client Beta. Please let us know if you are still able to reproduce the issue.","markdown_message":"\u003cp\u003eThanks for the report! We have deployed a fix to the Steam Client Beta. Please let us know if you are still able to reproduce the issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-06T00:40:42.040Z","updated_at":"2018-10-06T00:40:42.040Z","actor":{"username":"jonp","cleared":false,"url":"/jonp","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/203/578/6de63d2fdd8c70309cf4326359d3e816a7633b5c_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"zemnmez","url":"/zemnmez"},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3442224,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-06T00:40:53.554Z","updated_at":"2018-10-06T00:40:53.554Z","actor":{"url":"/valve","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/023/363/c78d46a7d0ea39e3a15a7c19c1a48634f2571eb9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Valve"}},"bounty_amount":"7500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"valve","collaborator":{"username":"zemnmez","url":"/zemnmez"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3920043,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-03T14:42:24.794Z","updated_at":"2019-01-03T14:42:24.794Z","first_to_agree":true,"actor":{"username":"zemnmez","cleared":false,"url":"/zemnmez","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/005/901/3bc595305f55caeb2f1b1b1b5bc1f5c82a20dca6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3938309,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-07T20:00:19.215Z","updated_at":"2019-01-07T20:00:19.215Z","actor":{"username":"spacecore","cleared":false,"url":"/spacecore","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HEZj9dxuvXmEYBRfi6xzVDpD/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3938310,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-07T20:00:19.299Z","updated_at":"2019-01-07T20:00:19.299Z","actor":{"username":"spacecore","cleared":false,"url":"/spacecore","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HEZj9dxuvXmEYBRfi6xzVDpD/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"valve","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":13195,"category":"researcher","content":"\n# 1. Background\nThe Steam Chat client is a particularly interesting system to attack because it's built using a modern set of technologies with strong security characteristics.\n\nIt's built on React, which has some of the strongest security characteristics of any modern Javascript application framework, and avoids use of the unsafe `dangerously` family of functions well.\n\nContent Security Policy is deployed, although with `unsafe-inline`. This is a minor inconvenience but an interesting step forward.\n\nThe Chat client, unlike most desktop applications using web technologies runs in a custom, highly locked down build of Chrome Embedded Framework. In most Electron-like systems, privileged access is granted to the Javascript VM via the `window` object. The chat client takes the interesting and potentially much more secure approach of running at, in essence the privilege of a regular webpage allowing privileged actions only through PostMessage and a loopback WebSocket that communicates with the parent process.\n\nThe WebSocket carries a custom binary protocol that is very difficult to dissect over the wire and it's leveraged such that through some common bug I have yet to find root cause on Chrome Dev Tools crashes if breakpoints fire as the page loads (I think it's some kind of race that happens when WebWorkers are active and the Javascript assets are heavy).\n\nThe trend toward DOM heavy applications is interesting to me, as many in the security industry still rely heavily on HTTP proxies that aren't able to accurately reflect application state in these cases.\n\n# 2. Techniques\n\n## 2a. React Security Gotchas\n\nSince the Steam Chat client is built on React, there's far fewer ways XSS is possible. There are a few ways I look for particularly:\n\n- React does not special-case encode the attributes of any tags. Attributes with DOM manipulation properties are dangerous.\n\n    It's very common to see `\u003ca href\u003e` attributes generated from user input where `javascript:` input URIs, when clicked will result in XSS. Hand-rolled countermeasures to `javascript:` URIs are still poor, and often employ URL parsers that are not intended to be used defensively.\n\n    It's not uncommon to see `style` tags generated by string concatenation that include user input where an image, for example as a background URL can be injected to IP address information and tokens from the URL via Referer header. CSS sanitization isn't really a thing, even in the best contextually-aware XSS libraries. CSS-based attacks on the DOM that use `selector[value=string]` or that define fonts that make HTTP requests for each character to conditionally load resources and exfiltrate data are almost entirely unknown outside infosec circles.\n\n- React doesn't attempt to provide hardened versions of other unsafe Javacript functionality, or disable them. It's common to see React applications use `document.location = xxx` to change the location of the browser which is also vulnerable to Javascript URI injection.\n\n    In the same vein, requests to HTTP APIs don't gain enhanced security from React. It's still common to request data using user input spliced into a URL that's not encoded properly. React developers love to use fancy REST syntax to generate request paths like `\"/user/\" + encodeURIComponent(username) + \"profile\"`, even though to my knowledge there's no safe way to encode a URL path in vanilla Javascript. Even where `../` is encoded to `..%2F`, virtually all web servers ignore the lexical difference between `%2F` and `/`.\n\n- Some protocols, like OEMBED are just unsafe by design by returning HTML. To use these APIs, React apps including this one *have* to use `dangerouslySetInnerHTML`. It's also not uncommon to see React refs used to get a handle on the generated element and `innerHTML` called directly, which can evade testers grepping for 'unsafe'.\n\n    Protocols that return HTML, and even those that don't *still* routinely return `Content-Type: text/html`, which means that if a victim is navigated to an API result for example by submitting an HTML form even if the client would handle the output safely, the browser won't if an XSS exists.\n\n## 2b. Advanced DevTools Features\nI wanted to throw in a few DevTools features that my infosec friends don't use enough that I found instrumental to finding this bug. Hackerone doesn't support uploading images to summaries, so I'll link them instead.\n\n### 2b I. The Console Drawer\nhttps://zemn.me/misc/devtools_pullout.png\nWhen you press escape with devtools open, a drawer pulls up from the bottom. From here, you can get access to some insanely powerful features while still browsing source code or network logs.\n\nhttps://zemn.me/misc/devtools_pullout_console.png\nThe *most* insane feature is the pull-out console. When a breakpoint is fired and execution is paused, you can execute any code you want here and it will execute in the context of the current line the debugger is on. This is absolutely indispensable for modifying and inspecting code that operates at many levels of abstraction.\n\n### 2b II. Code Search, Pretty Print\n\nhttps://zemn.me/misc/devtools_search_steam.png\nDevTools contains an extremely powerful search feature that searches every asset loaded into the current window. It can be accessed by the bottom drawer (click the three dots). If you find an element in the DOM and wonder how it's generated, you can search for it here and jump to where it's mentioned.\n\nOnce there, you'll likely want to hit the pretty print button {} in the bottom left and ctrl-f for anything in that file you might find interesting.\n\n### 2b IV. Breaking on Events\nhttps://zemn.me/misc/devtools_breakpoints.png\n\nIt's super common that you have some event you expect to happen, like an XHR or a postMessage but you don't know where the handler is defined. Do not worry! If you scroll to the bottom of the rightmost panel of Sources you can set breakpoints for XHR / fetch and event listeners.\n\n### 2b V. The Call Stack\n\nhttps://zemn.me/misc/devtools_callstack.png\nIn the 'Sources' panel, once a breakpoint fires, you get the full callstack up to the breakpoint on the right. Sure, you get this in most languages.\n\nLet's say you know a user action calls an XHR eventually, but you want to find the high-level construction of the XHR request. If you set an XHR / fetch breakpoint you'll end up breaking deep in a library of some kind usually that provides little context.\n\nYou can actually now step back through the call stack by clicking on each call, viewing code, variables in scope and which file it's in as you go until you find something that looks specially written for this application. I find this indispensable for escaping library call hell in modern minified applications.\n\n### 2b VI. Injecting Code\nhttps://zemn.me/misc/devtools_conditional_breakpoint.png\nWhile chrome devtools *does* have the ability to edit the code of Javascript in webpages on the fly, this doesn't work for minified code, because you cannot do this on pretty-printed files. You can, however use a special trick.\n\nIf you right-click on a line number you can use 'insert conditional breakpoint'. Conditional breakpoints are fully featured javascript that breaks when the statement is `true`. `console.log` always returns undefined, so if you want to inspect several values as a program runs, you can inject `console.log` calls to have their values printed to console, something that isn't possible with the similar but less effective 'watch' feature.\n\nIn systems that have a heartbeat, a breakpoint will often cause a disconnection. Using conditional breakpoints can allow you to add code without stopping execution and using the console.\n\n### 2b VII. Network Search\nhttps://zemn.me/misc/network_search.png\nSure you're getting some data from somewhere, but have no idea where? You can click the magnifying glass icon in the network panel to search full requests, responses and their headers.\n\n### 2b VIII. Network Filter Expressions\n\nIn applications that send a lot of XHR requests, especially those that regularly poll it can quickly become impossible to navigate all the requests in the network panel. You can use [filter expressions](https://developers.google.com/web/tools/chrome-devtools/network-performance/reference#filter) to narrow down requests to those that you might find important.\n\n### 2b IX. Copy as Curl\n\nThere's a ton of things you can do with devtools, but you generally can't bypass web security primitives like same-origin policy, and it's not at all easy to remake and customize requests. You can click on any request in the network panel and go to 'copy as curl' to get an exact replication of the request you can iterate on to mess with the request form.\n\n# 3. Approach\nIn a typical, last-generation chat application, security issues are most likely to surface where HTML is generated from input text. After all, not only is parsing language a super hard problem but it's especially hard to provide the power of HTML features to the user without inadvertently allowing them control over the browser by manipulating these features.\n\n## 3a. Recon\n\nMy first realisation was that the app deployed inside the Steam desktop app was the same as the online one at https://steamcommunity.com/chat, which made it much easier to inject DevTools into the testing flow.\n\nAfter that, I spent a little time using chat with DevTools' Network panel open and observed that we weren't getting bombarded with XHR polling. This likely meant we were using a WebSocket. Refreshing the page with the Network panel open (you only see WebSocket connections if you see them open), I browsed to the WS panel and noted that the client was communicating over completely unintelligible binary frames.\n\nNoticing that the chat system supported embedded content which is unbelievably difficult to implement securely, I started doing code searches for 'OEMBED' and other generic embedding systems that are super easy to get XSS on.\n\nAt this point, I discovered the application was a React app, and switched to, at least partially using the [React Chrome Extension](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en) to inspect the DOM. The extension makes it super easy to jump to the code which generates elements, and since React components express all the information they depend on as `props` (which can be inspected in the extension) I found it much easier to get a handle on application structure.\n\nI did a few searches for `dangerously`, `innerHTML` etc, and set breakpoints on all those. I tried to then get those functions to fire by tracing the call stack up. `dangerously` was only really called for certain 'oembed elements' that could be sent by the chat server.\n\nI set up breakpoints on XHRs \u0026 other events that were fired by loading OEMBED content, like YouTube. When these fired, I stepped back through the call stack to reach the function which sanitised user input and sent it to the chat servers via binary WebSocket.\n\n## 3b. Reaching XSS\n\nThis proved to have surprising results. I'd end up with the breakpoints firing twice for each sent message: once when the user makes a send request, and the client writes an assumed server response to the DOM â€“ and a second time when that was overwritten by the actual response the server sent back. These renders could differ significantly under certain circumstances, in particular when OEMBED was used.\n\nIf I send a Vimeo link in chat, the client renders that initially as an HTML link when the message is sent. Then, when the server updates the chat room, it'll replace the link with a BBCode (yes, bbcode!) [OEMBED] tag that is essentially just raw HTML.\n\nI immediately jumped at this and, using a breakpoint after the call to sanitize user input of BBCode I tried sending OEMBED tags containing malicious HTML, hoping they would be reflected back by the server. However, the server would completely strip these tags before responding.\n\nAfter some scanning of the code, I located the table that matched BBCode tags with their corresponding React components and sent every BBCode tag I saw with mixed results. Most tags were stripped out by the server, and many tags clearly needed attribute parameters `[imgur alt=]` etc I didn't know how to use.\n\nI pivoted to trying to log the BBCode representation of all the rich text commands like rolling a random number or showing an image to little success. I discovered a small handful of tags I could send that would otherwise be stripped including `[url=xxx]`, `[code]`, and `[image]`. Image was heavily locked down and I found it nearly impossible to use it in a malicious way. `[code]` just safely generated `[code]` tags, but `[url=xxx]` *was* legitimately making links to anywhere, *including* `javascript:` URI links.\n\nI immediately opened this report, saying that I'd reached XSS and this usually results in RCE in such clients. It turned out to be a lot more complex than that.\n\nSure, I had reached XSS and I could really mess with web browser users but the `javascript:` URI was found to actually be smartly stripped or not honoured by the custom Steam client browser. I started trying other approaches, knowing that I could form any URL.\n\n## 3c. The Steam URI\n\nBased on prior art, I started by using `steam://` URIs, which are unique to the steam client and can do a lot of bad stuff. Many years ago, in-browser `steam://` URIs were used to reach Remote Code Execution by installing, and then running a game and piping its carefully crafted logs to the startup folder.\n\nI had minor success. In the Chat client, `steam://` URIs were executing in a privileged context browsers could not normally access. After the `steam://` security issues, valve added a prompt for if the URL was opened by an external system â€“ if I send you `steam://open/440` in a web browser, it'll cause steam to confirm that you really want to open that game, but these links in the Steam chat client would cause no such confirmation.\n\nI played around with making links that variously opened games on people's computers, reset their configurations, closed steam or opened systems on it like the steam console by running `steam://-console` or something. I don't remember what the actual URL is :p\n\n## 3d. Abusing OEMBED\n\nAfter much trying and headdesking I changed tack again and tried to target OEMBED specifically. Secure OEMBED systems are hard as hell to implement, so people usually just use a service like Embedly. Embedly's security comes from good use of iframe sandboxing, and whitelists. However, since we're not in a normal browser, being embedded gives you different privileges. If you're embedded in an Electron desktop app browser and the iframe isn't in a special `\u003cWebView\u003e`, one can still access all the dangerous electron APIs through our iframe's `window` object even if the iframe would be safe in a browser.\n\nTo abuse this, though I'd need to either (1) get whitelisted by embedly (impossible) or (2) find a javascript injection in a whitelisted embedly embed. In a stroke of luck, I remembered that codepen.io is whitelisted by embedly and codepen is, well literally Javascript injection as a service.\n\nIn the past, working in such contexts was something I literally did by injecting the script for FireBug, but this is usually a pain because stuff doesn't work quite right. [@mandatory](https://twitter.com/IAmMandatory) recommended I use a remote chrome console. He recommended me some software i completely forget the name of that lets you use a chrome dev tools remote console by injecting some scripts.\n\n## 3e. Remote Console\n\nOnce I had loaded in Steam my codepen.io app with my remote console, I started looking for idiosyncrasies of the Steam Web Helper context. I started by dumping `Object.keys(window)` and running a diff off it against a normal Chrome browser. This came up with a few things, most of which were useless. I could hook an event for when some styles loaded on the page and other stuff that's not usually possible in the browser, but not really a security issue.\n\nSince the Chat client communicates with a parent window to perform privileged operations like pulling the friends list, I tried doing `window.top.postMessage()` with the `postMessage` commands it used to try to coax the client into doing something bad. It seems like the sandboxed context produced by the OEMBED system prevented access to `window.top`.\n\nAt this point, I'd started using the remote console to rapidly test the effects of `steam://` URIs by issuing `open(\"steam://xxx\")`. I didn't find out much more than I had before, but it pushed me to start dissecting the Steam Web Helper Binary a little bit more. I started by running a binary grep in the Steam folder for Steam protocol URIs I knew existed, then I used vim to search for string tables containing these. These led me to a couple of interesting undocumented URIs particular to the Steam Web Helper.\n\n## 3f. Through an Open Window\n\nTwo particularly interesting URIs included a Chrome Dev Tools URI I hoped might have some level of privilege and the URI `steam://openexternalforpid` which appeared as `steam://openexternalforpid/%s/%s` in the application binary. The Chrome Dev Tools URI did weird stuff. When I opened it, it opened a single pixel wide black window as many times as I wanted. From the string of `openexternalforpid` it was clear that it required two parameters, but I was at a total loss as to how to work out what they were.\n\nAfter much guessing myself, I passed the `openexternalforpid` stuff onto my friend [@XMPPWocky](https://twitter.com/XMPPwocky) an extremely capable binary reverse-engineer whom I've found serious Steam bugs with before, but he found it difficult to make much of it with the little time he could spare from saving the world or whatever at Symantec.\n\nI had a thought about the context in which this Javascript was executed. Opening a window is often specially implemented for an embedded browser, and it's pretty frequent that an opened window has different privileges to the opener window. I tried grabbing `open('steam-chrome-dev-tools://something').contentWindow` or whatever the URL was to see if I could grab a privilaged devtools window. With interesting results.\n\nNew windows *did* actually have special functions not normally accessible. I could read where the user's cursor was, maximise the window, minimise it and a bunch of other junk none of which brought me closer to remote code execution after hours of testing.\n\n## 3g. Beyond Protocol\n\nIn my testing of the `Steam://` protocol I noticed something interesting: whenever I made a typo, Windows would open up a dialog saying, for example that it did not know how to open the file type `sream:` or something. That was interesting to me.\n\nCustom protocols like Steam are implemented by a ton of different pieces of software. They're usually Very Bad, and their security relies on the browser prompting to open this application. Back when everyone used Skype, I had some amusing fun sending people `skype://call` urls which opened calls to the loopback skype number that just echoes what you say.\n\nBut like, people don't actually have Skype these days so I was wondering what other custom protocols might be implemented on my system I could leverage. This turned out to be an absolutely *fascinating* rabbit hole into windows internals. I spent hours trawling forums and reference documents describing how to add protocols and what protocols were registered by windows. Turns out, there's quite a few. Windows even has custom protocols for opening maps to places for the user to look at.\n\nThen I went deeper. The custom protocols are actually implemented in the Windows Registry in HKEY_CURRENT_CLASSES or something. It's truly fascinating how telling the structure of this system is. Not only is in this directory every protocol (like, for example, what opens when you open an `http://` link on Windows), but this folder actually contains the file type associations for every filetype in windows, like how Notepad opens if you open a .txt file.\n\nThe folders for `http:` protocols and others are sitting right by the folders for `.png`, and they follow the same syntax, describing how arguments get turned into a program invocation. In complete disbelief, I pressed win+R and typed `.txt:hello` ... and it opened Notepad. Custom protocols and filetype associations are *the same thing*.\n\nAfter that, I scoured the entire class for stuff I might find useful in smarter ways each time. I made a beeline for the .bat filetype which runs arbitrary Windows commands and tried it in Run. It crashed Windows Explorer.\n\nI got smarter and started searching for filetypes that would take the 0th argument and open it with the program, because from reading how protocols opened it was clear that if the 0th argument was called `$0`, protocols like `http://` are essentially `open_webbrowser.exe $0` where `$0` would be the URL.\n\nI came across some truly bizarre sights I wish to share with you aall. There's a `calculator` protocol. I don't know why, but there is. If you wanna be fancy and show popping a calculator, you can literally make a link to `calculator:` like `\u003ca href=\"calculator:\"\u003eclick me!\u003c/a\u003e`, which, when clicked will open the calculator on the victim's computer.\n\nI spent absolutely *hours* trawling this damn database and found a few potentially exploitable protocols. One is `jarfile:`, which executes the jarfile you give it. It's actually the binding for the `.jar` filetype. Another one, `JSEFile:` is a windows xp-era system that let you run an HTML page with VB script like a program. Like prehistoric electron or something.\n\nIt... wasn't working. The problem is that `$0` included the full URI. If I make a link to `jarfile:c:/windows/whatever.exe`, the actual invocation is like `c:/Program Files/Java/Java.exe jarfile:c:/windows/whatever.exe`, and well... it tries to find a directory called 'jarfile:c:', which obviously doesn't exist.\n\nI took a break and submitted another ticket, stating that I'd found another interesting method via this means, and I could open any program on their computer, though not with the arguments I might want. I was so sure this was a way to RCE. At the very least I could submit an example that launched `calculator.exe`, which is what all the cool kids do, right?\n\nAlmost immediately I had an epiphany. Directory traversal. If it's looking for a directory called 'jarfile:c:' that doesn't exist, we can inject a `../` to say 'go one directory back' and negate the directory that doesn't exist. This was actually a pretty great success. I could send like `jarfile:..\\..\\..\\..\\..\\..\\..\\..\\Users\\Username\\Downloads\\drive-by-download.jar` and *actually legitimately run* a jar file on the victim's computer. This was simultaneously exciting and disappointing as it meant I couldn't load a jar file remotely. I'd need to get the user to donwload it.\n\n## 3h. openexternalforpid\n\nThis whole time, i had the Steam Console open (opened with `steam://console`, I think). I wasn't reading it, but it was printing a lot of useful information, like, in particular what `steam://` invocations it was running. I tabbed onto the console accidentally and by absolute sheer luck, I saw something. When I sent `jarfile: something`, the Steam Web Helper was internally sending `steam://openexternalforpid/10400/jarfile: something`. This is huge.\n\nI immediately switched from all these nonsense custom protocols to invoking `openexternalforpid` with the magic number `10400` and cmd.exe and guess what? Remote. Code. Execution. Job done.\n\nBecause this link form isn't a `javascript://` link, it's still honoured by Steam Chat. Either I could send my codepen.io embed *or* I could send my `[link]` tag to get remote code execution :)\n\n# 4. Conclusion\nThis was fun as all hell and I learned a lot. I always look for bugs where a set of simple mistakes of low severity cascade into one huge bug with critical severity and this is the perfect example of that.\n\n","can_view?":true,"can_edit?":false,"content_html":"\u003ch1 id=\"1-background\"\u003e1. Background\u003c/h1\u003e\n\n\u003cp\u003eThe Steam Chat client is a particularly interesting system to attack because it\u0026#39;s built using a modern set of technologies with strong security characteristics.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s built on React, which has some of the strongest security characteristics of any modern Javascript application framework, and avoids use of the unsafe \u003ccode\u003edangerously\u003c/code\u003e family of functions well.\u003c/p\u003e\n\n\u003cp\u003eContent Security Policy is deployed, although with \u003ccode\u003eunsafe-inline\u003c/code\u003e. This is a minor inconvenience but an interesting step forward.\u003c/p\u003e\n\n\u003cp\u003eThe Chat client, unlike most desktop applications using web technologies runs in a custom, highly locked down build of Chrome Embedded Framework. In most Electron-like systems, privileged access is granted to the Javascript VM via the \u003ccode\u003ewindow\u003c/code\u003e object. The chat client takes the interesting and potentially much more secure approach of running at, in essence the privilege of a regular webpage allowing privileged actions only through PostMessage and a loopback WebSocket that communicates with the parent process.\u003c/p\u003e\n\n\u003cp\u003eThe WebSocket carries a custom binary protocol that is very difficult to dissect over the wire and it\u0026#39;s leveraged such that through some common bug I have yet to find root cause on Chrome Dev Tools crashes if breakpoints fire as the page loads (I think it\u0026#39;s some kind of race that happens when WebWorkers are active and the Javascript assets are heavy).\u003c/p\u003e\n\n\u003cp\u003eThe trend toward DOM heavy applications is interesting to me, as many in the security industry still rely heavily on HTTP proxies that aren\u0026#39;t able to accurately reflect application state in these cases.\u003c/p\u003e\n\n\u003ch1 id=\"2-techniques\"\u003e2. Techniques\u003c/h1\u003e\n\n\u003ch2 id=\"2a-react-security-gotchas\"\u003e2a. React Security Gotchas\u003c/h2\u003e\n\n\u003cp\u003eSince the Steam Chat client is built on React, there\u0026#39;s far fewer ways XSS is possible. There are a few ways I look for particularly:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eReact does not special-case encode the attributes of any tags. Attributes with DOM manipulation properties are dangerous.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s very common to see \u003ccode\u003e\u0026lt;a href\u0026gt;\u003c/code\u003e attributes generated from user input where \u003ccode\u003ejavascript:\u003c/code\u003e input URIs, when clicked will result in XSS. Hand-rolled countermeasures to \u003ccode\u003ejavascript:\u003c/code\u003e URIs are still poor, and often employ URL parsers that are not intended to be used defensively.\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s not uncommon to see \u003ccode\u003estyle\u003c/code\u003e tags generated by string concatenation that include user input where an image, for example as a background URL can be injected to IP address information and tokens from the URL via Referer header. CSS sanitization isn\u0026#39;t really a thing, even in the best contextually-aware XSS libraries. CSS-based attacks on the DOM that use \u003ccode\u003eselector[value=string]\u003c/code\u003e or that define fonts that make HTTP requests for each character to conditionally load resources and exfiltrate data are almost entirely unknown outside infosec circles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eReact doesn\u0026#39;t attempt to provide hardened versions of other unsafe Javacript functionality, or disable them. It\u0026#39;s common to see React applications use \u003ccode\u003edocument.location = xxx\u003c/code\u003e to change the location of the browser which is also vulnerable to Javascript URI injection.\u003c/p\u003e\n\n\u003cp\u003eIn the same vein, requests to HTTP APIs don\u0026#39;t gain enhanced security from React. It\u0026#39;s still common to request data using user input spliced into a URL that\u0026#39;s not encoded properly. React developers love to use fancy REST syntax to generate request paths like \u003ccode\u003e\u0026quot;/user/\u0026quot; + encodeURIComponent(username) + \u0026quot;profile\u0026quot;\u003c/code\u003e, even though to my knowledge there\u0026#39;s no safe way to encode a URL path in vanilla Javascript. Even where \u003ccode\u003e../\u003c/code\u003e is encoded to \u003ccode\u003e..%2F\u003c/code\u003e, virtually all web servers ignore the lexical difference between \u003ccode\u003e%2F\u003c/code\u003e and \u003ccode\u003e/\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSome protocols, like OEMBED are just unsafe by design by returning HTML. To use these APIs, React apps including this one \u003cem\u003ehave\u003c/em\u003e to use \u003ccode\u003edangerouslySetInnerHTML\u003c/code\u003e. It\u0026#39;s also not uncommon to see React refs used to get a handle on the generated element and \u003ccode\u003einnerHTML\u003c/code\u003e called directly, which can evade testers grepping for \u0026#39;unsafe\u0026#39;.\u003c/p\u003e\n\n\u003cp\u003eProtocols that return HTML, and even those that don\u0026#39;t \u003cem\u003estill\u003c/em\u003e routinely return \u003ccode\u003eContent-Type: text/html\u003c/code\u003e, which means that if a victim is navigated to an API result for example by submitting an HTML form even if the client would handle the output safely, the browser won\u0026#39;t if an XSS exists.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"2b-advanced-devtools-features\"\u003e2b. Advanced DevTools Features\u003c/h2\u003e\n\n\u003cp\u003eI wanted to throw in a few DevTools features that my infosec friends don\u0026#39;t use enough that I found instrumental to finding this bug. Hackerone doesn\u0026#39;t support uploading images to summaries, so I\u0026#39;ll link them instead.\u003c/p\u003e\n\n\u003ch3 id=\"2b-i-the-console-drawer\"\u003e2b I. The Console Drawer\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_pullout.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_pullout.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_pullout.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nWhen you press escape with devtools open, a drawer pulls up from the bottom. From here, you can get access to some insanely powerful features while still browsing source code or network logs.\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_pullout_console.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_pullout_console.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_pullout_console.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nThe \u003cem\u003emost\u003c/em\u003e insane feature is the pull-out console. When a breakpoint is fired and execution is paused, you can execute any code you want here and it will execute in the context of the current line the debugger is on. This is absolutely indispensable for modifying and inspecting code that operates at many levels of abstraction.\u003c/p\u003e\n\n\u003ch3 id=\"2b-ii-code-search-pretty-print\"\u003e2b II. Code Search, Pretty Print\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_search_steam.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_search_steam.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_search_steam.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nDevTools contains an extremely powerful search feature that searches every asset loaded into the current window. It can be accessed by the bottom drawer (click the three dots). If you find an element in the DOM and wonder how it\u0026#39;s generated, you can search for it here and jump to where it\u0026#39;s mentioned.\u003c/p\u003e\n\n\u003cp\u003eOnce there, you\u0026#39;ll likely want to hit the pretty print button {} in the bottom left and ctrl-f for anything in that file you might find interesting.\u003c/p\u003e\n\n\u003ch3 id=\"2b-iv-breaking-on-events\"\u003e2b IV. Breaking on Events\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_breakpoints.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_breakpoints.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_breakpoints.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIt\u0026#39;s super common that you have some event you expect to happen, like an XHR or a postMessage but you don\u0026#39;t know where the handler is defined. Do not worry! If you scroll to the bottom of the rightmost panel of Sources you can set breakpoints for XHR / fetch and event listeners.\u003c/p\u003e\n\n\u003ch3 id=\"2b-v-the-call-stack\"\u003e2b V. The Call Stack\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_callstack.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_callstack.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_callstack.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nIn the \u0026#39;Sources\u0026#39; panel, once a breakpoint fires, you get the full callstack up to the breakpoint on the right. Sure, you get this in most languages.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s say you know a user action calls an XHR eventually, but you want to find the high-level construction of the XHR request. If you set an XHR / fetch breakpoint you\u0026#39;ll end up breaking deep in a library of some kind usually that provides little context.\u003c/p\u003e\n\n\u003cp\u003eYou can actually now step back through the call stack by clicking on each call, viewing code, variables in scope and which file it\u0026#39;s in as you go until you find something that looks specially written for this application. I find this indispensable for escaping library call hell in modern minified applications.\u003c/p\u003e\n\n\u003ch3 id=\"2b-vi-injecting-code\"\u003e2b VI. Injecting Code\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/devtools_conditional_breakpoint.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fdevtools_conditional_breakpoint.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/devtools_conditional_breakpoint.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nWhile chrome devtools \u003cem\u003edoes\u003c/em\u003e have the ability to edit the code of Javascript in webpages on the fly, this doesn\u0026#39;t work for minified code, because you cannot do this on pretty-printed files. You can, however use a special trick.\u003c/p\u003e\n\n\u003cp\u003eIf you right-click on a line number you can use \u0026#39;insert conditional breakpoint\u0026#39;. Conditional breakpoints are fully featured javascript that breaks when the statement is \u003ccode\u003etrue\u003c/code\u003e. \u003ccode\u003econsole.log\u003c/code\u003e always returns undefined, so if you want to inspect several values as a program runs, you can inject \u003ccode\u003econsole.log\u003c/code\u003e calls to have their values printed to console, something that isn\u0026#39;t possible with the similar but less effective \u0026#39;watch\u0026#39; feature.\u003c/p\u003e\n\n\u003cp\u003eIn systems that have a heartbeat, a breakpoint will often cause a disconnection. Using conditional breakpoints can allow you to add code without stopping execution and using the console.\u003c/p\u003e\n\n\u003ch3 id=\"2b-vii-network-search\"\u003e2b VII. Network Search\u003c/h3\u003e\n\n\u003cp\u003e\u003ca title=\"https://zemn.me/misc/network_search.png\" href=\"/redirect?url=https%3A%2F%2Fzemn.me%2Fmisc%2Fnetwork_search.png\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://zemn.me/misc/network_search.png\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nSure you\u0026#39;re getting some data from somewhere, but have no idea where? You can click the magnifying glass icon in the network panel to search full requests, responses and their headers.\u003c/p\u003e\n\n\u003ch3 id=\"2b-viii-network-filter-expressions\"\u003e2b VIII. Network Filter Expressions\u003c/h3\u003e\n\n\u003cp\u003eIn applications that send a lot of XHR requests, especially those that regularly poll it can quickly become impossible to navigate all the requests in the network panel. You can use \u003ca href=\"/redirect?url=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Fchrome-devtools%2Fnetwork-performance%2Freference%23filter\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003efilter expressions\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to narrow down requests to those that you might find important.\u003c/p\u003e\n\n\u003ch3 id=\"2b-ix-copy-as-curl\"\u003e2b IX. Copy as Curl\u003c/h3\u003e\n\n\u003cp\u003eThere\u0026#39;s a ton of things you can do with devtools, but you generally can\u0026#39;t bypass web security primitives like same-origin policy, and it\u0026#39;s not at all easy to remake and customize requests. You can click on any request in the network panel and go to \u0026#39;copy as curl\u0026#39; to get an exact replication of the request you can iterate on to mess with the request form.\u003c/p\u003e\n\n\u003ch1 id=\"3-approach\"\u003e3. Approach\u003c/h1\u003e\n\n\u003cp\u003eIn a typical, last-generation chat application, security issues are most likely to surface where HTML is generated from input text. After all, not only is parsing language a super hard problem but it\u0026#39;s especially hard to provide the power of HTML features to the user without inadvertently allowing them control over the browser by manipulating these features.\u003c/p\u003e\n\n\u003ch2 id=\"3a-recon\"\u003e3a. Recon\u003c/h2\u003e\n\n\u003cp\u003eMy first realisation was that the app deployed inside the Steam desktop app was the same as the online one at \u003ca title=\"https://steamcommunity.com/chat\" href=\"/redirect?url=https%3A%2F%2Fsteamcommunity.com%2Fchat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://steamcommunity.com/chat\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, which made it much easier to inject DevTools into the testing flow.\u003c/p\u003e\n\n\u003cp\u003eAfter that, I spent a little time using chat with DevTools\u0026#39; Network panel open and observed that we weren\u0026#39;t getting bombarded with XHR polling. This likely meant we were using a WebSocket. Refreshing the page with the Network panel open (you only see WebSocket connections if you see them open), I browsed to the WS panel and noted that the client was communicating over completely unintelligible binary frames.\u003c/p\u003e\n\n\u003cp\u003eNoticing that the chat system supported embedded content which is unbelievably difficult to implement securely, I started doing code searches for \u0026#39;OEMBED\u0026#39; and other generic embedding systems that are super easy to get XSS on.\u003c/p\u003e\n\n\u003cp\u003eAt this point, I discovered the application was a React app, and switched to, at least partially using the \u003ca href=\"/redirect?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Freact-developer-tools%2Ffmkadmapgofadopljbjfkapdkoienihi%3Fhl%3Den\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eReact Chrome Extension\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to inspect the DOM. The extension makes it super easy to jump to the code which generates elements, and since React components express all the information they depend on as \u003ccode\u003eprops\u003c/code\u003e (which can be inspected in the extension) I found it much easier to get a handle on application structure.\u003c/p\u003e\n\n\u003cp\u003eI did a few searches for \u003ccode\u003edangerously\u003c/code\u003e, \u003ccode\u003einnerHTML\u003c/code\u003e etc, and set breakpoints on all those. I tried to then get those functions to fire by tracing the call stack up. \u003ccode\u003edangerously\u003c/code\u003e was only really called for certain \u0026#39;oembed elements\u0026#39; that could be sent by the chat server.\u003c/p\u003e\n\n\u003cp\u003eI set up breakpoints on XHRs \u0026amp; other events that were fired by loading OEMBED content, like YouTube. When these fired, I stepped back through the call stack to reach the function which sanitised user input and sent it to the chat servers via binary WebSocket.\u003c/p\u003e\n\n\u003ch2 id=\"3b-reaching-xss\"\u003e3b. Reaching XSS\u003c/h2\u003e\n\n\u003cp\u003eThis proved to have surprising results. I\u0026#39;d end up with the breakpoints firing twice for each sent message: once when the user makes a send request, and the client writes an assumed server response to the DOM â€“ and a second time when that was overwritten by the actual response the server sent back. These renders could differ significantly under certain circumstances, in particular when OEMBED was used.\u003c/p\u003e\n\n\u003cp\u003eIf I send a Vimeo link in chat, the client renders that initially as an HTML link when the message is sent. Then, when the server updates the chat room, it\u0026#39;ll replace the link with a BBCode (yes, bbcode!) [OEMBED] tag that is essentially just raw HTML.\u003c/p\u003e\n\n\u003cp\u003eI immediately jumped at this and, using a breakpoint after the call to sanitize user input of BBCode I tried sending OEMBED tags containing malicious HTML, hoping they would be reflected back by the server. However, the server would completely strip these tags before responding.\u003c/p\u003e\n\n\u003cp\u003eAfter some scanning of the code, I located the table that matched BBCode tags with their corresponding React components and sent every BBCode tag I saw with mixed results. Most tags were stripped out by the server, and many tags clearly needed attribute parameters \u003ccode\u003e[imgur alt=]\u003c/code\u003e etc I didn\u0026#39;t know how to use.\u003c/p\u003e\n\n\u003cp\u003eI pivoted to trying to log the BBCode representation of all the rich text commands like rolling a random number or showing an image to little success. I discovered a small handful of tags I could send that would otherwise be stripped including \u003ccode\u003e[url=xxx]\u003c/code\u003e, \u003ccode\u003e[code]\u003c/code\u003e, and \u003ccode\u003e[image]\u003c/code\u003e. Image was heavily locked down and I found it nearly impossible to use it in a malicious way. \u003ccode\u003e[code]\u003c/code\u003e just safely generated \u003ccode\u003e[code]\u003c/code\u003e tags, but \u003ccode\u003e[url=xxx]\u003c/code\u003e \u003cem\u003ewas\u003c/em\u003e legitimately making links to anywhere, \u003cem\u003eincluding\u003c/em\u003e \u003ccode\u003ejavascript:\u003c/code\u003e URI links.\u003c/p\u003e\n\n\u003cp\u003eI immediately opened this report, saying that I\u0026#39;d reached XSS and this usually results in RCE in such clients. It turned out to be a lot more complex than that.\u003c/p\u003e\n\n\u003cp\u003eSure, I had reached XSS and I could really mess with web browser users but the \u003ccode\u003ejavascript:\u003c/code\u003e URI was found to actually be smartly stripped or not honoured by the custom Steam client browser. I started trying other approaches, knowing that I could form any URL.\u003c/p\u003e\n\n\u003ch2 id=\"3c-the-steam-uri\"\u003e3c. The Steam URI\u003c/h2\u003e\n\n\u003cp\u003eBased on prior art, I started by using \u003ccode\u003esteam://\u003c/code\u003e URIs, which are unique to the steam client and can do a lot of bad stuff. Many years ago, in-browser \u003ccode\u003esteam://\u003c/code\u003e URIs were used to reach Remote Code Execution by installing, and then running a game and piping its carefully crafted logs to the startup folder.\u003c/p\u003e\n\n\u003cp\u003eI had minor success. In the Chat client, \u003ccode\u003esteam://\u003c/code\u003e URIs were executing in a privileged context browsers could not normally access. After the \u003ccode\u003esteam://\u003c/code\u003e security issues, valve added a prompt for if the URL was opened by an external system â€“ if I send you \u003ccode\u003esteam://open/440\u003c/code\u003e in a web browser, it\u0026#39;ll cause steam to confirm that you really want to open that game, but these links in the Steam chat client would cause no such confirmation.\u003c/p\u003e\n\n\u003cp\u003eI played around with making links that variously opened games on people\u0026#39;s computers, reset their configurations, closed steam or opened systems on it like the steam console by running \u003ccode\u003esteam://-console\u003c/code\u003e or something. I don\u0026#39;t remember what the actual URL is :p\u003c/p\u003e\n\n\u003ch2 id=\"3d-abusing-oembed\"\u003e3d. Abusing OEMBED\u003c/h2\u003e\n\n\u003cp\u003eAfter much trying and headdesking I changed tack again and tried to target OEMBED specifically. Secure OEMBED systems are hard as hell to implement, so people usually just use a service like Embedly. Embedly\u0026#39;s security comes from good use of iframe sandboxing, and whitelists. However, since we\u0026#39;re not in a normal browser, being embedded gives you different privileges. If you\u0026#39;re embedded in an Electron desktop app browser and the iframe isn\u0026#39;t in a special \u003ccode\u003e\u0026lt;WebView\u0026gt;\u003c/code\u003e, one can still access all the dangerous electron APIs through our iframe\u0026#39;s \u003ccode\u003ewindow\u003c/code\u003e object even if the iframe would be safe in a browser.\u003c/p\u003e\n\n\u003cp\u003eTo abuse this, though I\u0026#39;d need to either (1) get whitelisted by embedly (impossible) or (2) find a javascript injection in a whitelisted embedly embed. In a stroke of luck, I remembered that codepen.io is whitelisted by embedly and codepen is, well literally Javascript injection as a service.\u003c/p\u003e\n\n\u003cp\u003eIn the past, working in such contexts was something I literally did by injecting the script for FireBug, but this is usually a pain because stuff doesn\u0026#39;t work quite right. \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FIAmMandatory\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e@mandatory\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e recommended I use a remote chrome console. He recommended me some software i completely forget the name of that lets you use a chrome dev tools remote console by injecting some scripts.\u003c/p\u003e\n\n\u003ch2 id=\"3e-remote-console\"\u003e3e. Remote Console\u003c/h2\u003e\n\n\u003cp\u003eOnce I had loaded in Steam my codepen.io app with my remote console, I started looking for idiosyncrasies of the Steam Web Helper context. I started by dumping \u003ccode\u003eObject.keys(window)\u003c/code\u003e and running a diff off it against a normal Chrome browser. This came up with a few things, most of which were useless. I could hook an event for when some styles loaded on the page and other stuff that\u0026#39;s not usually possible in the browser, but not really a security issue.\u003c/p\u003e\n\n\u003cp\u003eSince the Chat client communicates with a parent window to perform privileged operations like pulling the friends list, I tried doing \u003ccode\u003ewindow.top.postMessage()\u003c/code\u003e with the \u003ccode\u003epostMessage\u003c/code\u003e commands it used to try to coax the client into doing something bad. It seems like the sandboxed context produced by the OEMBED system prevented access to \u003ccode\u003ewindow.top\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAt this point, I\u0026#39;d started using the remote console to rapidly test the effects of \u003ccode\u003esteam://\u003c/code\u003e URIs by issuing \u003ccode\u003eopen(\u0026quot;steam://xxx\u0026quot;)\u003c/code\u003e. I didn\u0026#39;t find out much more than I had before, but it pushed me to start dissecting the Steam Web Helper Binary a little bit more. I started by running a binary grep in the Steam folder for Steam protocol URIs I knew existed, then I used vim to search for string tables containing these. These led me to a couple of interesting undocumented URIs particular to the Steam Web Helper.\u003c/p\u003e\n\n\u003ch2 id=\"3f-through-an-open-window\"\u003e3f. Through an Open Window\u003c/h2\u003e\n\n\u003cp\u003eTwo particularly interesting URIs included a Chrome Dev Tools URI I hoped might have some level of privilege and the URI \u003ccode\u003esteam://openexternalforpid\u003c/code\u003e which appeared as \u003ccode\u003esteam://openexternalforpid/%s/%s\u003c/code\u003e in the application binary. The Chrome Dev Tools URI did weird stuff. When I opened it, it opened a single pixel wide black window as many times as I wanted. From the string of \u003ccode\u003eopenexternalforpid\u003c/code\u003e it was clear that it required two parameters, but I was at a total loss as to how to work out what they were.\u003c/p\u003e\n\n\u003cp\u003eAfter much guessing myself, I passed the \u003ccode\u003eopenexternalforpid\u003c/code\u003e stuff onto my friend \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FXMPPwocky\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e@XMPPWocky\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e an extremely capable binary reverse-engineer whom I\u0026#39;ve found serious Steam bugs with before, but he found it difficult to make much of it with the little time he could spare from saving the world or whatever at Symantec.\u003c/p\u003e\n\n\u003cp\u003eI had a thought about the context in which this Javascript was executed. Opening a window is often specially implemented for an embedded browser, and it\u0026#39;s pretty frequent that an opened window has different privileges to the opener window. I tried grabbing \u003ccode\u003eopen(\u0026#39;steam-chrome-dev-tools://something\u0026#39;).contentWindow\u003c/code\u003e or whatever the URL was to see if I could grab a privilaged devtools window. With interesting results.\u003c/p\u003e\n\n\u003cp\u003eNew windows \u003cem\u003edid\u003c/em\u003e actually have special functions not normally accessible. I could read where the user\u0026#39;s cursor was, maximise the window, minimise it and a bunch of other junk none of which brought me closer to remote code execution after hours of testing.\u003c/p\u003e\n\n\u003ch2 id=\"3g-beyond-protocol\"\u003e3g. Beyond Protocol\u003c/h2\u003e\n\n\u003cp\u003eIn my testing of the \u003ccode\u003eSteam://\u003c/code\u003e protocol I noticed something interesting: whenever I made a typo, Windows would open up a dialog saying, for example that it did not know how to open the file type \u003ccode\u003esream:\u003c/code\u003e or something. That was interesting to me.\u003c/p\u003e\n\n\u003cp\u003eCustom protocols like Steam are implemented by a ton of different pieces of software. They\u0026#39;re usually Very Bad, and their security relies on the browser prompting to open this application. Back when everyone used Skype, I had some amusing fun sending people \u003ccode\u003eskype://call\u003c/code\u003e urls which opened calls to the loopback skype number that just echoes what you say.\u003c/p\u003e\n\n\u003cp\u003eBut like, people don\u0026#39;t actually have Skype these days so I was wondering what other custom protocols might be implemented on my system I could leverage. This turned out to be an absolutely \u003cem\u003efascinating\u003c/em\u003e rabbit hole into windows internals. I spent hours trawling forums and reference documents describing how to add protocols and what protocols were registered by windows. Turns out, there\u0026#39;s quite a few. Windows even has custom protocols for opening maps to places for the user to look at.\u003c/p\u003e\n\n\u003cp\u003eThen I went deeper. The custom protocols are actually implemented in the Windows Registry in HKEY_CURRENT_CLASSES or something. It\u0026#39;s truly fascinating how telling the structure of this system is. Not only is in this directory every protocol (like, for example, what opens when you open an \u003ccode\u003ehttp://\u003c/code\u003e link on Windows), but this folder actually contains the file type associations for every filetype in windows, like how Notepad opens if you open a .txt file.\u003c/p\u003e\n\n\u003cp\u003eThe folders for \u003ccode\u003ehttp:\u003c/code\u003e protocols and others are sitting right by the folders for \u003ccode\u003e.png\u003c/code\u003e, and they follow the same syntax, describing how arguments get turned into a program invocation. In complete disbelief, I pressed win+R and typed \u003ccode\u003e.txt:hello\u003c/code\u003e ... and it opened Notepad. Custom protocols and filetype associations are \u003cem\u003ethe same thing\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAfter that, I scoured the entire class for stuff I might find useful in smarter ways each time. I made a beeline for the .bat filetype which runs arbitrary Windows commands and tried it in Run. It crashed Windows Explorer.\u003c/p\u003e\n\n\u003cp\u003eI got smarter and started searching for filetypes that would take the 0th argument and open it with the program, because from reading how protocols opened it was clear that if the 0th argument was called \u003ccode\u003e$0\u003c/code\u003e, protocols like \u003ccode\u003ehttp://\u003c/code\u003e are essentially \u003ccode\u003eopen_webbrowser.exe $0\u003c/code\u003e where \u003ccode\u003e$0\u003c/code\u003e would be the URL.\u003c/p\u003e\n\n\u003cp\u003eI came across some truly bizarre sights I wish to share with you aall. There\u0026#39;s a \u003ccode\u003ecalculator\u003c/code\u003e protocol. I don\u0026#39;t know why, but there is. If you wanna be fancy and show popping a calculator, you can literally make a link to \u003ccode\u003ecalculator:\u003c/code\u003e like \u003ccode\u003e\u0026lt;a href=\u0026quot;calculator:\u0026quot;\u0026gt;click me!\u0026lt;/a\u0026gt;\u003c/code\u003e, which, when clicked will open the calculator on the victim\u0026#39;s computer.\u003c/p\u003e\n\n\u003cp\u003eI spent absolutely \u003cem\u003ehours\u003c/em\u003e trawling this damn database and found a few potentially exploitable protocols. One is \u003ccode\u003ejarfile:\u003c/code\u003e, which executes the jarfile you give it. It\u0026#39;s actually the binding for the \u003ccode\u003e.jar\u003c/code\u003e filetype. Another one, \u003ccode\u003eJSEFile:\u003c/code\u003e is a windows xp-era system that let you run an HTML page with VB script like a program. Like prehistoric electron or something.\u003c/p\u003e\n\n\u003cp\u003eIt... wasn\u0026#39;t working. The problem is that \u003ccode\u003e$0\u003c/code\u003e included the full URI. If I make a link to \u003ccode\u003ejarfile:c:/windows/whatever.exe\u003c/code\u003e, the actual invocation is like \u003ccode\u003ec:/Program Files/Java/Java.exe jarfile:c:/windows/whatever.exe\u003c/code\u003e, and well... it tries to find a directory called \u0026#39;jarfile:c:\u0026#39;, which obviously doesn\u0026#39;t exist.\u003c/p\u003e\n\n\u003cp\u003eI took a break and submitted another ticket, stating that I\u0026#39;d found another interesting method via this means, and I could open any program on their computer, though not with the arguments I might want. I was so sure this was a way to RCE. At the very least I could submit an example that launched \u003ccode\u003ecalculator.exe\u003c/code\u003e, which is what all the cool kids do, right?\u003c/p\u003e\n\n\u003cp\u003eAlmost immediately I had an epiphany. Directory traversal. If it\u0026#39;s looking for a directory called \u0026#39;jarfile:c:\u0026#39; that doesn\u0026#39;t exist, we can inject a \u003ccode\u003e../\u003c/code\u003e to say \u0026#39;go one directory back\u0026#39; and negate the directory that doesn\u0026#39;t exist. This was actually a pretty great success. I could send like \u003ccode\u003ejarfile:..\\..\\..\\..\\..\\..\\..\\..\\Users\\Username\\Downloads\\drive-by-download.jar\u003c/code\u003e and \u003cem\u003eactually legitimately run\u003c/em\u003e a jar file on the victim\u0026#39;s computer. This was simultaneously exciting and disappointing as it meant I couldn\u0026#39;t load a jar file remotely. I\u0026#39;d need to get the user to donwload it.\u003c/p\u003e\n\n\u003ch2 id=\"3h-openexternalforpid\"\u003e3h. openexternalforpid\u003c/h2\u003e\n\n\u003cp\u003eThis whole time, i had the Steam Console open (opened with \u003ccode\u003esteam://console\u003c/code\u003e, I think). I wasn\u0026#39;t reading it, but it was printing a lot of useful information, like, in particular what \u003ccode\u003esteam://\u003c/code\u003e invocations it was running. I tabbed onto the console accidentally and by absolute sheer luck, I saw something. When I sent \u003ccode\u003ejarfile: something\u003c/code\u003e, the Steam Web Helper was internally sending \u003ccode\u003esteam://openexternalforpid/10400/jarfile: something\u003c/code\u003e. This is huge.\u003c/p\u003e\n\n\u003cp\u003eI immediately switched from all these nonsense custom protocols to invoking \u003ccode\u003eopenexternalforpid\u003c/code\u003e with the magic number \u003ccode\u003e10400\u003c/code\u003e and cmd.exe and guess what? Remote. Code. Execution. Job done.\u003c/p\u003e\n\n\u003cp\u003eBecause this link form isn\u0026#39;t a \u003ccode\u003ejavascript://\u003c/code\u003e link, it\u0026#39;s still honoured by Steam Chat. Either I could send my codepen.io embed \u003cem\u003eor\u003c/em\u003e I could send my \u003ccode\u003e[link]\u003c/code\u003e tag to get remote code execution :)\u003c/p\u003e\n\n\u003ch1 id=\"4-conclusion\"\u003e4. Conclusion\u003c/h1\u003e\n\n\u003cp\u003eThis was fun as all hell and I learned a lot. I always look for bugs where a set of simple mistakes of low severity cascade into one huge bug with critical severity and this is the perfect example of that.\u003c/p\u003e\n"}]}