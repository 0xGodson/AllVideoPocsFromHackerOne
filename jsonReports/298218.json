{"id":298218,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yOTgyMTg=","url":"https://hackerone.com/reports/298218","title":"antispambot does not always escape \u003c, \u003e, \u0026, \" and '","state":"Closed","substate":"informative","severity_rating":"low","readable_substate":"Informative","created_at":"2017-12-15T08:49:22.937Z","submitted_at":"2017-12-15T08:49:22.937Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"flimm","url":"/flimm","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/224/809/9473d64337fb4f05c3efb9e8f5545cb1690b1517_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":55,"url":"https://hackerone.com/wordpress","handle":"wordpress","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/055/f114d1d31f904e3b903cd99a6cf566bb531f8401_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"WordPress","twitter_handle":"wordpress","website":"https://wordpress.org/","about":"Beautiful sites of any kind."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-09-16T17:45:51.322Z","bug_reporter_agreed_on_going_public_at":"2019-09-16T15:07:16.990Z","team_member_agreed_on_going_public_at":"2019-09-16T17:45:51.193Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The `antispambot` function escapes some randomly selected characters from its first argument, for example:\n\n```\n\u003c?php\necho antispambot( 'example@example.com' );\n```\n\nThis would print out:\n\n```\nexa\u0026#109;p\u0026#108;\u0026#101;\u0026#64;\u0026#101;xa\u0026#109;pl\u0026#101;\u0026#46;\u0026#99;o\u0026#109;\n```\n\nSince this returns HTML, developers are not going to use `esc_html` with the return value of `antispambot`, since that would double-escape the result. Developers will assume that this function can be safely used with untrusted email addresses, which is a fair assumption. However, it turns out that `antispambot` cannot be trusted. Whether a character is escaped is randomly selected, even if the character is `\u003c`, `\u003e`, `\u0026`, `\"`, or `'`. These last five characters should always be escaped.\n\nThere is a chance that this will print out unescaped:\n\n```\n\u003c?php\necho antispambot( '\u003cscript\u003econsole.log(\"hello\");\u003c/script\u003e');\n```\n\nEven though the chance of this happening is low, with enough repetitions this could happen eventually.\n\n`antispambot` should always escape the five sensitive characters.\n\n## Impact\n\nIf `antispambot` is being used by a plugin that passes to it untrusted input, an attacker could cause arbitrary client-side code to run. Since the probability of all of the characters remaining unescaped is low, only a small fraction of the attacks would succeed, and the attacker would need the ability to attack many times to see a few successes.","vulnerability_information_html":"\u003cp\u003eThe \u003ccode\u003eantispambot\u003c/code\u003e function escapes some randomly selected characters from its first argument, for example:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nx\"\u003eantispambot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;example@example.com\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis would print out:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eexa\u0026amp;#109;p\u0026amp;#108;\u0026amp;#101;\u0026amp;#64;\u0026amp;#101;xa\u0026amp;#109;pl\u0026amp;#101;\u0026amp;#46;\u0026amp;#99;o\u0026amp;#109;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince this returns HTML, developers are not going to use \u003ccode\u003eesc_html\u003c/code\u003e with the return value of \u003ccode\u003eantispambot\u003c/code\u003e, since that would double-escape the result. Developers will assume that this function can be safely used with untrusted email addresses, which is a fair assumption. However, it turns out that \u003ccode\u003eantispambot\u003c/code\u003e cannot be trusted. Whether a character is escaped is randomly selected, even if the character is \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e\u0026quot;\u003c/code\u003e, or \u003ccode\u003e\u0026#39;\u003c/code\u003e. These last five characters should always be escaped.\u003c/p\u003e\n\n\u003cp\u003eThere is a chance that this will print out unescaped:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"nx\"\u003eantispambot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;script\u0026gt;console.log(\u0026quot;hello\u0026quot;);\u0026lt;/script\u0026gt;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEven though the chance of this happening is low, with enough repetitions this could happen eventually.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eantispambot\u003c/code\u003e should always escape the five sensitive characters.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eIf \u003ccode\u003eantispambot\u003c/code\u003e is being used by a plugin that passes to it untrusted input, an attacker could cause arbitrary client-side code to run. Since the probability of all of the characters remaining unescaped is low, only a small fraction of the attacks would succeed, and the attacker would need the ability to attack many times to see a few successes.\u003c/p\u003e\n","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":3,"voters":["sameerphad72","dstack4273","1cigano"],"severity":{"rating":"low","author_type":"User"},"structured_scope":{"databaseId":2750,"asset_type":"SOURCE_CODE","asset_identifier":"WordPress Core","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2247354,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, thanks for the report, and sorry for the slow response. Have you come up with any ways to reproduce this more reliably? That would help with triage, unit tests, etc.\n\nI tried a simple loop like this, and reloaded the page a few dozen times, but never got a hit:\n\n```\nfor ( $i = 0; $i \u003c 100000; $i++ ) {\n\techo antispambot( '\u003cscript\u003ealert(\"hello\");\u003c/script\u003e' );\n}\n```\n\n","markdown_message":"\u003cp\u003eHi, thanks for the report, and sorry for the slow response. Have you come up with any ways to reproduce this more reliably? That would help with triage, unit tests, etc.\u003c/p\u003e\n\n\u003cp\u003eI tried a simple loop like this, and reloaded the page a few dozen times, but never got a hit:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efor ( $i = 0; $i \u0026lt; 100000; $i++ ) {\n    echo antispambot( \u0026#39;\u0026lt;script\u0026gt;alert(\u0026quot;hello\u0026quot;);\u0026lt;/script\u0026gt;\u0026#39; );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2017-12-26T20:37:32.150Z","updated_at":"2017-12-26T20:37:32.150Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2251775,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Run this using `wp eval-file` and you'll get the result:\n\n```\n\u003c?php\n$string = '\u003cscript\u003ealert()\u003c/script\u003e';\n\nwhile (antispambot( $string ) !== $string) {\n\n}\n\necho \"If this statement is printed, then antispambot did not escape the input.\";\n```\n\nAdmittedly, the odds of the entire string remaining unescaped get lower and lower the longer the string is, so an attacker would have to attack more and more times. But the fact that this script finishes within a minute proves that the odds are not negligible.\n\nIn any case, the fix for this is very simple (just always escape `\u0026`, `\u003c`, `\u003e`, `'` and `\"`).","markdown_message":"\u003cp\u003eRun this using \u003ccode\u003ewp eval-file\u003c/code\u003e and you\u0026#39;ll get the result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$string\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026lt;script\u0026gt;alert()\u0026lt;/script\u0026gt;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eantispambot\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nv\"\u003e$string\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"nv\"\u003e$string\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;If this statement is printed, then antispambot did not escape the input.\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAdmittedly, the odds of the entire string remaining unescaped get lower and lower the longer the string is, so an attacker would have to attack more and more times. But the fact that this script finishes within a minute proves that the odds are not negligible.\u003c/p\u003e\n\n\u003cp\u003eIn any case, the fix for this is very simple (just always escape \u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026quot;\u003c/code\u003e).\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-29T13:27:37.049Z","updated_at":"2017-12-29T13:27:37.049Z","actor":{"username":"flimm","cleared":false,"url":"/flimm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/224/809/9473d64337fb4f05c3efb9e8f5545cb1690b1517_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2252120,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks David, that's a good idea, and I was able to see it happening with that. I ran it about 5 times and it usually took between 1 and 8 minutes, with about `2.75 million` tests per minute.\n\nThinking through the details, it seems like it's extremely unlikely that this would be successfully used in a real world attack.\n\nWhen Core displays comment authors in wp-admin, it escapes the address with `esc_url()`, and I don't think there are many themes that display the email address on the front-end, in order to protect privacy.\n\nEven if a plugin or theme did display the address unescaped, the victim would still need to visit a page showing the comment, which seems very unlikely if there are millions of comments to navigate through. At that point it's also likely that the attacker would be stopped by other means (Akismet, the site owner disabling comments out of frustration, etc).\n\nGiven all the mitigating factors, I think this can probably be considered a low-priority hardening enhancement, and worked on publicly on core.trac.wordpress.org.\n\nBefore we do that, though, I wanted to get your thoughts, in case I'm missing something. Do the mitigating factors above seem correct to you? Can you think of any way to significantly increase the likelihood of success?\n\nI'll ask another member of the security team to take a look at this before we move it to Core Trac as well, just to be safe.\n","markdown_message":"\u003cp\u003eThanks David, that\u0026#39;s a good idea, and I was able to see it happening with that. I ran it about 5 times and it usually took between 1 and 8 minutes, with about \u003ccode\u003e2.75 million\u003c/code\u003e tests per minute.\u003c/p\u003e\n\n\u003cp\u003eThinking through the details, it seems like it\u0026#39;s extremely unlikely that this would be successfully used in a real world attack.\u003c/p\u003e\n\n\u003cp\u003eWhen Core displays comment authors in wp-admin, it escapes the address with \u003ccode\u003eesc_url()\u003c/code\u003e, and I don\u0026#39;t think there are many themes that display the email address on the front-end, in order to protect privacy.\u003c/p\u003e\n\n\u003cp\u003eEven if a plugin or theme did display the address unescaped, the victim would still need to visit a page showing the comment, which seems very unlikely if there are millions of comments to navigate through. At that point it\u0026#39;s also likely that the attacker would be stopped by other means (Akismet, the site owner disabling comments out of frustration, etc).\u003c/p\u003e\n\n\u003cp\u003eGiven all the mitigating factors, I think this can probably be considered a low-priority hardening enhancement, and worked on publicly on core.trac.wordpress.org.\u003c/p\u003e\n\n\u003cp\u003eBefore we do that, though, I wanted to get your thoughts, in case I\u0026#39;m missing something. Do the mitigating factors above seem correct to you? Can you think of any way to significantly increase the likelihood of success?\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ll ask another member of the security team to take a look at this before we move it to Core Trac as well, just to be safe.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-12-29T18:38:55.918Z","updated_at":"2017-12-29T18:38:55.918Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2256048,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I agree with your assessment. You're right, this could probably be considered a low-priority hardening enhancement. As soon as I get the OK from you folks, I'll post this on the bug tracker.","markdown_message":"\u003cp\u003eI agree with your assessment. You\u0026#39;re right, this could probably be considered a low-priority hardening enhancement. As soon as I get the OK from you folks, I\u0026#39;ll post this on the bug tracker.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-02T16:06:29.195Z","updated_at":"2018-01-02T16:06:29.195Z","actor":{"username":"flimm","cleared":false,"url":"/flimm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/224/809/9473d64337fb4f05c3efb9e8f5545cb1690b1517_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2270767,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks, no one on the team has had a chance to double check this yet, but I'll let you know once someone does. Thanks for your patience!","markdown_message":"\u003cp\u003eThanks, no one on the team has had a chance to double check this yet, but I\u0026#39;ll let you know once someone does. Thanks for your patience!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-08T20:19:02.712Z","updated_at":"2018-01-08T20:19:02.712Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2273096,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Dominik looked at this and caught something that I'd missed: `esc_html()` doesn't double-escape:\n\n```\nwp\u003e $email = antispambot( 'foo@example.org' );\nstring(53) \"f\u0026#111;\u0026#111;\u0026#64;e\u0026#120;am\u0026#112;l\u0026#101;\u0026#46;o\u0026#114;g\"\nwp\u003e $esc_email = esc_html( $email );\nstring(55) \"f\u0026#111;\u0026#111;\u0026#064;e\u0026#120;am\u0026#112;l\u0026#101;\u0026#046;o\u0026#114;g\"\nwp\u003e $esc_email2 = esc_html( $esc_email );\nstring(55) \"f\u0026#111;\u0026#111;\u0026#064;e\u0026#120;am\u0026#112;l\u0026#101;\u0026#046;o\u0026#114;g\"\n\nwp\u003e $esc_html = esc_html( '\u003cscript\u003ealert(\"hi\");\u003c/script\u003e' );\nstring(51) \"\u0026lt;script\u0026gt;alert(\u0026quot;hi\u0026quot;);\u0026lt;/script\u0026gt;\"\nwp\u003e $esc_html2 = esc_html( $esc_html );\nstring(51) \"\u0026lt;script\u0026gt;alert(\u0026quot;hi\u0026quot;);\u0026lt;/script\u0026gt;\"\n```\n\nCore actually uses both `esc_url()` and `esc_html()` with the value, like in `WP_Comments_List_Table::column_author()`, so I think the only issue here is developer education, since you're right that many will assume it's safe to use unescaped.\n\nI've updated the Codex and DevHub articles to add `esc_url()` and `esc_html()`, and [the WP Coding Standards issue that you opened](https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1246) will also help.\n\nSo, I think at this point there's nothing more to do here. Do you agree with that?","markdown_message":"\u003cp\u003eDominik looked at this and caught something that I\u0026#39;d missed: \u003ccode\u003eesc_html()\u003c/code\u003e doesn\u0026#39;t double-escape:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ewp\u0026gt; $email = antispambot( \u0026#39;foo@example.org\u0026#39; );\nstring(53) \u0026quot;f\u0026amp;#111;\u0026amp;#111;\u0026amp;#64;e\u0026amp;#120;am\u0026amp;#112;l\u0026amp;#101;\u0026amp;#46;o\u0026amp;#114;g\u0026quot;\nwp\u0026gt; $esc_email = esc_html( $email );\nstring(55) \u0026quot;f\u0026amp;#111;\u0026amp;#111;\u0026amp;#064;e\u0026amp;#120;am\u0026amp;#112;l\u0026amp;#101;\u0026amp;#046;o\u0026amp;#114;g\u0026quot;\nwp\u0026gt; $esc_email2 = esc_html( $esc_email );\nstring(55) \u0026quot;f\u0026amp;#111;\u0026amp;#111;\u0026amp;#064;e\u0026amp;#120;am\u0026amp;#112;l\u0026amp;#101;\u0026amp;#046;o\u0026amp;#114;g\u0026quot;\n\nwp\u0026gt; $esc_html = esc_html( \u0026#39;\u0026lt;script\u0026gt;alert(\u0026quot;hi\u0026quot;);\u0026lt;/script\u0026gt;\u0026#39; );\nstring(51) \u0026quot;\u0026amp;lt;script\u0026amp;gt;alert(\u0026amp;quot;hi\u0026amp;quot;);\u0026amp;lt;/script\u0026amp;gt;\u0026quot;\nwp\u0026gt; $esc_html2 = esc_html( $esc_html );\nstring(51) \u0026quot;\u0026amp;lt;script\u0026amp;gt;alert(\u0026amp;quot;hi\u0026amp;quot;);\u0026amp;lt;/script\u0026amp;gt;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCore actually uses both \u003ccode\u003eesc_url()\u003c/code\u003e and \u003ccode\u003eesc_html()\u003c/code\u003e with the value, like in \u003ccode\u003eWP_Comments_List_Table::column_author()\u003c/code\u003e, so I think the only issue here is developer education, since you\u0026#39;re right that many will assume it\u0026#39;s safe to use unescaped.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve updated the Codex and DevHub articles to add \u003ccode\u003eesc_url()\u003c/code\u003e and \u003ccode\u003eesc_html()\u003c/code\u003e, and \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FWordPress-Coding-Standards%2FWordPress-Coding-Standards%2Fissues%2F1246\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ethe WP Coding Standards issue that you opened\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e will also help.\u003c/p\u003e\n\n\u003cp\u003eSo, I think at this point there\u0026#39;s nothing more to do here. Do you agree with that?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-09T18:43:37.447Z","updated_at":"2018-01-09T18:43:37.447Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2275322,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I did not know that about `esc_html`! That's counter-intuitive to me :)\n\nI agree, I think there's nothing more to do here. I might file a bug in the normal bug tracker to make the change I suggested to `antispambot`, but I can see that the security team don't need to be involved in this. I wanted to check with you folks first. Thanks for editing the documentation. I've made a couple of more documentation contributions to the docs of `esc_html` and `esc_attr`.","markdown_message":"\u003cp\u003eI did not know that about \u003ccode\u003eesc_html\u003c/code\u003e! That\u0026#39;s counter-intuitive to me :)\u003c/p\u003e\n\n\u003cp\u003eI agree, I think there\u0026#39;s nothing more to do here. I might file a bug in the normal bug tracker to make the change I suggested to \u003ccode\u003eantispambot\u003c/code\u003e, but I can see that the security team don\u0026#39;t need to be involved in this. I wanted to check with you folks first. Thanks for editing the documentation. I\u0026#39;ve made a couple of more documentation contributions to the docs of \u003ccode\u003eesc_html\u003c/code\u003e and \u003ccode\u003eesc_attr\u003c/code\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-10T16:56:44.162Z","updated_at":"2018-01-10T16:56:44.162Z","actor":{"username":"flimm","cleared":false,"url":"/flimm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/224/809/9473d64337fb4f05c3efb9e8f5545cb1690b1517_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2275667,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"That sounds good, thanks for checking here first!","markdown_message":"\u003cp\u003eThat sounds good, thanks for checking here first!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-10T19:22:15.646Z","updated_at":"2018-01-10T19:22:15.646Z","actor":{"username":"iandunn","cleared":false,"url":"/iandunn","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/974/01bc1d097002b7eff8eddba98990e094553b1eac_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5817000,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-16T15:07:17.012Z","updated_at":"2019-09-16T15:07:17.012Z","first_to_agree":true,"actor":{"username":"flimm","cleared":false,"url":"/flimm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/224/809/9473d64337fb4f05c3efb9e8f5545cb1690b1517_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5818197,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-16T17:45:51.235Z","updated_at":"2019-09-16T17:45:51.235Z","actor":{"username":"whyisjake","cleared":false,"url":"/whyisjake","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/499/942/de8d53f71535e9531105209e14875727a9e88cfe_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5818199,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-16T17:45:51.347Z","updated_at":"2019-09-16T17:45:51.347Z","actor":{"username":"whyisjake","cleared":false,"url":"/whyisjake","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/499/942/de8d53f71535e9531105209e14875727a9e88cfe_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"wordpress","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}