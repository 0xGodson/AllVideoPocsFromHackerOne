{"id":204802,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDQ4MDI=","url":"https://hackerone.com/reports/204802","title":"pam-ussh may be tricked into using another logged in user's ssh-agent","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2017-02-09T00:04:01.367Z","submitted_at":"2017-02-09T00:04:01.367Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"solardiz","url":"/solardiz","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":314,"url":"https://hackerone.com/uber","handle":"uber","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Uber","twitter_handle":"","website":"https://www.uber.com","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2017-03-20T19:57:39.640Z","bug_reporter_agreed_on_going_public_at":"2017-03-20T19:57:39.592Z","team_member_agreed_on_going_public_at":"2017-03-20T18:07:32.282Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary\nhttps://github.com/uber/pam-ussh was open-sourced today (kudos!) and is presumably used within Uber's infrastructure. This is a PAM module written a Go that \"will authenticate a user based on them having an ssh certificate in their ssh-agent signed by a specified ssh CA.\" A cursory look at the code and the documentation reveals that the module trusts the SSH_AUTH_SOCK environment variable to determine the Unix domain socket it will use to talk to ssh-agent:\n\nhttps://github.com/uber/pam-ussh/blob/a50585bb7a0f16cd4e813509ad1393731cbb9a14/pam_ussh.go#L70\n\nThe documentation suggests configuring the module for sudo's PAM stack. Since sudo is normally installed SUID root and invokes its PAM stacks with root privileges, it may happily talk to another user's ssh-agent via that other user's and agent's Unix domain socket, despite of this socket not being accessible to the invoking user directly (since it's protected with Unix file permissions). Being an environment variable, SSH_AUTH_SOCK is under control of the user/attacker invoking sudo. In other words, the code and suggested setup effectively bypass Unix file permissions on ssh-agent sockets.\n\nThis appears to be a design error of pam-ussh.\n\n## Security Impact\nA local user may trick pam-ussh and thus sudo to authenticate itself using another local user's certificate. This other user has to be currently logged in, with ssh-agent active. (The attack script may wait for this condition to be met.) The attacking user doesn't have to possess any certificate at all, nor use ssh-agent themselves. In fact, the attack may likely be mounted even by a compromised system service pseudo-user, provided that sudo is within its reach.\n\n## Reproduction Steps\nNot having access to a setup that Uber actually uses within its infrastructure, I can only be moderately confident that this security issue applies and these steps will work. That said, the reproduction steps may be roughly as follows:\n\n1. Login (over SSH or otherwise) as a non-privileged user to a shell account on a system with pam-ussh deployed for sudo.\n\n2. Check the process list and directories matching /tmp/ssh-* for instances of ssh-agent and their sockets corresponding to other logged in users. If none, then wait until this changes.\n\n3. Infer the target user's ssh-agent socket pathname by listing /tmp/ssh-* and obtaining the PID from the process list. The pathname may be of the form /tmp/ssh-RND/agent.PID, where the \"RND\" and \"PID\" portions are determined from the directory listing and the process list, respectively.\n\n4. Invoke a command like \"SSH_AUTH_SOCK=/tmp/ssh-RND/agent.PID sudo bash\" with the \"RND\" and \"PID\" substituted with substrings identified above.\n\n## Specifics\n* If applicable, what account were you using to test?\n * N/A\n* If applicable, what domain(s) does this vulnerability affect?\n * Unclear - it's internal infrastructure that might be in use behind a variety of Uber services\n* Does this only affect specific versions or vendors?\n * pam-ussh at least as published on GitHub as of today (Feb 8, 2017)\n\nThis might or might not be within scope of Uber's bug bounty program, and I have not actually reproduced the issue - only having identified its likelihood through the source code and documentation. Yet I figured I'd give this communication channel a try, and report this. I'd appreciate a review of these findings and any feedback you might provide.\n\nA related concern is that Go's runtime might not be suitable for use in SUID/SGID programs yet - e.g., it might also have environment variables it trusts too much, as well as many other issues that libc's have been hardened against over the years (and decades). I have not looked into that yet, but you might want to.","vulnerability_information_html":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/uber/pam-ussh\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fuber%2Fpam-ussh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/uber/pam-ussh\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e was open-sourced today (kudos!) and is presumably used within Uber\u0026#39;s infrastructure. This is a PAM module written a Go that \u0026quot;will authenticate a user based on them having an ssh certificate in their ssh-agent signed by a specified ssh CA.\u0026quot; A cursory look at the code and the documentation reveals that the module trusts the SSH_AUTH_SOCK environment variable to determine the Unix domain socket it will use to talk to ssh-agent:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/uber/pam-ussh/blob/a50585bb7a0f16cd4e813509ad1393731cbb9a14/pam_ussh.go#L70\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fuber%2Fpam-ussh%2Fblob%2Fa50585bb7a0f16cd4e813509ad1393731cbb9a14%2Fpam_ussh.go%23L70\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/uber/pam-ussh/blob/a50585bb7a0f16cd4e813509ad1393731cbb9a14/pam_ussh.go#L70\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe documentation suggests configuring the module for sudo\u0026#39;s PAM stack. Since sudo is normally installed SUID root and invokes its PAM stacks with root privileges, it may happily talk to another user\u0026#39;s ssh-agent via that other user\u0026#39;s and agent\u0026#39;s Unix domain socket, despite of this socket not being accessible to the invoking user directly (since it\u0026#39;s protected with Unix file permissions). Being an environment variable, SSH_AUTH_SOCK is under control of the user/attacker invoking sudo. In other words, the code and suggested setup effectively bypass Unix file permissions on ssh-agent sockets.\u003c/p\u003e\n\n\u003cp\u003eThis appears to be a design error of pam-ussh.\u003c/p\u003e\n\n\u003ch2 id=\"security-impact\"\u003eSecurity Impact\u003c/h2\u003e\n\n\u003cp\u003eA local user may trick pam-ussh and thus sudo to authenticate itself using another local user\u0026#39;s certificate. This other user has to be currently logged in, with ssh-agent active. (The attack script may wait for this condition to be met.) The attacking user doesn\u0026#39;t have to possess any certificate at all, nor use ssh-agent themselves. In fact, the attack may likely be mounted even by a compromised system service pseudo-user, provided that sudo is within its reach.\u003c/p\u003e\n\n\u003ch2 id=\"reproduction-steps\"\u003eReproduction Steps\u003c/h2\u003e\n\n\u003cp\u003eNot having access to a setup that Uber actually uses within its infrastructure, I can only be moderately confident that this security issue applies and these steps will work. That said, the reproduction steps may be roughly as follows:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eLogin (over SSH or otherwise) as a non-privileged user to a shell account on a system with pam-ussh deployed for sudo.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eCheck the process list and directories matching /tmp/ssh-* for instances of ssh-agent and their sockets corresponding to other logged in users. If none, then wait until this changes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInfer the target user\u0026#39;s ssh-agent socket pathname by listing /tmp/ssh-* and obtaining the PID from the process list. The pathname may be of the form /tmp/ssh-RND/agent.PID, where the \u0026quot;RND\u0026quot; and \u0026quot;PID\u0026quot; portions are determined from the directory listing and the process list, respectively.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eInvoke a command like \u0026quot;SSH_AUTH_SOCK=/tmp/ssh-RND/agent.PID sudo bash\u0026quot; with the \u0026quot;RND\u0026quot; and \u0026quot;PID\u0026quot; substituted with substrings identified above.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"specifics\"\u003eSpecifics\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eIf applicable, what account were you using to test?\n\n\u003cul\u003e\n\u003cli\u003eN/A\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf applicable, what domain(s) does this vulnerability affect?\n\n\u003cul\u003e\n\u003cli\u003eUnclear - it\u0026#39;s internal infrastructure that might be in use behind a variety of Uber services\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDoes this only affect specific versions or vendors?\n\n\u003cul\u003e\n\u003cli\u003epam-ussh at least as published on GitHub as of today (Feb 8, 2017)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis might or might not be within scope of Uber\u0026#39;s bug bounty program, and I have not actually reproduced the issue - only having identified its likelihood through the source code and documentation. Yet I figured I\u0026#39;d give this communication channel a try, and report this. I\u0026#39;d appreciate a review of these findings and any feedback you might provide.\u003c/p\u003e\n\n\u003cp\u003eA related concern is that Go\u0026#39;s runtime might not be suitable for use in SUID/SGID programs yet - e.g., it might also have environment variables it trusts too much, as well as many other issues that libc\u0026#39;s have been hardened against over the years (and decades). I have not looked into that yet, but you might want to.\u003c/p\u003e\n","bounty_amount":"1500.0","formatted_bounty":"$1,500","weakness":{"id":27,"name":"Improper Authentication - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":22,"voters":["h4ckninja","delimitry","sp1d3rs","dawgyg","tk0","spam404","fillawful","samux","flashdisk","ngalog","and 12 more..."],"severity":{"rating":"medium","score":6.6,"author_type":"User","metrics":{"attack_vector":"local","attack_complexity":"low","privileges_required":"low","user_interaction":"required","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"none"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1475536,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hey @solardiz thank you for this report, our first one for the newly-open sourced pam-ussh module! This is not my area of expertise so I have forwarded your concern over to the internal team. I will let you know as soon as I hear back from them.\n\nBest of luck on the rest of the bug bounty program!","markdown_message":"\u003cp\u003eHey \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e thank you for this report, our first one for the newly-open sourced pam-ussh module! This is not my area of expertise so I have forwarded your concern over to the internal team. I will let you know as soon as I hear back from them.\u003c/p\u003e\n\n\u003cp\u003eBest of luck on the rest of the bug bounty program!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-09T20:23:57.981Z","updated_at":"2017-02-09T20:23:57.981Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1475724,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @solardiz the author confirms the issue and is working on a fix.","markdown_message":"\u003cp\u003eHey \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e the author confirms the issue and is working on a fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-09T21:44:15.869Z","updated_at":"2017-02-09T21:44:15.869Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1475926,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @dnathe4th! Thank you for the timely \u0026 clear communication on this issue.\n\nIf the author likes and doesn't mind sharing, I'd be happy to comment on possible approaches to fixing the issue that they might be considering. One approach could be to have the PAM module temporarily switch the euid to the user's. Another could be to verify the Unix domain socket ownership (preferably in a race-free manner, although in this case there are mitigating factors already). Or both. There are other approaches as well, but those feel more invasive (would be harder to deploy).","markdown_message":"\u003cp\u003eHi \u003ca href=\"/dnathe4th\"\u003e@dnathe4th\u003c/a\u003e! Thank you for the timely \u0026amp; clear communication on this issue.\u003c/p\u003e\n\n\u003cp\u003eIf the author likes and doesn\u0026#39;t mind sharing, I\u0026#39;d be happy to comment on possible approaches to fixing the issue that they might be considering. One approach could be to have the PAM module temporarily switch the euid to the user\u0026#39;s. Another could be to verify the Unix domain socket ownership (preferably in a race-free manner, although in this case there are mitigating factors already). Or both. There are other approaches as well, but those feel more invasive (would be harder to deploy).\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-09T23:12:58.811Z","updated_at":"2017-02-09T23:12:58.811Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1476062,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @solardiz ! We appreciate the recommendations and I have forwarded them on to the author. I believe he already has a fix in progress but additional suggestions are always welcome. I will reach back out next update I get from him.","markdown_message":"\u003cp\u003eHey \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e ! We appreciate the recommendations and I have forwarded them on to the author. I believe he already has a fix in progress but additional suggestions are always welcome. I will reach back out next update I get from him.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-10T00:55:31.729Z","updated_at":"2017-02-10T00:55:31.729Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1477681,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @solardiz ! The author and team are working through a proposed solution to your report. They are still discussing how to avoid the race condition currently present in the attached patch, but asked me to send it your way in case you had additional feedback for this in-progress work.\n\nThank you for taking the time to work through this with us!","markdown_message":"\u003cp\u003eHey \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e ! The author and team are working through a proposed solution to your report. They are still discussing how to avoid the race condition currently present in the attached patch, but asked me to send it your way in case you had additional feedback for this in-progress work.\u003c/p\u003e\n\n\u003cp\u003eThank you for taking the time to work through this with us!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-10T18:39:43.159Z","updated_at":"2017-02-10T18:39:43.159Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":159498,"filename":"pam_ussh.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/159/498/b227be12b29686efcee4308bf18f9c83c749682b/pam_ussh.patch?response-content-disposition=attachment%3B%20filename%3D%22pam_ussh.patch%22%3B%20filename%2A%3DUTF-8%27%27pam_ussh.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYENXQUKC%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045448Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHXwr%2Bz%2B7j54GXjIZDeFjE7V4KhtcLVpveDKyRp%2FgHMpAiEA%2FzBLaI4tlPUnNvgzY0X8n68OkDDLSfCBmjTZSd2A%2BM8qtAMIVRABGgwwMTM2MTkyNzQ4NDkiDOLyu53NKIhzdiDnLyqRA1YiznmwUquOZL6cfEwHlrCEbfV1uip5mxrCKpzmpc9DKyYejzEqNMg8%2Fo1XQZiQbQ9Mn8QGMjtqUBvpzsRmfLsdw4KO6Yix26%2Foq9H6jcEfUIX3EyFaY0ofGk42HT5lnakJ%2FUAtv5lyqirA3laDcoq6u60WpxBZh0jLi92Ajs9kGkzDbgWJPXMK2%2FlVglZWa%2BjQNhDftrEqJh4ZV%2FIwfbcJ6s89eju9B4Xkun1IUiVjrUtA5LTMlkDAEwqtGdl3pucepUSB2hZBvbqUfgiT65T%2BpLDNg0LFqEXPPPqqyrYG3%2BqTXIZxR1FfbdXOQjx1UoPwboCHOwSOpOKGaPs6TEM2o6Sg2U%2BGvuy3dMdtNBCfH4SIfBdeUa84eWUftCR4OwBiC0F1Cl6iPIZXa92zkJSAVTz9swPvr%2BghYLYGIjX%2F8jqVGlADsLB1sl%2BqlNRFkwYrvTDOWwnYmDuvQmmhpAQ6Mg%2Fp05v07WKHRsbG%2BAUzVJ3M02i0HIdWCGKjqKXgGZi%2FLBrHUEV9bzaVWmpeFEE3MObUqv8FOusBMEus3670kEKa62xVKQkID%2Fav5Xylzf384wPv9i4fBKmwghqKR67wSDPkErUtnTlN6wJNos0uBd5jibop6zjPh%2BDMaeI%2Bt4z0CbNpMS83WKn2xS%2FvSK0QFyg217PkDWCKklNPmbumtDteHdU2qRRX%2BQwVoTBmoRFgs97OyKXEz2rc7ZIcHuDnAibsNVPNZEuX9m%2B04KKBBkwdIr0sY3zEiVHvTVxPYBSsKfBPuZwzi6W3T3aq%2BF9l860FnFBaV964%2BlbASqZkuTd4cEZ8C2GJad6RyY164GfHgpKnmQ6aYbLhiDTz0xF3adlmhg%3D%3D\u0026X-Amz-Signature=b0ad8154887aef5f5dd046483c429b4e03264d894f745b1b920b78549b5bf22d"}],"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1478225,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for sharing the patch, @dnathe4th.\n\nMeanwhile, I've been thinking of how to fix this issue best, and I came to the conclusion that the straightforward approach, as this patch takes, results in races that appear unavoidable within traditional Unix syscall semantics. Traditionally, code trying to access untrusted pathnames yet running with excessive privileges uses pre- and post-checks to make sure the file opened is actually the file that was meant to be opened. This would also work for a FIFO, but it doesn't work for Unix domain sockets. Besides, with that approach other (relatively minor) problems traditionally remain: potential side-effects on open(), or in this case on connect() - e.g. another/unintended service receiving a connection attempt, and these attempts/checks serving as an oracle to probe for existence of filesystem entries (not necessarily sockets, and anywhere among mounted filesystems) in directories that the invoking user couldn't have accessed directly.\n\nIn other words, when fixing the main issue (the one with authentication) we should also have in mind that this is privileged code that might have side-effects and/or infoleaks unrelated to its purpose, and the straightforward approach in fact keeps the code problematic in those ways - as well as, and more importantly, in not fully fixing the original issue because of the races, which probably allow for the wrong socket to be accessed again, through the attacker replacing their dummy socket or its holding directory with a (sym)link to the victim's directory/socket. Even if the code post-checked the pathname again, that would be no guarantee the attacker had not replaced the directory/socket back. The attacker can probably manage to obtain the same st_ino, too. (At least with sequential inode number allocation.)\n\nSo I recommend that you temporarily set euid to the target user's id, which in case of running from sudo should match the current ruid, and then after connecting to the socket (or failing) set euid back to whatever it was. The latter operation should work due to saved IDs. For example, see our non-fsuid implementaiton of ch_uid() here:\n\nhttp://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/tcb/tcb/libs/libtcb.c?rev=1.9\n\n(If you were working with files, I'd recommend only changing fsuid, but it's unclear whether it's supposed to apply to Unix domain sockets as well or not - so changing the euid seems a safer bet in this case.)\n\nKeeping the stat() checks as well is fine, but only as an extra.\n\nOh, and passing the arbitrary attacker-chosen pathname as part of pamLog() message might not be a good idea - e.g., can make this pathname itself be the string \"file /whatever (owner whoevertoblame, uid 1000)\" followed by enough whitespace that the rest of the string doesn't fit into a buffer and is truncated. Similarly, the username is only OK to log if it's been validated, whereas in the code we should have !ok for invalid usernames as well. I suggest only logging the uid's.\n\nI hope this helps.","markdown_message":"\u003cp\u003eThanks for sharing the patch, \u003ca href=\"/dnathe4th\"\u003e@dnathe4th\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eMeanwhile, I\u0026#39;ve been thinking of how to fix this issue best, and I came to the conclusion that the straightforward approach, as this patch takes, results in races that appear unavoidable within traditional Unix syscall semantics. Traditionally, code trying to access untrusted pathnames yet running with excessive privileges uses pre- and post-checks to make sure the file opened is actually the file that was meant to be opened. This would also work for a FIFO, but it doesn\u0026#39;t work for Unix domain sockets. Besides, with that approach other (relatively minor) problems traditionally remain: potential side-effects on open(), or in this case on connect() - e.g. another/unintended service receiving a connection attempt, and these attempts/checks serving as an oracle to probe for existence of filesystem entries (not necessarily sockets, and anywhere among mounted filesystems) in directories that the invoking user couldn\u0026#39;t have accessed directly.\u003c/p\u003e\n\n\u003cp\u003eIn other words, when fixing the main issue (the one with authentication) we should also have in mind that this is privileged code that might have side-effects and/or infoleaks unrelated to its purpose, and the straightforward approach in fact keeps the code problematic in those ways - as well as, and more importantly, in not fully fixing the original issue because of the races, which probably allow for the wrong socket to be accessed again, through the attacker replacing their dummy socket or its holding directory with a (sym)link to the victim\u0026#39;s directory/socket. Even if the code post-checked the pathname again, that would be no guarantee the attacker had not replaced the directory/socket back. The attacker can probably manage to obtain the same st_ino, too. (At least with sequential inode number allocation.)\u003c/p\u003e\n\n\u003cp\u003eSo I recommend that you temporarily set euid to the target user\u0026#39;s id, which in case of running from sudo should match the current ruid, and then after connecting to the socket (or failing) set euid back to whatever it was. The latter operation should work due to saved IDs. For example, see our non-fsuid implementaiton of ch_uid() here:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"http://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/tcb/tcb/libs/libtcb.c?rev=1.9\" href=\"/redirect?url=http%3A%2F%2Fcvsweb.openwall.com%2Fcgi%2Fcvsweb.cgi%2FOwl%2Fpackages%2Ftcb%2Ftcb%2Flibs%2Flibtcb.c%3Frev%3D1.9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/tcb/tcb/libs/libtcb.c?rev=1.9\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e(If you were working with files, I\u0026#39;d recommend only changing fsuid, but it\u0026#39;s unclear whether it\u0026#39;s supposed to apply to Unix domain sockets as well or not - so changing the euid seems a safer bet in this case.)\u003c/p\u003e\n\n\u003cp\u003eKeeping the stat() checks as well is fine, but only as an extra.\u003c/p\u003e\n\n\u003cp\u003eOh, and passing the arbitrary attacker-chosen pathname as part of pamLog() message might not be a good idea - e.g., can make this pathname itself be the string \u0026quot;file /whatever (owner whoevertoblame, uid 1000)\u0026quot; followed by enough whitespace that the rest of the string doesn\u0026#39;t fit into a buffer and is truncated. Similarly, the username is only OK to log if it\u0026#39;s been validated, whereas in the code we should have !ok for invalid usernames as well. I suggest only logging the uid\u0026#39;s.\u003c/p\u003e\n\n\u003cp\u003eI hope this helps.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-10T23:12:06.769Z","updated_at":"2017-02-10T23:12:06.769Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1478295,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It sounds like they independently came to a similar conclusion and went with the euid swap. I attached their current proposed patch if you are interested.\n\nThank you for the continued iterations on this update!","markdown_message":"\u003cp\u003eIt sounds like they independently came to a similar conclusion and went with the euid swap. I attached their current proposed patch if you are interested.\u003c/p\u003e\n\n\u003cp\u003eThank you for the continued iterations on this update!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-10T23:49:32.378Z","updated_at":"2017-02-10T23:49:32.378Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":159565,"filename":"0001-pam-ussh-fix-bug-reported-by-Solar-Designer.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/159/565/d68d284aaa2c59002023513a1ecde1ea4abfa3d5/0001-pam-ussh-fix-bug-reported-by-Solar-Designer.patch?response-content-disposition=attachment%3B%20filename%3D%220001-pam-ussh-fix-bug-reported-by-Solar-Designer.patch%22%3B%20filename%2A%3DUTF-8%27%270001-pam-ussh-fix-bug-reported-by-Solar-Designer.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYENXQUKC%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045448Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHXwr%2Bz%2B7j54GXjIZDeFjE7V4KhtcLVpveDKyRp%2FgHMpAiEA%2FzBLaI4tlPUnNvgzY0X8n68OkDDLSfCBmjTZSd2A%2BM8qtAMIVRABGgwwMTM2MTkyNzQ4NDkiDOLyu53NKIhzdiDnLyqRA1YiznmwUquOZL6cfEwHlrCEbfV1uip5mxrCKpzmpc9DKyYejzEqNMg8%2Fo1XQZiQbQ9Mn8QGMjtqUBvpzsRmfLsdw4KO6Yix26%2Foq9H6jcEfUIX3EyFaY0ofGk42HT5lnakJ%2FUAtv5lyqirA3laDcoq6u60WpxBZh0jLi92Ajs9kGkzDbgWJPXMK2%2FlVglZWa%2BjQNhDftrEqJh4ZV%2FIwfbcJ6s89eju9B4Xkun1IUiVjrUtA5LTMlkDAEwqtGdl3pucepUSB2hZBvbqUfgiT65T%2BpLDNg0LFqEXPPPqqyrYG3%2BqTXIZxR1FfbdXOQjx1UoPwboCHOwSOpOKGaPs6TEM2o6Sg2U%2BGvuy3dMdtNBCfH4SIfBdeUa84eWUftCR4OwBiC0F1Cl6iPIZXa92zkJSAVTz9swPvr%2BghYLYGIjX%2F8jqVGlADsLB1sl%2BqlNRFkwYrvTDOWwnYmDuvQmmhpAQ6Mg%2Fp05v07WKHRsbG%2BAUzVJ3M02i0HIdWCGKjqKXgGZi%2FLBrHUEV9bzaVWmpeFEE3MObUqv8FOusBMEus3670kEKa62xVKQkID%2Fav5Xylzf384wPv9i4fBKmwghqKR67wSDPkErUtnTlN6wJNos0uBd5jibop6zjPh%2BDMaeI%2Bt4z0CbNpMS83WKn2xS%2FvSK0QFyg217PkDWCKklNPmbumtDteHdU2qRRX%2BQwVoTBmoRFgs97OyKXEz2rc7ZIcHuDnAibsNVPNZEuX9m%2B04KKBBkwdIr0sY3zEiVHvTVxPYBSsKfBPuZwzi6W3T3aq%2BF9l860FnFBaV964%2BlbASqZkuTd4cEZ8C2GJad6RyY164GfHgpKnmQ6aYbLhiDTz0xF3adlmhg%3D%3D\u0026X-Amz-Signature=f79f8e7d442e2e26ea85f9143f6aa9dde172234662b871100bea8e8aac5a5548"}],"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1478322,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks. This is now good in concept, but problematic in implementation. I'll post a more detailed comment a bit later - am busy at the moment.","markdown_message":"\u003cp\u003eThanks. This is now good in concept, but problematic in implementation. I\u0026#39;ll post a more detailed comment a bit later - am busy at the moment.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-11T00:10:44.203Z","updated_at":"2017-02-11T00:10:44.203Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1478450,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Issues with that patch:\n\n1. The call to setuid(0) is wrong in that it will do more than is needed. We have previously only changed the euid - now with setuid(0) we're also setting the real uid to 0 even if it wasn't 0 before we started. It should be replaced with seteuid(origEUID). The change_uid() and setuid() functions may then be dropped.\n\n2. The check \"os.Getuid() != origEUID\" may be enhanced to also take care of the case where the invoking program has already fully switched to root, but we're authenticating against a non-root user's ssh-agent. Thus, \"os.Getuid() != origEUID || origEUID == 0\".\n\n3. The fileUID() check should be after the seteuid(uid) call. Otherwise we have that oracle/infoleak that I mentioned in a previous comment, allowing for probing of arbitrary inaccessible pathnames.\n\n4. Also as I mentioned in that other comment, I suggest that you avoid including the attacker-controlled socket pathname in the log message.","markdown_message":"\u003cp\u003eIssues with that patch:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eThe call to setuid(0) is wrong in that it will do more than is needed. We have previously only changed the euid - now with setuid(0) we\u0026#39;re also setting the real uid to 0 even if it wasn\u0026#39;t 0 before we started. It should be replaced with seteuid(origEUID). The change_uid() and setuid() functions may then be dropped.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe check \u0026quot;os.Getuid() != origEUID\u0026quot; may be enhanced to also take care of the case where the invoking program has already fully switched to root, but we\u0026#39;re authenticating against a non-root user\u0026#39;s ssh-agent. Thus, \u0026quot;os.Getuid() != origEUID || origEUID == 0\u0026quot;.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe fileUID() check should be after the seteuid(uid) call. Otherwise we have that oracle/infoleak that I mentioned in a previous comment, allowing for probing of arbitrary inaccessible pathnames.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAlso as I mentioned in that other comment, I suggest that you avoid including the attacker-controlled socket pathname in the log message.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2017-02-11T01:19:27.579Z","updated_at":"2017-02-11T01:19:27.579Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1478482,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Further comments on the patch (\"non-issues\"):\n\n5. On Linux, whether seteuid() and setuid() are per-thread or not depends on whether you're invoking the direct syscalls or the glibc wrappers of the same name. You possibly already found the discussion at https://github.com/golang/go/issues/1435 where it's said that in Go they happened to be per-thread, yet in there test.go calls syscall.Setuid(), whereas you use an import \"C\" block #include'ing glibc headers and calling those functions. Thus, while I am not familiar with Go, it appears to me that in your case you'd likely be invoking the function versions that are trying to apply the change across all threads (whether they succeed is another matter - it's a can of worms). This means that your source code comments are probably wrong.\n\n6. \"Luckily\", PAM modules are commonly or even typically not thread-safe anyway, and certainly e.g. sudo shouldn't expect thread-safety there. (It's yet another reason why it's pretty crazy to have a PAM module in Go, in my opinion. Why take the extra risks? But I digress.)\n\n7. Similarly, you don't really have to use the *_r() function versions, but if you do I recommend you don't rely solely on the semantics where they NULL out the provided pointer on error. I recommend that you also check the return value.\n\n8. Good thinking about ptrace. On Linux, the dumpable flag is reset automagically on SUID exec as well as when the program changes uid's. This has been so for 20+ years. I don't know re: Mac OS X; I hope they also started doing it right many years ago, but I wouldn't vouch for that. So while your code is likely redundant in that respect, it's indeed OK to keep those hardening changes.\n\n9. I would recommend s/8096/8192/ for clarity (I guess you upgraded this from 4096, but forgot to edit the 96) and, more importantly, I recommend to use sizeof(buf) instead of the constant in the function calls.\n\n10. Strictly speaking, and for some use cases this could conceivably be a real issue, you could also want to switch egid and groups. This could matter in case the module is invoked from a service (so has not only uid 0, but also e.g. gid 0), yet somehow the env var is defined. However, this complicates the logic (of when to do it, how to recover from failures), and I am tired - don't want to increase the number of iterations of code review. ;-) So maybe document this somewhere?","markdown_message":"\u003cp\u003eFurther comments on the patch (\u0026quot;non-issues\u0026quot;):\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eOn Linux, whether seteuid() and setuid() are per-thread or not depends on whether you\u0026#39;re invoking the direct syscalls or the glibc wrappers of the same name. You possibly already found the discussion at \u003ca title=\"https://github.com/golang/go/issues/1435\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F1435\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/golang/go/issues/1435\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e where it\u0026#39;s said that in Go they happened to be per-thread, yet in there test.go calls syscall.Setuid(), whereas you use an import \u0026quot;C\u0026quot; block #include\u0026#39;ing glibc headers and calling those functions. Thus, while I am not familiar with Go, it appears to me that in your case you\u0026#39;d likely be invoking the function versions that are trying to apply the change across all threads (whether they succeed is another matter - it\u0026#39;s a can of worms). This means that your source code comments are probably wrong.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003e\u0026quot;Luckily\u0026quot;, PAM modules are commonly or even typically not thread-safe anyway, and certainly e.g. sudo shouldn\u0026#39;t expect thread-safety there. (It\u0026#39;s yet another reason why it\u0026#39;s pretty crazy to have a PAM module in Go, in my opinion. Why take the extra risks? But I digress.)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSimilarly, you don\u0026#39;t really have to use the *_r() function versions, but if you do I recommend you don\u0026#39;t rely solely on the semantics where they NULL out the provided pointer on error. I recommend that you also check the return value.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGood thinking about ptrace. On Linux, the dumpable flag is reset automagically on SUID exec as well as when the program changes uid\u0026#39;s. This has been so for 20+ years. I don\u0026#39;t know re: Mac OS X; I hope they also started doing it right many years ago, but I wouldn\u0026#39;t vouch for that. So while your code is likely redundant in that respect, it\u0026#39;s indeed OK to keep those hardening changes.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI would recommend s/8096/8192/ for clarity (I guess you upgraded this from 4096, but forgot to edit the 96) and, more importantly, I recommend to use sizeof(buf) instead of the constant in the function calls.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eStrictly speaking, and for some use cases this could conceivably be a real issue, you could also want to switch egid and groups. This could matter in case the module is invoked from a service (so has not only uid 0, but also e.g. gid 0), yet somehow the env var is defined. However, this complicates the logic (of when to do it, how to recover from failures), and I am tired - don\u0026#39;t want to increase the number of iterations of code review. ;-) So maybe document this somewhere?\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2017-02-11T01:43:11.045Z","updated_at":"2017-02-11T01:43:11.045Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1481327,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I see that most of what I pointed out has been addressed, and the fix made public. That's great. Thank you!\n\nOut of those I pointed out before, the only fix missed, and one still needed, is this:\n\n\"The fileUID() check should be after the seteuid(uid) call. Otherwise we have that oracle/infoleak that I mentioned in a previous comment, allowing for probing of arbitrary inaccessible pathnames.\"\n\nSpecifically, the line \"ownerUID := fileUID(authSock)\" (and its preceding comment) should be moved to below the \"if {  ... }\" block that follows (the one that switches euid). I guess maybe my earlier comment about the oracle/infoleak wasn't communicated to the author, so this concern wasn't understood?\n\nMeanwhile, I updated my understanding of PAM thread-safety. Things have improved a bit since last time I had checked (years ago). It appears that now Linux-PAM's pam_unix does use getpwnam_r() and friends, yet it still switches the process global uids:\n\nhttps://git.fedorahosted.org/cgit/linux-pam.git/tree/modules/pam_unix/passverify.c#n154\nhttps://git.fedorahosted.org/cgit/linux-pam.git/tree/libpam/pam_modutil_getpwnam.c\n\nThis combination appears to be similar to what pam-ussh does now. So this detail on PAM is JFYI, no action needed on it.\n\nIn your code, if you wanted to be thread-safer than pam_unix, you could probably switch fsuid instead of euid, which should do the trick in this case due to parent directory permissions - and in fact the uncertainty regarding whether/how permissions on Unix sockets themselves are applied (across different Unix-likes) is probably the reason why OpenSSH does this mkdtemp() in the first place. Note that there's no getfsuid() - instead, setfsuid()'s return value is the previous fsuid. fsuid should per-thread even with glibc (not only direct syscall). Again, this is just an option, and no change is necessary.\n\nThanks again for the prompt fix.","markdown_message":"\u003cp\u003eI see that most of what I pointed out has been addressed, and the fix made public. That\u0026#39;s great. Thank you!\u003c/p\u003e\n\n\u003cp\u003eOut of those I pointed out before, the only fix missed, and one still needed, is this:\u003c/p\u003e\n\n\u003cp\u003e\u0026quot;The fileUID() check should be after the seteuid(uid) call. Otherwise we have that oracle/infoleak that I mentioned in a previous comment, allowing for probing of arbitrary inaccessible pathnames.\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eSpecifically, the line \u0026quot;ownerUID := fileUID(authSock)\u0026quot; (and its preceding comment) should be moved to below the \u0026quot;if {  ... }\u0026quot; block that follows (the one that switches euid). I guess maybe my earlier comment about the oracle/infoleak wasn\u0026#39;t communicated to the author, so this concern wasn\u0026#39;t understood?\u003c/p\u003e\n\n\u003cp\u003eMeanwhile, I updated my understanding of PAM thread-safety. Things have improved a bit since last time I had checked (years ago). It appears that now Linux-PAM\u0026#39;s pam_unix does use getpwnam_r() and friends, yet it still switches the process global uids:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://git.fedorahosted.org/cgit/linux-pam.git/tree/modules/pam_unix/passverify.c#n154\" href=\"/redirect?url=https%3A%2F%2Fgit.fedorahosted.org%2Fcgit%2Flinux-pam.git%2Ftree%2Fmodules%2Fpam_unix%2Fpassverify.c%23n154\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://git.fedorahosted.org/cgit/linux-pam.git/tree/modules/pam_unix/passverify.c#n154\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://git.fedorahosted.org/cgit/linux-pam.git/tree/libpam/pam_modutil_getpwnam.c\" href=\"/redirect?url=https%3A%2F%2Fgit.fedorahosted.org%2Fcgit%2Flinux-pam.git%2Ftree%2Flibpam%2Fpam_modutil_getpwnam.c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://git.fedorahosted.org/cgit/linux-pam.git/tree/libpam/pam_modutil_getpwnam.c\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis combination appears to be similar to what pam-ussh does now. So this detail on PAM is JFYI, no action needed on it.\u003c/p\u003e\n\n\u003cp\u003eIn your code, if you wanted to be thread-safer than pam_unix, you could probably switch fsuid instead of euid, which should do the trick in this case due to parent directory permissions - and in fact the uncertainty regarding whether/how permissions on Unix sockets themselves are applied (across different Unix-likes) is probably the reason why OpenSSH does this mkdtemp() in the first place. Note that there\u0026#39;s no getfsuid() - instead, setfsuid()\u0026#39;s return value is the previous fsuid. fsuid should per-thread even with glibc (not only direct syscall). Again, this is just an option, and no change is necessary.\u003c/p\u003e\n\n\u003cp\u003eThanks again for the prompt fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-13T04:54:36.461Z","updated_at":"2017-02-13T04:54:36.461Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1481419,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nthis is peter, the pam-ussh author. first of all, thank you so much for posting this initial bug report, and for following up with the reviews and comments. i'm a little embarrassed by how trivial this bug was, and i'm trying to blame my co-workers for missing it in review, but they're having none of it (this bug is all on me).\n\nanyway, I tried posting a reply earlier but I didn't have appropriate h1 perms to it ended up being an internal only comment.\n\nregarding the fileUID check; I agree that it can be used force the pam-ussh module to reveal more info than the caller would get from running, eg. ls(1), but it seems like if a user is on the system, they should be able to figure out everything that fileUID returns via 'ls /tmp' and 'ps auxgw | grep ssh-agent', right? If the auth sock's are just /tmp/ssh-\u003crandom\u003e/agent.\u003cpid\u003e, it's not much work to figure out \u003cpid\u003e and \u003crandom\u003e. But from the admin's perspective, a log line of\n\n   pam-ussh[54762]: error opening auth sock (sock owner: 4015/alice) by (caller: 4027/mallory)\n\nis more useful than\n\n   pam-ussh[54762]: error opening auth sock by (caller: 4027/mallory)\n\nor am I missing something?","markdown_message":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003ethis is peter, the pam-ussh author. first of all, thank you so much for posting this initial bug report, and for following up with the reviews and comments. i\u0026#39;m a little embarrassed by how trivial this bug was, and i\u0026#39;m trying to blame my co-workers for missing it in review, but they\u0026#39;re having none of it (this bug is all on me).\u003c/p\u003e\n\n\u003cp\u003eanyway, I tried posting a reply earlier but I didn\u0026#39;t have appropriate h1 perms to it ended up being an internal only comment.\u003c/p\u003e\n\n\u003cp\u003eregarding the fileUID check; I agree that it can be used force the pam-ussh module to reveal more info than the caller would get from running, eg. ls(1), but it seems like if a user is on the system, they should be able to figure out everything that fileUID returns via \u0026#39;ls /tmp\u0026#39; and \u0026#39;ps auxgw | grep ssh-agent\u0026#39;, right? If the auth sock\u0026#39;s are just /tmp/ssh-\u0026lt;random\u0026gt;/agent.\u0026lt;pid\u0026gt;, it\u0026#39;s not much work to figure out \u0026lt;pid\u0026gt; and \u0026lt;random\u0026gt;. But from the admin\u0026#39;s perspective, a log line of\u003c/p\u003e\n\n\u003cp\u003epam-ussh[54762]: error opening auth sock (sock owner: 4015/alice) by (caller: 4027/mallory)\u003c/p\u003e\n\n\u003cp\u003eis more useful than\u003c/p\u003e\n\n\u003cp\u003epam-ussh[54762]: error opening auth sock by (caller: 4027/mallory)\u003c/p\u003e\n\n\u003cp\u003eor am I missing something?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-13T06:18:21.485Z","updated_at":"2017-02-13T06:18:21.485Z","actor":{"username":"pmoody-uber","cleared":false,"url":"/pmoody-uber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1482738,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Peter! Nice to talk to you directly. (I was already wondering if I should possibly move further discussion to GitHub or e-mail.)\n\nThank you for your prompt handling of this issue and its related sub-issues!\n\nI think you're missing my point regarding the fileUID check. I'll try to explain:\n\nThe problem with doing this check prior to the euid switch isn't limited to accessing another user's ssh-agent socket. It is about probing for existence of any pathname anywhere on the mounted filesystems, not limited to /tmp, nor to sockets. Side-channels allowing for such probing may include timing, log file size growth, log file contents (if readable), and probably/eventually more (e.g., some procfs or sysfs file showing stats on the user's own sudo's use of system resources - protection of such files for user's own invocations of SUID/SGID programs is traditionally inconsistent).\n\nFixing this doesn't strictly require omitting the \"(sock owner: 4015/alice)\" detail from the log message. However, I think I see what you mean: since the other user socket's parent directory is not readable after you've switched the euid, you wouldn't be able to check permissions directly on the socket itself. If you like, you could then fall back to recording permissions of the directory, just for the log message (and have it say those are for the directory). I am not sure if this complexity is justified.\n\nOne more issue I haven't yet mentioned: much of our logic so far is specific to sudo's use of the module. In case the module is stacked for su, the logic falls apart. The target user would be root, so that's the username you'd obtain from PAM and you would be accessing the socket with root privileges. However, the env var remains under control of an unprivileged user (and moreover even if it is not altered then it's set to point to the user's socket). Your \"pam-ussh: check cert against the pam username\" commit hopefully defeats the obvious attack on the authentication (although this depends on some external/setup detail), but it doesn't deal with the pathname probing issue above. Maybe you should re-word the README some further, stating that the module is _only_ meant for use with sudo, and any other use may be unsafe?","markdown_message":"\u003cp\u003eHi Peter! Nice to talk to you directly. (I was already wondering if I should possibly move further discussion to GitHub or e-mail.)\u003c/p\u003e\n\n\u003cp\u003eThank you for your prompt handling of this issue and its related sub-issues!\u003c/p\u003e\n\n\u003cp\u003eI think you\u0026#39;re missing my point regarding the fileUID check. I\u0026#39;ll try to explain:\u003c/p\u003e\n\n\u003cp\u003eThe problem with doing this check prior to the euid switch isn\u0026#39;t limited to accessing another user\u0026#39;s ssh-agent socket. It is about probing for existence of any pathname anywhere on the mounted filesystems, not limited to /tmp, nor to sockets. Side-channels allowing for such probing may include timing, log file size growth, log file contents (if readable), and probably/eventually more (e.g., some procfs or sysfs file showing stats on the user\u0026#39;s own sudo\u0026#39;s use of system resources - protection of such files for user\u0026#39;s own invocations of SUID/SGID programs is traditionally inconsistent).\u003c/p\u003e\n\n\u003cp\u003eFixing this doesn\u0026#39;t strictly require omitting the \u0026quot;(sock owner: 4015/alice)\u0026quot; detail from the log message. However, I think I see what you mean: since the other user socket\u0026#39;s parent directory is not readable after you\u0026#39;ve switched the euid, you wouldn\u0026#39;t be able to check permissions directly on the socket itself. If you like, you could then fall back to recording permissions of the directory, just for the log message (and have it say those are for the directory). I am not sure if this complexity is justified.\u003c/p\u003e\n\n\u003cp\u003eOne more issue I haven\u0026#39;t yet mentioned: much of our logic so far is specific to sudo\u0026#39;s use of the module. In case the module is stacked for su, the logic falls apart. The target user would be root, so that\u0026#39;s the username you\u0026#39;d obtain from PAM and you would be accessing the socket with root privileges. However, the env var remains under control of an unprivileged user (and moreover even if it is not altered then it\u0026#39;s set to point to the user\u0026#39;s socket). Your \u0026quot;pam-ussh: check cert against the pam username\u0026quot; commit hopefully defeats the obvious attack on the authentication (although this depends on some external/setup detail), but it doesn\u0026#39;t deal with the pathname probing issue above. Maybe you should re-word the README some further, stating that the module is \u003cu\u003eonly\u003c/u\u003e meant for use with sudo, and any other use may be unsafe?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-13T17:24:10.526Z","updated_at":"2017-02-13T17:24:10.526Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1482840,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ah, of course. I'll stat the owning directory. \n\ncan you open an issue on github for the stacking issue? I think you're correct in your analysis that check the username against the cert should prevent the obvious bug (another embarrassing omission from the original commit :-/) but I want to be sure and that discussion is probably outside of the scope of h1.\n\nThanks again. This has been incredibly helpful.","markdown_message":"\u003cp\u003eAh, of course. I\u0026#39;ll stat the owning directory. \u003c/p\u003e\n\n\u003cp\u003ecan you open an issue on github for the stacking issue? I think you\u0026#39;re correct in your analysis that check the username against the cert should prevent the obvious bug (another embarrassing omission from the original commit :-/) but I want to be sure and that discussion is probably outside of the scope of h1.\u003c/p\u003e\n\n\u003cp\u003eThanks again. This has been incredibly helpful.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-13T18:00:11.639Z","updated_at":"2017-02-13T18:00:11.639Z","actor":{"username":"pmoody-uber","cleared":false,"url":"/pmoody-uber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1483442,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"OK, created https://github.com/uber/pam-ussh/issues/4","markdown_message":"\u003cp\u003eOK, created \u003ca title=\"https://github.com/uber/pam-ussh/issues/4\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fuber%2Fpam-ussh%2Fissues%2F4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/uber/pam-ussh/issues/4\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-13T21:45:54.357Z","updated_at":"2017-02-13T21:45:54.357Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1499902,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hey @solardiz , thank you one final time for your work on this. It looks like everything is wrapped up and the version bumped, so I am closing this as resolved.\n\nOur team meets weekly to evaluate resolved reports for bounties, so expect to hear back from us soon. Have a great day!","markdown_message":"\u003cp\u003eHey \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e , thank you one final time for your work on this. It looks like everything is wrapped up and the version bumped, so I am closing this as resolved.\u003c/p\u003e\n\n\u003cp\u003eOur team meets weekly to evaluate resolved reports for bounties, so expect to hear back from us soon. Have a great day!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-22T18:38:46.941Z","updated_at":"2017-02-22T18:38:46.941Z","actor":{"username":"dnathe4th","cleared":false,"url":"/dnathe4th","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/064/148/cd4147cc3e2922a84021a0f466a83a16ed250f81_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"solardiz","url":"/solardiz"},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1513764,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Hi @solardiz, thanks for this report, and for your participation in our bug bounty program. This was the first submission for an open-source project for our program, and we appreciate your time working with us through the fix. We hope to see more submissions from you in the future! ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/solardiz\"\u003e@solardiz\u003c/a\u003e, thanks for this report, and for your participation in our bug bounty program. This was the first submission for an open-source project for our program, and we appreciate your time working with us through the fix. We hope to see more submissions from you in the future! \u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-01T17:08:27.523Z","updated_at":"2017-03-01T17:08:27.523Z","actor":{"url":"/uber","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/314/24ea21370a71b18eafb5722d5855825ab622b5dd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Uber"}},"bounty_amount":"1500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"uber","collaborator":{"username":"solardiz","url":"/solardiz"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1514222,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you! How about making this issue public (I mean the HackerOne discussion above, as the actual bug and fix are already public via GitHub commits)? You could use this to set a precedent about your open source projects being in scope and eligible to bounty payouts. Maybe that would encourage others to report bugs in those as well.","markdown_message":"\u003cp\u003eThank you! How about making this issue public (I mean the HackerOne discussion above, as the actual bug and fix are already public via GitHub commits)? You could use this to set a precedent about your open source projects being in scope and eligible to bounty payouts. Maybe that would encourage others to report bugs in those as well.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-03-01T20:27:21.496Z","updated_at":"2017-03-01T20:27:21.496Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1552862,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-03-20T18:07:32.322Z","updated_at":"2017-03-20T18:07:32.322Z","first_to_agree":true,"actor":{"username":"fletcher","cleared":false,"url":"/fletcher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/090/8b777383ddc3ab23063609c8beb1cb1f689a75c1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1553089,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-03-20T19:57:39.616Z","updated_at":"2017-03-20T19:57:39.616Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1553090,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-03-20T19:57:39.665Z","updated_at":"2017-03-20T19:57:39.665Z","actor":{"username":"solardiz","cleared":false,"url":"/solardiz","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"uber","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}