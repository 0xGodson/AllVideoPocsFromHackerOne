{"id":73246,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI0Ng==","url":"https://hackerone.com/reports/73246","title":"Use-after-free in php_curl related to CURLOPT_FILE/_INFILE/_WRITEHEADER","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-03-27T00:00:00.000Z","submitted_at":"2015-03-27T00:00:00.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mongo","url":"/mongo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/019/482/fe5ab898025ee366ad00c3b43f2404bbccb9f160_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-04-14T00:00:00.000Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-04-14T00:00:00.000Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"https://bugs.php.net/bug.php?id=69316\n\nDescription:\n------------\nAll the relevant code mentioned below is in ext/curl/interface.c.\nAs far as I can see, every PHP version after (at least) 5.0 is affected; possibly older versions too.\n\nWhen using CURLOPT_WRITEHEADER, CURLOPT_INFILE or CURLOPT_FILE, in _php_curl_setopt, the provided stream is cast to a stdio FILE*:\n\n```\nif (FAILURE == php_stream_cast((php_stream *) what, PHP_STREAM_AS_STDIO, (void *) \u0026fp, REPORT_ERRORS)) {\n        return FAILURE;\n}\n```\n\nThis FILE* is then stored in the php_curl structure \"ch\", at the following locations, depending on which CURLOPT_ was used:\n- ch-\u003ehandlers-\u003ewrite-\u003efp = fp;\n- ch-\u003ehandlers-\u003ewrite_header-\u003efp = fp;\n- ch-\u003ehandlers-\u003eread-\u003efp = fp;\n\nUpon curl_exec(), _php_curl_verify_handlers() is called, which verifies if the user-set stream(s) are still open, and resets -\u003efp to 0 if they are not.\n\nHowever, there are a number of curl callbacks we can use to close the stream after _php_curl_verify_handlers() has been called, resulting in the FILE* being free()'d. By allocating memory that ends up a the same address where the FILE structure was, its possible to achieve arbitrary code execution.\n\nThe following functions use *-\u003efp without checking if the corresponding streams are still open (and thus if *-\u003efp still points to a valid FILE structure or not):\n- static size_t curl_write(char *data, size_t size, size_t nmemb, void *ctx)\n- static size_t curl_read(char *data, size_t size, size_t nmemb, void *ctx)\n- static size_t curl_write_header(char *data, size_t size, size_t nmemb, void *ctx)\n- curl_exec (after curl processing is finished, there are 2 fflush() calls)\n\nOn Linux, with PHP linked against GLIBC, arbitrary code execution is trivial, since FILE structures conveniently have a \"vtable\" full of function pointers which we now control.\nOn Windows, exploitability depends on the version of the C runtime being used. Recent MS C runtimes keep a cache of FILE structures (they aren't free()'d upon fclose()), which complicates things.\n\nPlease see the test script attached, tested against:\n- 64-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:47:39) \n- 32-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:48:03) \n- 32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --with-curl --enable-debug\n\nTest script:\n---------------\n```\n\u003c?php\nfunction hdr_callback($ch, $data) {\n    global $f_file;\n\n    if ($f_file) {\n            // close the stream, causing the FILE structure to be free()'d\n        fclose($f_file); $f_file = 0;\n\n        // cause an allocation of approx the same size as a FILE structure, size varies a bit depending on platform/libc\n        $FILE_size = (PHP_INT_SIZE == 4 ? 0x160 : 0x238);\n        curl_setopt($ch, CURLOPT_COOKIE, str_repeat(\"a\", $FILE_size - 1));\n    }\n\n    return strlen($data);\n}\n\n$ch = curl_init('http://www.php.net/');\n$f_file = fopen(\"body\", \"w\") or die(\"failed to open file\\n\");\ncurl_setopt($ch, CURLOPT_BUFFERSIZE, 10);\ncurl_setopt($ch, CURLOPT_HEADERFUNCTION, \"hdr_callback\");\ncurl_setopt($ch, CURLOPT_FILE, $f_file);\ncurl_exec($ch);\n?\u003e\n```\n","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"https://bugs.php.net/bug.php?id=69316\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69316\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=69316\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription:\u003c/h2\u003e\n\n\u003cp\u003eAll the relevant code mentioned below is in ext/curl/interface.c.\u003cbr\u003e\nAs far as I can see, every PHP version after (at least) 5.0 is affected; possibly older versions too.\u003c/p\u003e\n\n\u003cp\u003eWhen using CURLOPT_WRITEHEADER, CURLOPT_INFILE or CURLOPT_FILE, in _php_curl_setopt, the provided stream is cast to a stdio FILE*:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eif (FAILURE == php_stream_cast((php_stream *) what, PHP_STREAM_AS_STDIO, (void *) \u0026amp;fp, REPORT_ERRORS)) {\n        return FAILURE;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis FILE* is then stored in the php_curl structure \u0026quot;ch\u0026quot;, at the following locations, depending on which CURLOPT_ was used:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ech-\u0026gt;handlers-\u0026gt;write-\u0026gt;fp = fp;\u003c/li\u003e\n\u003cli\u003ech-\u0026gt;handlers-\u0026gt;write_header-\u0026gt;fp = fp;\u003c/li\u003e\n\u003cli\u003ech-\u0026gt;handlers-\u0026gt;read-\u0026gt;fp = fp;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eUpon curl_exec(), _php_curl_verify_handlers() is called, which verifies if the user-set stream(s) are still open, and resets -\u0026gt;fp to 0 if they are not.\u003c/p\u003e\n\n\u003cp\u003eHowever, there are a number of curl callbacks we can use to close the stream after _php_curl_verify_handlers() has been called, resulting in the FILE* being free()\u0026#39;d. By allocating memory that ends up a the same address where the FILE structure was, its possible to achieve arbitrary code execution.\u003c/p\u003e\n\n\u003cp\u003eThe following functions use *-\u0026gt;fp without checking if the corresponding streams are still open (and thus if *-\u0026gt;fp still points to a valid FILE structure or not):\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003estatic size_t curl_write(char *data, size_t size, size_t nmemb, void *ctx)\u003c/li\u003e\n\u003cli\u003estatic size_t curl_read(char *data, size_t size, size_t nmemb, void *ctx)\u003c/li\u003e\n\u003cli\u003estatic size_t curl_write_header(char *data, size_t size, size_t nmemb, void *ctx)\u003c/li\u003e\n\u003cli\u003ecurl_exec (after curl processing is finished, there are 2 fflush() calls)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOn Linux, with PHP linked against GLIBC, arbitrary code execution is trivial, since FILE structures conveniently have a \u0026quot;vtable\u0026quot; full of function pointers which we now control.\u003cbr\u003e\nOn Windows, exploitability depends on the version of the C runtime being used. Recent MS C runtimes keep a cache of FILE structures (they aren\u0026#39;t free()\u0026#39;d upon fclose()), which complicates things.\u003c/p\u003e\n\n\u003cp\u003ePlease see the test script attached, tested against:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e64-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:47:39) \u003c/li\u003e\n\u003cli\u003e32-bit PHP 5.5.9-1ubuntu4.7 (cli) (built: Mar 16 2015 20:48:03) \u003c/li\u003e\n\u003cli\u003e32/64-bit PHP 5.6.7 (cli) (built: Mar 27 2015 07:04:21) (DEBUG)   - custom build with ./configure --with-curl --enable-debug\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"k\"\u003efunction\u003c/span\u003e \u003cspan class=\"nf\"\u003ehdr_callback\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eglobal\u003c/span\u003e \u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"c1\"\u003e// close the stream, causing the FILE structure to be free()\u0026#39;d\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003efclose\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n        \u003cspan class=\"c1\"\u003e// cause an allocation of approx the same size as a FILE structure, size varies a bit depending on platform/libc\u003c/span\u003e\n        \u003cspan class=\"nv\"\u003e$FILE_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ePHP_INT_SIZE\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x160\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x238\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003ecurl_setopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCURLOPT_COOKIE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$FILE_size\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003estrlen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$data\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003ecurl_init\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;http://www.php.net/\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003efopen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;body\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;w\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eor\u003c/span\u003e \u003cspan class=\"k\"\u003edie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;failed to open file\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecurl_setopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCURLOPT_BUFFERSIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecurl_setopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCURLOPT_HEADERFUNCTION\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;hdr_callback\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecurl_setopt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eCURLOPT_FILE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nv\"\u003e$f_file\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nb\"\u003ecurl_exec\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$ch\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"500.0","formatted_bounty":"$500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":2,"voters":["eveeez","spetr0x"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":496256,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:41:33.734Z","updated_at":"2015-06-30T11:41:33.734Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"mongo","url":"/mongo"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1196222,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:41:33.734Z","updated_at":"2016-09-15T13:29:46.180Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"reporter":{"username":"mongo","url":"/mongo"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}