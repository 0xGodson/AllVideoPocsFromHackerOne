{"id":28640,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yODY0MA==","url":"https://hackerone.com/reports/28640","title":"Ericsson Erlang OTP Core Allocation Subsystem Integer Overflow (All Versions)","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2014-09-19T20:01:50.377Z","submitted_at":"2014-09-19T20:01:50.377Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"donb","url":"/donb","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/007/648/07ce745e33260d50e87d9f131f6e0ed5e67e0854_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":20,"url":"https://hackerone.com/internet","handle":"internet","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"The Internet","twitter_handle":null,"website":"","about":"Hack all the things."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T23:47:42.687Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T23:47:37.755Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"#############################################################################\r\n#\r\n# Lab Mouse Security Report \r\n# LMS-2014-06-23-7\r\n#\r\n\r\nReport ID: LMS-2014-06-23-7\r\nReport Code Name: EARLGREY.1\r\n\r\nResearcher Name: Don A. Bailey\r\nResearcher Organization: Lab Mouse Security\r\nResearcher Email: donb@securitymouse.com\r\nResearcher Website: www.securitymouse.com\r\n\r\nVulnerability Status: Patched\r\nVulnerability Embargo: Successful\r\n\r\nVulnerability Class: Integer Overflow\r\nVulnerability Effect: Memory Corruption\r\nVulnerability Impact: DoS, OOW, RCE\r\nVulnerability DoS Practicality: Practical\r\nVulnerability OOW Practicality: Practical\r\nVulnerability RCE Practicality: Impractical\r\nVulnerability Criticality: Moderate\r\n\r\nVulnerability Scope:\r\n---------------------\r\nAll versions of Erlang OTP are vulnerable. \r\n\r\nCriticality Reasoning\r\n---------------------\r\nWhile Erlang OTP is vulnerable to an integer overflow condition in several\r\nobject allocation functions, triggering the vulnerability remotely is \r\ndifficult. A software engineer would need to build an application that\r\nexposes certain aspects of the Erlang OTP through an API, or a protocol that\r\ntriggers these issues. \r\n\r\nBecause triggering these issues remotely will largely result in Denial of\r\nService, it is unlikely that RCE can occur without significant effort on\r\nbehalf of an attacker. \r\n\r\nTherefore, while RCE is possible, and probable on certain architectures,\r\nit is impractical from the context of the average attacker. This vulnerability \r\nmust be exploited by highly skilled individuals with extensive memory \r\nmanagement and software architecture backgrounds. \r\n\r\nHowever, older versions of Erlang will be more subject to exploitation due\r\nto the widespread use of Erlang in telecommunications environments on\r\nwidespread 32bit embedded systems. Where these systems are concerned,\r\nremote attacks will not be subject to ASLR, NX, or other security enhancements\r\nthat would normally make exploitation improbable. Therefore, systems that fit \r\nthis classification must be evaluated for their potential security impact. \r\n\r\nThis decreases the priority of this vulnerability from High to Moderate. \r\n\r\nIt is also notable that this subtle vulnerability would need to be exploited\r\nin very specialized scenarios, primarily in circumstances where\r\n - a driver/NIF poorly uses the allocation API (see the Erlang LZ4 NIF)\r\n - a 32bit architecture is used\r\n - memory pressure results in small adjacent heap chunks \r\n\r\nVulnerability Description\r\n-------------------------\r\nAn integer overflow occurs in all alloc and realloc functions in the file\r\nerts/emulator/beam/erl_binary.h\r\n\t- erts_bin_drv_alloc_fnf\r\n\t- erts_bin_drv_alloc\r\n\t- erts_bin_nrml_alloc\r\n\t- erts_bin_realloc_fnf\r\n\t- erts_bin_realloc\r\n\r\nThe vulnerability occurs whenever the CHICKEN_PAD is used:\r\nerts_bin_drv_alloc_fnf(Uint size)\r\n{\r\n    Uint bsize = ERTS_SIZEOF_Binary(size) + CHICKEN_PAD;\r\n\r\nThe macro ERTS_SIZEOF_Binary adds 'size' to the size of the internal structure\r\n'Binary'. Then, CHICKEN_PAD is added to this value. Integer overflow can occur\r\nin either the macro or the addition of the CHICKEN_PAD if 'size' is a large\r\ninteger. \r\n\r\nWhen erts_alloc() is called in subsequent code, the memory chunk requested will\r\nbe too small to store an entire ErtsBinary structure. \r\n\r\nIn certain cases it is possible to corrupt memory in interesting ways. For\r\nexample, with crypto:rand_bytes() the user can specify a mask to be set in\r\nthe first and last byte of the generated array. \r\n\r\nOn 32bit systems, we can pass a sufficiently large size to rand_bytes_3. If we\r\nmake the value large enough to trigger the integer overflow, the mask \r\nfunctionality can be used to overwrite the 'flags' field in the 'Binary' \r\nstructure. If this field is set to BIN_FLAG_MAGIC, the Binary will be \r\ninterpreted as an ErtsMagicBinary. \r\n\r\nWhen this object is freed by the garbage collector, the ErtsMagicBinary's\r\n'destructor' function will be called. Since an ErtsBinary is a C union of\r\nthe 'Binary' structure and the 'ErtsMagicBinary' structure, the first four\r\nbytes (or eight, on 64bit platforms) of the random data will be interpreted\r\nas the destructor. \r\n\r\nThe garbage collector will unwittingly call the destructor when freeing up\r\nmemory. This results in code execution on platforms where memory can be\r\nallocated at very low addresses. It is notable that on modern systems, this\r\nattack can rarely succeed.\r\n\r\nIn the example below, an integer overflow is used to force a '1' to be \r\nwritten to the 'flags' variable of the Binary structure. The value '27' is\r\nwritten to the random data array, but is later interpreted as a function\r\naddress, causing Erlang to crash.\r\n\r\ndonb@debian:~$ erl\r\nErlang R15B01 (erts-5.9.1) [source] [async-threads:0] [kernel-poll:false]\r\n\r\nEshell V5.9.1  (abort with ^G)\r\n1\u003e crypto:rand_bytes(16#FFFFFFF1, 1, 27).\r\nSegmentation fault (core dumped)\r\ndonb@debian:~$ gdb -q /usr/lib/erlang/erts-5.9.1/bin/beam core\r\nReading symbols from /usr/lib/erlang/erts-5.9.1/bin/beam...(no debugging \r\nsymbols found)...done.\r\n[New LWP 22034]\r\n\r\nwarning: Can't read pathname for load map: Input/output error.\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \r\n\"/lib/i386-linux-gnu/i686/cmov/libthread_db.so.1\".\r\nCore was generated by `/usr/lib/erlang/erts-5.9.1/bin/beam -- -root \r\n/usr/lib/erlang -progname erl -- -'.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0  0x0000001b in ?? ()\r\n(gdb) i r eip\r\neip            0x1b     0x1b\r\n(gdb) \r\n\r\n\r\nVulnerability Resolution\r\n------------------------\r\nTo resolve this issue, simply check for integer overflow in the \r\nERTS_SIZEOF_Binary macro and after adding the CHICKEN_PAD macro. This will\r\ndisable attackers from abusing this functions throughout the distribution.\r\n\r\nUpdate - September 18th, 2014\r\n----------------------------------------------\r\nEricsson has released an updated version of Erlang OTP (17.3) that addresses this issue. Please update to the latest OTP as soon as possible. ","vulnerability_information_html":"\u003ch1 id=\"lab-mouse-security-report\"\u003eLab Mouse Security Report\u003c/h1\u003e\n\n\u003ch1 id=\"lms-2014-06-23-7\"\u003eLMS-2014-06-23-7\u003c/h1\u003e\n\n\u003cp\u003eReport ID: LMS-2014-06-23-7\u003cbr\u003e\nReport Code Name: EARLGREY.1\u003c/p\u003e\n\n\u003cp\u003eResearcher Name: Don A. Bailey\u003cbr\u003e\nResearcher Organization: Lab Mouse Security\u003cbr\u003e\nResearcher Email: \u003ca title=\"donb@securitymouse.com\" href=\"mailto:donb@securitymouse.com\" rel=\"nofollow noopener noreferrer\"\u003edonb@securitymouse.com\u003c/a\u003e\u003cbr\u003e\nResearcher Website: \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.securitymouse.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.securitymouse.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eVulnerability Status: Patched\u003cbr\u003e\nVulnerability Embargo: Successful\u003c/p\u003e\n\n\u003cp\u003eVulnerability Class: Integer Overflow\u003cbr\u003e\nVulnerability Effect: Memory Corruption\u003cbr\u003e\nVulnerability Impact: DoS, OOW, RCE\u003cbr\u003e\nVulnerability DoS Practicality: Practical\u003cbr\u003e\nVulnerability OOW Practicality: Practical\u003cbr\u003e\nVulnerability RCE Practicality: Impractical\u003cbr\u003e\nVulnerability Criticality: Moderate\u003c/p\u003e\n\n\u003ch2 id=\"vulnerability-scope\"\u003eVulnerability Scope:\u003c/h2\u003e\n\n\u003cp\u003eAll versions of Erlang OTP are vulnerable. \u003c/p\u003e\n\n\u003ch2 id=\"criticality-reasoning\"\u003eCriticality Reasoning\u003c/h2\u003e\n\n\u003cp\u003eWhile Erlang OTP is vulnerable to an integer overflow condition in several\u003cbr\u003e\nobject allocation functions, triggering the vulnerability remotely is \u003cbr\u003e\ndifficult. A software engineer would need to build an application that\u003cbr\u003e\nexposes certain aspects of the Erlang OTP through an API, or a protocol that\u003cbr\u003e\ntriggers these issues. \u003c/p\u003e\n\n\u003cp\u003eBecause triggering these issues remotely will largely result in Denial of\u003cbr\u003e\nService, it is unlikely that RCE can occur without significant effort on\u003cbr\u003e\nbehalf of an attacker. \u003c/p\u003e\n\n\u003cp\u003eTherefore, while RCE is possible, and probable on certain architectures,\u003cbr\u003e\nit is impractical from the context of the average attacker. This vulnerability \u003cbr\u003e\nmust be exploited by highly skilled individuals with extensive memory \u003cbr\u003e\nmanagement and software architecture backgrounds. \u003c/p\u003e\n\n\u003cp\u003eHowever, older versions of Erlang will be more subject to exploitation due\u003cbr\u003e\nto the widespread use of Erlang in telecommunications environments on\u003cbr\u003e\nwidespread 32bit embedded systems. Where these systems are concerned,\u003cbr\u003e\nremote attacks will not be subject to ASLR, NX, or other security enhancements\u003cbr\u003e\nthat would normally make exploitation improbable. Therefore, systems that fit \u003cbr\u003e\nthis classification must be evaluated for their potential security impact. \u003c/p\u003e\n\n\u003cp\u003eThis decreases the priority of this vulnerability from High to Moderate. \u003c/p\u003e\n\n\u003cp\u003eIt is also notable that this subtle vulnerability would need to be exploited\u003cbr\u003e\nin very specialized scenarios, primarily in circumstances where\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ea driver/NIF poorly uses the allocation API (see the Erlang LZ4 NIF)\u003c/li\u003e\n\u003cli\u003ea 32bit architecture is used\u003c/li\u003e\n\u003cli\u003ememory pressure results in small adjacent heap chunks \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"vulnerability-description\"\u003eVulnerability Description\u003c/h2\u003e\n\n\u003cp\u003eAn integer overflow occurs in all alloc and realloc functions in the file\u003cbr\u003e\nerts/emulator/beam/erl_binary.h\u003cbr\u003e\n    - erts_bin_drv_alloc_fnf\u003cbr\u003e\n    - erts_bin_drv_alloc\u003cbr\u003e\n    - erts_bin_nrml_alloc\u003cbr\u003e\n    - erts_bin_realloc_fnf\u003cbr\u003e\n    - erts_bin_realloc\u003c/p\u003e\n\n\u003cp\u003eThe vulnerability occurs whenever the CHICKEN_PAD is used:\u003cbr\u003e\nerts_bin_drv_alloc_fnf(Uint size)\u003cbr\u003e\n{\u003cbr\u003e\n    Uint bsize = ERTS_SIZEOF_Binary(size) + CHICKEN_PAD;\u003c/p\u003e\n\n\u003cp\u003eThe macro ERTS_SIZEOF_Binary adds \u0026#39;size\u0026#39; to the size of the internal structure\u003cbr\u003e\n\u0026#39;Binary\u0026#39;. Then, CHICKEN_PAD is added to this value. Integer overflow can occur\u003cbr\u003e\nin either the macro or the addition of the CHICKEN_PAD if \u0026#39;size\u0026#39; is a large\u003cbr\u003e\ninteger. \u003c/p\u003e\n\n\u003cp\u003eWhen erts_alloc() is called in subsequent code, the memory chunk requested will\u003cbr\u003e\nbe too small to store an entire ErtsBinary structure. \u003c/p\u003e\n\n\u003cp\u003eIn certain cases it is possible to corrupt memory in interesting ways. For\u003cbr\u003e\nexample, with crypto:rand_bytes() the user can specify a mask to be set in\u003cbr\u003e\nthe first and last byte of the generated array. \u003c/p\u003e\n\n\u003cp\u003eOn 32bit systems, we can pass a sufficiently large size to rand_bytes_3. If we\u003cbr\u003e\nmake the value large enough to trigger the integer overflow, the mask \u003cbr\u003e\nfunctionality can be used to overwrite the \u0026#39;flags\u0026#39; field in the \u0026#39;Binary\u0026#39; \u003cbr\u003e\nstructure. If this field is set to BIN_FLAG_MAGIC, the Binary will be \u003cbr\u003e\ninterpreted as an ErtsMagicBinary. \u003c/p\u003e\n\n\u003cp\u003eWhen this object is freed by the garbage collector, the ErtsMagicBinary\u0026#39;s\u003cbr\u003e\n\u0026#39;destructor\u0026#39; function will be called. Since an ErtsBinary is a C union of\u003cbr\u003e\nthe \u0026#39;Binary\u0026#39; structure and the \u0026#39;ErtsMagicBinary\u0026#39; structure, the first four\u003cbr\u003e\nbytes (or eight, on 64bit platforms) of the random data will be interpreted\u003cbr\u003e\nas the destructor. \u003c/p\u003e\n\n\u003cp\u003eThe garbage collector will unwittingly call the destructor when freeing up\u003cbr\u003e\nmemory. This results in code execution on platforms where memory can be\u003cbr\u003e\nallocated at very low addresses. It is notable that on modern systems, this\u003cbr\u003e\nattack can rarely succeed.\u003c/p\u003e\n\n\u003cp\u003eIn the example below, an integer overflow is used to force a \u0026#39;1\u0026#39; to be \u003cbr\u003e\nwritten to the \u0026#39;flags\u0026#39; variable of the Binary structure. The value \u0026#39;27\u0026#39; is\u003cbr\u003e\nwritten to the random data array, but is later interpreted as a function\u003cbr\u003e\naddress, causing Erlang to crash.\u003c/p\u003e\n\n\u003cp\u003edonb@debian:~$ erl\u003cbr\u003e\nErlang R15B01 (erts-5.9.1) [source] [async-threads:0] [kernel-poll:false]\u003c/p\u003e\n\n\u003cp\u003eEshell V5.9.1  (abort with ^G)\u003cbr\u003e\n1\u0026gt; crypto:rand_bytes(16#FFFFFFF1, 1, 27).\u003cbr\u003e\nSegmentation fault (core dumped)\u003cbr\u003e\ndonb@debian:~$ gdb -q /usr/lib/erlang/erts-5.9.1/bin/beam core\u003cbr\u003e\nReading symbols from /usr/lib/erlang/erts-5.9.1/bin/beam...(no debugging \u003cbr\u003e\nsymbols found)...done.\u003cbr\u003e\n[New LWP 22034]\u003c/p\u003e\n\n\u003cp\u003ewarning: Can\u0026#39;t read pathname for load map: Input/output error.\u003cbr\u003e\n[Thread debugging using libthread_db enabled]\u003cbr\u003e\nUsing host libthread_db library \u003cbr\u003e\n\u0026quot;/lib/i386-linux-gnu/i686/cmov/libthread_db.so.1\u0026quot;.\u003cbr\u003e\nCore was generated by `/usr/lib/erlang/erts-5.9.1/bin/beam -- -root \u003cbr\u003e\n/usr/lib/erlang -progname erl -- -\u0026#39;.\u003cbr\u003e\nProgram terminated with signal 11, Segmentation fault.\u003c/p\u003e\n\n\u003ch1 id=\"0-0x0000001b-in\"\u003e0  0x0000001b in ?? ()\u003c/h1\u003e\n\n\u003cp\u003e(gdb) i r eip\u003cbr\u003e\neip            0x1b     0x1b\u003cbr\u003e\n(gdb) \u003c/p\u003e\n\n\u003ch2 id=\"vulnerability-resolution\"\u003eVulnerability Resolution\u003c/h2\u003e\n\n\u003cp\u003eTo resolve this issue, simply check for integer overflow in the \u003cbr\u003e\nERTS_SIZEOF_Binary macro and after adding the CHICKEN_PAD macro. This will\u003cbr\u003e\ndisable attackers from abusing this functions throughout the distribution.\u003c/p\u003e\n\n\u003ch2 id=\"update-september-18th-2014\"\u003eUpdate - September 18th, 2014\u003c/h2\u003e\n\n\u003cp\u003eEricsson has released an updated version of Erlang OTP (17.3) that addresses this issue. Please update to the latest OTP as soon as possible. \u003c/p\u003e\n","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T23:47:37.821Z","allow_singular_disclosure_after":-35616996.29547112,"singular_disclosure_allowed":true,"vote_count":1,"voters":["base_64"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":134372,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"hey @donb - Thanks for detailed summary on another slick finding. Always a pleasure to read your reports. Unfortunately, Erlang isn't in scope of the IBB's current bounty programs and we don't have the resources to include it at this time. I've added it to a list of OSS projects we should try finding bounty sponsors for to hopefully bring it into scope in the future.","markdown_message":"\u003cp\u003ehey \u003ca href=\"/donb\"\u003e@donb\u003c/a\u003e - Thanks for detailed summary on another slick finding. Always a pleasure to read your reports. Unfortunately, Erlang isn\u0026#39;t in scope of the IBB\u0026#39;s current bounty programs and we don\u0026#39;t have the resources to include it at this time. I\u0026#39;ve added it to a list of OSS projects we should try finding bounty sponsors for to hopefully bring it into scope in the future.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-09-30T23:55:03.139Z","updated_at":"2014-09-30T23:55:03.139Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"donb","url":"/donb"},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":136031,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"No worries! I wasn't sure if you guys were ready to receive Erlang stuff or not, but I thought I'd give it a go. You wouldn't believe how many telco systems are remotely exploitable through this bug on ARM an MIPS. Pretty wild! :-) ","markdown_message":"\u003cp\u003eNo worries! I wasn\u0026#39;t sure if you guys were ready to receive Erlang stuff or not, but I thought I\u0026#39;d give it a go. You wouldn\u0026#39;t believe how many telco systems are remotely exploitable through this bug on ARM an MIPS. Pretty wild! :-) \u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-04T00:04:07.395Z","updated_at":"2014-10-04T00:04:07.395Z","actor":{"username":"donb","cleared":false,"url":"/donb","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/007/648/07ce745e33260d50e87d9f131f6e0ed5e67e0854_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1827716,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"(Sorry for spam, cleaning up some old pending bounty queue)","markdown_message":"\u003cp\u003e(Sorry for spam, cleaning up some old pending bounty queue)\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-12T09:52:00.929Z","updated_at":"2017-07-12T09:52:00.929Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6028946,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T23:47:37.770Z","updated_at":"2019-10-13T23:47:37.770Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6293052,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T23:47:42.703Z","updated_at":"2019-11-12T23:47:42.703Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}