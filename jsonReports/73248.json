{"id":73248,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI0OA==","url":"https://hackerone.com/reports/73248","title":"Tokenizer crash when processing undecodable source code","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-04-21T00:00:00.000Z","submitted_at":"2015-04-21T00:00:00.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hugbounter","url":"/hugbounter","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":27,"url":"https://hackerone.com/ibb-python","handle":"ibb-python","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Python (IBB)","twitter_handle":"","website":"http://www.python.org/news/security","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-04-21T00:00:00.000Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-04-21T00:00:00.000Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"http://bugs.python.org/issue24022\n\nHello,\n\nI would like to report a heap corruption issue in Python/Parser/tokenizer.c:922, affecting latest Python 3.4.3 (from python.org) and also 2.7 ( tested 2.7.9-r1 on Gentoo ). The latest version available - 3.5.0a3 is also affected. It doesn't seem to affect 3.3 branch (tested with 3.3.5-r1 on Gentoo).\nThe issue occurs when a malformed python script is executed by python binary, which results in a out-of-bound read access of heap and therefore a segmentation fault.\nI couldn't confirm nor deny its exploitability, to my knowledge this would be more of a infoleak, if anything. Nevertheless, as Google Project Zero proved many times, no heap corruption issue should be treated lightheartedly. :-) Hence the reason why I'm reporting it to security@python.org\n\nI tried to dig into the details of the bug and I have to admit the defeat - the Python Parser is quite a complex beast...\nWhat I was able to determine was that given malformed script (attached), the infinite 'for' loop defined in tokenizer.c:900 never reaches any of the exit conditions, which causes a infinite incrementation of *tok-\u003ecur and thus reading character by character of the heap, until the heap segment boundary is reached and segmentation fault occurrs.\n\nThere seem to be a race condition involved as well, as the malformed script does not always result in crash sometimes producing the error below:\n\n```\n./python ~/Fuzz/crashes/python_stuff/heap_pattern.py\n  File \"/home/user/Fuzz/crashes/python_stuff/heap_pattern.py\", line 44\nSyntaxError: Non-UTF-8 code starting with '\\x9e' in file /home/user/Fuzz/crashes/python_stuff/heap_pattern.py on line 45, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n```\n\nI acknowledge that attack scenario is somehow limited, because one has to be in a position to provide their own script for execution. Nevertheless, at the very least, a malicious user could crash python environment.\n\n\nDepending on the particular script, ASAN detects either as a 'heap-use-after-free' or 'heap-buffer-overflow'.\n\nHEAP-BUFFER-OVERFLOW according to asan:\n\n```\n$ ./python ~/heap3.py\n=================================================================\n==23461==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500001e0ff at pc 0xc90075 bp 0x7ffe53018fd0 sp 0x7ffe53018fc0\nREAD of size 1 at 0x62500001e0ff thread T0\n    #0 0xc90074 in tok_nextc Parser/tokenizer.c:1021\n    #1 0xc9a6ef in tok_get Parser/tokenizer.c:1341\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7efcd1cf1f9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e0ff is located 1 bytes to the left of 8192-byte region [0x62500001e100,0x625000020100)\nallocated by thread T0 here:\n    #0 0x7efcd29eb7c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow Parser/tokenizer.c:1021 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=\u003e0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]\n  0x0c4a7fffbc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23461==ABORTING\n```\n\n\nBelow is an example of ASAN detecting a 'use-after-free':\n\n```\n./python ~/heap4_asan.py\n=================================================================\n==23465==ERROR: AddressSanitizer: heap-use-after-free on address 0x62500001e101 at pc 0xc8f7c4 bp 0x7ffc35552000 sp 0x7ffc35551ff0\nREAD of size 1 at 0x62500001e101 thread T0\n    #0 0xc8f7c3 in tok_nextc Parser/tokenizer.c:902\n    #1 0xc9a96f in tok_get Parser/tokenizer.c:1429\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7f71d129ef9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e101 is located 1 bytes inside of 8192-byte region [0x62500001e100,0x625000020100)\nfreed by thread T0 here:\n    #0 0x7f71d1f98aa6 in __interceptor_realloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x57aa6)\n    #1 0xc8edb1 in tok_nextc Parser/tokenizer.c:1041\n\npreviously allocated by thread T0 here:\n    #0 0x7f71d1f987c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-use-after-free Parser/tokenizer.c:902 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=\u003e0x0c4a7fffbc20:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23465==ABORTING\n```\n\nWithout AddressSanitizer, this particular script does not crash, but causes one of two errors:\n\n```\nFile \"/home/user/heap4_asan.py\", line 5\nSyntaxError: Non-UTF-8 code starting with '\\x9e' in file /home/user/heap4_asan.py on line 6, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n```\n\nor:\n\n```\nFile \"/home/user/heap4_asan.py\", line 5\nSyntaxError: unknown decode error\n```\n\n\nIn all cases, the crash always occurs in Parser/tokenizer.c at line no. 922, where *tok-\u003ecurr is incremented, regardless where it currently points. Eventually, it will reach heap boundary and the *tok-\u003ecur++ will cause python to crash.\n\n```\nProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x8fb250) at Parser/tokenizer.c:922\n922                 return Py_CHARMASK(*tok-\u003ecur++);\n```\n\n\nSample GDB session can be found below:\n\n```\n$ gdb --args ./python ~/heap1.py\nGNU gdb (Gentoo 7.9 vanilla) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u003chttp://gnu.org/licenses/gpl.html\u003e\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n\u003chttp://bugs.gentoo.org/\u003e.\nFind the GDB manual and other documentation resources online at:\n\u003chttp://www.gnu.org/software/gdb/documentation/\u003e.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from ./python...done.\nwarning: File \"/home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\" auto-loading has been declined by your `auto-load safe-path' set to \"$debugdir:$datadir/auto-load\".\nTo enable execution of this file add\n    add-auto-load-safe-path /home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\nline to your configuration file \"/home/user/.gdbinit\".\nTo completely disable this security protection add\n    set auto-load safe-path /\nline to your configuration file \"/home/user/.gdbinit\".\nFor more information about this security protection see the\n\"Auto-loading safe path\" section in the GDB manual.  E.g., run from the shell:\n    info \"(gdb)Auto-loading safe path\"\ngdb-peda$ r\nStarting program: /home/user/Fuzz/targets/Python-3.4.3/python /home/user/heap1.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x995001\nRBX: 0x963c40 --\u003e 0x0\nRCX: 0x0\nRDX: 0x27 (\"'\")\nRSI: 0x0\nRDI: 0x963c40 --\u003e 0x0\nRBP: 0x0\nRSP: 0x7fffffffdf40 --\u003e 0x7ffff6f14660 --\u003e 0x0\nRIP: 0x573657 (\u003ctok_nextc+1367\u003e:    movzx  eax,BYTE PTR [r12])\nR8 : 0x1bdf0\nR9 : 0x1bde0\nR10: 0x1bdd0\nR11: 0x4\nR12: 0x995000\nR13: 0x0\nR14: 0x7fffffffe010 --\u003e 0x0\nR15: 0x0\nEFLAGS: 0x10216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x57364a \u003ctok_nextc+1354\u003e:    mov    QWORD PTR [rbx+0x10],rax\n   0x57364e \u003ctok_nextc+1358\u003e:    lea    rax,[r12+0x1]\n   0x573653 \u003ctok_nextc+1363\u003e:    mov    QWORD PTR [rbx+0x8],rax\n=\u003e 0x573657 \u003ctok_nextc+1367\u003e:    movzx  eax,BYTE PTR [r12]\n   0x57365c \u003ctok_nextc+1372\u003e:    add    rsp,0x18\n   0x573660 \u003ctok_nextc+1376\u003e:    pop    rbx\n   0x573661 \u003ctok_nextc+1377\u003e:    pop    rbp\n   0x573662 \u003ctok_nextc+1378\u003e:    pop    r12\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdf40 --\u003e 0x7ffff6f14660 --\u003e 0x0\n0008| 0x7fffffffdf48 --\u003e 0x57107e (\u003cPyNode_AddChild+318\u003e:    mov    rsi,rax)\n0016| 0x7fffffffdf50 --\u003e 0x7ffff6f14660 --\u003e 0x0\n0024| 0x7fffffffdf58 --\u003e 0x27 (\"'\")\n0032| 0x7fffffffdf60 --\u003e 0x963c40 --\u003e 0x0\n0040| 0x7fffffffdf68 --\u003e 0x3\n0048| 0x7fffffffdf70 --\u003e 0x0\n0056| 0x7fffffffdf78 --\u003e 0x7fffffffe010 --\u003e 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x963c40)\n    at Parser/tokenizer.c:922\n922                return Py_CHARMASK(*tok-\u003ecur++);\n```\n\n\nThank you for reading this.\nPlease let me know if you need more information.\n","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"http://bugs.python.org/issue24022\" href=\"/redirect?url=http%3A%2F%2Fbugs.python.org%2Fissue24022\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://bugs.python.org/issue24022\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHello,\u003c/p\u003e\n\n\u003cp\u003eI would like to report a heap corruption issue in Python/Parser/tokenizer.c:922, affecting latest Python 3.4.3 (from python.org) and also 2.7 ( tested 2.7.9-r1 on Gentoo ). The latest version available - 3.5.0a3 is also affected. It doesn\u0026#39;t seem to affect 3.3 branch (tested with 3.3.5-r1 on Gentoo).\u003cbr\u003e\nThe issue occurs when a malformed python script is executed by python binary, which results in a out-of-bound read access of heap and therefore a segmentation fault.\u003cbr\u003e\nI couldn\u0026#39;t confirm nor deny its exploitability, to my knowledge this would be more of a infoleak, if anything. Nevertheless, as Google Project Zero proved many times, no heap corruption issue should be treated lightheartedly. :-) Hence the reason why I\u0026#39;m reporting it to \u003ca title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\"\u003esecurity@python.org\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI tried to dig into the details of the bug and I have to admit the defeat - the Python Parser is quite a complex beast...\u003cbr\u003e\nWhat I was able to determine was that given malformed script (attached), the infinite \u0026#39;for\u0026#39; loop defined in tokenizer.c:900 never reaches any of the exit conditions, which causes a infinite incrementation of *tok-\u0026gt;cur and thus reading character by character of the heap, until the heap segment boundary is reached and segmentation fault occurrs.\u003c/p\u003e\n\n\u003cp\u003eThere seem to be a race condition involved as well, as the malformed script does not always result in crash sometimes producing the error below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e./python ~/Fuzz/crashes/python_stuff/heap_pattern.py\n  File \u0026quot;/home/user/Fuzz/crashes/python_stuff/heap_pattern.py\u0026quot;, line 44\nSyntaxError: Non-UTF-8 code starting with \u0026#39;\\x9e\u0026#39; in file /home/user/Fuzz/crashes/python_stuff/heap_pattern.py on line 45, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI acknowledge that attack scenario is somehow limited, because one has to be in a position to provide their own script for execution. Nevertheless, at the very least, a malicious user could crash python environment.\u003c/p\u003e\n\n\u003cp\u003eDepending on the particular script, ASAN detects either as a \u0026#39;heap-use-after-free\u0026#39; or \u0026#39;heap-buffer-overflow\u0026#39;.\u003c/p\u003e\n\n\u003cp\u003eHEAP-BUFFER-OVERFLOW according to asan:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ ./python ~/heap3.py\n=================================================================\n==23461==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x62500001e0ff at pc 0xc90075 bp 0x7ffe53018fd0 sp 0x7ffe53018fc0\nREAD of size 1 at 0x62500001e0ff thread T0\n    #0 0xc90074 in tok_nextc Parser/tokenizer.c:1021\n    #1 0xc9a6ef in tok_get Parser/tokenizer.c:1341\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7efcd1cf1f9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e0ff is located 1 bytes to the left of 8192-byte region [0x62500001e100,0x625000020100)\nallocated by thread T0 here:\n    #0 0x7efcd29eb7c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow Parser/tokenizer.c:1021 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=\u0026gt;0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa[fa]\n  0x0c4a7fffbc20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x0c4a7fffbc60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23461==ABORTING\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBelow is an example of ASAN detecting a \u0026#39;use-after-free\u0026#39;:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e./python ~/heap4_asan.py\n=================================================================\n==23465==ERROR: AddressSanitizer: heap-use-after-free on address 0x62500001e101 at pc 0xc8f7c4 bp 0x7ffc35552000 sp 0x7ffc35551ff0\nREAD of size 1 at 0x62500001e101 thread T0\n    #0 0xc8f7c3 in tok_nextc Parser/tokenizer.c:902\n    #1 0xc9a96f in tok_get Parser/tokenizer.c:1429\n    #2 0xca0640 in PyTokenizer_Get Parser/tokenizer.c:1738\n    #3 0xc81109 in parsetok Parser/parsetok.c:208\n    #4 0xa0c449 in PyParser_ASTFromFileObject Python/pythonrun.c:2356\n    #5 0xa0c449 in PyRun_FileExFlags Python/pythonrun.c:2126\n    #6 0xa15f0b in PyRun_SimpleFileExFlags Python/pythonrun.c:1606\n    #7 0x43a1aa in run_file Modules/main.c:319\n    #8 0x43a1aa in Py_Main Modules/main.c:751\n    #9 0x4234d3 in main Modules/python.c:69\n    #10 0x7f71d129ef9f in __libc_start_main (/lib64/libc.so.6+0x1ff9f)\n    #11 0x426a7c (/home/user/Fuzz/targets/Python-3.4.3_ASAN/python+0x426a7c)\n\n0x62500001e101 is located 1 bytes inside of 8192-byte region [0x62500001e100,0x625000020100)\nfreed by thread T0 here:\n    #0 0x7f71d1f98aa6 in __interceptor_realloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x57aa6)\n    #1 0xc8edb1 in tok_nextc Parser/tokenizer.c:1041\n\npreviously allocated by thread T0 here:\n    #0 0x7f71d1f987c7 in malloc (/usr/lib/gcc/x86_64-pc-linux-gnu/4.9.2/libasan.so.1+0x577c7)\n    #1 0xc9997a in PyTokenizer_FromFile Parser/tokenizer.c:852\n\nSUMMARY: AddressSanitizer: heap-use-after-free Parser/tokenizer.c:902 tok_nextc\nShadow bytes around the buggy address:\n  0x0c4a7fffbbd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbe0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbbf0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x0c4a7fffbc10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=\u0026gt;0x0c4a7fffbc20:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc30: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc40: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc50: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\n  0x0c4a7fffbc70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Contiguous container OOB:fc\n  ASan internal:           fe\n==23465==ABORTING\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWithout AddressSanitizer, this particular script does not crash, but causes one of two errors:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eFile \u0026quot;/home/user/heap4_asan.py\u0026quot;, line 5\nSyntaxError: Non-UTF-8 code starting with \u0026#39;\\x9e\u0026#39; in file /home/user/heap4_asan.py on line 6, but no encoding declared; see http://python.org/dev/peps/pep-0263/ for details\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eFile \u0026quot;/home/user/heap4_asan.py\u0026quot;, line 5\nSyntaxError: unknown decode error\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn all cases, the crash always occurs in Parser/tokenizer.c at line no. 922, where *tok-\u0026gt;curr is incremented, regardless where it currently points. Eventually, it will reach heap boundary and the *tok-\u0026gt;cur++ will cause python to crash.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eProgram received signal SIGSEGV, Segmentation fault.\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x8fb250) at Parser/tokenizer.c:922\n922                 return Py_CHARMASK(*tok-\u0026gt;cur++);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSample GDB session can be found below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ gdb --args ./python ~/heap1.py\nGNU gdb (Gentoo 7.9 vanilla) 7.9\nCopyright (C) 2015 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \u0026quot;show copying\u0026quot;\nand \u0026quot;show warranty\u0026quot; for details.\nThis GDB was configured as \u0026quot;x86_64-pc-linux-gnu\u0026quot;.\nType \u0026quot;show configuration\u0026quot; for configuration details.\nFor bug reporting instructions, please see:\n\u0026lt;http://bugs.gentoo.org/\u0026gt;.\nFind the GDB manual and other documentation resources online at:\n\u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;.\nFor help, type \u0026quot;help\u0026quot;.\nType \u0026quot;apropos word\u0026quot; to search for commands related to \u0026quot;word\u0026quot;...\nReading symbols from ./python...done.\nwarning: File \u0026quot;/home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\u0026quot; auto-loading has been declined by your `auto-load safe-path\u0026#39; set to \u0026quot;$debugdir:$datadir/auto-load\u0026quot;.\nTo enable execution of this file add\n    add-auto-load-safe-path /home/user/Fuzz/targets/Python-3.4.3/python-gdb.py\nline to your configuration file \u0026quot;/home/user/.gdbinit\u0026quot;.\nTo completely disable this security protection add\n    set auto-load safe-path /\nline to your configuration file \u0026quot;/home/user/.gdbinit\u0026quot;.\nFor more information about this security protection see the\n\u0026quot;Auto-loading safe path\u0026quot; section in the GDB manual.  E.g., run from the shell:\n    info \u0026quot;(gdb)Auto-loading safe path\u0026quot;\ngdb-peda$ r\nStarting program: /home/user/Fuzz/targets/Python-3.4.3/python /home/user/heap1.py\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \u0026quot;/lib64/libthread_db.so.1\u0026quot;.\n\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x995001\nRBX: 0x963c40 --\u0026gt; 0x0\nRCX: 0x0\nRDX: 0x27 (\u0026quot;\u0026#39;\u0026quot;)\nRSI: 0x0\nRDI: 0x963c40 --\u0026gt; 0x0\nRBP: 0x0\nRSP: 0x7fffffffdf40 --\u0026gt; 0x7ffff6f14660 --\u0026gt; 0x0\nRIP: 0x573657 (\u0026lt;tok_nextc+1367\u0026gt;:    movzx  eax,BYTE PTR [r12])\nR8 : 0x1bdf0\nR9 : 0x1bde0\nR10: 0x1bdd0\nR11: 0x4\nR12: 0x995000\nR13: 0x0\nR14: 0x7fffffffe010 --\u0026gt; 0x0\nR15: 0x0\nEFLAGS: 0x10216 (carry PARITY ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x57364a \u0026lt;tok_nextc+1354\u0026gt;:    mov    QWORD PTR [rbx+0x10],rax\n   0x57364e \u0026lt;tok_nextc+1358\u0026gt;:    lea    rax,[r12+0x1]\n   0x573653 \u0026lt;tok_nextc+1363\u0026gt;:    mov    QWORD PTR [rbx+0x8],rax\n=\u0026gt; 0x573657 \u0026lt;tok_nextc+1367\u0026gt;:    movzx  eax,BYTE PTR [r12]\n   0x57365c \u0026lt;tok_nextc+1372\u0026gt;:    add    rsp,0x18\n   0x573660 \u0026lt;tok_nextc+1376\u0026gt;:    pop    rbx\n   0x573661 \u0026lt;tok_nextc+1377\u0026gt;:    pop    rbp\n   0x573662 \u0026lt;tok_nextc+1378\u0026gt;:    pop    r12\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffdf40 --\u0026gt; 0x7ffff6f14660 --\u0026gt; 0x0\n0008| 0x7fffffffdf48 --\u0026gt; 0x57107e (\u0026lt;PyNode_AddChild+318\u0026gt;:    mov    rsi,rax)\n0016| 0x7fffffffdf50 --\u0026gt; 0x7ffff6f14660 --\u0026gt; 0x0\n0024| 0x7fffffffdf58 --\u0026gt; 0x27 (\u0026quot;\u0026#39;\u0026quot;)\n0032| 0x7fffffffdf60 --\u0026gt; 0x963c40 --\u0026gt; 0x0\n0040| 0x7fffffffdf68 --\u0026gt; 0x3\n0048| 0x7fffffffdf70 --\u0026gt; 0x0\n0056| 0x7fffffffdf78 --\u0026gt; 0x7fffffffe010 --\u0026gt; 0x0\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x0000000000573657 in tok_nextc (tok=tok@entry=0x963c40)\n    at Parser/tokenizer.c:922\n922                return Py_CHARMASK(*tok-\u0026gt;cur++);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThank you for reading this.\u003cbr\u003e\nPlease let me know if you need more information.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":1,"voters":["xinali"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":496258,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:42:29.247Z","updated_at":"2015-06-30T11:42:29.247Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-python","collaborator":{"username":"hugbounter","url":"/hugbounter"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1196224,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:42:29.247Z","updated_at":"2016-09-15T13:29:46.246Z","actor":{"url":"/ibb-python","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/027/c46b79d4c73a7b34d61a717ed19ae719a0b67b2e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Python (IBB)"}},"reporter":{"username":"hugbounter","url":"/hugbounter"},"genius_execution_id":null,"team_handle":"ibb-python","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}