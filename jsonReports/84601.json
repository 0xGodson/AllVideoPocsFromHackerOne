{"id":84601,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84NDYwMQ==","url":"https://hackerone.com/reports/84601","title":"XSS and cache poisoning via upload.twitter.com on ton.twitter.com","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-08-25T10:42:44.552Z","submitted_at":"2015-08-25T10:42:44.552Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"filedescriptor","url":"/filedescriptor","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":61,"url":"https://hackerone.com/twitter","handle":"twitter","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Twitter","twitter_handle":"twittersecurity","website":"https://twitter.com","about":"Twitter helps you create and share ideas and information instantly, without barriers."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-05-01T23:05:34.697Z","bug_reporter_agreed_on_going_public_at":"2019-04-25T02:56:09.770Z","team_member_agreed_on_going_public_at":"2019-05-01T23:05:34.619Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Hi,\r\nI would like to report an issue where attackers can bypass the upload restriction on upload.twitter.com to cause XSS on ton.twitter.com and cache poisoning.\r\n\r\n##Detail\r\nWhen using upload.twitter.com to upload audience data, it checks if the file type is allowed and rejects any harmful files (e.g. .html). However it fails to reject files with unknown file type. For example, ```foobar.html``` is rejected while ```foobar.test``` is passed. Since the server does not recognize the file type, it outputs the file without sending the ```Content-Type``` header in the response. The lack of such header results in browser sniffing for the document type. In this case, attackers can insert HTML to perform XSS. Normally the file uploaded is only accessible to the uploader which makes it a self-XSS, but with signed requests attackers can force victims to be able to view the file, thus triggering XSS on behalf of the victim.\r\n\r\n###Cache poisoning\r\nAttackers can take this attack further and perform cache poisoning on victim's browser. Since it allows uploading files, attackers can upload a cache manifest file (HTML5 AppCache) to control the cache behaviors over ton.twitter.com. There are two things the attacker can achieve:\r\n\r\n1. Attacker can force victim's browser to cache the XSS file. That means it creates a persistent XSS on victim's browser even if the XSS file on the server is removed. \r\n2. Attacker can control all returning contents on the domain. For example, attacker can replace contents of any file on ton.twitter.com (in victim's perspective)\r\n\r\n##Repo step\r\n1. Go to Twitter Ads \u003e Tools \u003e Audience manager \u003e Create new list audience\r\n2. Upload a normal file under \"Upload your data file.\" and intercept the request\r\n3. Change the parameter *blobstore_url* with an unknown suffix (e.g. 1440354519600.txt =\u003e 1440354519600.test)\r\n4. Replace the parameter *content* with any XSS vector (e.g. \u003cscript\u003ealert(1)\u003c/script\u003e)\r\n5. The uploaded file now contains XSS\r\n6. To make it accessible to others, sign it with OAuth token\r\n\r\n##PoC\r\nYou may also visit http://innerht.ml/pocs/twitter-upload-xss to see the attack in action.\r\n\r\nVideo demo: https://vimeo.com/137155736 (password: appcache)\r\n\r\nThe PoC demonstrates the XSS. It also shows how it can influence contents of other pages (poisoning http://ton.twitter.com/).","vulnerability_information_html":"\u003cp\u003eHi,\u003cbr\u003e\nI would like to report an issue where attackers can bypass the upload restriction on upload.twitter.com to cause XSS on ton.twitter.com and cache poisoning.\u003c/p\u003e\n\n\u003ch2 id=\"detail\"\u003eDetail\u003c/h2\u003e\n\n\u003cp\u003eWhen using upload.twitter.com to upload audience data, it checks if the file type is allowed and rejects any harmful files (e.g. .html). However it fails to reject files with unknown file type. For example, \u003ccode\u003efoobar.html\u003c/code\u003e is rejected while \u003ccode\u003efoobar.test\u003c/code\u003e is passed. Since the server does not recognize the file type, it outputs the file without sending the \u003ccode\u003eContent-Type\u003c/code\u003e header in the response. The lack of such header results in browser sniffing for the document type. In this case, attackers can insert HTML to perform XSS. Normally the file uploaded is only accessible to the uploader which makes it a self-XSS, but with signed requests attackers can force victims to be able to view the file, thus triggering XSS on behalf of the victim.\u003c/p\u003e\n\n\u003ch3 id=\"cache-poisoning\"\u003eCache poisoning\u003c/h3\u003e\n\n\u003cp\u003eAttackers can take this attack further and perform cache poisoning on victim\u0026#39;s browser. Since it allows uploading files, attackers can upload a cache manifest file (HTML5 AppCache) to control the cache behaviors over ton.twitter.com. There are two things the attacker can achieve:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAttacker can force victim\u0026#39;s browser to cache the XSS file. That means it creates a persistent XSS on victim\u0026#39;s browser even if the XSS file on the server is removed. \u003c/li\u003e\n\u003cli\u003eAttacker can control all returning contents on the domain. For example, attacker can replace contents of any file on ton.twitter.com (in victim\u0026#39;s perspective)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"repo-step\"\u003eRepo step\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eGo to Twitter Ads \u0026gt; Tools \u0026gt; Audience manager \u0026gt; Create new list audience\u003c/li\u003e\n\u003cli\u003eUpload a normal file under \u0026quot;Upload your data file.\u0026quot; and intercept the request\u003c/li\u003e\n\u003cli\u003eChange the parameter \u003cem\u003eblobstore_url\u003c/em\u003e with an unknown suffix (e.g. 1440354519600.txt =\u0026gt; 1440354519600.test)\u003c/li\u003e\n\u003cli\u003eReplace the parameter \u003cem\u003econtent\u003c/em\u003e with any XSS vector (e.g. \u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;)\u003c/li\u003e\n\u003cli\u003eThe uploaded file now contains XSS\u003c/li\u003e\n\u003cli\u003eTo make it accessible to others, sign it with OAuth token\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"poc\"\u003ePoC\u003c/h2\u003e\n\n\u003cp\u003eYou may also visit \u003ca title=\"http://innerht.ml/pocs/twitter-upload-xss\" href=\"/redirect?url=http%3A%2F%2Finnerht.ml%2Fpocs%2Ftwitter-upload-xss\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://innerht.ml/pocs/twitter-upload-xss\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to see the attack in action.\u003c/p\u003e\n\n\u003cp\u003eVideo demo: \u003ca title=\"https://vimeo.com/137155736\" href=\"/redirect?url=https%3A%2F%2Fvimeo.com%2F137155736\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://vimeo.com/137155736\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (password: appcache)\u003c/p\u003e\n\n\u003cp\u003eThe PoC demonstrates the XSS. It also shows how it can influence contents of other pages (poisoning \u003ca title=\"http://ton.twitter.com/\" href=\"/redirect?url=http%3A%2F%2Fton.twitter.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://ton.twitter.com/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).\u003c/p\u003e\n","bounty_amount":"2520.0","formatted_bounty":"$2,520","weakness":{"id":60,"name":"Cross-site Scripting (XSS) - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-05-25T02:56:09.822Z","allow_singular_disclosure_after":-50472286.842812255,"singular_disclosure_allowed":true,"vote_count":188,"voters":["j4v40n654n","yxw21","s1r1u5","mashoud1122","spam404","dhakal0kushal","mik317","aramburu","sameerphad72","ta8ahi","and 178 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":562635,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\n\nThank you for helping keep Twitter secure!","markdown_message":"\u003cp\u003eThank you for your report. We believe it may be a valid security issue and will investigate it further. It could take some time to find and update the root cause for an issue, so we thank you for your patience.\u003c/p\u003e\n\n\u003cp\u003eThank you for helping keep Twitter secure!\u003c/p\u003e\n","automated_response":false,"created_at":"2015-08-25T17:15:33.434Z","updated_at":"2015-08-25T17:15:33.434Z","actor":{"username":"apinter","cleared":false,"url":"/apinter","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/021/688/53801559ec10573f82935ef2c1682b2ce25f2d38_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":567447,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks again. As mentioned we’ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.","markdown_message":"\u003cp\u003eThanks again. As mentioned we’ll keep you updated as we investigate further. As a reminder, please remember to keep the details of this report private until we have fully investigated and addressed the issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-08-28T21:42:15.333Z","updated_at":"2015-08-28T21:42:15.333Z","actor":{"url":"/twitter","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/061/85a63a443f017ad8353de4f68ebf52fdd61c345a_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Twitter"}},"bounty_amount":"2520.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"twitter","collaborator":{"username":"filedescriptor","url":"/filedescriptor"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":821034,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello @apinter, I think the bug was resolved as now files with unrecognizable extension are served with ```Content-Type: application/octet-stream```, which tells browsers to download it instead of render it. Could you check if this is the case?","markdown_message":"\u003cp\u003eHello \u003ca href=\"/apinter\"\u003e@apinter\u003c/a\u003e, I think the bug was resolved as now files with unrecognizable extension are served with \u003ccode\u003eContent-Type: application/octet-stream\u003c/code\u003e, which tells browsers to download it instead of render it. Could you check if this is the case?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-03-02T16:08:22.973Z","updated_at":"2016-03-02T16:13:45.275Z","actor":{"username":"filedescriptor","cleared":true,"url":"/filedescriptor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1788607,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"We consider this issue to be fixed now. Can you please confirm?\n\nThank you for helping keep Twitter secure!","markdown_message":"\u003cp\u003eWe consider this issue to be fixed now. Can you please confirm?\u003c/p\u003e\n\n\u003cp\u003eThank you for helping keep Twitter secure!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-28T21:45:14.631Z","updated_at":"2017-06-28T21:45:14.631Z","actor":{"username":"andrewsorensen","cleared":false,"url":"/andrewsorensen","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"filedescriptor","url":"/filedescriptor"},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1789465,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"As mentioned I think it's already fixed over a year.","markdown_message":"\u003cp\u003eAs mentioned I think it\u0026#39;s already fixed over a year.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-06-29T05:26:36.938Z","updated_at":"2017-06-29T05:26:36.938Z","actor":{"username":"filedescriptor","cleared":true,"url":"/filedescriptor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4638474,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T02:56:09.797Z","updated_at":"2019-04-25T02:56:09.797Z","first_to_agree":true,"actor":{"username":"filedescriptor","cleared":true,"url":"/filedescriptor","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4706750,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-01T23:05:34.642Z","updated_at":"2019-05-01T23:05:34.642Z","actor":{"username":"andrewsorensen","cleared":false,"url":"/andrewsorensen","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4706751,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-01T23:05:34.719Z","updated_at":"2019-05-01T23:05:34.719Z","actor":{"username":"andrewsorensen","cleared":false,"url":"/andrewsorensen","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"twitter","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}