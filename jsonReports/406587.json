{"id":406587,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MDY1ODc=","url":"https://hackerone.com/reports/406587","title":"Self DOM-Based XSS in www.hackerone.com","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2018-09-06T19:11:11.340Z","submitted_at":"2018-09-06T19:11:11.340Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"adac95","url":"/adac95","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-11-08T10:46:50.735Z","bug_reporter_agreed_on_going_public_at":"2018-11-08T10:46:50.641Z","team_member_agreed_on_going_public_at":"2018-11-07T18:51:29.870Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Summary:**\nThere is a 'self' DOM-based cross-site scripting vulnerability in the contact form available on the www.hackerone.com website. This could allow an attacker to perform cross-site scripting, or other client-side attacks, against users of the application. However, the risk presented by this issue is significantly reduced because exploitation would require an element of social engineering to succeed, and the website's Content Security Policy (CSP) blocked the execution of inline scripts.\n\n**Description:**\nThe HackerOne contact form is automatically displayed when the string  'contact/' is detected in the URI fragment on any page under the www.hackerone.com domain (for example, https://www.hackerone.com/#contact/). When the 'submit' button is clicked, the following JavaScript functions are executed:\n\n```javascript\n//Marketo Form Code\nfunction strip(html) {\n    var tmp = document.createElement(\"DIV\");\n    tmp.innerHTML = html;\n    return tmp.textContent || tmp.innerText || \"\";\n}\n\n$('form').submit(function() {\n    $('textarea').val(function() {\n        return strip($(this).val());\n    });\n});\n```\nThe 'submit' event handler passes the current value of any 'textarea' elements to the 'strip' function. This function creates a new 'div' element, sets the 'innerHTML'  property to the provided value, and then returns the 'textContent' property of the resulting div. This type of code is typically used to remove HTML tags from a string, as the textContent property contains the String which was rendered by the browser when the HTML was parsed. (A reference to this exact function was also found on Stack Overflow: https://stackoverflow.com/questions/12941663/removing-html-tags-from-a-string-and-keeping-colon) \n\nHowever , this particular method is inherently insecure because it uses 'innerHTML'. When user input is provided to the 'innerHTML' property, it is parsed by the web browser and can therefore lead to the execution of malicious JavaScript. A screenshot has been attached to this report showing the result in the web browser when the following payload was typed into the 'Message' textarea of the HackerOne contact form, and the 'send message' button was clicked:\n\n```html\n\u003cimg src=x onerror=alert(1) /\u003e\n```\nThe developer console (in Google Chrome) displayed two errors - one which stated that https://www.hackerone.com/x was requested and returned a 404 (due to the src attribute of the img tag), and another which reported a violation of the website's CSP. This second error occurred because the browser attempted to execute the JavaScript code in the 'onerror' attribute, but the website's CSP did not allow it. Performing the same actions in a browser with CSP disabled allowed the JavaScript in the 'onerror' attribute to execute.\n\nAn attacker could exploit this vulnerability by convincing a user (ideally with a browser which does not support CSP) to paste a malicious payload into the 'message' field of the contact form and then click the 'send message' button.\n\nIt should also be noted that, if the 'strip' function was implemented to prevent an attacker from sending malicious HTML to Marketo or the server, it can be trivially bypassed using an intercepting proxy tool such as Burp Suite. By intercepting the HTTP request sent once the form submission is complete, any HTML 'stripped' by the JavaScript can simply be replaced. In light of this, developers should consider whether the 'strip' function is required - any validation or sanitization should  be performed by the server, where it cannot be influenced by an attacker.\n\nIf the 'strip' function is required, it is recommended that it is replaced with a solution which does not require the use of 'innerHTML'. A suitable alternative may be the use of a regex to remove common HTML characters.\n\n### Steps To Reproduce\n\n1. Open the https://www.hackerone.com/#contact/ page and open the browser's developer tools\n2.  Type \"\u003cimg src=x onerror=alert(1) /\u003e\" into the 'message' textarea\n3.  Click the 'send message' button\n4. Check the developer console to view the two errors\n\n(alternatively, disable CSP in your web browser and repeat the steps above. The JavaScript code 'alert(1)' should execute)\n\n## Impact\n\nThe attacker could achieve XSS in the www.hackerone.com website.","vulnerability_information_html":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003cbr\u003e\nThere is a \u0026#39;self\u0026#39; DOM-based cross-site scripting vulnerability in the contact form available on the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.hackerone.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e website. This could allow an attacker to perform cross-site scripting, or other client-side attacks, against users of the application. However, the risk presented by this issue is significantly reduced because exploitation would require an element of social engineering to succeed, and the website\u0026#39;s Content Security Policy (CSP) blocked the execution of inline scripts.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003cbr\u003e\nThe HackerOne contact form is automatically displayed when the string  \u0026#39;contact/\u0026#39; is detected in the URI fragment on any page under the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.hackerone.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e domain (for example, \u003ca title=\"https://www.hackerone.com/#contact/\" href=\"/redirect?url=https%3A%2F%2Fwww.hackerone.com%2F%23contact%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.hackerone.com/#contact/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). When the \u0026#39;submit\u0026#39; button is clicked, the following JavaScript functions are executed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e//Marketo Form Code\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003estrip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003etmp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003eDIV\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerHTML\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nx\"\u003etmp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003einnerText\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eform\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esubmit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etextarea\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estrip\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u0026#39;submit\u0026#39; event handler passes the current value of any \u0026#39;textarea\u0026#39; elements to the \u0026#39;strip\u0026#39; function. This function creates a new \u0026#39;div\u0026#39; element, sets the \u0026#39;innerHTML\u0026#39;  property to the provided value, and then returns the \u0026#39;textContent\u0026#39; property of the resulting div. This type of code is typically used to remove HTML tags from a string, as the textContent property contains the String which was rendered by the browser when the HTML was parsed. (A reference to this exact function was also found on Stack Overflow: \u003ca title=\"https://stackoverflow.com/questions/12941663/removing-html-tags-from-a-string-and-keeping-colon\" href=\"/redirect?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F12941663%2Fremoving-html-tags-from-a-string-and-keeping-colon\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://stackoverflow.com/questions/12941663/removing-html-tags-from-a-string-and-keeping-colon\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) \u003c/p\u003e\n\n\u003cp\u003eHowever , this particular method is inherently insecure because it uses \u0026#39;innerHTML\u0026#39;. When user input is provided to the \u0026#39;innerHTML\u0026#39; property, it is parsed by the web browser and can therefore lead to the execution of malicious JavaScript. A screenshot has been attached to this report showing the result in the web browser when the following payload was typed into the \u0026#39;Message\u0026#39; textarea of the HackerOne contact form, and the \u0026#39;send message\u0026#39; button was clicked:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;img\u003c/span\u003e \u003cspan class=\"na\"\u003esrc=\u003c/span\u003e\u003cspan class=\"s\"\u003ex\u003c/span\u003e \u003cspan class=\"na\"\u003eonerror=\u003c/span\u003e\u003cspan class=\"s\"\u003ealert(1)\u003c/span\u003e \u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe developer console (in Google Chrome) displayed two errors - one which stated that \u003ca title=\"https://www.hackerone.com/x\" href=\"/redirect?url=https%3A%2F%2Fwww.hackerone.com%2Fx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.hackerone.com/x\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e was requested and returned a 404 (due to the src attribute of the img tag), and another which reported a violation of the website\u0026#39;s CSP. This second error occurred because the browser attempted to execute the JavaScript code in the \u0026#39;onerror\u0026#39; attribute, but the website\u0026#39;s CSP did not allow it. Performing the same actions in a browser with CSP disabled allowed the JavaScript in the \u0026#39;onerror\u0026#39; attribute to execute.\u003c/p\u003e\n\n\u003cp\u003eAn attacker could exploit this vulnerability by convincing a user (ideally with a browser which does not support CSP) to paste a malicious payload into the \u0026#39;message\u0026#39; field of the contact form and then click the \u0026#39;send message\u0026#39; button.\u003c/p\u003e\n\n\u003cp\u003eIt should also be noted that, if the \u0026#39;strip\u0026#39; function was implemented to prevent an attacker from sending malicious HTML to Marketo or the server, it can be trivially bypassed using an intercepting proxy tool such as Burp Suite. By intercepting the HTTP request sent once the form submission is complete, any HTML \u0026#39;stripped\u0026#39; by the JavaScript can simply be replaced. In light of this, developers should consider whether the \u0026#39;strip\u0026#39; function is required - any validation or sanitization should  be performed by the server, where it cannot be influenced by an attacker.\u003c/p\u003e\n\n\u003cp\u003eIf the \u0026#39;strip\u0026#39; function is required, it is recommended that it is replaced with a solution which does not require the use of \u0026#39;innerHTML\u0026#39;. A suitable alternative may be the use of a regex to remove common HTML characters.\u003c/p\u003e\n\n\u003ch3 id=\"steps-to-reproduce\"\u003eSteps To Reproduce\u003c/h3\u003e\n\n\u003col\u003e\n\u003cli\u003eOpen the \u003ca title=\"https://www.hackerone.com/#contact/\" href=\"/redirect?url=https%3A%2F%2Fwww.hackerone.com%2F%23contact%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.hackerone.com/#contact/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e page and open the browser\u0026#39;s developer tools\u003c/li\u003e\n\u003cli\u003e Type \u0026quot;\u0026lt;img src=x onerror=alert(1) /\u0026gt;\u0026quot; into the \u0026#39;message\u0026#39; textarea\u003c/li\u003e\n\u003cli\u003e Click the \u0026#39;send message\u0026#39; button\u003c/li\u003e\n\u003cli\u003eCheck the developer console to view the two errors\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003e(alternatively, disable CSP in your web browser and repeat the steps above. The JavaScript code \u0026#39;alert(1)\u0026#39; should execute)\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe attacker could achieve XSS in the \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.hackerone.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewww.hackerone.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e website.\u003c/p\u003e\n","weakness":{"id":63,"name":"Cross-site Scripting (XSS) - DOM"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":343117,"file_name":"self-XSS.PNG","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/343/117/4a6c2b7af987bf851a33e53be22dda1e7565ce5a/self-XSS.PNG?response-content-disposition=attachment%3B%20filename%3D%22self-XSS.PNG%22%3B%20filename%2A%3DUTF-8%27%27self-XSS.PNG\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ6J7UOFHP%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055228Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDamJ7YR2N3cIBOa8zjuSmUd9OCX8zCykCDx%2B6kH2J%2BlQIhAPFk51DuoGb47ygm%2F46VUWXIRiNzzPuAJCxpuNY6C9r8KrQDCFIQARoMMDEzNjE5Mjc0ODQ5IgwfJ9Wm2OgZB0TD5wEqkQMAyHxawucw3AMqEaVZmpdf%2FWoK6P8gu%2FCj%2FoC7vu86houcl7d5S1aesU3sbrOzgm6RSEhwz%2FFS3jL7D6T4JI4Ce1ND%2FrgO0lyXrQzDIcV61dzQW3FvNLr0ZImyyUdtac%2BXOj%2B4Yuxg3B%2Fw8%2FASrjXwhjBS66Kymk3L6dUfBdgwlGyaWjSrEj7pUe4QmHItRfpiYrIugF6V0YbiwTzCRnupZGkhFUvdnKltp%2B4hMIJ8ZpZXjRaPMFGYbJODmmGmpbXrkLNmtpD9ssAfsLLmMNbkAbfGTVhz1jb8jNtS70QChWZUcaVF%2BUJ%2BnjyviI%2BzOI3PvJo6%2BFF7nuwLNAutvngzDIQqSSVMoO%2F3MB45%2Bi7mOnnapSDDsV974XkQgCuM7vsb5p2hLCxzrxps5NEHGajQr5tkHe3qivszLUiVfsV43w8FYD%2BBONxEK7W9P8Fz8NZ67SyH7GG2ksQHMqmv0OcEaprPoRqnV3X2FUQMilKfrm8Mwo6y2b3BolwJdahB%2FiN%2B4DEDiSex%2FihlgZtj7Y4SxDDk%2FKn%2FBTrqAf559VpL8gNLdFBoVG3N%2FZOK1jnsPcfoIUSZtPAKUZCx%2FfYM8b4F5pg%2FUgEn1Lv%2B2LBdmNBasw6RmzajA5OSfdAMndyjJN9XxpB%2BQCxuWhR%2B4l3UYvcHCs0ptmeXrxe03i6oCQg6cNND1wBmViOKSrRB7ycvKEbOUFZtkHoRDVaID3Z%2BuOzyOMaLFXSvzsVsAcCFgFhIk5QJcY%2B1scZVna72pH8jnKw%2FwC1cIv1j%2FAmz0zBabFT7deSC5tUMl0pZQVYKiEGsgryYN9fSfaoMv2wR80e4kst1hVdlJHDktel9plUkLBliVB9%2BDQ%3D%3D\u0026X-Amz-Signature=ec8ae9f04d5aecc5af718df25f51b6df010f739485a9ddb423f21edc341274ff","file_size":84297,"type":"image/png"}],"allow_singular_disclosure_at":"2018-12-07T18:51:30.010Z","allow_singular_disclosure_after":-65012458.55443363,"singular_disclosure_allowed":true,"vote_count":22,"voters":["sameerphad72","romesful","mygf","eveeez","an0nym0us","khizer47","t-4-y-m","japz","bb00x","cryptographer","and 12 more..."],"severity":{"rating":"low","author_type":"User"},"structured_scope":{"databaseId":6,"asset_type":"URL","asset_identifier":"https://www.hackerone.com","max_severity":"high"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3303152,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"This fix originated from #220009. Given the CSP is in place and this is a self XSS I'm leaning towards us accepting this risk. It seems like there should be an easy fix to this though. Do you have an idea on a more accepted html striping approach that works in these cases?","markdown_message":"\u003cp\u003eThis fix originated from \u003ca href=\"/reports/220009\"\u003e#220009\u003c/a\u003e. Given the CSP is in place and this is a self XSS I\u0026#39;m leaning towards us accepting this risk. It seems like there should be an easy fix to this though. Do you have an idea on a more accepted html striping approach that works in these cases?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-06T20:32:30.475Z","updated_at":"2018-09-06T20:32:30.475Z","actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3303218,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"That's interesting, I hadn't seen this report before.\n\nIs this the only change Marketo made to address this bug? Or were there changes made to the backend? I would assume that, if no other changes were made, an attacker could still exploit the SSRF (or HTML injection) on the backend by adding the HTML back in to their request, or by overriding the strip function in their browser to do nothing. The strip function is a client-side control after all, and an attacker can therefore still modify the request after the strip function has made its changes.\n\nThe only way to prevent the HTML injection described in 220009 would be to check the message contents on the server-side and encode the HTML there, before using it anywhere else. I've just used Burp to add an img tag to a message sent in the contact form and I am monitoring for requests to see if the HTML injection is still exploitable. I'll let you know if I get anything back.\n\nMy suggestion would be to remove the strip function entirely (eliminating the self XSS) and clarify whether Marketo added a protection for the previous vulnerability on the server-side.","markdown_message":"\u003cp\u003eThat\u0026#39;s interesting, I hadn\u0026#39;t seen this report before.\u003c/p\u003e\n\n\u003cp\u003eIs this the only change Marketo made to address this bug? Or were there changes made to the backend? I would assume that, if no other changes were made, an attacker could still exploit the SSRF (or HTML injection) on the backend by adding the HTML back in to their request, or by overriding the strip function in their browser to do nothing. The strip function is a client-side control after all, and an attacker can therefore still modify the request after the strip function has made its changes.\u003c/p\u003e\n\n\u003cp\u003eThe only way to prevent the HTML injection described in 220009 would be to check the message contents on the server-side and encode the HTML there, before using it anywhere else. I\u0026#39;ve just used Burp to add an img tag to a message sent in the contact form and I am monitoring for requests to see if the HTML injection is still exploitable. I\u0026#39;ll let you know if I get anything back.\u003c/p\u003e\n\n\u003cp\u003eMy suggestion would be to remove the strip function entirely (eliminating the self XSS) and clarify whether Marketo added a protection for the previous vulnerability on the server-side.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-06T20:53:10.296Z","updated_at":"2018-09-06T20:53:10.296Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3308354,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Hi @adac95 - \n\nWe have confirmed with Marketo that the original SSRF vulnerability was mitigated by enabling HTML encode token in the settings. \n\nThis is their response:\n\u003e Marketo has a setting to HTML encode tokens used in Marketo emails. Customers can control this setting themselves in Admin \u003e Field Management \u003e Field Actions \u003e HTML Encode Settings. We also have a feature slated for Q4 to make the default of this option ON for all customers (still with ability to override at the field level for customers who want to use HTML in a token).\n\u003e \n\u003e If token contents within emails are set to be HTML-encoded, there’s not much more we can do other than “clean” content when it comes into Marketo. That’s a long-term goal but I wouldn’t say it is in any way critical. Using the features described above, should resolve these concerns.\n\nGiven this, we think it makes sense to remove our home-brewed `strip()` function. Do you see any problem with the removal? \n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/adac95\"\u003e@adac95\u003c/a\u003e - \u003c/p\u003e\n\n\u003cp\u003eWe have confirmed with Marketo that the original SSRF vulnerability was mitigated by enabling HTML encode token in the settings. \u003c/p\u003e\n\n\u003cp\u003eThis is their response:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMarketo has a setting to HTML encode tokens used in Marketo emails. Customers can control this setting themselves in Admin \u0026gt; Field Management \u0026gt; Field Actions \u0026gt; HTML Encode Settings. We also have a feature slated for Q4 to make the default of this option ON for all customers (still with ability to override at the field level for customers who want to use HTML in a token).\u003c/p\u003e\n\n\u003cp\u003eIf token contents within emails are set to be HTML-encoded, there’s not much more we can do other than “clean” content when it comes into Marketo. That’s a long-term goal but I wouldn’t say it is in any way critical. Using the features described above, should resolve these concerns.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eGiven this, we think it makes sense to remove our home-brewed \u003ccode\u003estrip()\u003c/code\u003e function. Do you see any problem with the removal? \u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-07T17:49:52.196Z","updated_at":"2018-09-07T17:53:59.748Z","actor":{"username":"pei","cleared":false,"url":"/pei","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/939/2d83322336a492279dc84d8f92f280c2d54fcb5b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3309015,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @pei,\n\nThanks for clarifying. Given it is trivial to bypass the strip function, and any HTML tags sent in the contact form by an attacker will be encoded by the Marketo server, I am confident that it can be safely removed.\n\nIf it helps, I retested the original SSRF vulnerability by bypassing the strip function and did not receive any requests to my server. This suggests to me that the HTML encoding performed by Marketo is working as intended.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/pei\"\u003e@pei\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThanks for clarifying. Given it is trivial to bypass the strip function, and any HTML tags sent in the contact form by an attacker will be encoded by the Marketo server, I am confident that it can be safely removed.\u003c/p\u003e\n\n\u003cp\u003eIf it helps, I retested the original SSRF vulnerability by bypassing the strip function and did not receive any requests to my server. This suggests to me that the HTML encoding performed by Marketo is working as intended.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-07T20:47:02.877Z","updated_at":"2018-09-07T20:47:02.877Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3338739,"is_internal":false,"editable":false,"type":"Activities::SwagAwarded","message":"Hi @adac95 -\n\nThanks for verifying! There isn't a real attack scenario here, though we really appreciate your creative finding and have decided to award you swag. \n\nHappy Friday!\n-Pei","markdown_message":"\u003cp\u003eHi \u003ca href=\"/adac95\"\u003e@adac95\u003c/a\u003e -\u003c/p\u003e\n\n\u003cp\u003eThanks for verifying! There isn\u0026#39;t a real attack scenario here, though we really appreciate your creative finding and have decided to award you swag. \u003c/p\u003e\n\n\u003cp\u003eHappy Friday!\u003cbr\u003e\n-Pei\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-14T16:47:40.743Z","updated_at":"2018-09-14T16:47:40.743Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"reporter":{"username":"adac95","url":"/adac95"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3338741,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-14T16:47:53.661Z","updated_at":"2018-09-14T16:47:53.661Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3347288,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you @pei! ","markdown_message":"\u003cp\u003eThank you \u003ca href=\"/pei\"\u003e@pei\u003c/a\u003e! \u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-17T09:35:18.927Z","updated_at":"2018-09-17T09:35:18.927Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3552878,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hi @adac95 - thanks again for bringing this to our attention! This should be resolved by now. Can you confirm this? Thanks!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/adac95\"\u003e@adac95\u003c/a\u003e - thanks again for bringing this to our attention! This should be resolved by now. Can you confirm this? Thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-29T23:37:14.119Z","updated_at":"2018-10-29T23:37:14.119Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"adac95","url":"/adac95"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3586147,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jobert, sorry for the delay! I have just taken another look at the main contact form and it seems that this is fixed. The old strip() function has been removed and I can no longer cause HTML to be injected into the page.\n\nIt looks like there are still some client-side sanitisation functions though. For example, this function is used on the HackerOne Go contact form (https://www.hackerone.com/hackerone-go):\n\n```javascript\nMktoForms2.loadForm(\"//app-sj17.marketo.com\", \"168-NAU-732\", 1079);         \nMktoForms2.whenReady(function (form){\n  vals = form.vals();\n  $('#preview-modal').click(function() {        \n    $('strong.company').each(function () {\n      $(this).text($('input#Company').val()?$('input#Company').val():\"Your Company\"); \n    })\n    var tmpDiv = jQuery(document.createElement('div'));\n    var sanitizedDomains = [];\n\n    var unsanitizedDomains = $('textarea#Customer_Defined_Scope__c').val().split('\\n');\n    for (var i = 0 ; i \u003c unsanitizedDomains.length ; i++) {\n      sanitizedDomains.push(tmpDiv.text(unsanitizedDomains[i]).html());\n    }\n    $('ul.scope li').remove();\n    $.each(sanitizedDomains, function(){\n      $('ul.scope').append('\u003cli\u003e'+this+'\u003c/li\u003e');\n    });\n    $('#preview').dialog({\n      title: \"Preview\",\n        buttons: {\n            Ok: function () {\n                $(this).dialog('close');\n            }\n        },\n        modal: true,\n        width: \"80%\"\n    });\n    return false; \n  })\n```\nHowever, the use of JQuery's text() on the user's input means that this can't be used to inject HTML into the page.  I don't see the value in encoding a user's input before a request but this appears to be a safe way to do it.","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jobert\"\u003e@jobert\u003c/a\u003e, sorry for the delay! I have just taken another look at the main contact form and it seems that this is fixed. The old strip() function has been removed and I can no longer cause HTML to be injected into the page.\u003c/p\u003e\n\n\u003cp\u003eIt looks like there are still some client-side sanitisation functions though. For example, this function is used on the HackerOne Go contact form (\u003ca title=\"https://www.hackerone.com/hackerone-go):\" href=\"/redirect?url=https%3A%2F%2Fwww.hackerone.com%2Fhackerone-go%29%3A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.hackerone.com/hackerone-go):\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003eMktoForms2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eloadForm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e//app-sj17.marketo.com\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e168-NAU-732\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1079\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e         \n\u003cspan class=\"nx\"\u003eMktoForms2\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ewhenReady\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003evals\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evals\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e#preview-modal\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eclick\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e        \n    \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003estrong.company\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eeach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003einput#Company\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e()?\u003c/span\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003einput#Company\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e():\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003eYour Company\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003etmpDiv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ejQuery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecreateElement\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003ediv\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003esanitizedDomains\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eunsanitizedDomains\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003etextarea#Customer_Defined_Scope__c\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eval\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eunsanitizedDomains\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003esanitizedDomains\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etmpDiv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eunsanitizedDomains\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e]).\u003c/span\u003e\u003cspan class=\"nx\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eul.scope li\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eeach\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esanitizedDomains\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eul.scope\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e#preview\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003edialog\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\n      \u003cspan class=\"na\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003ePreview\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ebuttons\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"na\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003edialog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003eclose\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"na\"\u003emodal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"na\"\u003ewidth\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e80%\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \n  \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, the use of JQuery\u0026#39;s text() on the user\u0026#39;s input means that this can\u0026#39;t be used to inject HTML into the page.  I don\u0026#39;t see the value in encoding a user\u0026#39;s input before a request but this appears to be a safe way to do it.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-11-05T09:18:13.684Z","updated_at":"2018-11-05T09:18:13.684Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3602503,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Hi @adac95 - thanks for confirming the fix. We believe that this is ready to be disclosed!","markdown_message":"\u003cp\u003eHi \u003ca href=\"/adac95\"\u003e@adac95\u003c/a\u003e - thanks for confirming the fix. We believe that this is ready to be disclosed!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-11-07T18:51:29.918Z","updated_at":"2018-11-07T18:52:34.920Z","first_to_agree":true,"actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3608491,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-11-08T10:46:50.680Z","updated_at":"2018-11-08T10:46:50.680Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3608492,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-11-08T10:46:50.760Z","updated_at":"2018-11-08T10:46:50.760Z","actor":{"username":"adac95","cleared":false,"url":"/adac95","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}