{"id":403083,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MDMwODM=","url":"https://hackerone.com/reports/403083","title":"Authenticated Code Execution through Phar deserialization in CSV Importer as Shop manager in WooCommerce","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2018-08-30T16:37:09.891Z","submitted_at":"2018-08-30T16:37:09.891Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"simonscannell","url":"/simonscannell","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":111,"url":"https://hackerone.com/automattic","handle":"automattic","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Automattic","twitter_handle":"","website":"https://automattic.com","about":"WordPress.com, VaultPress, Akismet, Gravatar, WooCommerce, Polldaddy, Tumblr and more!"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-12-19T14:26:02.746Z","bug_reporter_agreed_on_going_public_at":"2019-11-19T14:26:00.303Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"This vulnerability is based on the following exploitation technique:\n\nhttps://blog.ripstech.com/2018/new-php-exploitation-technique/\n\nIt is easier to explain this vulnerability by having watched the PoC first:\nhttps://www.youtube.com/watch?v=mr3bAOIUwd4\n\nHere is what's happening:\n\n1. Since a valid phar file needs o be uploaded to the server (the extension doesn't matter) I upload the poc.jpg via the media uploader\n2. I begin the Import process with a valid CSV file\n3.  The importer asks if I am sure that I want to run the import on these files\n4. I confirm and modify the  POST parameter to my phar:// wrapper and deserialize the file\n5. The PHP code executes\n\nThe source of the vulnerability within the source code lies in the /woocommerce/includes/import/class-wc-product-csv-importer.php:\n\n```\n\tpublic function __construct( $file, $params = array() ) {\n\t\t$default_args = array(\n\t\t\t'start_pos'        =\u003e 0, // File pointer start.\n\t\t\t'end_pos'          =\u003e -1, // File pointer end.\n\t\t\t'lines'            =\u003e -1, // Max lines to read.\n\t\t\t'mapping'          =\u003e array(), // Column mapping. csv_heading =\u003e schema_heading.\n\t\t\t'parse'            =\u003e false, // Whether to sanitize and format data.\n\t\t\t'update_existing'  =\u003e false, // Whether to update existing items.\n\t\t\t'delimiter'        =\u003e ',', // CSV delimiter.\n\t\t\t'prevent_timeouts' =\u003e true, // Check memory and time usage and abort if reaching limit.\n\t\t\t'enclosure'        =\u003e '\"', // The character used to wrap text in the CSV.\n\t\t\t'escape'           =\u003e \"\\0\", // PHP uses '\\' as the default escape character. This is not RFC-4180 compliant. This disables the escape character.\n\t\t);\n\n\t\t$this-\u003eparams = wp_parse_args( $params, $default_args );\n\t\t$this-\u003efile   = $file;\n\n\t\tif ( isset( $this-\u003eparams['mapping']['from'], $this-\u003eparams['mapping']['to'] ) ) {\n\t\t\t$this-\u003eparams['mapping'] = array_combine( $this-\u003eparams['mapping']['from'], $this-\u003eparams['mapping']['to'] );\n\t\t}\n\n\t\t$this-\u003eread_file();\n\t}\n\n\t/**\n\t * Read file.\n\t */\n\tprotected function read_file() {\n\t\t$handle = fopen( $this-\u003efile, 'r' ); // @codingStandardsIgnoreLine.\n\n\t\tif ( false !== $handle ) {\n\t\t\t$this-\u003eraw_keys = version_compare( PHP_VERSION, '5.3', '\u003e=' ) ? fgetcsv( $handle, 0, $this-\u003eparams['delimiter'], $this-\u003eparams['enclosure'], $this-\u003eparams['escape'] ) : fgetcsv( $handle, 0, $this-\u003eparams['delimiter'], $this-\u003eparams['enclosure'] ); // @codingStandardsIgnoreLine\n\n...\n```\n\nAs can be seen, the constructor calls read_file, which in turn calls fopen without any checks, which leads to the deserialization of the Phar object.\n\nI recommend to check the file parameter and see if it actually is a CSV file before calling fopen on it.\n\nI have attached the poc.jpg that worked for my PHP version.\n\n## Impact\n\nI only displayed the contents of the /etc/passwd file in the PoC video. However, since I can execute arbitrary PHP code, a complete compromise of the WordPress installation is possible. If an attacker can gain access to a Shop manager account, he can easily and without restrictions take over the server.","vulnerability_information_html":"\u003cp\u003eThis vulnerability is based on the following exploitation technique:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://blog.ripstech.com/2018/new-php-exploitation-technique/\" href=\"/redirect?url=https%3A%2F%2Fblog.ripstech.com%2F2018%2Fnew-php-exploitation-technique%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://blog.ripstech.com/2018/new-php-exploitation-technique/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIt is easier to explain this vulnerability by having watched the PoC first:\u003cbr\u003e\n\u003ca title=\"https://www.youtube.com/watch?v=mr3bAOIUwd4\" href=\"/redirect?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dmr3bAOIUwd4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.youtube.com/watch?v=mr3bAOIUwd4\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere is what\u0026#39;s happening:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eSince a valid phar file needs o be uploaded to the server (the extension doesn\u0026#39;t matter) I upload the poc.jpg via the media uploader\u003c/li\u003e\n\u003cli\u003eI begin the Import process with a valid CSV file\u003c/li\u003e\n\u003cli\u003e The importer asks if I am sure that I want to run the import on these files\u003c/li\u003e\n\u003cli\u003eI confirm and modify the  POST parameter to my phar:// wrapper and deserialize the file\u003c/li\u003e\n\u003cli\u003eThe PHP code executes\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe source of the vulnerability within the source code lies in the /woocommerce/includes/import/class-wc-product-csv-importer.php:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    public function __construct( $file, $params = array() ) {\n        $default_args = array(\n            \u0026#39;start_pos\u0026#39;        =\u0026gt; 0, // File pointer start.\n            \u0026#39;end_pos\u0026#39;          =\u0026gt; -1, // File pointer end.\n            \u0026#39;lines\u0026#39;            =\u0026gt; -1, // Max lines to read.\n            \u0026#39;mapping\u0026#39;          =\u0026gt; array(), // Column mapping. csv_heading =\u0026gt; schema_heading.\n            \u0026#39;parse\u0026#39;            =\u0026gt; false, // Whether to sanitize and format data.\n            \u0026#39;update_existing\u0026#39;  =\u0026gt; false, // Whether to update existing items.\n            \u0026#39;delimiter\u0026#39;        =\u0026gt; \u0026#39;,\u0026#39;, // CSV delimiter.\n            \u0026#39;prevent_timeouts\u0026#39; =\u0026gt; true, // Check memory and time usage and abort if reaching limit.\n            \u0026#39;enclosure\u0026#39;        =\u0026gt; \u0026#39;\u0026quot;\u0026#39;, // The character used to wrap text in the CSV.\n            \u0026#39;escape\u0026#39;           =\u0026gt; \u0026quot;\\0\u0026quot;, // PHP uses \u0026#39;\\\u0026#39; as the default escape character. This is not RFC-4180 compliant. This disables the escape character.\n        );\n\n        $this-\u0026gt;params = wp_parse_args( $params, $default_args );\n        $this-\u0026gt;file   = $file;\n\n        if ( isset( $this-\u0026gt;params[\u0026#39;mapping\u0026#39;][\u0026#39;from\u0026#39;], $this-\u0026gt;params[\u0026#39;mapping\u0026#39;][\u0026#39;to\u0026#39;] ) ) {\n            $this-\u0026gt;params[\u0026#39;mapping\u0026#39;] = array_combine( $this-\u0026gt;params[\u0026#39;mapping\u0026#39;][\u0026#39;from\u0026#39;], $this-\u0026gt;params[\u0026#39;mapping\u0026#39;][\u0026#39;to\u0026#39;] );\n        }\n\n        $this-\u0026gt;read_file();\n    }\n\n    /**\n     * Read file.\n     */\n    protected function read_file() {\n        $handle = fopen( $this-\u0026gt;file, \u0026#39;r\u0026#39; ); // [@codingStandardsIgnoreLine](/codingstandardsignoreline).\n\n        if ( false !== $handle ) {\n            $this-\u0026gt;raw_keys = version_compare( PHP_VERSION, \u0026#39;5.3\u0026#39;, \u0026#39;\u0026gt;=\u0026#39; ) ? fgetcsv( $handle, 0, $this-\u0026gt;params[\u0026#39;delimiter\u0026#39;], $this-\u0026gt;params[\u0026#39;enclosure\u0026#39;], $this-\u0026gt;params[\u0026#39;escape\u0026#39;] ) : fgetcsv( $handle, 0, $this-\u0026gt;params[\u0026#39;delimiter\u0026#39;], $this-\u0026gt;params[\u0026#39;enclosure\u0026#39;] ); // [@codingStandardsIgnoreLine](/codingstandardsignoreline)\n\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs can be seen, the constructor calls read_file, which in turn calls fopen without any checks, which leads to the deserialization of the Phar object.\u003c/p\u003e\n\n\u003cp\u003eI recommend to check the file parameter and see if it actually is a CSV file before calling fopen on it.\u003c/p\u003e\n\n\u003cp\u003eI have attached the poc.jpg that worked for my PHP version.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eI only displayed the contents of the /etc/passwd file in the PoC video. However, since I can execute arbitrary PHP code, a complete compromise of the WordPress installation is possible. If an attacker can gain access to a Shop manager account, he can easily and without restrictions take over the server.\u003c/p\u003e\n","bounty_amount":"350.0","formatted_bounty":"$350","weakness":{"id":52,"name":"Deserialization of Untrusted Data"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":340061,"file_name":"poc.jpg","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/340/061/0979cc385adeebe32a96dd6b225b073e1d9f4d13/poc.jpg?response-content-disposition=attachment%3B%20filename%3D%22poc.jpg%22%3B%20filename%2A%3DUTF-8%27%27poc.jpg\u0026response-content-type=application%2Foctet-stream\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ4HB4ZZGG%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055149Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFBKbMTaGKwVCK0x7JNAOijlMVw%2BhW%2FIG%2FoSYnjiHiHKAiALX1HXrCEc%2FI%2FnVrq803X%2FALiQpBxAlCHE%2Bh8zwqcfmSq0AwhVEAEaDDAxMzYxOTI3NDg0OSIM1pLsQIVwlUu9%2FWdzKpEDno5dfN3IVf%2B7OsdAYS9SWEsPaEcB2YetTOtoMoT8QkXafStRJxQSEckvansRxadLw3NEtOPJvUCKQ1FSfSh7PFvC6uVfFJETqBnLL3fMQIGcAQZlOES1A7KCuxJT2s%2FayJYm9KXYzydI49kvJbjn3MhPgu4OzSnr601lrMTBegiJpfNO%2B%2FeSktzRhCINpAxF%2F2a4j2lstKLfaje8wR6hRJqdSRWJF9M8hMiccij8fb6xzNCHJahS%2BfaEo7RLAy5%2FPpBxYVi3ogO%2Bi%2F4BRT3eb1Z9RpGG9qNkGuyY7ce3DvMgdTkSjHBcsYXBywd8fd%2BaBZwWJd5uw351hwVm22gEjaBsMXjDBuKYWVQcA%2BrEoUuOGGuH6bDr%2B2WdDMHHXX7MgZgH7ziMbq2HG%2FZKMv1Xym51QlR6qp3%2BP6Xz3oMScAiG6Dqm%2FjDmNx9bwBHdu7tvsWABnhe6esdM9Fno0WZ3lIkHOq4HRIf10Qe%2BDDAUhhVc45YNdWlThBy0I6Le7VinfP6o%2F%2BKPpdhWEDht%2BPKwSuwwvNGq%2FwU67AHczVFtKf2TPLO9ophgOhkJ%2BZe077T3hvPbRZ7D4GzMnizYODRG9nQWzx68CzHlMuom3RU16aBeESIBNhc9NjST%2Bt3Bw%2FkvdjiPIAwfnnl0ATW5KpAuIAujTjCnWWC5x9o79v0x9%2Bnkl%2BlSYo41rg7HDE%2BhHWG7fKOUzGpWpyUJFwUo4XO2BBz%2F9JPwjpoD5vZa6vKnLi1NmWkYRn1R6E4QMqIGHABVzTr2BlnRNMM7IY6DbFqrNpuXMJjVs26ZuTl70H1lwMzeG43ORGVGlYhsYokTZrRPzq8ZdhxoEwkFN0OgfU2QSH1HVj5iow%3D%3D\u0026X-Amz-Signature=d1ef59d470cb011ec437eb43638163496b09738dc13b3072e4f1247e0f362b25","file_size":351,"type":"application/octet-stream"}],"allow_singular_disclosure_at":"2019-12-19T14:26:00.352Z","allow_singular_disclosure_after":-32455549.56638858,"singular_disclosure_allowed":true,"vote_count":84,"voters":["k0z3r0","sultancad","foobar7","mashoud1122","adolphoramirez","base_64","cinzinga","sameerphad72","mygf","bcobain23","and 74 more..."],"severity":{"rating":"high","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3276243,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the report, I've forwarded it on to the WC team for review.","markdown_message":"\u003cp\u003eThanks for the report, I\u0026#39;ve forwarded it on to the WC team for review.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-08-31T17:34:13.665Z","updated_at":"2018-08-31T17:34:13.665Z","actor":{"username":"vortfu","cleared":false,"url":"/vortfu","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/982/1ef285fb263d30f189dc6a8038e1d5c46086e9d9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3364463,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Simon,\n\nFollowing up on this report. \n\nSince any file operation will cause unserialization with this sort of vulnerability, it was actually [this `is_file` check](https://github.com/woocommerce/woocommerce/blob/master/includes/admin/importers/class-wc-product-csv-importer-controller.php#L375) which caused the dangerous unserialization before the `WC_Product_Importer_CSV::read` even happened.\n\nTo mitigate, we'll be adding checks to `WC_Product_Importer_CSV::read` and to `WC_Product_CSV_Importer_Controller::import` using `wp_check_filetype` (which doesn't do any file operations) to prevent non-CSV files from getting used in the importer. If you see any flaws in this approach please let us know.\n\nThanks,\nClaudiu","markdown_message":"\u003cp\u003eHi Simon,\u003c/p\u003e\n\n\u003cp\u003eFollowing up on this report. \u003c/p\u003e\n\n\u003cp\u003eSince any file operation will cause unserialization with this sort of vulnerability, it was actually \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fwoocommerce%2Fwoocommerce%2Fblob%2Fmaster%2Fincludes%2Fadmin%2Fimporters%2Fclass-wc-product-csv-importer-controller.php%23L375\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ethis \u003ccode\u003eis_file\u003c/code\u003e check\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which caused the dangerous unserialization before the \u003ccode\u003eWC_Product_Importer_CSV::read\u003c/code\u003e even happened.\u003c/p\u003e\n\n\u003cp\u003eTo mitigate, we\u0026#39;ll be adding checks to \u003ccode\u003eWC_Product_Importer_CSV::read\u003c/code\u003e and to \u003ccode\u003eWC_Product_CSV_Importer_Controller::import\u003c/code\u003e using \u003ccode\u003ewp_check_filetype\u003c/code\u003e (which doesn\u0026#39;t do any file operations) to prevent non-CSV files from getting used in the importer. If you see any flaws in this approach please let us know.\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nClaudiu\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-20T20:15:06.836Z","updated_at":"2018-09-20T20:15:06.836Z","actor":{"username":"claudiulodro","cleared":false,"url":"/claudiulodro","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3365892,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"wp_check_filetype won't help since all it does is check the extension of the file. It does not concern itself with the wrapper (phar:// in this case) that is used. Since the phar wrapper can deal with any file extension, this check would be bypassed easily. To prevent Phar deserialization, you are going to have to make sure that the filename is actually an absolute path (starting with /) and does NOT contain a wrapper.","markdown_message":"\u003cp\u003ewp_check_filetype won\u0026#39;t help since all it does is check the extension of the file. It does not concern itself with the wrapper (phar:// in this case) that is used. Since the phar wrapper can deal with any file extension, this check would be bypassed easily. To prevent Phar deserialization, you are going to have to make sure that the filename is actually an absolute path (starting with /) and does NOT contain a wrapper.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-21T08:05:39.657Z","updated_at":"2018-09-21T08:05:39.657Z","actor":{"username":"simonscannell","cleared":false,"url":"/simonscannell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3471878,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Simon,\n\nThis was also patched in [WC 3.4.6](https://woocommerce.wordpress.com/2018/10/11/woocommerce-3-4-6-security-fix-release-notes/), released yesterday. We've implemented filetype checking and path/protocol checking for the CSV importer. Thanks again for all your help!\n\nClaudiu","markdown_message":"\u003cp\u003eHi Simon,\u003c/p\u003e\n\n\u003cp\u003eThis was also patched in \u003ca href=\"/redirect?url=https%3A%2F%2Fwoocommerce.wordpress.com%2F2018%2F10%2F11%2Fwoocommerce-3-4-6-security-fix-release-notes%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eWC 3.4.6\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, released yesterday. We\u0026#39;ve implemented filetype checking and path/protocol checking for the CSV importer. Thanks again for all your help!\u003c/p\u003e\n\n\u003cp\u003eClaudiu\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-12T17:03:56.333Z","updated_at":"2018-10-12T17:03:56.333Z","actor":{"username":"claudiulodro","cleared":false,"url":"/claudiulodro","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3478625,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Claudiu,\n\nthanks for patching. Glad to have helped. :)","markdown_message":"\u003cp\u003eHi Claudiu,\u003c/p\u003e\n\n\u003cp\u003ethanks for patching. Glad to have helped. :)\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-14T11:59:21.177Z","updated_at":"2018-10-14T11:59:21.177Z","actor":{"username":"simonscannell","cleared":false,"url":"/simonscannell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3489617,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Simon,\n\nI just wanted to bring an update we are making to this patch to your attention. Our 3.4.6 implementation was too restrictive with the variety of server setups our users are using, and many users are not able to upload CSV files any more. [This patch should still prevent protocol attacks without causing CSV upload issues for legitimate users](https://github.com/woocommerce/woocommerce/pull/21573/files). If you have a second can you please confirm that there isn't an easy workaround for that check? It should still prevent all protocols in the file path, but I thought I'd run it by you just in case. Much appreciated!\n\nThanks,\nClaudiu","markdown_message":"\u003cp\u003eHi Simon,\u003c/p\u003e\n\n\u003cp\u003eI just wanted to bring an update we are making to this patch to your attention. Our 3.4.6 implementation was too restrictive with the variety of server setups our users are using, and many users are not able to upload CSV files any more. \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fwoocommerce%2Fwoocommerce%2Fpull%2F21573%2Ffiles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eThis patch should still prevent protocol attacks without causing CSV upload issues for legitimate users\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. If you have a second can you please confirm that there isn\u0026#39;t an easy workaround for that check? It should still prevent all protocols in the file path, but I thought I\u0026#39;d run it by you just in case. Much appreciated!\u003c/p\u003e\n\n\u003cp\u003eThanks,\u003cbr\u003e\nClaudiu\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-16T19:10:02.849Z","updated_at":"2018-10-16T19:10:02.849Z","actor":{"username":"claudiulodro","cleared":false,"url":"/claudiulodro","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3490053,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Claudiu\n\nseems to do the trick!","markdown_message":"\u003cp\u003eHi Claudiu\u003c/p\u003e\n\n\u003cp\u003eseems to do the trick!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-16T20:55:36.560Z","updated_at":"2018-10-16T20:55:44.954Z","actor":{"username":"simonscannell","cleared":false,"url":"/simonscannell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3490137,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Simon,\n\nThanks for confirming. Your help is, as always, very appreciated.\n\nHave a good day,\nClaudiu","markdown_message":"\u003cp\u003eHi Simon,\u003c/p\u003e\n\n\u003cp\u003eThanks for confirming. Your help is, as always, very appreciated.\u003c/p\u003e\n\n\u003cp\u003eHave a good day,\u003cbr\u003e\nClaudiu\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-16T21:12:37.061Z","updated_at":"2018-10-16T21:12:37.061Z","actor":{"username":"claudiulodro","cleared":false,"url":"/claudiulodro","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3501060,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-19T00:18:42.981Z","updated_at":"2018-10-19T00:18:42.981Z","actor":{"username":"vortfu","cleared":false,"url":"/vortfu","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/982/1ef285fb263d30f189dc6a8038e1d5c46086e9d9_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"simonscannell","url":"/simonscannell"},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3506115,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-19T23:50:06.540Z","updated_at":"2018-10-19T23:50:06.540Z","actor":{"url":"/automattic","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Automattic"}},"bounty_amount":"300.0","bounty_currency":"usd","bonus_amount":"50.0","genius_execution_id":null,"team_handle":"automattic","collaborator":{"username":"simonscannell","url":"/simonscannell"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3520135,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you very much! Was a pleasure working with you.","markdown_message":"\u003cp\u003eThank you very much! Was a pleasure working with you.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-23T13:27:18.103Z","updated_at":"2018-10-23T13:27:18.103Z","actor":{"username":"simonscannell","cleared":false,"url":"/simonscannell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6346207,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-19T14:26:00.322Z","updated_at":"2019-11-19T14:26:00.322Z","first_to_agree":true,"actor":{"username":"simonscannell","cleared":false,"url":"/simonscannell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/HvE5FGgP56eXFMNMr4rwmunu/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6589198,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-12-19T14:26:02.762Z","updated_at":"2019-12-19T14:26:02.762Z","actor":{"url":"/automattic","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/111/7f89e1ea233f92916202521a069fdbfe9eced339_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Automattic"}},"genius_execution_id":null,"team_handle":"automattic","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}