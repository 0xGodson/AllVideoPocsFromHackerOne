{"id":678487,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82Nzg0ODc=","url":"https://hackerone.com/reports/678487","title":"Hostname spoofing","state":"Closed","substate":"informative","readable_substate":"Informative","created_at":"2019-08-21T12:48:39.763Z","submitted_at":"2019-08-21T12:48:39.763Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"tosh","url":"/tosh","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22984,"url":"https://hackerone.com/nodejs","handle":"nodejs","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/022/984/e600648ace4a8553247bce967d461a030aa81d49_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Node.js","twitter_handle":"nodejs","website":"https://nodejs.org","about":"The Node.js JavaScript Runtime"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-01-10T03:28:48.202Z","bug_reporter_agreed_on_going_public_at":"2020-01-10T03:28:48.169Z","team_member_agreed_on_going_public_at":"2020-01-09T16:55:28.778Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"**Summary:**\nI found that url.parse() is vulnerable to hostsplit that causes hostname spoofing.\n\n**Description:**\n## Steps To Reproduce:\n\n`url.parse('http://evil.c℀.victim.test/?')` returns `evil.ca/c.victim.test` as hostname, so this hostname matches `*.victim.test` but will access `evil.ca`.\n\n```\nWelcome to Node.js v12.9.0.\nType \".help\" for more information.\n\u003e url = require('url')\n{\n  Url: [Function: Url],\n  parse: [Function: urlParse],\n  resolve: [Function: urlResolve],\n  resolveObject: [Function: urlResolveObject],\n  format: [Function: urlFormat],\n  URL: [Function: URL],\n  URLSearchParams: [Function: URLSearchParams],\n  domainToASCII: [Function: domainToASCII],\n  domainToUnicode: [Function: domainToUnicode],\n  pathToFileURL: [Function: pathToFileURL],\n  fileURLToPath: [Function: fileURLToPath]\n}\n\u003e url.parse('http://evil.c℀.victim.test/?')\nUrl {\n  protocol: 'http:',\n  slashes: true,\n  auth: null,\n  host: 'evil.ca/c.victim.test',\n  port: null,\n  hostname: 'evil.ca/c.victim.test',\n  hash: null,\n  search: '?',\n  query: '',\n  pathname: '/',\n  path: '/?',\n  href: 'http://evil.ca/c.victim.test/?'\n}\n\u003e url.parse('http://a.com／.b.com/')\nUrl {\n  protocol: 'http:',\n  slashes: true,\n  auth: null,\n  host: 'a.com/.b.com',\n  port: null,\n  hostname: 'a.com/.b.com',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: '/',\n  path: '/',\n  href: 'http://a.com/.b.com/'\n}\n```\n\n## Impact\n- Hostname spoofing may cause openredirect, ssrf, etc...\n\n## Supporting Material/References:\n- This is the material about hostsplit\n  - https://www.blackhat.com/us-19/briefings/schedule/#hostsplit-exploitable-antipatterns-in-unicode-normalization-14786\n\n## Impact\n\nHostname spoofing may cause openredirect, ssrf, etc...","vulnerability_information_html":"\u003cp\u003e\u003cstrong\u003eSummary:\u003c/strong\u003e\u003cbr\u003e\nI found that url.parse() is vulnerable to hostsplit that causes hostname spoofing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003e\u003ccode\u003eurl.parse(\u0026#39;http://evil.c℀.victim.test/?\u0026#39;)\u003c/code\u003e returns \u003ccode\u003eevil.ca/c.victim.test\u003c/code\u003e as hostname, so this hostname matches \u003ccode\u003e*.victim.test\u003c/code\u003e but will access \u003ccode\u003eevil.ca\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eWelcome to Node.js v12.9.0.\nType \u0026quot;.help\u0026quot; for more information.\n\u0026gt; url = require(\u0026#39;url\u0026#39;)\n{\n  Url: [Function: Url],\n  parse: [Function: urlParse],\n  resolve: [Function: urlResolve],\n  resolveObject: [Function: urlResolveObject],\n  format: [Function: urlFormat],\n  URL: [Function: URL],\n  URLSearchParams: [Function: URLSearchParams],\n  domainToASCII: [Function: domainToASCII],\n  domainToUnicode: [Function: domainToUnicode],\n  pathToFileURL: [Function: pathToFileURL],\n  fileURLToPath: [Function: fileURLToPath]\n}\n\u0026gt; url.parse(\u0026#39;http://evil.c℀.victim.test/?\u0026#39;)\nUrl {\n  protocol: \u0026#39;http:\u0026#39;,\n  slashes: true,\n  auth: null,\n  host: \u0026#39;evil.ca/c.victim.test\u0026#39;,\n  port: null,\n  hostname: \u0026#39;evil.ca/c.victim.test\u0026#39;,\n  hash: null,\n  search: \u0026#39;?\u0026#39;,\n  query: \u0026#39;\u0026#39;,\n  pathname: \u0026#39;/\u0026#39;,\n  path: \u0026#39;/?\u0026#39;,\n  href: \u0026#39;http://evil.ca/c.victim.test/?\u0026#39;\n}\n\u0026gt; url.parse(\u0026#39;http://a.com／.b.com/\u0026#39;)\nUrl {\n  protocol: \u0026#39;http:\u0026#39;,\n  slashes: true,\n  auth: null,\n  host: \u0026#39;a.com/.b.com\u0026#39;,\n  port: null,\n  hostname: \u0026#39;a.com/.b.com\u0026#39;,\n  hash: null,\n  search: null,\n  query: null,\n  pathname: \u0026#39;/\u0026#39;,\n  path: \u0026#39;/\u0026#39;,\n  href: \u0026#39;http://a.com/.b.com/\u0026#39;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eHostname spoofing may cause openredirect, ssrf, etc...\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"supporting-material-references\"\u003eSupporting Material/References:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eThis is the material about hostsplit\n\n\u003cul\u003e\n\u003cli\u003e\u003ca title=\"https://www.blackhat.com/us-19/briefings/schedule/#hostsplit-exploitable-antipatterns-in-unicode-normalization-14786\" href=\"/redirect?url=https%3A%2F%2Fwww.blackhat.com%2Fus-19%2Fbriefings%2Fschedule%2F%23hostsplit-exploitable-antipatterns-in-unicode-normalization-14786\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.blackhat.com/us-19/briefings/schedule/#hostsplit-exploitable-antipatterns-in-unicode-normalization-14786\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eHostname spoofing may cause openredirect, ssrf, etc...\u003c/p\u003e\n","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":3,"voters":["sectex","zimmer75","pr3nom"],"structured_scope":{"databaseId":666,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/nodejs/node","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":5668856,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @tosh,\n\nThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\n\nKind regards,\n@glassofbeer\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/tosh\"\u003e@tosh\u003c/a\u003e,\u003c/p\u003e\n\n\u003cp\u003eThank you for your submission. Your report is currently being reviewed and the HackerOne triage team will get back to you once there is additional information to share.\u003c/p\u003e\n\n\u003cp\u003eKind regards,\u003cbr\u003e\n\u003ca href=\"/glassofbeer\"\u003e@glassofbeer\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-26T19:15:21.456Z","updated_at":"2019-08-26T19:15:21.456Z","actor":{"username":"glassofbeer","cleared":false,"url":"/glassofbeer","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/166/997/bf60ed9bb749786ae3f68f25703bf0528699cda7_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5668885,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@tosh \n\nThis has been escalated and is under assessment by the internal team. We will update this report when there are any news.","markdown_message":"\u003cp\u003e\u003ca href=\"/tosh\"\u003e@tosh\u003c/a\u003e \u003c/p\u003e\n\n\u003cp\u003eThis has been escalated and is under assessment by the internal team. We will update this report when there are any news.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-26T19:19:32.222Z","updated_at":"2019-08-26T19:19:32.222Z","actor":{"username":"glassofbeer","cleared":false,"url":"/glassofbeer","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/166/997/bf60ed9bb749786ae3f68f25703bf0528699cda7_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5675701,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yep, can definitely confirm that the behavior implemented by the URL parser and ICU is correct here.  Characterizing it as an illegal hostname is not quite accurate as the hostname is determined after parsing and is correct. The issue is ambiguous input leading to an unexpected but perfectly valid output. Depending on the performance impact, we could potentially attempt to detect these  kinds of issues and set a warning flag or emit a process warning -- which would  be analogous to the warning browsers are recently starting to give for fishy lookalike URLs,.\n\nShort version is: while there are definite security issues to take into consideration here, the URL parser is working as it should and there is no bug here to fix -- tho there might be an additional feature to implement.","markdown_message":"\u003cp\u003eYep, can definitely confirm that the behavior implemented by the URL parser and ICU is correct here.  Characterizing it as an illegal hostname is not quite accurate as the hostname is determined after parsing and is correct. The issue is ambiguous input leading to an unexpected but perfectly valid output. Depending on the performance impact, we could potentially attempt to detect these  kinds of issues and set a warning flag or emit a process warning -- which would  be analogous to the warning browsers are recently starting to give for fishy lookalike URLs,.\u003c/p\u003e\n\n\u003cp\u003eShort version is: while there are definite security issues to take into consideration here, the URL parser is working as it should and there is no bug here to fix -- tho there might be an additional feature to implement.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-27T14:45:50.820Z","updated_at":"2019-08-27T14:45:50.820Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5676185,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sorry, I was referring specifically to the URL object implementation. url.parse() is known to be buggy and have a number of security related deficiencies which is why it has been docs deprecated. ","markdown_message":"\u003cp\u003eSorry, I was referring specifically to the URL object implementation. url.parse() is known to be buggy and have a number of security related deficiencies which is why it has been docs deprecated. \u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-27T15:38:54.037Z","updated_at":"2019-08-27T15:38:54.037Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5679976,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for your confirmation.\nYes, I mentioned to url.parse() and this is deprecated. Do you mean not to fix it?","markdown_message":"\u003cp\u003eThank you for your confirmation.\u003cbr\u003e\nYes, I mentioned to url.parse() and this is deprecated. Do you mean not to fix it?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-28T04:33:24.775Z","updated_at":"2019-08-28T04:33:24.775Z","actor":{"username":"tosh","cleared":false,"url":"/tosh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5735568,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, @jasnell san\n\nRecently, I have been reading the source code of Node.js.\nAs you may know, I could understand why specific fullwidth chars are normalized.\n\nfollowing code shows that if mode == IDNA_STRICT, then UIDNA_USE_STD3_RULES becomes enable.\nhttps://github.com/nodejs/node/blob/e6edd66c10632715326a3ef830c6808d7da069f6/src/node_i18n.cc#L582\n```\nint32_t ToASCII(MaybeStackBuffer\u003cchar\u003e* buf,\n                const char* input,\n                size_t length,\n                enum idna_mode mode) {\n  UErrorCode status = U_ZERO_ERROR;\n  uint32_t options =                  // CheckHyphens = false; handled later\n    UIDNA_CHECK_BIDI |                // CheckBidi = true\n    UIDNA_CHECK_CONTEXTJ |            // CheckJoiners = true\n    UIDNA_NONTRANSITIONAL_TO_ASCII;   // Nontransitional_Processing\n  if (mode == IDNA_STRICT) {\n    options |= UIDNA_USE_STD3_RULES;  // UseSTD3ASCIIRules = beStrict\n                                      // VerifyDnsLength = beStrict;\n                                      //   handled later\n  }\n```\n\nAnd, IDNA_STRICT equals 2\nhttps://github.com/nodejs/node/blob/1838d00eba30708dd8468a5707489d1ff6bb8a9d/src/node_i18n.h#L47\n```\nenum idna_mode {\n  // Default mode for maximum compatibility.\n  IDNA_DEFAULT,\n  // Ignore all errors in IDNA conversion, if possible.\n  IDNA_LENIENT,\n  // Enforce STD3 rules (UseSTD3ASCIIRules) and DNS length restrictions\n  // (VerifyDnsLength). Corresponds to `beStrict` flag in the \"domain to ASCII\"\n  // algorithm.\n  IDNA_STRICT\n};\n```\n\nBut,  toAscii function was called with IDNA_LENIENT(=true) in lib/url.js.\n```\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n\n      // Use lenient mode (`true`) to try to support even non-compliant\n      // URLs.\n      this.hostname = toASCII(this.hostname, true);\n    }\n\n```\nhttps://github.com/nodejs/node/blob/55b80f9029fb7d6a8b4212a9eebabdae970f7e52/lib/url.js#L386\n\nAs long as I read the comments, this seems to be Intended behavior, but there is no way to call the function with IDNA_STRICT.\n\nWill this code be maintained in the future?\n\nThank you for reading my poor English.","markdown_message":"\u003cp\u003eHi, \u003ca href=\"/jasnell\"\u003e@jasnell\u003c/a\u003e san\u003c/p\u003e\n\n\u003cp\u003eRecently, I have been reading the source code of Node.js.\u003cbr\u003e\nAs you may know, I could understand why specific fullwidth chars are normalized.\u003c/p\u003e\n\n\u003cp\u003efollowing code shows that if mode == IDNA_STRICT, then UIDNA_USE_STD3_RULES becomes enable.\u003cbr\u003e\n\u003ca title=\"https://github.com/nodejs/node/blob/e6edd66c10632715326a3ef830c6808d7da069f6/src/node_i18n.cc#L582\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode%2Fblob%2Fe6edd66c10632715326a3ef830c6808d7da069f6%2Fsrc%2Fnode_i18n.cc%23L582\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nodejs/node/blob/e6edd66c10632715326a3ef830c6808d7da069f6/src/node_i18n.cc#L582\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eint32_t ToASCII(MaybeStackBuffer\u0026lt;char\u0026gt;* buf,\n                const char* input,\n                size_t length,\n                enum idna_mode mode) {\n  UErrorCode status = U_ZERO_ERROR;\n  uint32_t options =                  // CheckHyphens = false; handled later\n    UIDNA_CHECK_BIDI |                // CheckBidi = true\n    UIDNA_CHECK_CONTEXTJ |            // CheckJoiners = true\n    UIDNA_NONTRANSITIONAL_TO_ASCII;   // Nontransitional_Processing\n  if (mode == IDNA_STRICT) {\n    options |= UIDNA_USE_STD3_RULES;  // UseSTD3ASCIIRules = beStrict\n                                      // VerifyDnsLength = beStrict;\n                                      //   handled later\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd, IDNA_STRICT equals 2\u003cbr\u003e\n\u003ca title=\"https://github.com/nodejs/node/blob/1838d00eba30708dd8468a5707489d1ff6bb8a9d/src/node_i18n.h#L47\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode%2Fblob%2F1838d00eba30708dd8468a5707489d1ff6bb8a9d%2Fsrc%2Fnode_i18n.h%23L47\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nodejs/node/blob/1838d00eba30708dd8468a5707489d1ff6bb8a9d/src/node_i18n.h#L47\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eenum idna_mode {\n  // Default mode for maximum compatibility.\n  IDNA_DEFAULT,\n  // Ignore all errors in IDNA conversion, if possible.\n  IDNA_LENIENT,\n  // Enforce STD3 rules (UseSTD3ASCIIRules) and DNS length restrictions\n  // (VerifyDnsLength). Corresponds to `beStrict` flag in the \u0026quot;domain to ASCII\u0026quot;\n  // algorithm.\n  IDNA_STRICT\n};\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut,  toAscii function was called with IDNA_LENIENT(=true) in lib/url.js.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \u0026quot;domain\u0026quot;.\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn\u0026#39;t matter if\n      // you call it with a domain that already is ASCII-only.\n\n      // Use lenient mode (`true`) to try to support even non-compliant\n      // URLs.\n      this.hostname = toASCII(this.hostname, true);\n    }\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca title=\"https://github.com/nodejs/node/blob/55b80f9029fb7d6a8b4212a9eebabdae970f7e52/lib/url.js#L386\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode%2Fblob%2F55b80f9029fb7d6a8b4212a9eebabdae970f7e52%2Flib%2Furl.js%23L386\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nodejs/node/blob/55b80f9029fb7d6a8b4212a9eebabdae970f7e52/lib/url.js#L386\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAs long as I read the comments, this seems to be Intended behavior, but there is no way to call the function with IDNA_STRICT.\u003c/p\u003e\n\n\u003cp\u003eWill this code be maintained in the future?\u003c/p\u003e\n\n\u003cp\u003eThank you for reading my poor English.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-05T08:35:40.270Z","updated_at":"2019-09-05T08:35:40.270Z","actor":{"username":"tosh","cleared":false,"url":"/tosh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6417697,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"I'm going to change this to triaged","markdown_message":"\u003cp\u003eI\u0026#39;m going to change this to triaged\u003c/p\u003e\n","automated_response":false,"created_at":"2019-11-27T05:21:55.092Z","updated_at":"2019-11-27T05:22:56.250Z","actor":{"username":"mylesborins","cleared":false,"url":"/mylesborins","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/234/978/b951e9a05b9f7c327b55bd697d5bd52293856002_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6718957,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I would say we should disclose this publicly as a limitation of url.parse() that will not be fixed, and I think we need to take more proactive steps to deprecate url.parse()... perhaps making it a --pending-deprecation","markdown_message":"\u003cp\u003eI would say we should disclose this publicly as a limitation of url.parse() that will not be fixed, and I think we need to take more proactive steps to deprecate url.parse()... perhaps making it a --pending-deprecation\u003c/p\u003e\n","automated_response":false,"created_at":"2020-01-08T16:02:10.348Z","updated_at":"2020-01-08T16:02:10.348Z","actor":{"username":"jasnell","cleared":false,"url":"/jasnell","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/211/162/109187a55a3f81113d4b61b965ec72cbaa4970e3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6722132,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"That's sounds good idea.\nIt's not efficient to fix this probrem, should promote it more deprecated.\nI hope everyone migrates to new API!","markdown_message":"\u003cp\u003eThat\u0026#39;s sounds good idea.\u003cbr\u003e\nIt\u0026#39;s not efficient to fix this probrem, should promote it more deprecated.\u003cbr\u003e\nI hope everyone migrates to new API!\u003c/p\u003e\n","automated_response":false,"created_at":"2020-01-09T00:20:18.589Z","updated_at":"2020-01-09T00:20:18.589Z","actor":{"username":"tosh","cleared":false,"url":"/tosh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6728717,"is_internal":false,"editable":false,"type":"Activities::BugInformative","message":"1. report closed as informational, thank you for the report!\n2. disclosure requested\n3. publicly linked to in https://github.com/nodejs/node/issues/31279","markdown_message":"\u003col\u003e\n\u003cli\u003ereport closed as informational, thank you for the report!\u003c/li\u003e\n\u003cli\u003edisclosure requested\u003c/li\u003e\n\u003cli\u003epublicly linked to in \u003ca title=\"https://github.com/nodejs/node/issues/31279\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fnodejs%2Fnode%2Fissues%2F31279\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/nodejs/node/issues/31279\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2020-01-09T16:54:25.772Z","updated_at":"2020-01-09T16:54:25.772Z","actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6728731,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-09T16:55:28.799Z","updated_at":"2020-01-09T16:55:28.799Z","first_to_agree":true,"actor":{"username":"octetcloud","cleared":false,"url":"/octetcloud","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/210/672/27b2c0c2193cfb366f7889374e7ce71077431f74_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6732389,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-10T03:28:48.182Z","updated_at":"2020-01-10T03:28:48.182Z","actor":{"username":"tosh","cleared":false,"url":"/tosh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6732390,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-10T03:28:48.215Z","updated_at":"2020-01-10T03:28:48.215Z","actor":{"username":"tosh","cleared":false,"url":"/tosh","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/644/416/f5744345c637ad414101dd4a4739ee608e8bfeb2_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"nodejs","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}