{"id":142773,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDI3NzM=","url":"https://hackerone.com/reports/142773","title":"16 instances where return value of OpenSSL i2d_RSAPublicKey is discarded -- might lead to use of uninitialized memory","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-06-02T23:53:52.293Z","submitted_at":"2016-06-02T23:53:52.293Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"guido","url":"/guido","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1800,"url":"https://hackerone.com/torproject","handle":"torproject","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Tor","twitter_handle":"torproject","website":"https://www.torproject.org/","about":"Anonymity Online"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-11-26T13:13:02.150Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2017-10-27T13:12:57.523Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The following functions rely on OpenSSL i2d_RSAPublicKey and do not heed its return value.\n\n```\nint crypto_pk_get_all_digests()\n    tor-0.2.7.6/src/common/tortls.c:775\n        if i2d_RSAPublicKey fails, cert-\u003epkey_digests is all zeroes (cert was allocated with tor_malloc_zero)\nint crypto_pk_get_digest()\n    tor-0.2.7.6/src/or/connection_or.c:1686\n        if i2d_RSAPublicKey fails, digest_rcvd_out is left uninitialized XXX\n        (digest_rcvd_out is a stack-based buffer in connection_tls_finish_handshake and is never initialized)\n    tor-0.2.7.6/src/or/hibernate.c:552\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendcommon.c:482\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:2318\n        if i2d_RSAPublicKey fails, key_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:201\n        if i2d_RSAPublicKey fails, server_identitykey_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:859\n        if i2d_RSAPublicKey fails, v3_digest is all zeroes (it was initialized with memset) XXX\n    tor-0.2.7.6/src/or/router.c:1019\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerkeys.c:1070\n        if i2d_RSAPublicKey fails, signed_data is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerparse.c:5075\n        if i2d_RSAPublicKey fails, public_key_hash is left uninitialized XXX\nint crypto_pk_get_fingerprint()\n    tor-0.2.7.6/src/or/control.c:1737\n        if i2d_RSAPublicKey fails, answer is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1922\n        if i2d_RSAPublicKey fails, fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1923\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1946\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized (or retains its previous data) XXX\nint rend_get_service_id()\n    tor-0.2.7.6/src/or/directory.c:2138\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:3250\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n```\n\ni2d_RSA_PublicKey does a memory allocation internally and a shortage of allocatable memory will cause it to fail. Like I said in the other report, a repeatedly triggered memory leak by the attacker, or utilizing some way to allocate a large amount of memory, or a \"natural\" memory shortage on the system caused by another process using large amounts of memory could trigger this.\n\nHere is a proof of concept:\n\n```c\n#include \u003copenssl/sha.h\u003e\n#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003copenssl/rsa.h\u003e\n\n#define tor_assert(x) {if (!(x)) { abort(); }}\n\nstruct crypto_pk_t\n{\n  int refs; /**\u003c reference count, so we don't have to copy keys */\n  RSA *key; /**\u003c The key itself */\n};\ntypedef struct crypto_pk_t crypto_pk_t;\nint\ncrypto_digest(char *digest, const char *m, size_t len)\n{\n  tor_assert(m);\n  tor_assert(digest);\n  return (SHA1((const unsigned char*)m,len,(unsigned char*)digest) == NULL);\n}\nint\ncrypto_pk_get_digest(const crypto_pk_t *pk, char *digest_out)\n{\n  unsigned char *buf = NULL;\n  int len;\n\n  len = i2d_RSAPublicKey((RSA*)pk-\u003ekey, \u0026buf);\n  if (len \u003c 0 || buf == NULL)\n    return -1;\n  if (crypto_digest(digest_out, (char*)buf, len) \u003c 0) {\n    OPENSSL_free(buf);\n    return -1;\n  }\n  OPENSSL_free(buf);\n  return 0;\n}\n\n#define DIGEST_LEN 20\nint main(void)\n{\n    char _digest[DIGEST_LEN];\n    char digest[] = \"uninitialized mem..\";\n\n    if ( sizeof(_digest) != sizeof(digest) )\n    {\n        return 0;\n    }\n    void* ptr = (void*)1;\n    int count = 0;\n    crypto_pk_t* pk = malloc(sizeof(crypto_pk_t));\n\n    pk-\u003ekey = RSA_generate_key(1024, 3, 0, 0);\n\n    while ( ptr != 0 )\n    {\n        ptr = malloc(100);\n        count ++;\n    }\n\n    printf(\"allocated 100 * %d bytes\\n\", count);\n    printf(\"crypto_pk_digest returns: %d\\n\", crypto_pk_get_digest(pk, digest));\n\n    printf(\"digest is: %s\\n\", digest);\n    return 0;\n}\n```\n\nBefore you run this, you might want to run this command:\n\n```\nulimit -Sv 500000\n```\n\nso that process memory is limited to 500MB (so your whole system doesn't start lagging).\n\nIt should output something like this:\n\n```\nallocated 100 * 4477420 bytes\ncrypto_pk_digest returns: -1\ndigest is: uninitialized mem..\n```\n\nIn other words, ```digest``` is not touched by ```crypto_pk_digest()``` and retains it original value.\n\nGuido","vulnerability_information_html":"\u003cp\u003eThe following functions rely on OpenSSL i2d_RSAPublicKey and do not heed its return value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eint crypto_pk_get_all_digests()\n    tor-0.2.7.6/src/common/tortls.c:775\n        if i2d_RSAPublicKey fails, cert-\u0026gt;pkey_digests is all zeroes (cert was allocated with tor_malloc_zero)\nint crypto_pk_get_digest()\n    tor-0.2.7.6/src/or/connection_or.c:1686\n        if i2d_RSAPublicKey fails, digest_rcvd_out is left uninitialized XXX\n        (digest_rcvd_out is a stack-based buffer in connection_tls_finish_handshake and is never initialized)\n    tor-0.2.7.6/src/or/hibernate.c:552\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendcommon.c:482\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:2318\n        if i2d_RSAPublicKey fails, key_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:201\n        if i2d_RSAPublicKey fails, server_identitykey_digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/router.c:859\n        if i2d_RSAPublicKey fails, v3_digest is all zeroes (it was initialized with memset) XXX\n    tor-0.2.7.6/src/or/router.c:1019\n        if i2d_RSAPublicKey fails, digest is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerkeys.c:1070\n        if i2d_RSAPublicKey fails, signed_data is left uninitialized XXX\n    tor-0.2.7.6/src/or/routerparse.c:5075\n        if i2d_RSAPublicKey fails, public_key_hash is left uninitialized XXX\nint crypto_pk_get_fingerprint()\n    tor-0.2.7.6/src/or/control.c:1737\n        if i2d_RSAPublicKey fails, answer is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1922\n        if i2d_RSAPublicKey fails, fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1923\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized XXX\n    tor-0.2.7.6/src/or/dirvote.c:1946\n        if i2d_RSAPublicKey fails, signing_key_fingerprint is left uninitialized (or retains its previous data) XXX\nint rend_get_service_id()\n    tor-0.2.7.6/src/or/directory.c:2138\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n    tor-0.2.7.6/src/or/rendservice.c:3250\n        if i2d_RSAPublicKey fails, service_id is left uninitialized XXX\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ei2d_RSA_PublicKey does a memory allocation internally and a shortage of allocatable memory will cause it to fail. Like I said in the other report, a repeatedly triggered memory leak by the attacker, or utilizing some way to allocate a large amount of memory, or a \u0026quot;natural\u0026quot; memory shortage on the system caused by another process using large amounts of memory could trigger this.\u003c/p\u003e\n\n\u003cp\u003eHere is a proof of concept:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;openssl/sha.h\u0026gt;\n#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdlib.h\u0026gt;\n#include \u0026lt;openssl/rsa.h\u0026gt;\n\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define tor_assert(x) {if (!(x)) { abort(); }}\n\u003c/span\u003e\n\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003erefs\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; reference count, so we don\u0026#39;t have to copy keys */\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eRSA\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; The key itself */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003ecrypto_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etor_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etor_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSHA1\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e,(\u003c/span\u003e\u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003ecrypto_pk_get_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edigest_out\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei2d_RSAPublicKey\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eRSA\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecrypto_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigest_out\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOPENSSL_free\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eOPENSSL_free\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define DIGEST_LEN 20\n\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003e_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eDIGEST_LEN\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;uninitialized mem..\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003e_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003epk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003esizeof\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecrypto_pk_t\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eRSA_generate_key\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eptr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emalloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;allocated 100 * %d bytes\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;crypto_pk_digest returns: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecrypto_pk_get_digest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;digest is: %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edigest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBefore you run this, you might want to run this command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eulimit -Sv 500000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eso that process memory is limited to 500MB (so your whole system doesn\u0026#39;t start lagging).\u003c/p\u003e\n\n\u003cp\u003eIt should output something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eallocated 100 * 4477420 bytes\ncrypto_pk_digest returns: -1\ndigest is: uninitialized mem..\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn other words, \u003ccode\u003edigest\u003c/code\u003e is not touched by \u003ccode\u003ecrypto_pk_digest()\u003c/code\u003e and retains it original value.\u003c/p\u003e\n\n\u003cp\u003eGuido\u003c/p\u003e\n","bounty_amount":"200.0","formatted_bounty":"$200","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-11-26T13:12:57.605Z","allow_singular_disclosure_after":-97514165.57595588,"singular_disclosure_allowed":true,"vote_count":11,"voters":["jensec","sameerphad72","fa1rlight","edoverflow","eveeez","geeknik","marwan","b3nac","cr4xerbik4sh","japz","and 1 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":997603,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to be sure, if you comment out the ```malloc()``` loop, you will see that ```crypto_pk_digest()``` succeeds as expected.\n\nIf you agree with all of my reasoning, and you think that any of 16 instances could create dangerous situations if ```i2d_RSAPublicKey``` fails, it might be interesting to try it in conjunction with the Tor browser by employing some JavaScript that gradually allocates more and more resources until there is no memory left.","markdown_message":"\u003cp\u003eJust to be sure, if you comment out the \u003ccode\u003emalloc()\u003c/code\u003e loop, you will see that \u003ccode\u003ecrypto_pk_digest()\u003c/code\u003e succeeds as expected.\u003c/p\u003e\n\n\u003cp\u003eIf you agree with all of my reasoning, and you think that any of 16 instances could create dangerous situations if \u003ccode\u003ei2d_RSAPublicKey\u003c/code\u003e fails, it might be interesting to try it in conjunction with the Tor browser by employing some JavaScript that gradually allocates more and more resources until there is no memory left.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-03T00:01:39.266Z","updated_at":"2016-06-03T00:01:39.266Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1000926,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello guido,\n\nthanks for the report.\n\nAs I asked in the other report, what's the exploitability here? Can this bug lead to code execution or stack being leaked to the network? How do you think this interacts with the OOM scheduler of Tor?\n\nI don't have time to triage this bug further right now. I will try to look more into this this week. Some more information would help.\n","markdown_message":"\u003cp\u003eHello guido,\u003c/p\u003e\n\n\u003cp\u003ethanks for the report.\u003c/p\u003e\n\n\u003cp\u003eAs I asked in the other report, what\u0026#39;s the exploitability here? Can this bug lead to code execution or stack being leaked to the network? How do you think this interacts with the OOM scheduler of Tor?\u003c/p\u003e\n\n\u003cp\u003eI don\u0026#39;t have time to triage this bug further right now. I will try to look more into this this week. Some more information would help.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-06T12:10:44.176Z","updated_at":"2016-06-06T12:10:44.176Z","actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1004607,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Basically the response I gave in the```crypto_rand()``` report applies here too.\n\nThe risk is: if OpenSSL fails to allocate memory in ```i2d_RSAPublicKey()```, then yes, stack data may be leaked to the network.\n\nBy OOM scheduler you mean that Tor will immediately abort() if an allocation fails? Like I said in the ```crypto_rand()``` report, OpenSSL uses its own allocation routines that won't abort() if a ```malloc()``` fail, but rather ```i2d_RSAPublicKey``` will return an error value.\nThis error value is not checked in these 16 instances, so the buffer remains uninitialized.\n\nIf this explanation is not sufficient, please close the report.\n\nGuido","markdown_message":"\u003cp\u003eBasically the response I gave in the\u003ccode\u003ecrypto_rand()\u003c/code\u003e report applies here too.\u003c/p\u003e\n\n\u003cp\u003eThe risk is: if OpenSSL fails to allocate memory in \u003ccode\u003ei2d_RSAPublicKey()\u003c/code\u003e, then yes, stack data may be leaked to the network.\u003c/p\u003e\n\n\u003cp\u003eBy OOM scheduler you mean that Tor will immediately abort() if an allocation fails? Like I said in the \u003ccode\u003ecrypto_rand()\u003c/code\u003e report, OpenSSL uses its own allocation routines that won\u0026#39;t abort() if a \u003ccode\u003emalloc()\u003c/code\u003e fail, but rather \u003ccode\u003ei2d_RSAPublicKey\u003c/code\u003e will return an error value.\u003cbr\u003e\nThis error value is not checked in these 16 instances, so the buffer remains uninitialized.\u003c/p\u003e\n\n\u003cp\u003eIf this explanation is not sufficient, please close the report.\u003c/p\u003e\n\n\u003cp\u003eGuido\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-08T13:48:54.780Z","updated_at":"2016-06-08T13:48:54.780Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1010665,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Hello Guido,\n\nwe decided to award $200 for this bug.\n\nEven though we did not find any particular instance of this bug that can actually be exploited successfuly and reliably, there are many instances of this bug around and we should fix it ASAP.\n\nWRT exploitation, we found instances of this bug that could potentially be dangerous, like:\n```\n      /* Get the fingerprints */\n      crypto_pk_get_fingerprint(identity_key, fingerprint, 0);\n      ...\n\n      /* add the junk that will go at the end of the line. */\n      if (flavor == FLAV_NS) {\n            smartlist_add_asprintf(chunks, \"%s %s\\n\", fingerprint,\n                                   signing_key_fingerprint);\n```\n\nHowever, there are calls to `tor_malloc()` everywhere around that code, and `tor_malloc()` will crash the program in case of OOM. So basically the attacker would have to guarantee that there is available memory for all the `tor_malloc()` calls, but insufficient memory during ` crypto_pk_get_fingerprint()`.  I'm not claiming this is impossible, but the attacker would require lots of internal knowledge about the box to be attacked.\n\nFinally, next time you open a bug report, it would be great if you could point to particular codepaths in the codebase that can cause an exploitable security scenario. The way I see it, in this report you just said \"Hey Tor guys there are 16 errors in your code. One of them might be exploitable. Please find it and reward me.\". That basically puts the effort on us.  Anyway, in this case, we decided to be kind-hearted and give you the reward because it was indeed an annoying bug.\n\nThanks.","markdown_message":"\u003cp\u003eHello Guido,\u003c/p\u003e\n\n\u003cp\u003ewe decided to award $200 for this bug.\u003c/p\u003e\n\n\u003cp\u003eEven though we did not find any particular instance of this bug that can actually be exploited successfuly and reliably, there are many instances of this bug around and we should fix it ASAP.\u003c/p\u003e\n\n\u003cp\u003eWRT exploitation, we found instances of this bug that could potentially be dangerous, like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e      /* Get the fingerprints */\n      crypto_pk_get_fingerprint(identity_key, fingerprint, 0);\n      ...\n\n      /* add the junk that will go at the end of the line. */\n      if (flavor == FLAV_NS) {\n            smartlist_add_asprintf(chunks, \u0026quot;%s %s\\n\u0026quot;, fingerprint,\n                                   signing_key_fingerprint);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, there are calls to \u003ccode\u003etor_malloc()\u003c/code\u003e everywhere around that code, and \u003ccode\u003etor_malloc()\u003c/code\u003e will crash the program in case of OOM. So basically the attacker would have to guarantee that there is available memory for all the \u003ccode\u003etor_malloc()\u003c/code\u003e calls, but insufficient memory during \u003ccode\u003ecrypto_pk_get_fingerprint()\u003c/code\u003e.  I\u0026#39;m not claiming this is impossible, but the attacker would require lots of internal knowledge about the box to be attacked.\u003c/p\u003e\n\n\u003cp\u003eFinally, next time you open a bug report, it would be great if you could point to particular codepaths in the codebase that can cause an exploitable security scenario. The way I see it, in this report you just said \u0026quot;Hey Tor guys there are 16 errors in your code. One of them might be exploitable. Please find it and reward me.\u0026quot;. That basically puts the effort on us.  Anyway, in this case, we decided to be kind-hearted and give you the reward because it was indeed an annoying bug.\u003c/p\u003e\n\n\u003cp\u003eThanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-13T09:38:50.380Z","updated_at":"2016-06-13T09:38:50.380Z","actor":{"url":"/torproject","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Tor"}},"bounty_amount":"200.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"torproject","collaborator":{"username":"guido","url":"/guido"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1011045,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!\n\nPlease don't underestimate the effort I put into my reports to your program. In the case of this particular report for example, it has taken me hours to identify each function that 1) leads to a call to i2d_RSAPublicKey and 2) whose return value is not checked, and investigate each instance as evidenced by the short description I added to each instance. What's more, I added a proof of concept with instructions to proof the premise of the vulnerability. I've also mentioned that there doesn't need to be any \"attacker\" involved since it can occur during any severe \"organic\" memory shortage on the system. It's definitely a corner case, but nonetheless a small risk. My opinion is that my report is sufficiently detailed to warrant a change.\n\nI agree that I have created some reports where I focus on a potential vulnerability within a single function without considering its context (the various possible parameters to a function, the origin of invocations to that functions etc). Usually, whenever I submit a software vulnerability to an open source project, I try to be exhaustive as possible, preferably supplying the maintainers with a proof of concept that works out-of-the-box rather than zooming in on a single function with disregard for the context in which it occurs. The reason this is not always the case with my Tor reports is that Tor has an exceptional call path complexity (it's often difficult for me to figure out how function main() can lead to the vulnerable function) as well as my inability to get Chutney running in a satisfactory way. So whereas I would otherwise discard the potential vulnerability because of an (for me) unsurmountable complexity, I submit it as-is to your program.\n\nBut I will keep your points in mind for the next time.\n\nWhenever you're ready, you may close this report.\n\nGuido","markdown_message":"\u003cp\u003eThanks!\u003c/p\u003e\n\n\u003cp\u003ePlease don\u0026#39;t underestimate the effort I put into my reports to your program. In the case of this particular report for example, it has taken me hours to identify each function that 1) leads to a call to i2d_RSAPublicKey and 2) whose return value is not checked, and investigate each instance as evidenced by the short description I added to each instance. What\u0026#39;s more, I added a proof of concept with instructions to proof the premise of the vulnerability. I\u0026#39;ve also mentioned that there doesn\u0026#39;t need to be any \u0026quot;attacker\u0026quot; involved since it can occur during any severe \u0026quot;organic\u0026quot; memory shortage on the system. It\u0026#39;s definitely a corner case, but nonetheless a small risk. My opinion is that my report is sufficiently detailed to warrant a change.\u003c/p\u003e\n\n\u003cp\u003eI agree that I have created some reports where I focus on a potential vulnerability within a single function without considering its context (the various possible parameters to a function, the origin of invocations to that functions etc). Usually, whenever I submit a software vulnerability to an open source project, I try to be exhaustive as possible, preferably supplying the maintainers with a proof of concept that works out-of-the-box rather than zooming in on a single function with disregard for the context in which it occurs. The reason this is not always the case with my Tor reports is that Tor has an exceptional call path complexity (it\u0026#39;s often difficult for me to figure out how function main() can lead to the vulnerable function) as well as my inability to get Chutney running in a satisfactory way. So whereas I would otherwise discard the potential vulnerability because of an (for me) unsurmountable complexity, I submit it as-is to your program.\u003c/p\u003e\n\n\u003cp\u003eBut I will keep your points in mind for the next time.\u003c/p\u003e\n\n\u003cp\u003eWhenever you\u0026#39;re ready, you may close this report.\u003c/p\u003e\n\n\u003cp\u003eGuido\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-13T14:30:31.479Z","updated_at":"2016-06-13T14:30:31.479Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1012686,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Closing this. Thanks :)","markdown_message":"\u003cp\u003eClosing this. Thanks :)\u003c/p\u003e\n","automated_response":false,"created_at":"2016-06-14T10:04:09.854Z","updated_at":"2016-06-14T10:04:09.854Z","actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2108315,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Addressed as part of tor's ticket #19418.","markdown_message":"\u003cp\u003eAddressed as part of tor\u0026#39;s ticket \u003ca href=\"/reports/19418\"\u003e#19418\u003c/a\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-10-27T13:12:57.548Z","updated_at":"2017-10-27T13:12:57.548Z","first_to_agree":true,"actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2182462,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-11-26T13:13:02.171Z","updated_at":"2017-11-26T13:13:02.171Z","actor":{"url":"/torproject","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Tor"}},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}