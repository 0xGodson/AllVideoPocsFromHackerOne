{"id":535436,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MzU0MzY=","url":"https://hackerone.com/reports/535436","title":"Lack or Origin check leads to Cross-Site Websocket Hijacking (CSWSH)","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-04-11T09:12:31.491Z","submitted_at":"2019-04-11T09:12:31.491Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"fisher","url":"/fisher","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/CB9zcyPs2KHYbTTPjQZGuo6x/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":39147,"url":"https://hackerone.com/coda_bbp","handle":"coda_bbp","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/039/147/3e9abb15fd44d364489e53107b52a7ebc53f2a7e_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/039/147/3e9abb15fd44d364489e53107b52a7ebc53f2a7e_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Coda","twitter_handle":"coda_hq","website":"https://coda.io/","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"no-content","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2020-01-04T00:48:46.320Z","bug_reporter_agreed_on_going_public_at":"2020-01-02T19:49:51.272Z","team_member_agreed_on_going_public_at":"2020-01-04T00:48:46.196Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"","vulnerability_information_html":"","bounty_amount":"800.0","formatted_bounty":"$800","weakness":{"id":26,"name":"Improper Access Control - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2020-02-01T19:49:51.331Z","allow_singular_disclosure_after":-28635961.487462856,"singular_disclosure_allowed":true,"vote_count":113,"voters":["nytr0gen","samengmg","thaivu","sourc7","foobar7","a_d_a_m","nathand","spam404","base_64","mik317","and 103 more..."],"severity":{"rating":"high","author_type":"Team"},"structured_scope":{"databaseId":23170,"asset_type":"URL","asset_identifier":"https://coda.io/*","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4542122,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T18:25:29.821Z","updated_at":"2019-04-11T18:25:29.821Z","actor":{"username":"antenna","cleared":false,"url":"/antenna","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/B1a8q5ga9BZjMczKoqAbnMj5/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":true,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":true},{"id":4543177,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T21:55:06.007Z","updated_at":"2019-04-11T21:55:06.007Z","actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4543215,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T22:04:23.631Z","updated_at":"2019-04-11T22:04:23.631Z","actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4543245,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T22:08:59.212Z","updated_at":"2019-04-11T22:08:59.212Z","additional_data":{},"actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4543263,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T22:17:32.798Z","updated_at":"2019-04-11T22:17:32.798Z","additional_data":{},"actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4543268,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-11T22:19:23.143Z","updated_at":"2019-04-11T22:19:23.143Z","actor":{"url":"/coda_bbp","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/039/147/3e9abb15fd44d364489e53107b52a7ebc53f2a7e_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Coda"}},"bounty_amount":"800.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"coda_bbp","collaborator":{"username":"fisher","url":"/fisher"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4545092,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-12T07:15:51.091Z","updated_at":"2019-04-12T07:15:51.091Z","actor":{"username":"fisher","cleared":true,"url":"/fisher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CB9zcyPs2KHYbTTPjQZGuo6x/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4586200,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-17T18:36:43.769Z","updated_at":"2019-04-17T18:36:43.769Z","actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"fisher","url":"/fisher"},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4586312,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-17T19:00:09.372Z","updated_at":"2019-04-17T19:00:09.372Z","actor":{"username":"fisher","cleared":true,"url":"/fisher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CB9zcyPs2KHYbTTPjQZGuo6x/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6676096,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-02T19:49:51.295Z","updated_at":"2020-01-02T19:49:51.295Z","first_to_agree":true,"actor":{"username":"fisher","cleared":true,"url":"/fisher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CB9zcyPs2KHYbTTPjQZGuo6x/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6684824,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-04T00:48:46.219Z","updated_at":"2020-01-04T00:48:46.219Z","actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6684825,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-04T00:48:46.342Z","updated_at":"2020-01-04T00:48:46.342Z","actor":{"username":"oleg-coda","cleared":false,"url":"/oleg-coda","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/561/809/39ffee8055ead9b37a3d212d0388be75aa4a2f4d_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6687174,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2020-01-04T09:32:32.063Z","updated_at":"2020-01-04T09:32:32.063Z","actor":{"username":"fisher","cleared":true,"url":"/fisher","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CB9zcyPs2KHYbTTPjQZGuo6x/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"coda_bbp","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":19547,"category":"team","content":"# Summary\n\n@fisher discovered a CSRF-related vulnerability in Coda docs by which an attacked could craft a convincing page that would make modifications to a specific document without the victim knowing. This is due to the inherent nature of Websockets not being secure by default. Although a fully-working proof of concept was not provided, the Coda security team swiftly patched the vulnerability and rewarded a bounty for the creative attack.\n\n# Original Report from Researcher\n\n## Summary:\n\nIt was discovered that when opening a WebSocket channel the Origin header is not checked by the server, leaving the application exposed to a Cross-Site Websocket Hijacking attack (CSWSH).\n\n## Background\n\nThe problem was first dubbed by Christian Schneider in his blog. Because WebSockets are not restricted by the browser's Same Origin Policy (SOP), if no defensive mechanisms are in place, an attacker can initiate a WebSocket communication from a malicious page targeting the vulnerable wss endpoint - ending up with the ability to communicate two-way with the server.\n\nThe most common defensive mechanisms are:\n\n- Checking the Origin header in the first/handshake request (where the Cookie is sent), before issuing a 101 Switching Protocols\n- Sending a CSRF token in every WS message\n\n\n## Steps To Reproduce:\n\nWe can check this very easily by using a custom extension e.g. Simple Websocket Client\n\n1. After installing an extension like the above, login in https://coda.io and open or create a new document while proxying requests through Burp\n2. Burp has a WebSocket history under Proxy, next to HTTP History. Select any of the URL's used, e.g: https://coda.io/documentsCollab/\u003cdocId\u003e/collab/?params=PARAMS\u0026connectionId=CONNECTIONID\u0026EIO=3\u0026transport=websocket\n3. Open the extension and use this URL(substitute https for wss) and press open:Immediately we connect and receive a message from the server, which confirms the lack of Origin check.\nAlthough the URL might first look like undecipherable to an attacker, the params parameter just holds a base64 value of the document ID:\n{\"documentId\":\"DOCID\"}\n\nSince the document ID is sufficiently long, an attack scenario is:\n\n- User (admin) invites attacker to collaborate on a document (view only)\n- Attacker now knows the document ID. He prepares a CSWSH payload and embeds it in a malicious webpage and sends the link to the victim\n- Victim opens the malicious page and is Cross Site Websocket Hijacked. The payload could e.g. delete or alter the contents of the document, introducing fake content\n\n## Impact\n\nThe most serious impact scenario is the attacker forcing the victim to do any operation available within the WebSockets communication (basically a CSRF). He can also read sensitive information (since the WS communication is full duplex).","can_view?":true,"can_edit?":false,"content_html":"\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003cp\u003e\u003ca href=\"/fisher\"\u003e@fisher\u003c/a\u003e discovered a CSRF-related vulnerability in Coda docs by which an attacked could craft a convincing page that would make modifications to a specific document without the victim knowing. This is due to the inherent nature of Websockets not being secure by default. Although a fully-working proof of concept was not provided, the Coda security team swiftly patched the vulnerability and rewarded a bounty for the creative attack.\u003c/p\u003e\n\n\u003ch1 id=\"original-report-from-researcher\"\u003eOriginal Report from Researcher\u003c/h1\u003e\n\n\u003ch2 id=\"summary\"\u003eSummary:\u003c/h2\u003e\n\n\u003cp\u003eIt was discovered that when opening a WebSocket channel the Origin header is not checked by the server, leaving the application exposed to a Cross-Site Websocket Hijacking attack (CSWSH).\u003c/p\u003e\n\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\n\u003cp\u003eThe problem was first dubbed by Christian Schneider in his blog. Because WebSockets are not restricted by the browser\u0026#39;s Same Origin Policy (SOP), if no defensive mechanisms are in place, an attacker can initiate a WebSocket communication from a malicious page targeting the vulnerable wss endpoint - ending up with the ability to communicate two-way with the server.\u003c/p\u003e\n\n\u003cp\u003eThe most common defensive mechanisms are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eChecking the Origin header in the first/handshake request (where the Cookie is sent), before issuing a 101 Switching Protocols\u003c/li\u003e\n\u003cli\u003eSending a CSRF token in every WS message\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps To Reproduce:\u003c/h2\u003e\n\n\u003cp\u003eWe can check this very easily by using a custom extension e.g. Simple Websocket Client\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eAfter installing an extension like the above, login in \u003ca title=\"https://coda.io\" href=\"/redirect?url=https%3A%2F%2Fcoda.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://coda.io\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and open or create a new document while proxying requests through Burp\u003c/li\u003e\n\u003cli\u003eBurp has a WebSocket history under Proxy, next to HTTP History. Select any of the URL\u0026#39;s used, e.g: \u003ca title=\"https://coda.io/documentsCollab/\" href=\"/redirect?url=https%3A%2F%2Fcoda.io%2FdocumentsCollab%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://coda.io/documentsCollab/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u0026lt;docId\u0026gt;/collab/?params=PARAMS\u0026amp;connectionId=CONNECTIONID\u0026amp;EIO=3\u0026amp;transport=websocket\u003c/li\u003e\n\u003cli\u003eOpen the extension and use this URL(substitute https for wss) and press open:Immediately we connect and receive a message from the server, which confirms the lack of Origin check.\nAlthough the URL might first look like undecipherable to an attacker, the params parameter just holds a base64 value of the document ID:\n{\u0026quot;documentId\u0026quot;:\u0026quot;DOCID\u0026quot;}\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eSince the document ID is sufficiently long, an attack scenario is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUser (admin) invites attacker to collaborate on a document (view only)\u003c/li\u003e\n\u003cli\u003eAttacker now knows the document ID. He prepares a CSWSH payload and embeds it in a malicious webpage and sends the link to the victim\u003c/li\u003e\n\u003cli\u003eVictim opens the malicious page and is Cross Site Websocket Hijacked. The payload could e.g. delete or alter the contents of the document, introducing fake content\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe most serious impact scenario is the attacker forcing the victim to do any operation available within the WebSockets communication (basically a CSRF). He can also read sensitive information (since the WS communication is full duplex).\u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}