{"id":3370,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMzcw","url":"https://hackerone.com/reports/3370","title":"Directory traversal attack in view resolver","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2014-03-06T11:13:20.634Z","submitted_at":"2014-03-06T11:13:20.634Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"lautis","url":"/lautis","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":22,"url":"https://hackerone.com/rails","handle":"rails","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ruby on Rails","twitter_handle":null,"website":"http://rubyonrails.org/security","about":"Web development that doesn't hurt."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2014-0130"],"singular_disclosure_disabled":false,"disclosed_at":"2015-07-09T19:15:27.083Z","bug_reporter_agreed_on_going_public_at":"2015-07-09T19:15:26.661Z","team_member_agreed_on_going_public_at":"2015-06-16T19:07:55.100Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"There seems to be two cases that allow directory traversal when using wildcard URL segments that allow rendering view outside view paths.\r\n\r\nFor example, let say there is a route\r\n\r\n\tget '/help/(*action)’, controller: ‘help’\r\n\r\nand a matching controller\r\n\r\n\tclass HelpController \u003c ApplicationController\r\n\tend\r\n\r\nThis renders all views that are in 'app/views/help’ (assuming default view paths) even when matching action method is not defined.\r\n\r\nIf an attacker made a request `GET /help/../../../Gemfile`, ActionView::FileSystemResolver returns Gemfile from project root as the matching view. This simple case can be prevented using Rack::Protection::PathTraversal middleware, but it is not enabled by default in Rails. Also, there could be other mechanisms that may result in rendering views that are outside view path. Not sure if that’s the expected behaviour, but this surprised me.\r\n\r\nHowever, Rack::Protection::PathTraversal can be bypassed using backslashes: `GET /help/%5c../%5c../%5c../Gemfile`. The resolver uses Dir.glob, which escapes backslashes unless File::FNM_NOESCAPE flag is used. Rack::Protection::PathTraversal won’t intercept `'\\../'` and the resolver treats `'\\../`' as `'../'`.\r\n\r\nAttached are fixes for the mentioned vulnerabilities with test cases.","vulnerability_information_html":"\u003cp\u003eThere seems to be two cases that allow directory traversal when using wildcard URL segments that allow rendering view outside view paths.\u003c/p\u003e\n\n\u003cp\u003eFor example, let say there is a route\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eget \u0026#39;/help/(*action)’, controller: ‘help’\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand a matching controller\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclass HelpController \u0026lt; ApplicationController\nend\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis renders all views that are in \u0026#39;app/views/help’ (assuming default view paths) even when matching action method is not defined.\u003c/p\u003e\n\n\u003cp\u003eIf an attacker made a request \u003ccode\u003eGET /help/../../../Gemfile\u003c/code\u003e, ActionView::FileSystemResolver returns Gemfile from project root as the matching view. This simple case can be prevented using Rack::Protection::PathTraversal middleware, but it is not enabled by default in Rails. Also, there could be other mechanisms that may result in rendering views that are outside view path. Not sure if that’s the expected behaviour, but this surprised me.\u003c/p\u003e\n\n\u003cp\u003eHowever, Rack::Protection::PathTraversal can be bypassed using backslashes: \u003ccode\u003eGET /help/%5c../%5c../%5c../Gemfile\u003c/code\u003e. The resolver uses Dir.glob, which escapes backslashes unless File::FNM_NOESCAPE flag is used. Rack::Protection::PathTraversal won’t intercept \u003ccode\u003e\u0026#39;\\../\u0026#39;\u003c/code\u003e and the resolver treats \u003ccode\u003e\u0026#39;\\../\u003c/code\u003e\u0026#39; as \u003ccode\u003e\u0026#39;../\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAttached are fixes for the mentioned vulnerabilities with test cases.\u003c/p\u003e\n","bounty_amount":"1500.0","formatted_bounty":"$1,500","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":4047,"file_name":"0001-Do-not-escape-backslashes-in-view-paths.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/004/047/60fee926e77c2f23eeeda55cf16bdba7d7a44a0c/0001-Do-not-escape-backslashes-in-view-paths.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Do-not-escape-backslashes-in-view-paths.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Do-not-escape-backslashes-in-view-paths.patch\u0026response-content-type=text%2Fx-c%2B%2B\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=a6714ea60c3e93b887a73657d09502aaea10e32398bbbd5fbb0bc6bf42e90c0f","file_size":1918,"type":"text/x-c++"},{"id":4048,"file_name":"0002-Ensure-that-templates-are-within-view-paths.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/004/048/98f951bb9438a0a229b807d445c35f950ddc4cdd/0002-Ensure-that-templates-are-within-view-paths.patch?response-content-disposition=attachment%3B%20filename%3D%220002-Ensure-that-templates-are-within-view-paths.patch%22%3B%20filename%2A%3DUTF-8%27%270002-Ensure-that-templates-are-within-view-paths.patch\u0026response-content-type=text%2Fx-c%2B%2B\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=d9a95f70e7c3610ad198137c8e0db87ba2437c8229f358e82e8942254923e11e","file_size":2424,"type":"text/x-c++"}],"allow_singular_disclosure_at":"2015-07-16T19:07:55.419Z","allow_singular_disclosure_after":-172146629.10030076,"singular_disclosure_allowed":true,"vote_count":4,"voters":["trazer","cryptographer","spetr0x","dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":14033,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"As discussed via email, we're going to be doing the full security release process with this one. Awaiting CVE from redhat","markdown_message":"\u003cp\u003eAs discussed via email, we\u0026#39;re going to be doing the full security release process with this one. Awaiting CVE from redhat\u003c/p\u003e\n","automated_response":false,"created_at":"2014-03-07T02:08:43.746Z","updated_at":"2014-03-07T02:09:15.217Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":14387,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"CERT has assigned the CVE identifier CVE-2014-0130 for this bug, I'll be in touch in a few days with a draft advisory","markdown_message":"\u003cp\u003eCERT has assigned the CVE identifier CVE-2014-0130 for this bug, I\u0026#39;ll be in touch in a few days with a draft advisory\u003c/p\u003e\n","automated_response":false,"created_at":"2014-03-08T00:01:11.117Z","updated_at":"2014-03-08T00:01:11.117Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":14388,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2014-03-08T00:02:56.899Z","updated_at":"2014-03-08T00:02:56.899Z","actor":{"username":"jeremy","cleared":false,"url":"/jeremy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/121/d8d8bc5a99a5229118f3f1064beb83458d1d10d6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":26351,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Any updates on this? It has been a while and I haven't heard anything. If you'd like me to improve the submitted patches somehow, let me know. I'd be happy to do the work.","markdown_message":"\u003cp\u003eAny updates on this? It has been a while and I haven\u0026#39;t heard anything. If you\u0026#39;d like me to improve the submitted patches somehow, let me know. I\u0026#39;d be happy to do the work.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-08T09:14:07.466Z","updated_at":"2014-04-08T09:14:07.466Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":27274,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nzkoz had an advisory and patches ready to go, but he went and got sick or some such :)  I'll nag him. Apologies for the delay!","markdown_message":"\u003cp\u003e\u003ca href=\"/nzkoz\"\u003e@nzkoz\u003c/a\u003e had an advisory and patches ready to go, but he went and got sick or some such :)  I\u0026#39;ll nag him. Apologies for the delay!\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-09T13:27:19.088Z","updated_at":"2014-04-09T13:27:19.088Z","actor":{"username":"jeremy","cleared":false,"url":"/jeremy","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/121/d8d8bc5a99a5229118f3f1064beb83458d1d10d6_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":27665,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @lautis, sorry for the delay, as jeremy mentioned I got sick, then so did my pregnant wife.  Should be back on deck now.\n\nI've got a few questions.  Firstly, when I apply your patch, it introduces two test failures (in master) regarding some behaviour we want to support:\n\n```ruby\n  render file: '../something'\n```\n\nSo I can't really apply a patch like that, however I thought perhaps a more aggressive approach might be justified, specifically:\n\n```ruby\ndef process(action, *args)\n  if !_valid_action_name?(action)\n    raise \"HAX\"\n  end\n```\n\nSomething like that (patch attached) would presumably solve the issue too?  Failing that, we could put similar behaviour in ImplicitRender instead of globally?","markdown_message":"\u003cp\u003eHi \u003ca href=\"/lautis\"\u003e@lautis\u003c/a\u003e, sorry for the delay, as jeremy mentioned I got sick, then so did my pregnant wife.  Should be back on deck now.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve got a few questions.  Firstly, when I apply your patch, it introduces two test failures (in master) regarding some behaviour we want to support:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e  \u003cspan class=\"n\"\u003erender\u003c/span\u003e \u003cspan class=\"ss\"\u003efile: \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;../something\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo I can\u0026#39;t really apply a patch like that, however I thought perhaps a more aggressive approach might be justified, specifically:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003e_valid_action_name?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;HAX\u0026quot;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSomething like that (patch attached) would presumably solve the issue too?  Failing that, we could put similar behaviour in ImplicitRender instead of globally?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-10T03:31:07.361Z","updated_at":"2014-04-10T03:31:07.361Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":6090,"filename":"AggressiveRejection.diff","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/006/090/699afd040d74f56a933faa84319f9e2afee571b0/AggressiveRejection.diff?response-content-disposition=attachment%3B%20filename%3D%22AggressiveRejection.diff%22%3B%20filename%2A%3DUTF-8%27%27AggressiveRejection.diff\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=b4c0f0c1c08eedccf087e2ffbc786b0a6a9b04b3a1269348743c0a7ee546a2e1"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":27822,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, filtering actions should do the trick. Although \"../something\" could be a name method name and filtering would prevent dispatching that method, this doesn't sound like a reasonable use case. If '..' in method names needs to be allowed, the valid action check could be done in ImplicitRender as you suggested.\n\nAssuming that `File::FNM_NOESCAPE`is used when looking up templates, the following logic should prevent path traversal outside controller path:\n\n```ruby\n!Pathname.new(action_name.to_s).cleanpath.to_s.start_with?('..')\n```\n\nAttached is a patch that would implement that by adding the condition to `available_action?`.","markdown_message":"\u003cp\u003eYes, filtering actions should do the trick. Although \u0026quot;../something\u0026quot; could be a name method name and filtering would prevent dispatching that method, this doesn\u0026#39;t sound like a reasonable use case. If \u0026#39;..\u0026#39; in method names needs to be allowed, the valid action check could be done in ImplicitRender as you suggested.\u003c/p\u003e\n\n\u003cp\u003eAssuming that \u003ccode\u003eFile::FNM_NOESCAPE\u003c/code\u003eis used when looking up templates, the following logic should prevent path traversal outside controller path:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"no\"\u003ePathname\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003ecleanpath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;..\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAttached is a patch that would implement that by adding the condition to \u003ccode\u003eavailable_action?\u003c/code\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-10T14:03:24.305Z","updated_at":"2014-04-10T14:03:24.305Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":6121,"filename":"0002-Prevent-path-traversal-for-implicit-render.patch","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/006/121/4e689072fe9efa572c2e2fc69440fd16d2a1abac/0002-Prevent-path-traversal-for-implicit-render.patch?response-content-disposition=attachment%3B%20filename%3D%220002-Prevent-path-traversal-for-implicit-render.patch%22%3B%20filename%2A%3DUTF-8%27%270002-Prevent-path-traversal-for-implicit-render.patch\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=98c7446353adb72520e604405f7058589e3b21dd563936464c8ac4e3e75fae5a"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":30586,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @lautis.\n\nI just tested your patches and seems your last one still allow traversal lookup. `available_action?` is not used in our code and I believe we should check the action name on `process`. I tried to reproduce the issue on our test suite but I still don't have success.\n\nI also agree with @nzkoz and believe we should not allow `.` or `File::SEPARATOR` on action names. Do you have any example where they are  desired?\n\nI attached a version of your patch that fixes the issue but takes the same aggressive path than @nzkoz's patch.\n\n Let me know what you think. I'll continue to try to get a failing test.\n\n","markdown_message":"\u003cp\u003eHi \u003ca href=\"/lautis\"\u003e@lautis\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eI just tested your patches and seems your last one still allow traversal lookup. \u003ccode\u003eavailable_action?\u003c/code\u003e is not used in our code and I believe we should check the action name on \u003ccode\u003eprocess\u003c/code\u003e. I tried to reproduce the issue on our test suite but I still don\u0026#39;t have success.\u003c/p\u003e\n\n\u003cp\u003eI also agree with \u003ca href=\"/nzkoz\"\u003e@nzkoz\u003c/a\u003e and believe we should not allow \u003ccode\u003e.\u003c/code\u003e or \u003ccode\u003eFile::SEPARATOR\u003c/code\u003e on action names. Do you have any example where they are  desired?\u003c/p\u003e\n\n\u003cp\u003eI attached a version of your patch that fixes the issue but takes the same aggressive path than \u003ca href=\"/nzkoz\"\u003e@nzkoz\u003c/a\u003e\u0026#39;s patch.\u003c/p\u003e\n\n\u003cp\u003eLet me know what you think. I\u0026#39;ll continue to try to get a failing test.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-15T02:22:44.487Z","updated_at":"2014-04-15T02:22:44.487Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":6534,"filename":"file_separator_rejection.diff","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/006/534/567cef2c4f72d460d8c509664a1dc0dccdeed312/file_separator_rejection.diff?response-content-disposition=attachment%3B%20filename%3D%22file_separator_rejection.diff%22%3B%20filename%2A%3DUTF-8%27%27file_separator_rejection.diff\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=3de2b54c8064fada77fe6c2c2e756934ade18ed331f19e5e2ce47b84280471b3"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":30603,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Attached is the test case for this issue. It is failing with your last path and it is passing with my patch.","markdown_message":"\u003cp\u003eAttached is the test case for this issue. It is failing with your last path and it is passing with my patch.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-15T03:04:05.037Z","updated_at":"2014-04-15T03:04:05.037Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":6536,"filename":"test_case.diff","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/006/536/1d7e384d12e2afbe7ae9fb67926d317c794048a6/test_case.diff?response-content-disposition=attachment%3B%20filename%3D%22test_case.diff%22%3B%20filename%2A%3DUTF-8%27%27test_case.diff\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=9345e7a6fa64c67e993f8c8baa93de4138b3f26f3adb47e7193da0d63aa86495"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":31295,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Not allowing file separators seems reasonable. I can't figure out a case where that would be wanted either as file extensions won't affect the `action_name`. \n\nApplying your patch also fixes the original app where the issue was original found, so looks good to me.","markdown_message":"\u003cp\u003eNot allowing file separators seems reasonable. I can\u0026#39;t figure out a case where that would be wanted either as file extensions won\u0026#39;t affect the \u003ccode\u003eaction_name\u003c/code\u003e. \u003c/p\u003e\n\n\u003cp\u003eApplying your patch also fixes the original app where the issue was original found, so looks good to me.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-16T14:28:54.959Z","updated_at":"2014-04-16T14:28:54.959Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":31304,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"On a second thought, I think my patch may be too aggressive. What if users want to allow `help/my_valid_folder/my_valid_file.html`? I believe it will not work anymore.\n\nI'll do more tests later this week but I think this is a valid use case that may not work after my patch.","markdown_message":"\u003cp\u003eOn a second thought, I think my patch may be too aggressive. What if users want to allow \u003ccode\u003ehelp/my_valid_folder/my_valid_file.html\u003c/code\u003e? I believe it will not work anymore.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ll do more tests later this week but I think this is a valid use case that may not work after my patch.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-16T14:52:01.581Z","updated_at":"2014-04-16T14:52:01.581Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":31314,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"That particular case works. Only `my_valid_file` is used as action name, html would be assigned to request.format (IIRC) and used in template lookup. Multiple dots probably won't work, e.g. `help/my_valid_folder/my_valid_file.js.html`. Also, directories like `help/foo.bar/my_valid_file` wouldn't work.","markdown_message":"\u003cp\u003eThat particular case works. Only \u003ccode\u003emy_valid_file\u003c/code\u003e is used as action name, html would be assigned to request.format (IIRC) and used in template lookup. Multiple dots probably won\u0026#39;t work, e.g. \u003ccode\u003ehelp/my_valid_folder/my_valid_file.js.html\u003c/code\u003e. Also, directories like \u003ccode\u003ehelp/foo.bar/my_valid_file\u003c/code\u003e wouldn\u0026#39;t work.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-16T15:13:00.440Z","updated_at":"2014-04-16T15:13:21.863Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":31539,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Personally, I'd rather we broke the `help/my_valid_folder/my_valid_file.html` case.\n\nIf people really need that functionality they can call the parameter something else, then pass the argument to `render file: params[:crazyperson]` ?","markdown_message":"\u003cp\u003ePersonally, I\u0026#39;d rather we broke the \u003ccode\u003ehelp/my_valid_folder/my_valid_file.html\u003c/code\u003e case.\u003c/p\u003e\n\n\u003cp\u003eIf people really need that functionality they can call the parameter something else, then pass the argument to \u003ccode\u003erender file: params[:crazyperson]\u003c/code\u003e ?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-16T21:37:48.290Z","updated_at":"2014-04-16T21:37:48.290Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":32041,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes. I think we can broke it.\n\nSo I improved the patch a little.","markdown_message":"\u003cp\u003eYes. I think we can broke it.\u003c/p\u003e\n\n\u003cp\u003eSo I improved the patch a little.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-17T20:00:58.638Z","updated_at":"2014-04-17T20:00:58.638Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":6735,"filename":"0001-Only-accept-actions-without-File-SEPARATOR-in-the-na.patch","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/006/735/f9fa95d95a793378be44bad404e95109061254a3/0001-Only-accept-actions-without-File-SEPARATOR-in-the-na.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Only-accept-actions-without-File-SEPARATOR-in-the-na.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Only-accept-actions-without-File-SEPARATOR-in-the-na.patch\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=76d5ca57549fb23e2e65f5188e07951b32615b227e6366e313211edc80ed61c5"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":33718,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"ropping path traversal with implicit rendering does indeed sound better than having a inplementation full of caveats. That said, dropping the feature in a patch release – even if its existence was an accident – is seems like a bit of a dick move to me.  If you're OK with the approach, it might just be me worrying needlessly.\n\nI can work on the Pathname approach if you think that path traversal with implicit rendering is worth supporting in the near future releases.","markdown_message":"\u003cp\u003eropping path traversal with implicit rendering does indeed sound better than having a inplementation full of caveats. That said, dropping the feature in a patch release – even if its existence was an accident – is seems like a bit of a dick move to me.  If you\u0026#39;re OK with the approach, it might just be me worrying needlessly.\u003c/p\u003e\n\n\u003cp\u003eI can work on the Pathname approach if you think that path traversal with implicit rendering is worth supporting in the near future releases.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-21T05:19:59.548Z","updated_at":"2014-04-21T05:19:59.548Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":35082,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Would the render file: params[:something_else] case work in your app?  If restoring the functionality is as simple as an explicit render call and a param change, I wouldn't be too worried about breaking this.\n\nWe frequently have to break things people 'want' when doing security fixes, so long as there's a way to get the old behaviour back (sort of an inverted work-around) then it's not a huge deal.","markdown_message":"\u003cp\u003eWould the render file: params[:something_else] case work in your app?  If restoring the functionality is as simple as an explicit render call and a param change, I wouldn\u0026#39;t be too worried about breaking this.\u003c/p\u003e\n\n\u003cp\u003eWe frequently have to break things people \u0026#39;want\u0026#39; when doing security fixes, so long as there\u0026#39;s a way to get the old behaviour back (sort of an inverted work-around) then it\u0026#39;s not a huge deal.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-21T21:01:13.937Z","updated_at":"2014-04-21T21:01:13.937Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":35125,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Sure, it can be implemented with a ~4 LoC controller action (i.e. do the file separator rejection / resolve path). Not a big deal.\n\nI understand that security fixes sometimes must break things. E.g. to fix CVE-2011-0447, the CSRF handling had to be changed quite a bit for end-user. However, in this particular case, changing existing behaviour doesn't seem necessary, although I can see that it is desirable at least in the long run. ","markdown_message":"\u003cp\u003eSure, it can be implemented with a ~4 LoC controller action (i.e. do the file separator rejection / resolve path). Not a big deal.\u003c/p\u003e\n\n\u003cp\u003eI understand that security fixes sometimes must break things. E.g. to fix CVE-2011-0447, the CSRF handling had to be changed quite a bit for end-user. However, in this particular case, changing existing behaviour doesn\u0026#39;t seem necessary, although I can see that it is desirable at least in the long run. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-21T21:13:41.544Z","updated_at":"2014-04-21T21:13:41.544Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":36017,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, after applying these patches, the directory traversal seems to be fixed in my app. The side-effects for existing apps are minimised and the fix is only applied to ImplicitRendering. File and directory names with dots should still work.","markdown_message":"\u003cp\u003eHi, after applying these patches, the directory traversal seems to be fixed in my app. The side-effects for existing apps are minimised and the fix is only applied to ImplicitRendering. File and directory names with dots should still work.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-22T14:06:54.820Z","updated_at":"2014-04-22T14:06:54.820Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":7240,"filename":"0001-Do-not-escape-backslashes-in-view-paths.patch","type":"text/x-c++","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/007/240/40ca74052e78fbde3ba2d2f34210b04226f5038b/0001-Do-not-escape-backslashes-in-view-paths.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Do-not-escape-backslashes-in-view-paths.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Do-not-escape-backslashes-in-view-paths.patch\u0026response-content-type=text%2Fx-c%2B%2B\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=1518afde3801c43b7ec739e5c63fec93f19338b88ac3ff0bdd15deafcd163923"},{"id":7241,"filename":"0002-Prevent-path-traversal-for-implicit-render.patch","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/007/241/97b943bc9f8bcd4bed2984c85cdcdb468d0f827b/0002-Prevent-path-traversal-for-implicit-render.patch?response-content-disposition=attachment%3B%20filename%3D%220002-Prevent-path-traversal-for-implicit-render.patch%22%3B%20filename%2A%3DUTF-8%27%270002-Prevent-path-traversal-for-implicit-render.patch\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053824Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=9513ca0162544ca54e244681cb34155f04bce8e152407f3bf83dd625528f7022"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":36756,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"OK, I'll amend the advisory to include information about what it breaks an post a new draft here today.\n\nI'm still not sure why we need the `FNM_NOESCAPE` change though?  ","markdown_message":"\u003cp\u003eOK, I\u0026#39;ll amend the advisory to include information about what it breaks an post a new draft here today.\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m still not sure why we need the \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e change though?  \u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-22T21:52:39.092Z","updated_at":"2014-04-22T21:52:39.092Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":36777,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I believe we should not patch `method_for_action`. This method is override on subclasses and we don't have guarantee people is calling `super` on these subclasses. This is why I added a new private method and called it on the expected places. But maybe I'm over cautious. What do you guys think?\n\nAlso, the new patch is missing the test that actually asserts this issue will not regret. I think we should include it. ","markdown_message":"\u003cp\u003eI believe we should not patch \u003ccode\u003emethod_for_action\u003c/code\u003e. This method is override on subclasses and we don\u0026#39;t have guarantee people is calling \u003ccode\u003esuper\u003c/code\u003e on these subclasses. This is why I added a new private method and called it on the expected places. But maybe I\u0026#39;m over cautious. What do you guys think?\u003c/p\u003e\n\n\u003cp\u003eAlso, the new patch is missing the test that actually asserts this issue will not regret. I think we should include it. \u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-22T22:11:10.896Z","updated_at":"2014-04-22T22:11:10.896Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":36818,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@nzkoz, `Dir.glob(\"..\")` and `Dir.glob(\".\\\\.\")` are equivalent unless `FNM_NOESCAPE` flag is set. By using backslashes, you could circumvent filters from behaving properly. In this case,  `GET /help/%5c../%5c../%5c../Gemfile` would again allow directory traversal, but also some other views/templates might get unexpectedly rendered in other situations.\n\n@rafaelfranca, I tried to limit the patch to only deal with implicit rendering. I find your approach of adding new method to ActionController::Base reasonable, too. The gist is that if `_valid_action_name?` was implemented as\n\n```ruby\ndef _valid_action_name?(action_name)\n  !Pathname.new(action_name.to_s).cleanpath.to_s.start_with?(\"..\")\nend \n```\n\nonly directory traversal would be prevented, but otherwise current behaviour would not change. `FNM_NOESCAPE` must be used in this case to prevent circumventing the filter.","markdown_message":"\u003cp\u003e\u003ca href=\"/nzkoz\"\u003e@nzkoz\u003c/a\u003e, \u003ccode\u003eDir.glob(\u0026quot;..\u0026quot;)\u003c/code\u003e and \u003ccode\u003eDir.glob(\u0026quot;.\\\\.\u0026quot;)\u003c/code\u003e are equivalent unless \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e flag is set. By using backslashes, you could circumvent filters from behaving properly. In this case,  \u003ccode\u003eGET /help/%5c../%5c../%5c../Gemfile\u003c/code\u003e would again allow directory traversal, but also some other views/templates might get unexpectedly rendered in other situations.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"/rafaelfranca\"\u003e@rafaelfranca\u003c/a\u003e, I tried to limit the patch to only deal with implicit rendering. I find your approach of adding new method to ActionController::Base reasonable, too. The gist is that if \u003ccode\u003e_valid_action_name?\u003c/code\u003e was implemented as\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_valid_action_name?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"no\"\u003ePathname\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003ecleanpath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;..\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eonly directory traversal would be prevented, but otherwise current behaviour would not change. \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e must be used in this case to prevent circumventing the filter.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-22T23:44:14.564Z","updated_at":"2014-04-22T23:44:14.564Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":36822,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It might be worth mentioning that [Rack::Protection::PathTraversal](https://github.com/rkh/rack-protection/blob/master/lib/rack/protection/path_traversal.rb) approaches this by sanitising method names so that path traversal is removed. However, it doesn't account for backslashed being ignored in `Dir.glob` and hence isn't enough to protect against directory traversal unless `FNM_NOESCAPE` is used.\n\nThat gem/middleware would provide reasonable protection should support for globbed routes with implicit rendering be removed.","markdown_message":"\u003cp\u003eIt might be worth mentioning that \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Frkh%2Frack-protection%2Fblob%2Fmaster%2Flib%2Frack%2Fprotection%2Fpath_traversal.rb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eRack::Protection::PathTraversal\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e approaches this by sanitising method names so that path traversal is removed. However, it doesn\u0026#39;t account for backslashed being ignored in \u003ccode\u003eDir.glob\u003c/code\u003e and hence isn\u0026#39;t enough to protect against directory traversal unless \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e is used.\u003c/p\u003e\n\n\u003cp\u003eThat gem/middleware would provide reasonable protection should support for globbed routes with implicit rendering be removed.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-22T23:54:17.486Z","updated_at":"2014-04-22T23:54:17.486Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":36858,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"That's why I prefer @rafaelfranca's approach:\n\n```ruby\n     def _valid_action_name?(action_name)\n       action_name.to_s !~ Regexp.new(File::SEPARATOR)\n     end\n```\n\nIn that scenario, we don't need to worry about `FNM_NOESCAPE` right?","markdown_message":"\u003cp\u003eThat\u0026#39;s why I prefer \u003ca href=\"/rafaelfranca\"\u003e@rafaelfranca\u003c/a\u003e\u0026#39;s approach:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e     \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_valid_action_name?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eaction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n       \u003cspan class=\"n\"\u003eaction_name\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e \u003cspan class=\"o\"\u003e!~\u003c/span\u003e \u003cspan class=\"no\"\u003eRegexp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"no\"\u003eFile\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eSEPARATOR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n     \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn that scenario, we don\u0026#39;t need to worry about \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e right?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-23T03:46:02.410Z","updated_at":"2014-04-23T03:46:02.410Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":37094,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Implicit rendering should be safe. However, when you implement the wildcard rendering yourself, you'd need to know that backslashes are ignored when filtering allowed actions/templates.\n\nLet's say you have action that accepts globbed route parameter `template`:\n\n```ruby\n def show_page\n   render sanitize(params[:template] || \"index\")\n end\n```\n\nWhen implementing the `sanitize` method, you not only need to be able to prevent input such as `\"../../config/secrets.yml\"`, but also `\".\\\\./\\\\../config/secrets.yml\"`, The approach used in Rack::Protection::PathTraversal or Pathname won't work unless either `FNM_NOESCAPE` is used in `PathResolver` or you remove the backslashes from the input. It's very easy to leave your application vulnerable to path traversal attacks if you aren't aware of this implementation detail in PathResolver.\n","markdown_message":"\u003cp\u003eImplicit rendering should be safe. However, when you implement the wildcard rendering yourself, you\u0026#39;d need to know that backslashes are ignored when filtering allowed actions/templates.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s say you have action that accepts globbed route parameter \u003ccode\u003etemplate\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight ruby\"\u003e\u003ccode\u003e \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eshow_page\u003c/span\u003e\n   \u003cspan class=\"n\"\u003erender\u003c/span\u003e \u003cspan class=\"n\"\u003esanitize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparams\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:template\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;index\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen implementing the \u003ccode\u003esanitize\u003c/code\u003e method, you not only need to be able to prevent input such as \u003ccode\u003e\u0026quot;../../config/secrets.yml\u0026quot;\u003c/code\u003e, but also \u003ccode\u003e\u0026quot;.\\\\./\\\\../config/secrets.yml\u0026quot;\u003c/code\u003e, The approach used in Rack::Protection::PathTraversal or Pathname won\u0026#39;t work unless either \u003ccode\u003eFNM_NOESCAPE\u003c/code\u003e is used in \u003ccode\u003ePathResolver\u003c/code\u003e or you remove the backslashes from the input. It\u0026#39;s very easy to leave your application vulnerable to path traversal attacks if you aren\u0026#39;t aware of this implementation detail in PathResolver.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-23T12:25:44.769Z","updated_at":"2014-04-23T12:25:44.769Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":39902,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's an amended advisory which shows what you should do if you're relying on that functionality.  Is it clear, have I made any errors?","markdown_message":"\u003cp\u003eHere\u0026#39;s an amended advisory which shows what you should do if you\u0026#39;re relying on that functionality.  Is it clear, have I made any errors?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-28T00:04:28.670Z","updated_at":"2014-04-28T00:04:28.670Z","actor":{"username":"nzkoz","cleared":false,"url":"/nzkoz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/317/11e8edc22329e340906e362e4f8d431cd6797787_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":7768,"filename":"advisory.txt","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/007/768/55236b7b92b8a67346583669c97cb4b37903353e/advisory.txt?response-content-disposition=attachment%3B%20filename%3D%22advisory.txt%22%3B%20filename%2A%3DUTF-8%27%27advisory.txt\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ2UMPB2FX%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T053825Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJr%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIEq9neBunEjsdY7f8cNZfYtjkYnfx7sYXIBk82UycrktAiEA5w10R4CJv%2FQIiYTXv1ZP8q%2BbScvvzy7qwcG%2BmPmKCXMqtAMIUxABGgwwMTM2MTkyNzQ4NDkiDKX6CTSGAGf6Bt5yHyqRA9qW1WRQYe7JztYb6rdSeSRyzKgf4LxEu42JMoyPyy0VqqdaIdaW%2F5Oe%2FZcBqKJkPjfrnsLv1E3Cttn6QZ2fsMawdDGLyKyEEvAx6LbD4TYD1QOy0YJIw6j32Nt3V4psvzyU384FsJYLymiqMGAqTzIuUS4QNvTcHn%2BFoOZvS%2F06fP5YWj%2BxpW%2BELDyBb5CFIWqKXYmkW%2BPv4IxFiMVfFF4KM80ZKVGfyJ7nRaRwvjM5YUJYHOlvXjFuPBSC3IYIgEZYlopEqTolZ1OQ2zbi1yDB%2FWl1rx7i7cbCVK6zJwPdLcPRBOa7jlMN0jlHdNPzjyKxdEaNBy7Cyflyw%2FZCl7X1dB7yuSBF8YK2st4h%2FZchseLh%2BjukipjtpVl5nDjO8BSu5evt1V1lFzADomlTKShrSgjmej1gvXmULpbdNuEwc3vMl328MfuwtHHSSvzZo5xxP0U1cq9fhM0Ztcea1ZRpQDZR4DB1jRqdjeMIXNuuwv3G7Uotj1VrvA87zW9Og6gQ9VN7fQSdOpurQFAV2WvRMIuSqv8FOusB%2B%2BEh7xquKUpKrZEfrLl0yLcAZyezk5OlnVLaoE%2BCU7%2F1YWDwq4fJ%2Fzqx58r%2Ffgzx%2FRuGFLAoCPIl7GI47ntqpCuRo5kjknXh3Vhm0Ds%2B9y0Uo9mgVKhl6XjEqADeRJOm5JpIvTZkPibWah%2FFXooiOsIWnpbe3xZbkrh62wdx0iVuonbBNy6Z0vYXXREkzeNyKh%2Fx0i0DwAehfYiLehqkIm1GqvDnaSiQ0dTRzOsrEnXwNhRtDRaBDDLvFXHGy3Xm8ucb70jki0U1otEIUfIG%2Fnfsrs7zhSOcLfi6%2B4aytuy%2FrSFLmVnwIpfIzQ%3D%3D\u0026X-Amz-Signature=c1b80f50b64bb2f5bf139d6c9ddf3c190bf088fc110359152998d386443e2904"}],"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":40536,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It is clear and I couldn't find any errors. `.index('.')` is very simple workaround, :+1:.","markdown_message":"\u003cp\u003eIt is clear and I couldn\u0026#39;t find any errors. \u003ccode\u003e.index(\u0026#39;.\u0026#39;)\u003c/code\u003e is very simple workaround, :+1:.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-04-28T18:16:27.228Z","updated_at":"2014-04-28T18:16:27.228Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":49932,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Issue was already made public at https://groups.google.com/d/msg/rubyonrails-security/NkKc7vTW70o/NxW_PDBSG3AJ and all the supported versions were released with the fix.","markdown_message":"\u003cp\u003eIssue was already made public at \u003ca title=\"https://groups.google.com/d/msg/rubyonrails-security/NkKc7vTW70o/NxW_PDBSG3AJ\" href=\"/redirect?url=https%3A%2F%2Fgroups.google.com%2Fd%2Fmsg%2Frubyonrails-security%2FNkKc7vTW70o%2FNxW_PDBSG3AJ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://groups.google.com/d/msg/rubyonrails-security/NkKc7vTW70o/NxW_PDBSG3AJ\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and all the supported versions were released with the fix.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-05-13T14:33:41.291Z","updated_at":"2014-05-13T14:35:16.111Z","actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"lautis","url":"/lautis"},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":78981,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2014-06-25T18:01:59.365Z","updated_at":"2014-06-25T18:01:59.365Z","actor":{"url":"/rails","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/022/5e2b46658c8b86bed62f574d8e1793f353cbbc63_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ruby on Rails"}},"bounty_amount":"1500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"rails","collaborator":{"username":"lautis","url":"/lautis"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":474485,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-16T19:07:55.173Z","updated_at":"2015-06-16T19:07:55.173Z","first_to_agree":true,"actor":{"username":"rafaelfranca","cleared":false,"url":"/rafaelfranca","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/004/981/dd3b6bb41f9c33e3448ebbc47303f5a135f25105_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":504084,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-07-09T19:15:26.775Z","updated_at":"2015-07-09T19:15:26.775Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":504085,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-07-09T19:15:36.748Z","updated_at":"2015-07-09T19:15:36.748Z","actor":{"username":"lautis","cleared":false,"url":"/lautis","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"rails","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}