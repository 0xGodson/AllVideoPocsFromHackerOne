{"id":470003,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NzAwMDM=","url":"https://hackerone.com/reports/470003","title":"Privilege Escalation via Keybase Helper (incomplete security fix)","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2018-12-19T16:43:13.301Z","submitted_at":"2018-12-19T16:43:13.301Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"0xcccc","url":"/0xcccc","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2809,"url":"https://hackerone.com/keybase","handle":"keybase","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Keybase","twitter_handle":"keybaseio","website":"https://keybase.io","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-01-31T02:19:46.101Z","bug_reporter_agreed_on_going_public_at":"2019-01-31T02:19:46.033Z","team_member_agreed_on_going_public_at":"2019-01-30T18:12:08.607Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"In the previous [report](https://hackerone.com/reports/397478), about the privileged helper lacks of validation so any applications can abuse it to gain root privilege.\n\nBut the security fix is incomplete.\n\nI can describe 3 different ways to bypass (possibly 4, I doubt).\n\nAll the poc are simplified to not sending the actual attack payload, but instead a simple xpc_dictionary. If the code sign check works, I should received a \"connection interrupt\" error. To prove that I have bypassed the check, I will get a \"Unable to read object\" reply (that the MPMessagePack has received the message but doesn't recognize its format).\n\n## Description\n\n1. Time of use time of check\n\nsource code: `poc1.m`\n\nUnlike Windows, macOS does not lock the executable that being executed.\nSo between my evil process's creation and the XPC, there's a time window that I can simply replace my self with a valid executable.\nSince the original binary has `@rpath` dependencies, I have to copy the whole app bundle (not the single executable)\n\nIf the code sign check works, I should received a \"connection interrupt\" error.\n\n2. pid reuse race condition\n\nAccording to the code, you've already known this, but just couln't believe that it could be an actual attack:\n \n \u003e https://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143\n \u003e\n \u003e The OS’s process ID space is relatively small, which means that process IDs are commonly reused.\n \u003e There is a recommended alternative to process IDs, namely audit tokens (audit_token_t), but you can’t use this because a critical piece of public API is missing.\n \u003e While you can do step 2 with an audit token (using kSecGuestAttributeAudit), there’s no public API to get an audit token from an XPC connection.\n \u003e Fortunately, process ID wrapping problems aren’t a real threat in this context because, if you create an XPC connection per process, you can do your checking based on the process ID of that process. If the process dies, the connection goes away and you’ll end up rechecking the process ID on the new connection.\n \n This technique is the variant of Ian Beer's exploit\n https://bugs.chromium.org/p/project-zero/issues/detail?id=1223\n \n on macOS, pid can be reuse. You can even replace current executable\n to a different process with fork() / posix_spawn() while keeping the old pid.\n \n For loop for about 8 times you can trigger the race condition.\n \nIn the Console.app, search `process:keybase.Helper`\n\nI was expected to see this message repeats 8 times:\n\n``` \nFailed to pass code requirement: Error Domain=MPMessagePack Code=-67050 \"Binary failed code requirement\" UserInfo={NSLocalizedDescription=Binary failed code requirement, NSLocalizedRecoveryOptions=(\n OK\n```\n \n But instead, some of the messages got passed\n\n```\n You can attach to Keybase.Helper process, put a breakpoint at SecStaticCodeCheckValidityWithErrors to see the behavior\n```\n\n3. `DYLD_INSERT_LIBRARIES` library injection\n\nsource code: `poc1.m` and `injected.m`\n \n`DYLD_INSERT_LIBRARIES` can inject evil payload to valid signed process, without touching its code signature.\n \n To prevent this attack, you can either add LibraryValidation to whitelisted binary (I strongly recommend this) or add any custom Entitlement to the code signature.\n \n Addictionaly, XPC has the built-in support for checking entitlement.\n\nPlease refer to \n\n\u003e (Objective See: \"Reversing to Engineer: Learning to 'Secure' XPC from a Patch\")[https://objective-see.com/blog.html]\n\nfor more information.\n\n4. (possible) abuse Electron remote debugging and process.dlopen to load untrusted code\n\n The allowed identifiers are keybase.Installer and keybase.Keybase, but I couln't find where keybase.Keybase is.\nI doubt that it's the typo for \"Keybase.Electron\" because I found this: \nhttps://github.com/keybase/client/blob/6f1e2c08d514713db6dc33081a09a6dcf9bd5493/osx/KBKit/KBKit/Component/KBAppBundle.m#L52\n\nIf so, there's the 4th bypass:\nAbuse trusted Electron to load evil library and run the exploit.\n\nKeybase gui is based on Electron, which has built in debugg option like --inspect=[port] or --inspect-brk=[port]\nThen it will expose the debug protocol on localhost that can be interacted via WebSocket\nThrough this debug protocol\n\nWe should NEVER trust such script language interpreters like Electron, node.js, or even lua or something.\nLibrary Validation can prevent them from dylib hijack, but some interpreter also have the ablity to run shellcode.\n \nSo just block them.\n\n## The advise\n\nTo implement a secure XPC server, you need to follow all of these:\n\n1. Just as the comment in https://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143 says, don't use pid the check code signature. Use `audit_token_t`!\n\n2. PID can be reused, not to mention path. Don't trust it.\n\n2. Add Library Validation flag (https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW9) to whitelisted clients. This kills all dylib injection tricks ( (but not shellcode, so don't whitelist script interpreters)\n\n3. After the new flags applied, attackers can still grab old signed binaries. Add new custom entitlements (you can customize the name, as long as it don't starts with `com.apple.private`) check to the code sign requirements.\n\n## Impact\n\nAn attacker that can execute arbitrary code in normal user can be elevated to root privilege.","vulnerability_information_html":"\u003cp\u003eIn the previous \u003ca href=\"https://hackerone.com/reports/397478\"\u003ereport\u003c/a\u003e, about the privileged helper lacks of validation so any applications can abuse it to gain root privilege.\u003c/p\u003e\n\n\u003cp\u003eBut the security fix is incomplete.\u003c/p\u003e\n\n\u003cp\u003eI can describe 3 different ways to bypass (possibly 4, I doubt).\u003c/p\u003e\n\n\u003cp\u003eAll the poc are simplified to not sending the actual attack payload, but instead a simple xpc_dictionary. If the code sign check works, I should received a \u0026quot;connection interrupt\u0026quot; error. To prove that I have bypassed the check, I will get a \u0026quot;Unable to read object\u0026quot; reply (that the MPMessagePack has received the message but doesn\u0026#39;t recognize its format).\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eTime of use time of check\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003esource code: \u003ccode\u003epoc1.m\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eUnlike Windows, macOS does not lock the executable that being executed.\u003cbr\u003e\nSo between my evil process\u0026#39;s creation and the XPC, there\u0026#39;s a time window that I can simply replace my self with a valid executable.\u003cbr\u003e\nSince the original binary has \u003ccode\u003e@rpath\u003c/code\u003e dependencies, I have to copy the whole app bundle (not the single executable)\u003c/p\u003e\n\n\u003cp\u003eIf the code sign check works, I should received a \u0026quot;connection interrupt\u0026quot; error.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003epid reuse race condition\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eAccording to the code, you\u0026#39;ve already known this, but just couln\u0026#39;t believe that it could be an actual attack:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca title=\"https://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgabriel%2FMPMessagePack%2Fcommit%2Fc01e974b09d8278696582c40bf73ddf74e7531ad%23diff-de800048bd73ccd8bd9fea83da21f613R143\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe OS’s process ID space is relatively small, which means that process IDs are commonly reused.\u003cbr\u003e\nThere is a recommended alternative to process IDs, namely audit tokens (audit_token_t), but you can’t use this because a critical piece of public API is missing.\u003cbr\u003e\nWhile you can do step 2 with an audit token (using kSecGuestAttributeAudit), there’s no public API to get an audit token from an XPC connection.\u003cbr\u003e\nFortunately, process ID wrapping problems aren’t a real threat in this context because, if you create an XPC connection per process, you can do your checking based on the process ID of that process. If the process dies, the connection goes away and you’ll end up rechecking the process ID on the new connection.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis technique is the variant of Ian Beer\u0026#39;s exploit\u003cbr\u003e\n \u003ca title=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1223\" href=\"/redirect?url=https%3A%2F%2Fbugs.chromium.org%2Fp%2Fproject-zero%2Fissues%2Fdetail%3Fid%3D1223\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.chromium.org/p/project-zero/issues/detail?id=1223\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eon macOS, pid can be reuse. You can even replace current executable\u003cbr\u003e\n to a different process with fork() / posix_spawn() while keeping the old pid.\u003c/p\u003e\n\n\u003cp\u003eFor loop for about 8 times you can trigger the race condition.\u003c/p\u003e\n\n\u003cp\u003eIn the Console.app, search \u003ccode\u003eprocess:keybase.Helper\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eI was expected to see this message repeats 8 times:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eFailed to pass code requirement: Error Domain=MPMessagePack Code=-67050 \u0026quot;Binary failed code requirement\u0026quot; UserInfo={NSLocalizedDescription=Binary failed code requirement, NSLocalizedRecoveryOptions=(\n OK\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut instead, some of the messages got passed\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e You can attach to Keybase.Helper process, put a breakpoint at SecStaticCodeCheckValidityWithErrors to see the behavior\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003ccode\u003eDYLD_INSERT_LIBRARIES\u003c/code\u003e library injection\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003esource code: \u003ccode\u003epoc1.m\u003c/code\u003e and \u003ccode\u003einjected.m\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eDYLD_INSERT_LIBRARIES\u003c/code\u003e can inject evil payload to valid signed process, without touching its code signature.\u003c/p\u003e\n\n\u003cp\u003eTo prevent this attack, you can either add LibraryValidation to whitelisted binary (I strongly recommend this) or add any custom Entitlement to the code signature.\u003c/p\u003e\n\n\u003cp\u003eAddictionaly, XPC has the built-in support for checking entitlement.\u003c/p\u003e\n\n\u003cp\u003ePlease refer to \u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e(Objective See: \u0026quot;Reversing to Engineer: Learning to \u0026#39;Secure\u0026#39; XPC from a Patch\u0026quot;)[\u003ca title=\"https://objective-see.com/blog.html\" href=\"/redirect?url=https%3A%2F%2Fobjective-see.com%2Fblog.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://objective-see.com/blog.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e]\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003efor more information.\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e(possible) abuse Electron remote debugging and process.dlopen to load untrusted code\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe allowed identifiers are keybase.Installer and keybase.Keybase, but I couln\u0026#39;t find where keybase.Keybase is.\u003cbr\u003e\nI doubt that it\u0026#39;s the typo for \u0026quot;Keybase.Electron\u0026quot; because I found this: \u003cbr\u003e\n\u003ca title=\"https://github.com/keybase/client/blob/6f1e2c08d514713db6dc33081a09a6dcf9bd5493/osx/KBKit/KBKit/Component/KBAppBundle.m#L52\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fkeybase%2Fclient%2Fblob%2F6f1e2c08d514713db6dc33081a09a6dcf9bd5493%2Fosx%2FKBKit%2FKBKit%2FComponent%2FKBAppBundle.m%23L52\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/keybase/client/blob/6f1e2c08d514713db6dc33081a09a6dcf9bd5493/osx/KBKit/KBKit/Component/KBAppBundle.m#L52\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIf so, there\u0026#39;s the 4th bypass:\u003cbr\u003e\nAbuse trusted Electron to load evil library and run the exploit.\u003c/p\u003e\n\n\u003cp\u003eKeybase gui is based on Electron, which has built in debugg option like --inspect=[port] or --inspect-brk=[port]\u003cbr\u003e\nThen it will expose the debug protocol on localhost that can be interacted via WebSocket\u003cbr\u003e\nThrough this debug protocol\u003c/p\u003e\n\n\u003cp\u003eWe should NEVER trust such script language interpreters like Electron, node.js, or even lua or something.\u003cbr\u003e\nLibrary Validation can prevent them from dylib hijack, but some interpreter also have the ablity to run shellcode.\u003c/p\u003e\n\n\u003cp\u003eSo just block them.\u003c/p\u003e\n\n\u003ch2 id=\"the-advise\"\u003eThe advise\u003c/h2\u003e\n\n\u003cp\u003eTo implement a secure XPC server, you need to follow all of these:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eJust as the comment in \u003ca title=\"https://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fgabriel%2FMPMessagePack%2Fcommit%2Fc01e974b09d8278696582c40bf73ddf74e7531ad%23diff-de800048bd73ccd8bd9fea83da21f613R143\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/gabriel/MPMessagePack/commit/c01e974b09d8278696582c40bf73ddf74e7531ad#diff-de800048bd73ccd8bd9fea83da21f613R143\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e says, don\u0026#39;t use pid the check code signature. Use \u003ccode\u003eaudit_token_t\u003c/code\u003e!\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePID can be reused, not to mention path. Don\u0026#39;t trust it.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAdd Library Validation flag (\u003ca title=\"https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW9\" href=\"/redirect?url=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Farchive%2Fdocumentation%2FSecurity%2FConceptual%2FCodeSigningGuide%2FProcedures%2FProcedures.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP40005929-CH4-SW9\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW9\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) to whitelisted clients. This kills all dylib injection tricks ( (but not shellcode, so don\u0026#39;t whitelist script interpreters)\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAfter the new flags applied, attackers can still grab old signed binaries. Add new custom entitlements (you can customize the name, as long as it don\u0026#39;t starts with \u003ccode\u003ecom.apple.private\u003c/code\u003e) check to the code sign requirements.\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAn attacker that can execute arbitrary code in normal user can be elevated to root privilege.\u003c/p\u003e\n","bounty_amount":"3250.0","formatted_bounty":"$3,250","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":394572,"file_name":"poc.zip","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/394/572/e667fc68753a5d70bcb06bf573037357445e0719/poc.zip?response-content-disposition=attachment%3B%20filename%3D%22poc.zip%22%3B%20filename%2A%3DUTF-8%27%27poc.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRWTAI2C7%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060228Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA4OnjXKFXegILmjBXgWPi%2Bteogg5H0LMBKKhsAnJHN7AiB63uA2f%2F%2F5YDRnlhtKi%2FXhk22EJKrVEePJyA5BB6daFCq0AwhVEAEaDDAxMzYxOTI3NDg0OSIM53ag7gGyZZO8130kKpEDyciZp2ZqDzsBi%2FORe9ONiGdtsWokZ6RNGwhOQ%2FCYjspqizBK8MFrrsG4EhCD7nQo3op7z5QpG4etJhRbGyk9ZMs1Bf11meT%2FBjo9u%2BckMiDjlcIlq5R15HOU7s1EHTqrLA36yUMOeyS29kSrYPqvMoLO2rWkUVucCUcQDlInVAw2uEr44ZvPlLBsyZb0G%2FT2OtLSV2vBgLI8dwRiyR%2B%2FkWbj5vpXWDXwAuLlH42qzINlU8oR6OvGnSCX5MCSpLVFjgxe2PhQ%2BxcvVQajoQ9vfI4lq%2FEF42OjdLcTp7fqirHlY5gZzbp%2B1h9WpBX1bN3bp5CKCkKnLhLqHodDNw6c1AzplZQntDSI7S7QWvohyZhSzrmIQHIVyNLGZgXx6b0918BQ6OX2S%2BdvH5OV4Wb7a7Im2%2FUTY072IM3MaRPN2Rpj1HVuQswZAJU0R8hS1MC9eqfkEttWFx0QKe6oUQCIGOaOP4bGspe1UVDGayXri6eNBeq8XJKWe0GMnG2omCWNNKKzrBDmqhOtnjYVc9W8bFQwytqq%2FwU67AE09XlDlPXYy%2BHJOKHdFHcwWreDNKw1sbWRzs1%2F5NkOvu7lAUwpxtXVP%2BePBhXceOPXQGHu9DsdsNPyO%2BGsOCZ66BYQBtsR104YSbyUKzHudK2y47O8h0exzqJ7%2BP3su6UkIEAf5z9ad88cXbwQThNPl6z3JfRt1ENAowPGLR%2F%2Frhm74kAezWUMRLV2tE7TC7gPDHdvS4bcrFlZ2adOF78IlYHd0DR95sTWHneHqzp4qzlglFCkHtDqf%2BuZWboHX83v76e19laPwMwL5yTDCuQHztQ0TyuFtL%2BCtEsk6OY%2BMny6lDUXH9NnZhbaIw%3D%3D\u0026X-Amz-Signature=eca2e9ef0a080057acff2fac257e6ffd6f2b2c9855ac9c05703ba567e6905921","file_size":8600,"type":"application/zip"}],"allow_singular_disclosure_at":null,"vote_count":42,"voters":["mirchr","bl4de","spam404","yashrs","dhakal_ananda","k3mlol","mygf","r3y","harry_mg","an0nym0us","and 32 more..."],"severity":{"rating":"high","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3867662,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-12-19T18:11:47.535Z","updated_at":"2018-12-19T18:11:47.535Z","additional_data":{"old_severity":"Critical (9.2)","new_severity":"High","old_severity_id":269660,"new_severity_id":269695},"actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3867664,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for the report and the great writeup.  We're looking into it ASAP.","markdown_message":"\u003cp\u003eThank you for the report and the great writeup.  We\u0026#39;re looking into it ASAP.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-19T18:12:11.898Z","updated_at":"2018-12-19T18:12:11.898Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3867737,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @0xcccc, do you have any references for how to use `auth_token_t`?  We couldn't find it when last we looked. ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/0xcccc\"\u003e@0xcccc\u003c/a\u003e, do you have any references for how to use \u003ccode\u003eauth_token_t\u003c/code\u003e?  We couldn\u0026#39;t find it when last we looked. \u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-19T18:24:13.900Z","updated_at":"2018-12-19T18:24:13.900Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3868049,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@0xcccc we found a good reference via the similar 2017 issue in Chromium.","markdown_message":"\u003cp\u003e\u003ca href=\"/0xcccc\"\u003e@0xcccc\u003c/a\u003e we found a good reference via the similar 2017 issue in Chromium.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-19T19:21:16.648Z","updated_at":"2018-12-19T19:21:16.648Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3869210,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@maxtaco `auth_token_t` is mentioned in Objective See's blog. https://objective-see.com/blog.html\nHe forgot to create a single page for this article, search \"Learning to 'Secure' XPC from a Patch\" on that page","markdown_message":"\u003cp\u003e\u003ca href=\"/maxtaco\"\u003e@maxtaco\u003c/a\u003e \u003ccode\u003eauth_token_t\u003c/code\u003e is mentioned in Objective See\u0026#39;s blog. \u003ca title=\"https://objective-see.com/blog.html\" href=\"/redirect?url=https%3A%2F%2Fobjective-see.com%2Fblog.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://objective-see.com/blog.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nHe forgot to create a single page for this article, search \u0026quot;Learning to \u0026#39;Secure\u0026#39; XPC from a Patch\u0026quot; on that page\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-20T02:40:24.804Z","updated_at":"2018-12-20T02:40:42.795Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3869277,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Uh, I did so many typos in the writeup. If you met any confusion, just feel free to ask...","markdown_message":"\u003cp\u003eUh, I did so many typos in the writeup. If you met any confusion, just feel free to ask...\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-20T03:08:02.278Z","updated_at":"2018-12-20T03:08:02.278Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3872014,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Not a worry.  We're hard at work and hope to have an update in the next day or two.","markdown_message":"\u003cp\u003eNot a worry.  We\u0026#39;re hard at work and hope to have an update in the next day or two.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-20T16:51:00.617Z","updated_at":"2018-12-20T16:51:00.617Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3880012,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, we have fixes for the holes you found. There are two patches: one to the build system, and another to the underlying msgpack library, to use `audit_token_t` rather than PIDs. We've attached a new build, can you try it out?\n\nNote there is still one issue that we're looking into, which is that poc2 no longer breaks confinement, but it does still crash the helper. We're investigating.\n\nThank you for your work and help.","markdown_message":"\u003cp\u003eHi, we have fixes for the holes you found. There are two patches: one to the build system, and another to the underlying msgpack library, to use \u003ccode\u003eaudit_token_t\u003c/code\u003e rather than PIDs. We\u0026#39;ve attached a new build, can you try it out?\u003c/p\u003e\n\n\u003cp\u003eNote there is still one issue that we\u0026#39;re looking into, which is that poc2 no longer breaks confinement, but it does still crash the helper. We\u0026#39;re investigating.\u003c/p\u003e\n\n\u003cp\u003eThank you for your work and help.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-22T01:14:01.892Z","updated_at":"2018-12-22T01:14:01.892Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3880013,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Here's the updated package: https://s3.amazonaws.com/prerelease.keybase.io/darwin/Keybase-2.13.1-20181221191618%2Bb4a1bca.dmg","markdown_message":"\u003cp\u003eHere\u0026#39;s the updated package: \u003ca title=\"https://s3.amazonaws.com/prerelease.keybase.io/darwin/Keybase-2.13.1-20181221191618%2Bb4a1bca.dmg\" href=\"/redirect?url=https%3A%2F%2Fs3.amazonaws.com%2Fprerelease.keybase.io%2Fdarwin%2FKeybase-2.13.1-20181221191618%252Bb4a1bca.dmg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://s3.amazonaws.com/prerelease.keybase.io/darwin/Keybase-2.13.1-20181221191618%2Bb4a1bca.dmg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-22T01:15:01.584Z","updated_at":"2018-12-22T01:15:01.584Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"attachments":[{"id":395830,"filename":"MPXPCService.m.3.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/395/830/d377836b196e3c0a7b85670cb522f52d79744dc2/MPXPCService.m.3.patch?response-content-disposition=attachment%3B%20filename%3D%22MPXPCService.m.3.patch%22%3B%20filename%2A%3DUTF-8%27%27MPXPCService.m.3.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRWTAI2C7%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060229Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA4OnjXKFXegILmjBXgWPi%2Bteogg5H0LMBKKhsAnJHN7AiB63uA2f%2F%2F5YDRnlhtKi%2FXhk22EJKrVEePJyA5BB6daFCq0AwhVEAEaDDAxMzYxOTI3NDg0OSIM53ag7gGyZZO8130kKpEDyciZp2ZqDzsBi%2FORe9ONiGdtsWokZ6RNGwhOQ%2FCYjspqizBK8MFrrsG4EhCD7nQo3op7z5QpG4etJhRbGyk9ZMs1Bf11meT%2FBjo9u%2BckMiDjlcIlq5R15HOU7s1EHTqrLA36yUMOeyS29kSrYPqvMoLO2rWkUVucCUcQDlInVAw2uEr44ZvPlLBsyZb0G%2FT2OtLSV2vBgLI8dwRiyR%2B%2FkWbj5vpXWDXwAuLlH42qzINlU8oR6OvGnSCX5MCSpLVFjgxe2PhQ%2BxcvVQajoQ9vfI4lq%2FEF42OjdLcTp7fqirHlY5gZzbp%2B1h9WpBX1bN3bp5CKCkKnLhLqHodDNw6c1AzplZQntDSI7S7QWvohyZhSzrmIQHIVyNLGZgXx6b0918BQ6OX2S%2BdvH5OV4Wb7a7Im2%2FUTY072IM3MaRPN2Rpj1HVuQswZAJU0R8hS1MC9eqfkEttWFx0QKe6oUQCIGOaOP4bGspe1UVDGayXri6eNBeq8XJKWe0GMnG2omCWNNKKzrBDmqhOtnjYVc9W8bFQwytqq%2FwU67AE09XlDlPXYy%2BHJOKHdFHcwWreDNKw1sbWRzs1%2F5NkOvu7lAUwpxtXVP%2BePBhXceOPXQGHu9DsdsNPyO%2BGsOCZ66BYQBtsR104YSbyUKzHudK2y47O8h0exzqJ7%2BP3su6UkIEAf5z9ad88cXbwQThNPl6z3JfRt1ENAowPGLR%2F%2Frhm74kAezWUMRLV2tE7TC7gPDHdvS4bcrFlZ2adOF78IlYHd0DR95sTWHneHqzp4qzlglFCkHtDqf%2BuZWboHX83v76e19laPwMwL5yTDCuQHztQ0TyuFtL%2BCtEsk6OY%2BMny6lDUXH9NnZhbaIw%3D%3D\u0026X-Amz-Signature=be8b19aa9f00b9ae93199b005fbc1f6d3f2949118b623b4a60d82c1ae0be8a1b"},{"id":395829,"filename":"0001-set-LibraryInvalidation-and-change-name.patch","type":"text/x-diff","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/395/829/7f1abf22e7a1fabaedc0d3883d5a74b9ad6ce968/0001-set-LibraryInvalidation-and-change-name.patch?response-content-disposition=attachment%3B%20filename%3D%220001-set-LibraryInvalidation-and-change-name.patch%22%3B%20filename%2A%3DUTF-8%27%270001-set-LibraryInvalidation-and-change-name.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQRWTAI2C7%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T060229Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIA4OnjXKFXegILmjBXgWPi%2Bteogg5H0LMBKKhsAnJHN7AiB63uA2f%2F%2F5YDRnlhtKi%2FXhk22EJKrVEePJyA5BB6daFCq0AwhVEAEaDDAxMzYxOTI3NDg0OSIM53ag7gGyZZO8130kKpEDyciZp2ZqDzsBi%2FORe9ONiGdtsWokZ6RNGwhOQ%2FCYjspqizBK8MFrrsG4EhCD7nQo3op7z5QpG4etJhRbGyk9ZMs1Bf11meT%2FBjo9u%2BckMiDjlcIlq5R15HOU7s1EHTqrLA36yUMOeyS29kSrYPqvMoLO2rWkUVucCUcQDlInVAw2uEr44ZvPlLBsyZb0G%2FT2OtLSV2vBgLI8dwRiyR%2B%2FkWbj5vpXWDXwAuLlH42qzINlU8oR6OvGnSCX5MCSpLVFjgxe2PhQ%2BxcvVQajoQ9vfI4lq%2FEF42OjdLcTp7fqirHlY5gZzbp%2B1h9WpBX1bN3bp5CKCkKnLhLqHodDNw6c1AzplZQntDSI7S7QWvohyZhSzrmIQHIVyNLGZgXx6b0918BQ6OX2S%2BdvH5OV4Wb7a7Im2%2FUTY072IM3MaRPN2Rpj1HVuQswZAJU0R8hS1MC9eqfkEttWFx0QKe6oUQCIGOaOP4bGspe1UVDGayXri6eNBeq8XJKWe0GMnG2omCWNNKKzrBDmqhOtnjYVc9W8bFQwytqq%2FwU67AE09XlDlPXYy%2BHJOKHdFHcwWreDNKw1sbWRzs1%2F5NkOvu7lAUwpxtXVP%2BePBhXceOPXQGHu9DsdsNPyO%2BGsOCZ66BYQBtsR104YSbyUKzHudK2y47O8h0exzqJ7%2BP3su6UkIEAf5z9ad88cXbwQThNPl6z3JfRt1ENAowPGLR%2F%2Frhm74kAezWUMRLV2tE7TC7gPDHdvS4bcrFlZ2adOF78IlYHd0DR95sTWHneHqzp4qzlglFCkHtDqf%2BuZWboHX83v76e19laPwMwL5yTDCuQHztQ0TyuFtL%2BCtEsk6OY%2BMny6lDUXH9NnZhbaIw%3D%3D\u0026X-Amz-Signature=a7b4cda1ad60609575731a5533f991479f3d8d291c62deb0ad5ff404855c964f"}],"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3885180,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I can confirm that all bugs have been fixed.\n","markdown_message":"\u003cp\u003eI can confirm that all bugs have been fixed.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-24T04:06:01.952Z","updated_at":"2018-12-24T04:06:01.952Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3900043,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2018-12-28T12:18:52.790Z","updated_at":"2018-12-28T12:18:52.790Z","additional_data":{"duplicate_report_id":472379},"actor":{"username":"ntrippar","cleared":false,"url":"/ntrippar","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3900138,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We're readying a candidate for release today. Thanks again for your great work.\n\nhttps://s3.amazonaws.com/prerelease.keybase.io/darwin-test/Keybase-2.12.4-20181227202844%2Bf616a46.dmg","markdown_message":"\u003cp\u003eWe\u0026#39;re readying a candidate for release today. Thanks again for your great work.\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://s3.amazonaws.com/prerelease.keybase.io/darwin-test/Keybase-2.12.4-20181227202844%2Bf616a46.dmg\" href=\"/redirect?url=https%3A%2F%2Fs3.amazonaws.com%2Fprerelease.keybase.io%2Fdarwin-test%2FKeybase-2.12.4-20181227202844%252Bf616a46.dmg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://s3.amazonaws.com/prerelease.keybase.io/darwin-test/Keybase-2.12.4-20181227202844%2Bf616a46.dmg\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2018-12-28T12:37:47.122Z","updated_at":"2018-12-28T12:37:47.122Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3932719,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, thanks again for this great bug report and and your research. Our current plan is to bounty and disclose this issue after our next release cycle (2.13.0), later this month. In the mean time, we're reaching out to all users who haven't upgraded to 2.12.6 yet and encouraging them to upgrade. We'll be in touch shortly. Thank you.","markdown_message":"\u003cp\u003eHi, thanks again for this great bug report and and your research. Our current plan is to bounty and disclose this issue after our next release cycle (2.13.0), later this month. In the mean time, we\u0026#39;re reaching out to all users who haven\u0026#39;t upgraded to 2.12.6 yet and encouraging them to upgrade. We\u0026#39;ll be in touch shortly. Thank you.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-07T01:07:34.070Z","updated_at":"2019-01-07T01:07:34.070Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3939965,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"@maxtaco Nice work!","markdown_message":"\u003cp\u003e\u003ca href=\"/maxtaco\"\u003e@maxtaco\u003c/a\u003e Nice work!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-08T04:18:08.077Z","updated_at":"2019-01-08T04:18:08.077Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4066197,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-30T18:10:44.607Z","updated_at":"2019-01-30T18:10:44.607Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"0xcccc","url":"/0xcccc"},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4066204,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-30T18:11:36.139Z","updated_at":"2019-01-30T18:11:36.139Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"bounty_amount":"3250.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"keybase","collaborator":{"username":"0xcccc","url":"/0xcccc"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4066206,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-30T18:12:08.624Z","updated_at":"2019-01-30T18:12:08.624Z","first_to_agree":true,"actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4066282,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We posted this security update: https://keybase.io/docs/secadv/kb004","markdown_message":"\u003cp\u003eWe posted this security update: \u003ca title=\"https://keybase.io/docs/secadv/kb004\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io%2Fdocs%2Fsecadv%2Fkb004\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io/docs/secadv/kb004\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-30T18:21:16.262Z","updated_at":"2019-01-30T18:21:16.262Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4068445,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"Thank you!","markdown_message":"\u003cp\u003eThank you!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-01-31T02:19:46.053Z","updated_at":"2019-01-31T02:19:46.053Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4068446,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-01-31T02:19:46.121Z","updated_at":"2019-01-31T02:19:46.121Z","actor":{"username":"0xcccc","cleared":false,"url":"/0xcccc","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}