{"id":548094,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81NDgwOTQ=","url":"https://hackerone.com/reports/548094","title":"Internal Hostname disclosure from multiple Apache servers via blank host header method","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2019-04-24T23:05:45.505Z","submitted_at":"2019-04-24T23:05:45.505Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jackb898","url":"/jackb898","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":25188,"url":"https://hackerone.com/pingidentity","handle":"pingidentity","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/025/188/95e54845d1cd7b8af42716695136b86fd11d0cf1_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/025/188/95e54845d1cd7b8af42716695136b86fd11d0cf1_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Ping Identity","twitter_handle":"pingidentity","website":"https://www.pingidentity.com/","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"no-content","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2020-03-12T22:25:58.127Z","bug_reporter_agreed_on_going_public_at":"2020-03-03T01:44:05.821Z","team_member_agreed_on_going_public_at":"2020-03-12T22:25:57.931Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"","vulnerability_information_html":"","bounty_amount":"150.0","formatted_bounty":"$150","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":19,"voters":["thaivu","base_64","mik317","brodie_codie","sodium_","zimmer75","cryptographer","klau5","deepakjoshi","clarckowen_","and 9 more..."],"severity":{"rating":"low","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4644464,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T20:30:07.670Z","updated_at":"2019-04-25T20:30:07.670Z","additional_data":{},"actor":{"username":"kataguruma","cleared":false,"url":"/kataguruma","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4644476,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T20:31:46.884Z","updated_at":"2020-03-12T22:20:10.271Z","actor":{"url":"/pingidentity","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/025/188/95e54845d1cd7b8af42716695136b86fd11d0cf1_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Ping Identity"}},"bounty_amount":"150.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"pingidentity","collaborator":{"username":"jackb898","url":"/jackb898"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4644523,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T20:42:08.743Z","updated_at":"2019-04-25T20:42:08.743Z","actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4644557,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T20:51:21.832Z","updated_at":"2019-04-25T20:51:21.832Z","actor":{"username":"kataguruma","cleared":false,"url":"/kataguruma","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4644575,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T20:57:48.968Z","updated_at":"2019-04-25T20:57:48.968Z","actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4644627,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T21:08:59.950Z","updated_at":"2020-03-12T22:20:10.264Z","actor":{"username":"kataguruma","cleared":false,"url":"/kataguruma","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4644636,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T21:10:04.364Z","updated_at":"2019-04-25T21:10:04.364Z","actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4645101,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-25T22:01:26.417Z","updated_at":"2019-04-25T22:01:26.417Z","actor":{"username":"kataguruma","cleared":false,"url":"/kataguruma","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5839935,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-19T00:28:42.487Z","updated_at":"2019-09-19T00:28:42.487Z","actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5879942,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-24T17:06:10.700Z","updated_at":"2019-09-24T17:06:42.446Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6352585,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-20T02:51:32.978Z","updated_at":"2019-11-20T02:51:32.978Z","actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6358893,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-20T15:08:44.097Z","updated_at":"2019-11-20T15:08:44.097Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6358897,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-20T15:09:01.746Z","updated_at":"2019-11-20T15:09:01.746Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"jackb898","url":"/jackb898"},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7201074,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-03T01:44:05.841Z","updated_at":"2020-03-03T01:44:05.841Z","first_to_agree":true,"actor":{"username":"jackb898","cleared":true,"url":"/jackb898","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/CBcmZYZbwyyEjGj5BP7AQ4FK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7304021,"is_internal":false,"editable":false,"type":"Activities::ReportTitleUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T22:15:47.118Z","updated_at":"2020-03-12T22:17:00.862Z","additional_data":{},"actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7304022,"is_internal":false,"editable":false,"type":"Activities::ChangedScope","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T22:15:57.571Z","updated_at":"2020-03-12T22:15:57.571Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"old_scope":"https://ort-admin.pingone.com/*","new_scope":"None","genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7304072,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T22:25:57.990Z","updated_at":"2020-03-12T22:25:57.990Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7304073,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-12T22:25:58.160Z","updated_at":"2020-03-12T22:25:58.160Z","actor":{"username":"volcanic82","cleared":false,"url":"/volcanic82","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"pingidentity","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"id":20699,"category":"team","content":"This vulnerability was due to a general misconfiguration of Apache servers; this is a good example of the importance of \"Secure Defaults\" in open-source projects. An example of a generic request and response would be:\n\nopenssl s_client -connect apache.example.com:443\nGET apache.example.com/foo HTTP/1.0\nHost:\nConnection: keep-alive\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.9\n\nHTTP/1.1 400 Bad Request\nDate: Thu, 3 Feb 2020 13:14:15 GMT\nServer: Apache\nContent-Length: 335\nContent-Type: text/html; charset=iso-8859-1\nStrict-Transport-Security: max-age=15768000; preload;\nX-Content-Type-Options: nosniff\nConnection: keep-alive\n\n\u003c!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\u003e\n\u003chtml\u003e\u003chead\u003e\n\u003ctitle\u003e400 Bad Request\u003c/title\u003e\n\u003c/head\u003e\u003cbody\u003e\n\u003ch1\u003eBad Request\u003c/h1\u003e\n\u003cp\u003eYour browser sent a request that this server could not understand.\u003cbr /\u003e\n\u003c/p\u003e\n\u003chr\u003e\n\u003caddress\u003eApache Server at aws-ec2.example.internal Port 443\u003c/address\u003e\n\u003c/body\u003e\u003c/html\u003e\nclosed\n\nAs reported by the researcher:\n\nSummary:\nI found 3 subdomains vulnerable to a method that essentially \"tricks\" websites into leaking their own internal hostname. \n\nVulnerability Description\nThis is the \"very detailed\" explanation, if you just want to test/reproduce it, just scroll past this to \"Steps to Reproduce\"\n\nNow I'll explain the issue that leaks these internal hostnames. Essentially, it has to do with website behavior towards empty host headers. So the original method comprises of setting up a GET request to the website, just the main directory. Next, you test it for typical host header injection by changing the Host header to anything like foo.com. Send this request, and if the response contains foo.com anywhere, it may be vulnerable to blank host header info. leakage. However when I was testing your site, I noticed it simply gave a 302 and tried to redirect back to the correct host. I found a way to bypass this though; setting up the request to a nonexistent directory, and including the CR character, like this: /foo%0A, makes it give a 404 and return the host header at the bottom of the page.\n\nNow that we have host header injection, here's where you use that to leak the internal information. Firstly, change the protocol from HTTP/1.1 to HTTP/1.0 (this is to allow blank host headers). Next, remove the host header and send the request. Look in the same spot that the host header was displayed previously, and the internal hostname/ip will be displayed there.\n\nSuggested Remediation\nTo prevent this, you need to prevent host header injection, or at least prevent the host header from being returned anywhere in the response.\n\nThe best way to do this is using something like Cloudfront protection, which prevents host header injection.\n\nImpact\nIt is a bad idea to leak internal hostnames, as they can be used by attackers to exploit the network or server. They can chain issues to launch specific attacks against the internal infrastructure; in other words, leaking internal IPs or hostnames leads to normally non-issues becoming vulnerabilities.","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eThis vulnerability was due to a general misconfiguration of Apache servers; this is a good example of the importance of \u0026quot;Secure Defaults\u0026quot; in open-source projects. An example of a generic request and response would be:\u003c/p\u003e\n\n\u003cp\u003eopenssl s_client -connect apache.example.com:443\u003cbr\u003e\nGET apache.example.com/foo HTTP/1.0\u003cbr\u003e\nHost:\u003cbr\u003e\nConnection: keep-alive\u003cbr\u003e\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36\u003cbr\u003e\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3\u003cbr\u003e\nAccept-Encoding: gzip, deflate, br\u003cbr\u003e\nAccept-Language: en-US,en;q=0.9\u003c/p\u003e\n\n\u003cp\u003eHTTP/1.1 400 Bad Request\u003cbr\u003e\nDate: Thu, 3 Feb 2020 13:14:15 GMT\u003cbr\u003e\nServer: Apache\u003cbr\u003e\nContent-Length: 335\u003cbr\u003e\nContent-Type: text/html; charset=iso-8859-1\u003cbr\u003e\nStrict-Transport-Security: max-age=15768000; preload;\u003cbr\u003e\nX-Content-Type-Options: nosniff\u003cbr\u003e\nConnection: keep-alive\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;!DOCTYPE HTML PUBLIC \u0026quot;-//IETF//DTD HTML 2.0//EN\u0026quot;\u0026gt;\u003cbr\u003e\n\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u003cbr\u003e\n\u0026lt;title\u0026gt;400 Bad Request\u0026lt;/title\u0026gt;\u003cbr\u003e\n\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u003cbr\u003e\n\u0026lt;h1\u0026gt;Bad Request\u0026lt;/h1\u0026gt;\u003cbr\u003e\n\u0026lt;p\u0026gt;Your browser sent a request that this server could not understand.\u0026lt;br /\u0026gt;\u003cbr\u003e\n\u0026lt;/p\u0026gt;\u003cbr\u003e\n\u0026lt;hr\u0026gt;\u003cbr\u003e\n\u0026lt;address\u0026gt;Apache Server at aws-ec2.example.internal Port 443\u0026lt;/address\u0026gt;\u003cbr\u003e\n\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u003cbr\u003e\nclosed\u003c/p\u003e\n\n\u003cp\u003eAs reported by the researcher:\u003c/p\u003e\n\n\u003cp\u003eSummary:\u003cbr\u003e\nI found 3 subdomains vulnerable to a method that essentially \u0026quot;tricks\u0026quot; websites into leaking their own internal hostname. \u003c/p\u003e\n\n\u003cp\u003eVulnerability Description\u003cbr\u003e\nThis is the \u0026quot;very detailed\u0026quot; explanation, if you just want to test/reproduce it, just scroll past this to \u0026quot;Steps to Reproduce\u0026quot;\u003c/p\u003e\n\n\u003cp\u003eNow I\u0026#39;ll explain the issue that leaks these internal hostnames. Essentially, it has to do with website behavior towards empty host headers. So the original method comprises of setting up a GET request to the website, just the main directory. Next, you test it for typical host header injection by changing the Host header to anything like foo.com. Send this request, and if the response contains foo.com anywhere, it may be vulnerable to blank host header info. leakage. However when I was testing your site, I noticed it simply gave a 302 and tried to redirect back to the correct host. I found a way to bypass this though; setting up the request to a nonexistent directory, and including the CR character, like this: /foo%0A, makes it give a 404 and return the host header at the bottom of the page.\u003c/p\u003e\n\n\u003cp\u003eNow that we have host header injection, here\u0026#39;s where you use that to leak the internal information. Firstly, change the protocol from HTTP/1.1 to HTTP/1.0 (this is to allow blank host headers). Next, remove the host header and send the request. Look in the same spot that the host header was displayed previously, and the internal hostname/ip will be displayed there.\u003c/p\u003e\n\n\u003cp\u003eSuggested Remediation\u003cbr\u003e\nTo prevent this, you need to prevent host header injection, or at least prevent the host header from being returned anywhere in the response.\u003c/p\u003e\n\n\u003cp\u003eThe best way to do this is using something like Cloudfront protection, which prevents host header injection.\u003c/p\u003e\n\n\u003cp\u003eImpact\u003cbr\u003e\nIt is a bad idea to leak internal hostnames, as they can be used by attackers to exploit the network or server. They can chain issues to launch specific attacks against the internal infrastructure; in other words, leaking internal IPs or hostnames leads to normally non-issues becoming vulnerabilities.\u003c/p\u003e\n"},{"category":"researcher","can_view?":true,"can_create?":false}]}