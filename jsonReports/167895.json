{"id":167895,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjc4OTU=","url":"https://hackerone.com/reports/167895","title":"Out of bound when verify signature of zip phar in phar_parse_zipfile","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-09-13T04:08:14.362Z","submitted_at":"2016-09-13T04:08:14.362Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hoangnguyen","url":"/hoangnguyen","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/074/688/42c5ca5265ff965283d70fc52df2681dfd648d44_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:31:59.768Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:31:42.055Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"https://bugs.php.net/bug.php?id=72928\n\nThere was a security code in phar_parse_zipfile\n```\nsig = (char *) emalloc(entry.uncompressed_filesize);\nread = php_stream_read(fp, sig, entry.uncompressed_filesize);\nif (read != entry.uncompressed_filesize) {\n\tphp_stream_close(sigfile);\n\tefree(sig);\n\tPHAR_ZIP_FAIL(\"signature cannot be read\");\n}\nmydata-\u003esig_flags = PHAR_GET_32(sig);\nif (FAILURE == phar_verify_signature(sigfile,\n\tphp_stream_tell(sigfile),\n\tmydata-\u003esig_flags,\n\tsig + 8,\n\tentry.uncompressed_filesize - 8,\n\tfname,\n\t\u0026mydata-\u003esignature,\n\t\u0026mydata-\u003esig_len,\n\terror)\n\t) {\n```\nThere are no checking *entry.uncompressed_filesize* attacker can create a signature.bin with size less than 8 and then this value is passed to *phar_verify_signature* as sig_len as you can see `entry.uncompressed_filesize - 8` as result sig_len is overflow.\nAnd the third param is sig buffer as you can see `sig + 8`, because *entry.uncompressed_filesize* is less than 8 by default emalloc will return 16 bytes this result may lead to heap out of bound.\n\nphar zip file : https://drive.google.com/file/d/0B0D1DYQpkA9Ud3I2OFlfeFRqbEU/view?usp=sharing\n\nTest script:\n---------------\n```\n\u003c?php\n\t$phar = new PharData('phars/signature.zip');\n\tvar_dump($phar);\n?\u003e\n```","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"https://bugs.php.net/bug.php?id=72928\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D72928\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=72928\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThere was a security code in phar_parse_zipfile\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esig = (char *) emalloc(entry.uncompressed_filesize);\nread = php_stream_read(fp, sig, entry.uncompressed_filesize);\nif (read != entry.uncompressed_filesize) {\n    php_stream_close(sigfile);\n    efree(sig);\n    PHAR_ZIP_FAIL(\u0026quot;signature cannot be read\u0026quot;);\n}\nmydata-\u0026gt;sig_flags = PHAR_GET_32(sig);\nif (FAILURE == phar_verify_signature(sigfile,\n    php_stream_tell(sigfile),\n    mydata-\u0026gt;sig_flags,\n    sig + 8,\n    entry.uncompressed_filesize - 8,\n    fname,\n    \u0026amp;mydata-\u0026gt;signature,\n    \u0026amp;mydata-\u0026gt;sig_len,\n    error)\n    ) {\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThere are no checking \u003cem\u003eentry.uncompressed_filesize\u003c/em\u003e attacker can create a signature.bin with size less than 8 and then this value is passed to \u003cem\u003ephar_verify_signature\u003c/em\u003e as sig_len as you can see \u003ccode\u003eentry.uncompressed_filesize - 8\u003c/code\u003e as result sig_len is overflow.\u003cbr\u003e\nAnd the third param is sig buffer as you can see \u003ccode\u003esig + 8\u003c/code\u003e, because \u003cem\u003eentry.uncompressed_filesize\u003c/em\u003e is less than 8 by default emalloc will return 16 bytes this result may lead to heap out of bound.\u003c/p\u003e\n\n\u003cp\u003ephar zip file : \u003ca title=\"https://drive.google.com/file/d/0B0D1DYQpkA9Ud3I2OFlfeFRqbEU/view?usp=sharing\" href=\"/redirect?url=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F0B0D1DYQpkA9Ud3I2OFlfeFRqbEU%2Fview%3Fusp%3Dsharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://drive.google.com/file/d/0B0D1DYQpkA9Ud3I2OFlfeFRqbEU/view?usp=sharing\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e\n    \u003cspan class=\"nv\"\u003e$phar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003ePharData\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;phars/signature.zip\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003evar_dump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$phar\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:31:42.143Z","allow_singular_disclosure_after":-35665686.218928576,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1205748,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-20T04:32:21.881Z","updated_at":"2016-09-20T04:32:21.881Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hoangnguyen","url":"/hoangnguyen"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1205749,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-20T04:32:25.735Z","updated_at":"2016-09-20T04:32:25.735Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"hoangnguyen","url":"/hoangnguyen"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026232,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:31:42.070Z","updated_at":"2019-10-13T09:31:42.070Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285792,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:31:59.784Z","updated_at":"2019-11-12T09:31:59.784Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}