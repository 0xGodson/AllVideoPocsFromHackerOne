{"id":650085,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC82NTAwODU=","url":"https://hackerone.com/reports/650085","title":"Stored credentials instantly autofilled within sandboxed iframes","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2019-07-18T21:31:18.836Z","submitted_at":"2019-07-18T21:31:18.836Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"alesandroortiz","url":"/alesandroortiz","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2379,"url":"https://hackerone.com/kaspersky","handle":"kaspersky","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/379/d7dc3ce53a84816885872fb423816bfbbbd36390_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/379/d7dc3ce53a84816885872fb423816bfbbbd36390_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Kaspersky","twitter_handle":"kaspersky","website":"http://www.kaspersky.com","about":"Kaspersky is the worldâ€™s largest privately-held vendor of endpoint protection and cybersecurity solutions for business and consumers."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-09-10T17:42:33.416Z","bug_reporter_agreed_on_going_public_at":"2019-09-10T17:29:00.306Z","team_member_agreed_on_going_public_at":"2019-09-10T17:42:33.296Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# Summary\nStored credentials are instantly autofilled within sandboxed iframes, disregarding effective origin of sandboxed iframes and the expected cross-origin restrictions\n\n# Description\nKaspersky is expected to obey cross-origin restrictions which apply to sandboxed iframes. However, the Kaspersky Chrome extension will automatically fill-in stored credentials for the iframe's URL-based origin, even though the sandboxed iframe has an effective origin of `null`. This behavior appears to disregard the effective origin of sandboxed iframes and the expected cross-origin restrictions that would apply because of the effective origin.\n\nFor attacks, no user interaction is required (drive-by). The user only needs to load a page, and Kaspersky will immediately autofill stored credentials on page load. No prior interaction with the sandboxed iframe is required.\n\n# Environment\n- Scope: Application\n- Product name: Kaspersky Password Manager (Chrome extension)\n- Product version: 4.1.15\n- OS name and version (incl SP): Windows 10 OS Version 1809 (Build 17763.557)\n- Chrome version: 75.0.3770.100 (Official Build) (64-bit) (cohort: Stable)\n- Attack type: Sensitive user data disclosure\n- Maximum user privileges needed to reproduce your issue: no local privileges needed, remote\n\n# Steps to reproduce\nDemo login form (set up): https://alesandroortiz.com/~aor/security/creds-tests/test-form.html\nPage containing iframe (vuln demo): https://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\nPage in iframe (attacker page): https://alesandroortiz.com/~aor/security/creds-tests/test-ucc-iframe.html\n\n## Set up (to store credentials in site-controlled origin):\n1. Navigate to https://alesandroortiz.com/~aor/security/creds-tests/test-form.html\n2. Enter any values into the email and password input fields, then submit form. (Simulates a login on a site-controlled form.)\n3. On the next page, click \"Save\" when Kaspersky prompts to save credentials for the origin.\n\n## Steps to reproduce:\n1. Navigate to https://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\n\n### Expected behavior:\nKaspersky does not immediately autofill credentials in the sandboxed iframe because there are no credentials stored for the unique origin (`null`). The effective origin is `null`.\n\n### Observed behavior:\nKaspersky immediately autofills credentials in the fully sandboxed iframe, which is on its own unique origin (`null`), because there are stored credentials for the URL-based origin (`https://alesandroortiz.com`).\n\n# Other info\n\nThe important sandbox attribute value relevant to this report is `allow-same-origin`. If this value is NOT set, the iframe will be in its own unique origin (`null`), meaning it should be untrusted. If the value is set, the iframe will be in its normal origin (based on iframe URL's origin), meaning it can interact normally with its own origin.\n\nSandbox bypass works on both same origin (e.g. `https://example.com`) and different origin within same domain (e.g. `https://subdomain.example.com`), even though sandbox attribute without `allow-same-origin` value by spec should be treated as a completely unique origin (e.g. `null`). Correctly following spec, Chrome sets window.origin to `null` for fully sandboxed iframes. Same-origin policy goes both ways: When a particular resource (e.g. iframe) is restricted by policy from interacting with other resources (e.g. parent window), those other resources (e.g. parent window) are also restricted from interacting with the restricted resource (e.g. iframe).\n\nSee HTML spec: https://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-iframe-sandbox\n\n\u003e The sandbox attribute, when specified, enables a set of extra restrictions on any content hosted by the iframe. [...] When the attribute is set, the content is treated as being from a unique origin, forms, scripts, and various potentially annoying APIs are disabled, links are prevented from targeting other browsing contexts, and plugins are secured. The `allow-same-origin` keyword causes the content to be treated as being from its real origin instead of forcing it into a unique origin;\n\nFor different phrasing, also see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Attributes under the sandbox attribute's possible values:\n\n\u003e allow-same-origin: If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy.\n\n# Demo source \n\nAttached HTML files are source of hosted files. To demo on your own site, change the URLs in all files to reference your demo site. Screen recording demonstrating reproduction method is also attached.\n\n## Impact\n\nA sandboxed iframe loaded on target site can exfiltrate credentials with no user interaction (drive-by). Sites do not expect sandboxed iframes to be able to obtain user credentials used on their site, due to expected cross-origin restrictions.\n\nSome sites with user-controlled content use sandboxed iframes loaded from their own domain or subdomain to render user-controlled content. The vulnerability allows an attacker to exfiltrate stored credentials in when a user visits the page on the target site containing the specially crafted user-controlled content.","vulnerability_information_html":"\u003ch1 id=\"summary\"\u003eSummary\u003c/h1\u003e\n\n\u003cp\u003eStored credentials are instantly autofilled within sandboxed iframes, disregarding effective origin of sandboxed iframes and the expected cross-origin restrictions\u003c/p\u003e\n\n\u003ch1 id=\"description\"\u003eDescription\u003c/h1\u003e\n\n\u003cp\u003eKaspersky is expected to obey cross-origin restrictions which apply to sandboxed iframes. However, the Kaspersky Chrome extension will automatically fill-in stored credentials for the iframe\u0026#39;s URL-based origin, even though the sandboxed iframe has an effective origin of \u003ccode\u003enull\u003c/code\u003e. This behavior appears to disregard the effective origin of sandboxed iframes and the expected cross-origin restrictions that would apply because of the effective origin.\u003c/p\u003e\n\n\u003cp\u003eFor attacks, no user interaction is required (drive-by). The user only needs to load a page, and Kaspersky will immediately autofill stored credentials on page load. No prior interaction with the sandboxed iframe is required.\u003c/p\u003e\n\n\u003ch1 id=\"environment\"\u003eEnvironment\u003c/h1\u003e\n\n\u003cul\u003e\n\u003cli\u003eScope: Application\u003c/li\u003e\n\u003cli\u003eProduct name: Kaspersky Password Manager (Chrome extension)\u003c/li\u003e\n\u003cli\u003eProduct version: 4.1.15\u003c/li\u003e\n\u003cli\u003eOS name and version (incl SP): Windows 10 OS Version 1809 (Build 17763.557)\u003c/li\u003e\n\u003cli\u003eChrome version: 75.0.3770.100 (Official Build) (64-bit) (cohort: Stable)\u003c/li\u003e\n\u003cli\u003eAttack type: Sensitive user data disclosure\u003c/li\u003e\n\u003cli\u003eMaximum user privileges needed to reproduce your issue: no local privileges needed, remote\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"steps-to-reproduce\"\u003eSteps to reproduce\u003c/h1\u003e\n\n\u003cp\u003eDemo login form (set up): \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-form.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-form.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-form.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nPage containing iframe (vuln demo): \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-case-sandbox.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nPage in iframe (attacker page): \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-ucc-iframe.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-ucc-iframe.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-ucc-iframe.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"set-up-to-store-credentials-in-site-controlled-origin\"\u003eSet up (to store credentials in site-controlled origin):\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eNavigate to \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-form.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-form.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-form.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003eEnter any values into the email and password input fields, then submit form. (Simulates a login on a site-controlled form.)\u003c/li\u003e\n\u003cli\u003eOn the next page, click \u0026quot;Save\u0026quot; when Kaspersky prompts to save credentials for the origin.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"steps-to-reproduce\"\u003eSteps to reproduce:\u003c/h2\u003e\n\n\u003col\u003e\n\u003cli\u003eNavigate to \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-case-sandbox.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-case-sandbox.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"expected-behavior\"\u003eExpected behavior:\u003c/h3\u003e\n\n\u003cp\u003eKaspersky does not immediately autofill credentials in the sandboxed iframe because there are no credentials stored for the unique origin (\u003ccode\u003enull\u003c/code\u003e). The effective origin is \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"observed-behavior\"\u003eObserved behavior:\u003c/h3\u003e\n\n\u003cp\u003eKaspersky immediately autofills credentials in the fully sandboxed iframe, which is on its own unique origin (\u003ccode\u003enull\u003c/code\u003e), because there are stored credentials for the URL-based origin (\u003ccode\u003ehttps://alesandroortiz.com\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch1 id=\"other-info\"\u003eOther info\u003c/h1\u003e\n\n\u003cp\u003eThe important sandbox attribute value relevant to this report is \u003ccode\u003eallow-same-origin\u003c/code\u003e. If this value is NOT set, the iframe will be in its own unique origin (\u003ccode\u003enull\u003c/code\u003e), meaning it should be untrusted. If the value is set, the iframe will be in its normal origin (based on iframe URL\u0026#39;s origin), meaning it can interact normally with its own origin.\u003c/p\u003e\n\n\u003cp\u003eSandbox bypass works on both same origin (e.g. \u003ccode\u003ehttps://example.com\u003c/code\u003e) and different origin within same domain (e.g. \u003ccode\u003ehttps://subdomain.example.com\u003c/code\u003e), even though sandbox attribute without \u003ccode\u003eallow-same-origin\u003c/code\u003e value by spec should be treated as a completely unique origin (e.g. \u003ccode\u003enull\u003c/code\u003e). Correctly following spec, Chrome sets window.origin to \u003ccode\u003enull\u003c/code\u003e for fully sandboxed iframes. Same-origin policy goes both ways: When a particular resource (e.g. iframe) is restricted by policy from interacting with other resources (e.g. parent window), those other resources (e.g. parent window) are also restricted from interacting with the restricted resource (e.g. iframe).\u003c/p\u003e\n\n\u003cp\u003eSee HTML spec: \u003ca title=\"https://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-iframe-sandbox\" href=\"/redirect?url=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Fiframe-embed-object.html%23attr-iframe-sandbox\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-iframe-sandbox\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe sandbox attribute, when specified, enables a set of extra restrictions on any content hosted by the iframe. [...] When the attribute is set, the content is treated as being from a unique origin, forms, scripts, and various potentially annoying APIs are disabled, links are prevented from targeting other browsing contexts, and plugins are secured. The \u003ccode\u003eallow-same-origin\u003c/code\u003e keyword causes the content to be treated as being from its real origin instead of forcing it into a unique origin;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFor different phrasing, also see \u003ca title=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Attributes\" href=\"/redirect?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTML%2FElement%2Fiframe%23Attributes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#Attributes\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e under the sandbox attribute\u0026#39;s possible values:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eallow-same-origin: If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"demo-source\"\u003eDemo source\u003c/h1\u003e\n\n\u003cp\u003eAttached HTML files are source of hosted files. To demo on your own site, change the URLs in all files to reference your demo site. Screen recording demonstrating reproduction method is also attached.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eA sandboxed iframe loaded on target site can exfiltrate credentials with no user interaction (drive-by). Sites do not expect sandboxed iframes to be able to obtain user credentials used on their site, due to expected cross-origin restrictions.\u003c/p\u003e\n\n\u003cp\u003eSome sites with user-controlled content use sandboxed iframes loaded from their own domain or subdomain to render user-controlled content. The vulnerability allows an attacker to exfiltrate stored credentials in when a user visits the page on the target site containing the specially crafted user-controlled content.\u003c/p\u003e\n","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-10-10T17:29:00.362Z","allow_singular_disclosure_after":-38495085.86484755,"singular_disclosure_allowed":true,"vote_count":23,"voters":["foobar7","mashoud1122","alesandroortiz","sameerphad72","lp1dev","jlleitschuh","cyberunit","codeanddecode","cryptographer","b635e0cba4cabf8cbdaf222","and 13 more..."],"severity":{"rating":"low","author_type":"Team"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":5373325,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi man!\n\nThank you for reaching out to us. I come back to you later as we finish its preliminary analysis.","markdown_message":"\u003cp\u003eHi man!\u003c/p\u003e\n\n\u003cp\u003eThank you for reaching out to us. I come back to you later as we finish its preliminary analysis.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-19T19:17:13.256Z","updated_at":"2019-07-19T19:17:13.256Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5388195,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"We haven't seen the problem from our side. The fact that KPM fills saved credentials in the sandboxed iframe of the same website doesn't conflict with any security rules. Please note that when credentials are being saved by KPM, the product may fill it everywhere on that website, i. e. not only on the domain that was captured as website address. You can change this behavior with \"Select authentication scope\" option that is applied to every credentials item in \"Passwords for websites\" section of the application (its main window). If you choose \"Only this domain\", your attack won't be working anymore.","markdown_message":"\u003cp\u003eWe haven\u0026#39;t seen the problem from our side. The fact that KPM fills saved credentials in the sandboxed iframe of the same website doesn\u0026#39;t conflict with any security rules. Please note that when credentials are being saved by KPM, the product may fill it everywhere on that website, i. e. not only on the domain that was captured as website address. You can change this behavior with \u0026quot;Select authentication scope\u0026quot; option that is applied to every credentials item in \u0026quot;Passwords for websites\u0026quot; section of the application (its main window). If you choose \u0026quot;Only this domain\u0026quot;, your attack won\u0026#39;t be working anymore.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-22T14:17:47.343Z","updated_at":"2019-07-22T14:26:35.185Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5432376,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi Artem,\n\nThanks for reviewing the report and the additional information.\n\nRegarding this comment:\n\u003e Please note that when credentials are being saved by KPM, the product may fill it everywhere on that website, i. e. not only on the domain that was captured as website address\n\nThe description above is different compared to the observed behavior. The observed behavior is below:\n\nWith the default \"Everywhere on example.com\" setting, KPM applies a different-domain security rule which **does not** fill-in credentials for an iframe on a different domain (e.g. `different-domain.com`). This is because the different-domain iframe is on `different-domain.com`, and KPM treats the iframe as being on `different-domain.com` and not `example.com`.\nThis behavior is different compared to what the comment described, but it is what I expect to be secure behavior, so this behavior is okay.\nDifferent domain test case: https://alesandroortiz.com/~aor/security/creds-tests/test-case-diff-domain.html\n\nThe problem is the following behavior: Also with the default \"Everywhere on example.com\" setting, KPM **ignores** the different-domain rule for sandboxed iframes. KPM treats the sandboxed iframe as being on the origin of `example.com`, when KPM should treat the iframe as being on the origin of `null`. KPM's behavior in this scenario is unexpected by website operators and users, because it deviates from the HTML specification, and poses security risks (described in original report).\n\nPer the HTML specification, sandboxed iframes must be on their own unique origin (`null`) and should **always** be treated as being on a different domain, no exceptions. Since the origin `null` is not on the domain `example.com`, I expect KPM to treat the sandboxed iframe the same way it treats an iframe on `different-domain.com`. All major browsers and their built-in password managers follow the HTML specification and treat the sandboxed iframe as being on a different origin, and does not fill-in credentials.\n\nRegarding this comment:\n\u003e You can change this behavior with \"Select authentication scope\" option that is applied to every credentials item in \"Passwords for websites\" section of the application (its main window). If you choose \"Only this domain\", your attack won't be working anymore.\n\nWhile this is a potential mitigating factor, it is not the default setting, and the option descriptions are not clear enough to make users realize the security risk of the default option.\n\nIf a user finds the setting and decides to change the setting, based on the option text, the expected KPM behavior is:\n* \"Everywhere on example.com\" includes `example.com` and `subdomain.example.com`. Excludes `different-domain.com` and `null`-origin sandboxed iframes.\n* \"Only on example.com\" only includes `example.com`. Excludes `subdomain.example.com`, `different-domain.com`, and `null`-origin sandboxed iframes.\n\nHowever, the observed KPM behavior is:\n* \"Everywhere on example.com\" includes `example.com`, `subdomain.example.com` AND `null`-origin sandboxed iframes. Excludes `different-domain.com`.\n* \"Only on example.com\" (same as expected behavior).\n\nThe observed behavior is different than the expected behavior, since it is not clear to the user that `null`-origin sandboxed iframes are allowed under \"Everywhere on example.com\", since `null`-origin sandboxed iframes are **not** on `example.com`, per the HTML specification.\n\nTo summarize: The default behavior deviates from the HTML specification, posing security risks. The setting's options are not clear enough for user to realize the risk, and require complex user actions to activate the mitigation. I believe the core issue is the deviation from HTML specification -- no mitigation will resolve that inconsistency.\n\nLet me know if you need further information or have questions.\n\nRegards,\nAlesandro","markdown_message":"\u003cp\u003eHi Artem,\u003c/p\u003e\n\n\u003cp\u003eThanks for reviewing the report and the additional information.\u003c/p\u003e\n\n\u003cp\u003eRegarding this comment:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003ePlease note that when credentials are being saved by KPM, the product may fill it everywhere on that website, i. e. not only on the domain that was captured as website address\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe description above is different compared to the observed behavior. The observed behavior is below:\u003c/p\u003e\n\n\u003cp\u003eWith the default \u0026quot;Everywhere on example.com\u0026quot; setting, KPM applies a different-domain security rule which \u003cstrong\u003edoes not\u003c/strong\u003e fill-in credentials for an iframe on a different domain (e.g. \u003ccode\u003edifferent-domain.com\u003c/code\u003e). This is because the different-domain iframe is on \u003ccode\u003edifferent-domain.com\u003c/code\u003e, and KPM treats the iframe as being on \u003ccode\u003edifferent-domain.com\u003c/code\u003e and not \u003ccode\u003eexample.com\u003c/code\u003e.\u003cbr\u003e\nThis behavior is different compared to what the comment described, but it is what I expect to be secure behavior, so this behavior is okay.\u003cbr\u003e\nDifferent domain test case: \u003ca title=\"https://alesandroortiz.com/~aor/security/creds-tests/test-case-diff-domain.html\" href=\"/redirect?url=https%3A%2F%2Falesandroortiz.com%2F~aor%2Fsecurity%2Fcreds-tests%2Ftest-case-diff-domain.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://alesandroortiz.com/~aor/security/creds-tests/test-case-diff-domain.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe problem is the following behavior: Also with the default \u0026quot;Everywhere on example.com\u0026quot; setting, KPM \u003cstrong\u003eignores\u003c/strong\u003e the different-domain rule for sandboxed iframes. KPM treats the sandboxed iframe as being on the origin of \u003ccode\u003eexample.com\u003c/code\u003e, when KPM should treat the iframe as being on the origin of \u003ccode\u003enull\u003c/code\u003e. KPM\u0026#39;s behavior in this scenario is unexpected by website operators and users, because it deviates from the HTML specification, and poses security risks (described in original report).\u003c/p\u003e\n\n\u003cp\u003ePer the HTML specification, sandboxed iframes must be on their own unique origin (\u003ccode\u003enull\u003c/code\u003e) and should \u003cstrong\u003ealways\u003c/strong\u003e be treated as being on a different domain, no exceptions. Since the origin \u003ccode\u003enull\u003c/code\u003e is not on the domain \u003ccode\u003eexample.com\u003c/code\u003e, I expect KPM to treat the sandboxed iframe the same way it treats an iframe on \u003ccode\u003edifferent-domain.com\u003c/code\u003e. All major browsers and their built-in password managers follow the HTML specification and treat the sandboxed iframe as being on a different origin, and does not fill-in credentials.\u003c/p\u003e\n\n\u003cp\u003eRegarding this comment:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eYou can change this behavior with \u0026quot;Select authentication scope\u0026quot; option that is applied to every credentials item in \u0026quot;Passwords for websites\u0026quot; section of the application (its main window). If you choose \u0026quot;Only this domain\u0026quot;, your attack won\u0026#39;t be working anymore.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile this is a potential mitigating factor, it is not the default setting, and the option descriptions are not clear enough to make users realize the security risk of the default option.\u003c/p\u003e\n\n\u003cp\u003eIf a user finds the setting and decides to change the setting, based on the option text, the expected KPM behavior is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u0026quot;Everywhere on example.com\u0026quot; includes \u003ccode\u003eexample.com\u003c/code\u003e and \u003ccode\u003esubdomain.example.com\u003c/code\u003e. Excludes \u003ccode\u003edifferent-domain.com\u003c/code\u003e and \u003ccode\u003enull\u003c/code\u003e-origin sandboxed iframes.\u003c/li\u003e\n\u003cli\u003e\u0026quot;Only on example.com\u0026quot; only includes \u003ccode\u003eexample.com\u003c/code\u003e. Excludes \u003ccode\u003esubdomain.example.com\u003c/code\u003e, \u003ccode\u003edifferent-domain.com\u003c/code\u003e, and \u003ccode\u003enull\u003c/code\u003e-origin sandboxed iframes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever, the observed KPM behavior is:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u0026quot;Everywhere on example.com\u0026quot; includes \u003ccode\u003eexample.com\u003c/code\u003e, \u003ccode\u003esubdomain.example.com\u003c/code\u003e AND \u003ccode\u003enull\u003c/code\u003e-origin sandboxed iframes. Excludes \u003ccode\u003edifferent-domain.com\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u0026quot;Only on example.com\u0026quot; (same as expected behavior).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe observed behavior is different than the expected behavior, since it is not clear to the user that \u003ccode\u003enull\u003c/code\u003e-origin sandboxed iframes are allowed under \u0026quot;Everywhere on example.com\u0026quot;, since \u003ccode\u003enull\u003c/code\u003e-origin sandboxed iframes are \u003cstrong\u003enot\u003c/strong\u003e on \u003ccode\u003eexample.com\u003c/code\u003e, per the HTML specification.\u003c/p\u003e\n\n\u003cp\u003eTo summarize: The default behavior deviates from the HTML specification, posing security risks. The setting\u0026#39;s options are not clear enough for user to realize the risk, and require complex user actions to activate the mitigation. I believe the core issue is the deviation from HTML specification -- no mitigation will resolve that inconsistency.\u003c/p\u003e\n\n\u003cp\u003eLet me know if you need further information or have questions.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nAlesandro\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-25T23:50:48.577Z","updated_at":"2019-07-25T23:50:48.577Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5433042,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"To add to my last comment: As far as I know, there isn't a valid use-case where a sandboxed iframe is trusted by the website operator, since the intended use of the sandbox attribute is as an explicit indicator that the website operator does not fully trust the contents of the iframe. If your team has a valid use-case in the wild (production), let me know, so I can reanalyze with that in mind.","markdown_message":"\u003cp\u003eTo add to my last comment: As far as I know, there isn\u0026#39;t a valid use-case where a sandboxed iframe is trusted by the website operator, since the intended use of the sandbox attribute is as an explicit indicator that the website operator does not fully trust the contents of the iframe. If your team has a valid use-case in the wild (production), let me know, so I can reanalyze with that in mind.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-26T01:47:22.441Z","updated_at":"2019-07-26T01:47:22.441Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5436785,"is_internal":false,"editable":false,"type":"Activities::BugNeedsMoreInfo","message":"Hi Alesandro.\n\nWe still don't see any problem at our side here. Probably it would be, if you could demonstrate how KPM autofills credentials at a web page from iframe that loads it from different domain (example.com is an original domain and example2.com is a domain within iframe).","markdown_message":"\u003cp\u003eHi Alesandro.\u003c/p\u003e\n\n\u003cp\u003eWe still don\u0026#39;t see any problem at our side here. Probably it would be, if you could demonstrate how KPM autofills credentials at a web page from iframe that loads it from different domain (example.com is an original domain and example2.com is a domain within iframe).\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-26T10:37:22.214Z","updated_at":"2019-07-26T10:37:22.214Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5441726,"is_internal":false,"editable":false,"type":"Activities::BugNew","message":"Hi Artem,\n\nThe scenario you suggested is already prevented by KPM, so there isn't a vulnerability with that particular scenario. However, the sandboxed iframe scenario should be treated the same way as the cross-domain scenario you suggested, for the reasons I explained in earlier comments. Because it isn't treated the same, I consider the behavior a vulnerability.\n\nDoes your team think KPM should continue using the URL-based origin instead of the effective origin?\nIf so, can you explain how this behavior is safer than the behavior followed by browsers' built-in password managers, which follow the HTML specification?\n\nWebsites depend on layers of security, often provided by the HTML specification and additional security features implemented by web browsers. KPM users have a layer of security removed due to the deviation from the HTML specification. If any software (i.e. extensions) removes a layer of security that is implemented by the original software or specification (i.e. web browser + HTML spec), I consider it a security issue.\n\nThe clearest comparison is all major browsers' built-in password managers, which accurately implement this security feature from the HTML specification and do not deviate from it. I would use the built-in password managers as a benchmark when there is doubt about whether a behavior is according to specification. In this case, KPM behaves differently compared to built-in password managers.\n\nI know each vendor's decision making is independent, but for context, other vendors have determined this exact issue is a high- or critical-level security issue and implemented fixes. Many other vendors already followed the HTML specification and didn't have a reportable security issue to start with.\n\nRegards,\nAlesandro","markdown_message":"\u003cp\u003eHi Artem,\u003c/p\u003e\n\n\u003cp\u003eThe scenario you suggested is already prevented by KPM, so there isn\u0026#39;t a vulnerability with that particular scenario. However, the sandboxed iframe scenario should be treated the same way as the cross-domain scenario you suggested, for the reasons I explained in earlier comments. Because it isn\u0026#39;t treated the same, I consider the behavior a vulnerability.\u003c/p\u003e\n\n\u003cp\u003eDoes your team think KPM should continue using the URL-based origin instead of the effective origin?\u003cbr\u003e\nIf so, can you explain how this behavior is safer than the behavior followed by browsers\u0026#39; built-in password managers, which follow the HTML specification?\u003c/p\u003e\n\n\u003cp\u003eWebsites depend on layers of security, often provided by the HTML specification and additional security features implemented by web browsers. KPM users have a layer of security removed due to the deviation from the HTML specification. If any software (i.e. extensions) removes a layer of security that is implemented by the original software or specification (i.e. web browser + HTML spec), I consider it a security issue.\u003c/p\u003e\n\n\u003cp\u003eThe clearest comparison is all major browsers\u0026#39; built-in password managers, which accurately implement this security feature from the HTML specification and do not deviate from it. I would use the built-in password managers as a benchmark when there is doubt about whether a behavior is according to specification. In this case, KPM behaves differently compared to built-in password managers.\u003c/p\u003e\n\n\u003cp\u003eI know each vendor\u0026#39;s decision making is independent, but for context, other vendors have determined this exact issue is a high- or critical-level security issue and implemented fixes. Many other vendors already followed the HTML specification and didn\u0026#39;t have a reportable security issue to start with.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nAlesandro\u003c/p\u003e\n","automated_response":false,"created_at":"2019-07-26T22:46:01.603Z","updated_at":"2019-07-26T22:50:00.096Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5443322,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2019-07-27T08:18:39.000Z","updated_at":"2019-07-27T08:18:39.000Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5529154,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Artem,\n\nThanks for triaging. Let me know when you expect to have an update.\n\nRegards,\nAlesandro","markdown_message":"\u003cp\u003eHi Artem,\u003c/p\u003e\n\n\u003cp\u003eThanks for triaging. Let me know when you expect to have an update.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nAlesandro\u003c/p\u003e\n","automated_response":false,"created_at":"2019-08-08T19:40:48.655Z","updated_at":"2019-08-08T19:40:48.655Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5764997,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Artem,\n\nDo you have an update? It's been 1.5 months since triage, and nearly two months since initial report.\n\nRegards,\nAlesandro","markdown_message":"\u003cp\u003eHi Artem,\u003c/p\u003e\n\n\u003cp\u003eDo you have an update? It\u0026#39;s been 1.5 months since triage, and nearly two months since initial report.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nAlesandro\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-09T18:35:16.064Z","updated_at":"2019-09-09T18:35:16.064Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5770203,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Alesandro.\n\nWe've analyzed your report once again, but concluded that it doesn't represent a security problem for our product. Considering efforts you've made to prepare the report, we can close the ticket with Resolved status, thus you get additional points to your reputation here. Are you OK with it?","markdown_message":"\u003cp\u003eHi Alesandro.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve analyzed your report once again, but concluded that it doesn\u0026#39;t represent a security problem for our product. Considering efforts you\u0026#39;ve made to prepare the report, we can close the ticket with Resolved status, thus you get additional points to your reputation here. Are you OK with it?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-10T10:38:23.761Z","updated_at":"2019-09-10T10:38:23.761Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5772448,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Artem,\n\nThanks for update. Yes, closing with Resolved status is appreciated. Disagree with but respect the team's conclusion.\n\nSince it's considered acceptable risk for Kaspersky, can you disclose this report? No redactions needed on my part.\n\nRegards,\nAlesandro","markdown_message":"\u003cp\u003eHi Artem,\u003c/p\u003e\n\n\u003cp\u003eThanks for update. Yes, closing with Resolved status is appreciated. Disagree with but respect the team\u0026#39;s conclusion.\u003c/p\u003e\n\n\u003cp\u003eSince it\u0026#39;s considered acceptable risk for Kaspersky, can you disclose this report? No redactions needed on my part.\u003c/p\u003e\n\n\u003cp\u003eRegards,\u003cbr\u003e\nAlesandro\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-10T16:24:47.177Z","updated_at":"2019-09-10T16:24:47.177Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5772688,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T16:53:27.226Z","updated_at":"2019-09-10T16:53:27.226Z","additional_data":{"old_severity":"High","new_severity":"Low","old_severity_id":466570,"new_severity_id":513016},"actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5772717,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T16:54:03.628Z","updated_at":"2019-09-10T16:54:03.628Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"alesandroortiz","url":"/alesandroortiz"},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5772774,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Ok, closed. If you need to make this report public, you can request disclosure for the ticket.","markdown_message":"\u003cp\u003eOk, closed. If you need to make this report public, you can request disclosure for the ticket.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-10T16:56:01.163Z","updated_at":"2019-09-10T16:56:01.163Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5773186,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T17:29:00.337Z","updated_at":"2019-09-10T17:29:00.337Z","first_to_agree":true,"actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":5773272,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T17:42:33.339Z","updated_at":"2019-09-10T17:42:33.339Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5773273,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-09-10T17:42:33.442Z","updated_at":"2019-09-10T17:42:33.442Z","actor":{"username":"artem_baranov","cleared":false,"url":"/artem_baranov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/257/241/2e90c2393e57c257791b2e8deb7c0a43607a1315_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":5773317,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for disclosing. Have a great week!","markdown_message":"\u003cp\u003eThanks for disclosing. Have a great week!\u003c/p\u003e\n","automated_response":false,"created_at":"2019-09-10T17:51:45.075Z","updated_at":"2019-09-10T17:52:07.753Z","actor":{"username":"alesandroortiz","cleared":true,"url":"/alesandroortiz","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/281/801/9c6833231ccd8fb957dfd04cc325d7ea2cf4b81b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"kaspersky","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}