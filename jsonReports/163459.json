{"id":163459,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjM0NTk=","url":"https://hackerone.com/reports/163459","title":"potential memory corruption in or/buffers.c (particularly on 32 bit)","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-08-26T01:06:27.016Z","submitted_at":"2016-08-26T01:06:27.016Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"guido","url":"/guido","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":1800,"url":"https://hackerone.com/torproject","handle":"torproject","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Tor","twitter_handle":"torproject","website":"https://www.torproject.org/","about":"Anonymity Online"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2017-10-19T10:15:23.431Z","bug_reporter_agreed_on_going_public_at":"2017-10-19T10:15:23.372Z","team_member_agreed_on_going_public_at":"2017-10-19T09:40:01.930Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"In ```or/buffer.s.c```:\n```c\n/** Return the allocation size we'd like to use to hold \u003cb\u003etarget\u003c/b\u003e\n * bytes. */\nstatic inline size_t\npreferred_chunk_size(size_t target)\n{\n  size_t sz = MIN_CHUNK_ALLOC;\n  while (CHUNK_SIZE_WITH_ALLOC(sz) \u003c target) {\n    sz \u003c\u003c= 1;\n  }\n  return sz;\n}\n```\n\n```c\n#define MIN_CHUNK_ALLOC 256\n#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)\n```\n\nCHUNK_HEADER_LEN is usually around 30 bytes or so.\n\nThe problem with ```preferred_chunk_size``` is that for a large ```size_t target```, the function will return 0.\n\nIf you compile this program with ```-m32```:\n\n```c\n#include \u003cstdio.h\u003e\n#include \u003cstdint.h\u003e\n#define FLEXIBLE_ARRAY_MEMBER /**/\n#define DEBUG_CHUNK_ALLOC\n/** A single chunk on a buffer. */\ntypedef struct chunk_t {\n  struct chunk_t *next; /**\u003c The next chunk on the buffer. */\n  size_t datalen; /**\u003c The number of bytes stored in this chunk */\n  size_t memlen; /**\u003c The number of usable bytes of storage in \u003cb\u003emem\u003c/b\u003e. */\n#ifdef DEBUG_CHUNK_ALLOC\n  size_t DBG_alloc;\n#endif\n  char *data; /**\u003c A pointer to the first byte of data stored in \u003cb\u003emem\u003c/b\u003e. */\n  uint32_t inserted_time; /**\u003c Timestamp in truncated ms since epoch\n                           * when this chunk was inserted. */\n  char mem[FLEXIBLE_ARRAY_MEMBER]; /**\u003c The actual memory used for storage in\n                * this chunk. */\n} chunk_t;\n#if defined(__GNUC__) \u0026\u0026 __GNUC__ \u003e 3\n#define STRUCT_OFFSET(tp, member) __builtin_offsetof(tp, member)\n#else\n #define STRUCT_OFFSET(tp, member) \\\n   ((off_t) (((char*)\u0026((tp*)0)-\u003emember)-(char*)0))\n#endif\n#define MIN_CHUNK_ALLOC 256\n#define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])\n#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)\nstatic inline size_t\npreferred_chunk_size(size_t target)\n{\n  size_t sz = MIN_CHUNK_ALLOC;\n  while (CHUNK_SIZE_WITH_ALLOC(sz) \u003c target) {\n    sz \u003c\u003c= 1;\n  }\n  return sz;\n}\n\nint main(void)\n{\n    size_t i = 1024;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    printf(\"i is %08X, preferred_chunk_size is %08X\\n\", i, preferred_chunk_size(i)); i \u003c\u003c= 1;\n    return 0;\n}\n```\n\nthe output is:\n\n```\ni is 00000400, preferred_chunk_size is 00000800\ni is 00000800, preferred_chunk_size is 00001000\ni is 00001000, preferred_chunk_size is 00002000\ni is 00002000, preferred_chunk_size is 00004000\ni is 00004000, preferred_chunk_size is 00008000\ni is 00008000, preferred_chunk_size is 00010000\ni is 00010000, preferred_chunk_size is 00020000\ni is 00020000, preferred_chunk_size is 00040000\ni is 00040000, preferred_chunk_size is 00080000\ni is 00080000, preferred_chunk_size is 00100000\ni is 00100000, preferred_chunk_size is 00200000\ni is 00200000, preferred_chunk_size is 00400000\ni is 00400000, preferred_chunk_size is 00800000\ni is 00800000, preferred_chunk_size is 01000000\ni is 01000000, preferred_chunk_size is 02000000\ni is 02000000, preferred_chunk_size is 04000000\ni is 04000000, preferred_chunk_size is 08000000\ni is 08000000, preferred_chunk_size is 10000000\ni is 10000000, preferred_chunk_size is 20000000\ni is 20000000, preferred_chunk_size is 40000000\ni is 40000000, preferred_chunk_size is 80000000\ni is 80000000, preferred_chunk_size is 00000000\n```\n\nThe danger is that the return value of ```preferred_chunk_size``` is always used as a parameter to ```tor_malloc``` or ```tor_realloc```. It is called at these places:\n\nIn ```buf_pullup```:\n```c\n 210     newsize = CHUNK_SIZE_WITH_ALLOC(preferred_chunk_size(capacity));\n 211     newhead = chunk_grow(buf-\u003ehead, newsize);\n```\n\nIn ```buf_new_with_capacity```:\n```c\n 283 /** Create and return a new buf with default chunk capacity \u003cb\u003esize\u003c/b\u003e.\n 284  */\n 285 buf_t *\n 286 buf_new_with_capacity(size_t size)\n 287 {\n 288   buf_t *b = buf_new();\n 289   b-\u003edefault_chunk_size = preferred_chunk_size(size);\n 290   return b;\n 291 }\n```\n\nIn ```buf_add_chunk_with_capacity```:\n```c\n 401 /** Append a new chunk with enough capacity to hold \u003cb\u003ecapacity\u003c/b\u003e bytes to\n 402  * the tail of \u003cb\u003ebuf\u003c/b\u003e.  If \u003cb\u003ecapped\u003c/b\u003e, don't allocate a chunk bigger\n 403  * than MAX_CHUNK_ALLOC. */\n 404 static chunk_t *\n 405 buf_add_chunk_with_capacity(buf_t *buf, size_t capacity, int capped)\n 406 {\n 407   chunk_t *chunk;\n 408 \n 409   if (CHUNK_ALLOC_SIZE(capacity) \u003c buf-\u003edefault_chunk_size) {\n 410     chunk = chunk_new_with_alloc_size(buf-\u003edefault_chunk_size);\n 411   } else if (capped \u0026\u0026 CHUNK_ALLOC_SIZE(capacity) \u003e MAX_CHUNK_ALLOC) {\n 412     chunk = chunk_new_with_alloc_size(MAX_CHUNK_ALLOC);\n 413   } else {\n 414     chunk = chunk_new_with_alloc_size(preferred_chunk_size(capacity));\n 415   }\n```\n\n```buf_new_with_capacity``` is currently called nowhere except for tests.\n```buf_add_chunk_with_capacity``` is called at various places but currently not with the ```capped``` parameter set to 0.\n\nHowever, ```buf_pullup``` is called at various places and the call to ```preferred_chunk_size``` is reachable. Whether it is reachable with a parameter large enough that it will return 0 I'm not sure about.\n\n```c\nint\ntor_main(int argc, char *argv[])\n{\n    buf_t* buf;\n    char* string;\n    size_t string_len;\n    size_t i;\n\n    buf = buf_new();\n    string_len = 0x00001000;\n    string = tor_malloc(string_len);\n    for (i = 0; i \u003c 507904; i++)\n    {\n        write_to_buf(string, string_len, buf);\n    }\n    write_to_buf(string, 0x3FFFFFA, buf);\n    free(string);\n    buf_pullup(buf, 0x90000000); \n}\n```\n\nWhat will happen is that ```buf_pullup``` will call ```chunk_grow```\n```c\n 140 static inline chunk_t *\n 141 chunk_grow(chunk_t *chunk, size_t sz)\n 142 {\n 143   off_t offset;\n 144   size_t memlen_orig = chunk-\u003ememlen;\n 145   tor_assert(sz \u003e chunk-\u003ememlen);\n 146   offset = chunk-\u003edata - chunk-\u003emem;\n 147   chunk = tor_realloc(chunk, CHUNK_ALLOC_SIZE(sz));\n 148   chunk-\u003ememlen = sz;\n 149   chunk-\u003edata = chunk-\u003emem + offset;\n```\n\n```tor_realloc``` will in effect be called with a size parameter of 0. Whether and how much legitimate heap memory ```realloc``` will allocate might be implementation-dependent. The point is that the following lines might overwrite heap memory:\n\n```c\n 148   chunk-\u003ememlen = sz;\n 149   chunk-\u003edata = chunk-\u003emem + offset;\n```\n\nsince ```chunk``` is a memory area that has just been allocated to 0 (or 1, after correction) bytes.\n\nThe whole scenario is not very likely considering Tor's frugal memory consumption but it is nonetheless a programming fault in the buffers \"API\" that could lead to stability issues. Especially if you ever expand the use of ```buf_pullup```, ```buf_new_with_capacity```, and/or uncapped ```buf_add_chunk_with_capacity```, it'll be wise to hard-limit the amounts of right-shifts in ```preferred_chunk_size``` (a single unintended negative integer -\u003e size_t can be conducive in establishing an exploitation path).","vulnerability_information_html":"\u003cp\u003eIn \u003ccode\u003eor/buffer.s.c\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"cm\"\u003e/** Return the allocation size we\u0026#39;d like to use to hold \u0026lt;b\u0026gt;target\u0026lt;/b\u0026gt;\n * bytes. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\n\u003cspan class=\"nf\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMIN_CHUNK_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCHUNK_SIZE_WITH_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#define MIN_CHUNK_ALLOC 256\n#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCHUNK_HEADER_LEN is usually around 30 bytes or so.\u003c/p\u003e\n\n\u003cp\u003eThe problem with \u003ccode\u003epreferred_chunk_size\u003c/code\u003e is that for a large \u003ccode\u003esize_t target\u003c/code\u003e, the function will return 0.\u003c/p\u003e\n\n\u003cp\u003eIf you compile this program with \u003ccode\u003e-m32\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e#include \u0026lt;stdio.h\u0026gt;\n#include \u0026lt;stdint.h\u0026gt;\n#define FLEXIBLE_ARRAY_MEMBER \u003c/span\u003e\u003cspan class=\"cm\"\u003e/**/\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n#define DEBUG_CHUNK_ALLOC\n\u003c/span\u003e\u003cspan class=\"cm\"\u003e/** A single chunk on a buffer. */\u003c/span\u003e\n\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; The next chunk on the buffer. */\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003edatalen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; The number of bytes stored in this chunk */\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ememlen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; The number of usable bytes of storage in \u0026lt;b\u0026gt;mem\u0026lt;/b\u0026gt;. */\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#ifdef DEBUG_CHUNK_ALLOC\n\u003c/span\u003e  \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003eDBG_alloc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#endif\n\u003c/span\u003e  \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; A pointer to the first byte of data stored in \u0026lt;b\u0026gt;mem\u0026lt;/b\u0026gt;. */\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003euint32_t\u003c/span\u003e \u003cspan class=\"n\"\u003einserted_time\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; Timestamp in truncated ms since epoch\n                           * when this chunk was inserted. */\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eFLEXIBLE_ARRAY_MEMBER\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e \u003cspan class=\"cm\"\u003e/**\u0026lt; The actual memory used for storage in\n                * this chunk. */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#if defined(__GNUC__) \u0026amp;\u0026amp; __GNUC__ \u0026gt; 3\n#define STRUCT_OFFSET(tp, member) __builtin_offsetof(tp, member)\n#else\n\u003c/span\u003e \u003cspan class=\"cp\"\u003e#define STRUCT_OFFSET(tp, member) \\\n   ((off_t) (((char*)\u0026amp;((tp*)0)-\u0026gt;member)-(char*)0))\n#endif\n#define MIN_CHUNK_ALLOC 256\n#define CHUNK_HEADER_LEN STRUCT_OFFSET(chunk_t, mem[0])\n#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN)\n\u003c/span\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e\n\u003cspan class=\"nf\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eMIN_CHUNK_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCHUNK_SIZE_WITH_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1024\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;i is %08X, preferred_chunk_size is %08X\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ethe output is:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ei is 00000400, preferred_chunk_size is 00000800\ni is 00000800, preferred_chunk_size is 00001000\ni is 00001000, preferred_chunk_size is 00002000\ni is 00002000, preferred_chunk_size is 00004000\ni is 00004000, preferred_chunk_size is 00008000\ni is 00008000, preferred_chunk_size is 00010000\ni is 00010000, preferred_chunk_size is 00020000\ni is 00020000, preferred_chunk_size is 00040000\ni is 00040000, preferred_chunk_size is 00080000\ni is 00080000, preferred_chunk_size is 00100000\ni is 00100000, preferred_chunk_size is 00200000\ni is 00200000, preferred_chunk_size is 00400000\ni is 00400000, preferred_chunk_size is 00800000\ni is 00800000, preferred_chunk_size is 01000000\ni is 01000000, preferred_chunk_size is 02000000\ni is 02000000, preferred_chunk_size is 04000000\ni is 04000000, preferred_chunk_size is 08000000\ni is 08000000, preferred_chunk_size is 10000000\ni is 10000000, preferred_chunk_size is 20000000\ni is 20000000, preferred_chunk_size is 40000000\ni is 40000000, preferred_chunk_size is 80000000\ni is 80000000, preferred_chunk_size is 00000000\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe danger is that the return value of \u003ccode\u003epreferred_chunk_size\u003c/code\u003e is always used as a parameter to \u003ccode\u003etor_malloc\u003c/code\u003e or \u003ccode\u003etor_realloc\u003c/code\u003e. It is called at these places:\u003c/p\u003e\n\n\u003cp\u003eIn \u003ccode\u003ebuf_pullup\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e \u003cspan class=\"mi\"\u003e210\u003c/span\u003e     \u003cspan class=\"n\"\u003enewsize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eCHUNK_SIZE_WITH_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e211\u003c/span\u003e     \u003cspan class=\"n\"\u003enewhead\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_grow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enewsize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn \u003ccode\u003ebuf_new_with_capacity\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e \u003cspan class=\"mi\"\u003e283\u003c/span\u003e \u003cspan class=\"cm\"\u003e/** Create and return a new buf with default chunk capacity \u0026lt;b\u0026gt;size\u0026lt;/b\u0026gt;.\n 284  */\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e285\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e286\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuf_new_with_capacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e287\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e288\u003c/span\u003e   \u003cspan class=\"n\"\u003ebuf_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf_new\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e289\u003c/span\u003e   \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edefault_chunk_size\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e290\u003c/span\u003e   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e291\u003c/span\u003e \u003cspan class=\"err\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn \u003ccode\u003ebuf_add_chunk_with_capacity\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e \u003cspan class=\"mi\"\u003e401\u003c/span\u003e \u003cspan class=\"cm\"\u003e/** Append a new chunk with enough capacity to hold \u0026lt;b\u0026gt;capacity\u0026lt;/b\u0026gt; bytes to\n 402  * the tail of \u0026lt;b\u0026gt;buf\u0026lt;/b\u0026gt;.  If \u0026lt;b\u0026gt;capped\u0026lt;/b\u0026gt;, don\u0026#39;t allocate a chunk bigger\n 403  * than MAX_CHUNK_ALLOC. */\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e404\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e405\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf_add_chunk_with_capacity\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ecapped\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e406\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e407\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e408\u003c/span\u003e \n \u003cspan class=\"mi\"\u003e409\u003c/span\u003e   \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eCHUNK_ALLOC_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edefault_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e410\u003c/span\u003e     \u003cspan class=\"n\"\u003echunk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_new_with_alloc_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edefault_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e411\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecapped\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eCHUNK_ALLOC_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003eMAX_CHUNK_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e412\u003c/span\u003e     \u003cspan class=\"n\"\u003echunk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_new_with_alloc_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMAX_CHUNK_ALLOC\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e413\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e414\u003c/span\u003e     \u003cspan class=\"n\"\u003echunk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_new_with_alloc_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epreferred_chunk_size\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e415\u003c/span\u003e   \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003ebuf_new_with_capacity\u003c/code\u003e is currently called nowhere except for tests.\u003cbr\u003e\n\u003ccode\u003ebuf_add_chunk_with_capacity\u003c/code\u003e is called at various places but currently not with the \u003ccode\u003ecapped\u003c/code\u003e parameter set to 0.\u003c/p\u003e\n\n\u003cp\u003eHowever, \u003ccode\u003ebuf_pullup\u003c/code\u003e is called at various places and the call to \u003ccode\u003epreferred_chunk_size\u003c/code\u003e is reachable. Whether it is reachable with a parameter large enough that it will return 0 I\u0026#39;m not sure about.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\n\u003cspan class=\"nf\"\u003etor_main\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eargc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargv\u003c/span\u003e\u003cspan class=\"p\"\u003e[])\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebuf_t\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003estring_len\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf_new\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estring_len\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x00001000\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etor_malloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring_len\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e507904\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ewrite_to_buf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring_len\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ewrite_to_buf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x3FFFFFA\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efree\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ebuf_pullup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ebuf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mh\"\u003e0x90000000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat will happen is that \u003ccode\u003ebuf_pullup\u003c/code\u003e will call \u003ccode\u003echunk_grow\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e \u003cspan class=\"mi\"\u003e140\u003c/span\u003e \u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kr\"\u003einline\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e141\u003c/span\u003e \u003cspan class=\"n\"\u003echunk_grow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echunk_t\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e142\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e143\u003c/span\u003e   \u003cspan class=\"kt\"\u003eoff_t\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e144\u003c/span\u003e   \u003cspan class=\"kt\"\u003esize_t\u003c/span\u003e \u003cspan class=\"n\"\u003ememlen_orig\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ememlen\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e145\u003c/span\u003e   \u003cspan class=\"n\"\u003etor_assert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esz\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ememlen\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e146\u003c/span\u003e   \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e147\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etor_realloc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eCHUNK_ALLOC_SIZE\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e148\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ememlen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e149\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003etor_realloc\u003c/code\u003e will in effect be called with a size parameter of 0. Whether and how much legitimate heap memory \u003ccode\u003erealloc\u003c/code\u003e will allocate might be implementation-dependent. The point is that the following lines might overwrite heap memory:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight c\"\u003e\u003ccode\u003e \u003cspan class=\"mi\"\u003e148\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ememlen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003esz\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n \u003cspan class=\"mi\"\u003e149\u003c/span\u003e   \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003echunk\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003emem\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eoffset\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003esince \u003ccode\u003echunk\u003c/code\u003e is a memory area that has just been allocated to 0 (or 1, after correction) bytes.\u003c/p\u003e\n\n\u003cp\u003eThe whole scenario is not very likely considering Tor\u0026#39;s frugal memory consumption but it is nonetheless a programming fault in the buffers \u0026quot;API\u0026quot; that could lead to stability issues. Especially if you ever expand the use of \u003ccode\u003ebuf_pullup\u003c/code\u003e, \u003ccode\u003ebuf_new_with_capacity\u003c/code\u003e, and/or uncapped \u003ccode\u003ebuf_add_chunk_with_capacity\u003c/code\u003e, it\u0026#39;ll be wise to hard-limit the amounts of right-shifts in \u003ccode\u003epreferred_chunk_size\u003c/code\u003e (a single unintended negative integer -\u0026gt; size_t can be conducive in establishing an exploitation path).\u003c/p\u003e\n","bounty_amount":"100.0","formatted_bounty":"$100","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2017-11-18T09:40:01.986Z","allow_singular_disclosure_after":-98218664.04372463,"singular_disclosure_allowed":true,"vote_count":5,"voters":["eveeez","geeknik","mr_r3boot","spetr0x","b4155f7c29acd42c27d007a"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1172805,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey, could you please let me know your thoughts? I understand that it's only a hypothetical vulnerability at this point so if it's not eligible then that's that but please let me know, thanks.","markdown_message":"\u003cp\u003eHey, could you please let me know your thoughts? I understand that it\u0026#39;s only a hypothetical vulnerability at this point so if it\u0026#39;s not eligible then that\u0026#39;s that but please let me know, thanks.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-04T22:17:41.251Z","updated_at":"2016-09-04T22:17:41.251Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1176663,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Greetings Guido,\n\nsorry for the late reply. It's been a busy summer!\n\nAfter discussion with the dev team, we decided to award $100 to this bug. We also didn't find an exploitable attack vector for the bug, but it's still a code error that needs to be fixed.\n\nDo you have a suggested patch?\n\nThanks for the report!","markdown_message":"\u003cp\u003eGreetings Guido,\u003c/p\u003e\n\n\u003cp\u003esorry for the late reply. It\u0026#39;s been a busy summer!\u003c/p\u003e\n\n\u003cp\u003eAfter discussion with the dev team, we decided to award $100 to this bug. We also didn\u0026#39;t find an exploitable attack vector for the bug, but it\u0026#39;s still a code error that needs to be fixed.\u003c/p\u003e\n\n\u003cp\u003eDo you have a suggested patch?\u003c/p\u003e\n\n\u003cp\u003eThanks for the report!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-06T10:46:36.895Z","updated_at":"2016-09-06T10:46:36.895Z","actor":{"url":"/torproject","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/001/800/6e575d0a9127b91e83833cf4a9e6be6e8b30cbc3_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Tor"}},"bounty_amount":"100.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"torproject","collaborator":{"username":"guido","url":"/guido"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1188151,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks!\n\nHow about this?\n\n```diff\ndiff --git a/d.c b/d.c\nindex 045a678..1a50261 100644\n--- a/d.c\n+++ b/d.c\n@@ -29,8 +29,11 @@ static inline size_t\n preferred_chunk_size(size_t target)\n {\n   size_t sz = MIN_CHUNK_ALLOC;\n+  size_t prev = 0;\n   while (CHUNK_SIZE_WITH_ALLOC(sz) \u003c target) {\n     sz \u003c\u003c= 1;\n+    tor_assert(sz \u003e prev);\n+    prev = sz;\n   }\n   return sz;\n }\n```\n\nIt's agnostic as to whether the system is 32 or 64 bit, deals with the core problem (preventing the actual overflow), and lets other functions (such as ```tor_malloc```) deal with outrageous allocatiion sizes if applicable. If you want proper error handling instead of a hard abort through ```tor_assert()``` then more changes are necessarily, but I'd say that since Tor's general memory consumption is at present relatively frugal, attempts to allocate 2+ GB's of memory are an indication that something is already amiss so an abort is the way to go.","markdown_message":"\u003cp\u003eThanks!\u003c/p\u003e\n\n\u003cp\u003eHow about this?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/d.c b/d.c\nindex 045a678..1a50261 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/d.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/d.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -29,8 +29,11 @@\u003c/span\u003e static inline size_t\n preferred_chunk_size(size_t target)\n {\n   size_t sz = MIN_CHUNK_ALLOC;\n\u003cspan class=\"gi\"\u003e+  size_t prev = 0;\n\u003c/span\u003e   while (CHUNK_SIZE_WITH_ALLOC(sz) \u0026lt; target) {\n     sz \u0026lt;\u0026lt;= 1;\n\u003cspan class=\"gi\"\u003e+    tor_assert(sz \u0026gt; prev);\n+    prev = sz;\n\u003c/span\u003e   }\n   return sz;\n }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt\u0026#39;s agnostic as to whether the system is 32 or 64 bit, deals with the core problem (preventing the actual overflow), and lets other functions (such as \u003ccode\u003etor_malloc\u003c/code\u003e) deal with outrageous allocatiion sizes if applicable. If you want proper error handling instead of a hard abort through \u003ccode\u003etor_assert()\u003c/code\u003e then more changes are necessarily, but I\u0026#39;d say that since Tor\u0026#39;s general memory consumption is at present relatively frugal, attempts to allocate 2+ GB\u0026#39;s of memory are an indication that something is already amiss so an abort is the way to go.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T09:05:36.138Z","updated_at":"2016-09-12T09:05:36.138Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1188162,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"By the way, if you happen to value my services, and you'd like me to scrutinize any other Tor software written in C under the same terms as this bug bounty program (only pay upon submission of valuable security-enhancing information), whether within the HackerOne program or under a private arrangement, I'd gladly agree to that.. Let me know.","markdown_message":"\u003cp\u003eBy the way, if you happen to value my services, and you\u0026#39;d like me to scrutinize any other Tor software written in C under the same terms as this bug bounty program (only pay upon submission of valuable security-enhancing information), whether within the HackerOne program or under a private arrangement, I\u0026#39;d gladly agree to that.. Let me know.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-12T09:14:08.932Z","updated_at":"2016-09-12T09:14:08.932Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1190873,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Hello Guido,\n\nwe are almost ready to merge a fix to this bug. Please see https://trac.torproject.org/projects/tor/ticket/20081 for a discussion on the patch.\n\nClosing issue.","markdown_message":"\u003cp\u003eHello Guido,\u003c/p\u003e\n\n\u003cp\u003ewe are almost ready to merge a fix to this bug. Please see \u003ca title=\"https://trac.torproject.org/projects/tor/ticket/20081\" href=\"/redirect?url=https%3A%2F%2Ftrac.torproject.org%2Fprojects%2Ftor%2Fticket%2F20081\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://trac.torproject.org/projects/tor/ticket/20081\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e for a discussion on the patch.\u003c/p\u003e\n\n\u003cp\u003eClosing issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-13T13:10:44.888Z","updated_at":"2016-09-13T13:10:44.888Z","actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"guido","url":"/guido"},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1191411,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Cool.\n\nAny thoughts on my offer?","markdown_message":"\u003cp\u003eCool.\u003c/p\u003e\n\n\u003cp\u003eAny thoughts on my offer?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-13T17:00:07.792Z","updated_at":"2016-09-13T17:00:07.792Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1191424,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey Guido. I can't think of other Tor software in C that would require auditing. Which one are you thinking of?","markdown_message":"\u003cp\u003eHey Guido. I can\u0026#39;t think of other Tor software in C that would require auditing. Which one are you thinking of?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-13T17:07:32.700Z","updated_at":"2016-09-13T17:07:32.700Z","actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1191451,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"torsocks\ntor messenger seems to have C dependencies (libgcrypt etc) https://gitweb.torproject.org/tor-messenger-build.git/tree/projects\nOrbot too https://github.com/n8fr8/orbot/tree/master/external\nPython projects with C dependencies such as pycrpto https://gitweb.torproject.org/stem.git/tree/requirements.txt\netcetera.\n\nOnly vulnerabilities that 1) directly, remotely and severely (heap corruption and worse) affect the Tor software and 2) are not covered by another bounty program, of course.","markdown_message":"\u003cp\u003etorsocks\u003cbr\u003e\ntor messenger seems to have C dependencies (libgcrypt etc) \u003ca title=\"https://gitweb.torproject.org/tor-messenger-build.git/tree/projects\" href=\"/redirect?url=https%3A%2F%2Fgitweb.torproject.org%2Ftor-messenger-build.git%2Ftree%2Fprojects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://gitweb.torproject.org/tor-messenger-build.git/tree/projects\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nOrbot too \u003ca title=\"https://github.com/n8fr8/orbot/tree/master/external\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fn8fr8%2Forbot%2Ftree%2Fmaster%2Fexternal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/n8fr8/orbot/tree/master/external\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nPython projects with C dependencies such as pycrpto \u003ca title=\"https://gitweb.torproject.org/stem.git/tree/requirements.txt\" href=\"/redirect?url=https%3A%2F%2Fgitweb.torproject.org%2Fstem.git%2Ftree%2Frequirements.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://gitweb.torproject.org/stem.git/tree/requirements.txt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\netcetera.\u003c/p\u003e\n\n\u003cp\u003eOnly vulnerabilities that 1) directly, remotely and severely (heap corruption and worse) affect the Tor software and 2) are not covered by another bounty program, of course.\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-13T17:24:17.328Z","updated_at":"2016-09-13T17:24:17.328Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1193928,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hello Guido.\n\nI discussed this with other Tor hackerone admins and we came to the conclusion that it's too early for us to expand to those projects as well.\n\nWe are already spread quite thin by the current bug bounty project, and we think that adding additional software will overload us even more. Let alone we will have to find people from each project to do the bug review.\n\nAll in all, we are still in testing phase of the bug bounty program so we can't take you up on your offer. We plan to improve our hackerone scalability in the future (by getting more people to be responsible for it), but we are still super busy putting out other fires.\n\nCheers :)","markdown_message":"\u003cp\u003eHello Guido.\u003c/p\u003e\n\n\u003cp\u003eI discussed this with other Tor hackerone admins and we came to the conclusion that it\u0026#39;s too early for us to expand to those projects as well.\u003c/p\u003e\n\n\u003cp\u003eWe are already spread quite thin by the current bug bounty project, and we think that adding additional software will overload us even more. Let alone we will have to find people from each project to do the bug review.\u003c/p\u003e\n\n\u003cp\u003eAll in all, we are still in testing phase of the bug bounty program so we can\u0026#39;t take you up on your offer. We plan to improve our hackerone scalability in the future (by getting more people to be responsible for it), but we are still super busy putting out other fires.\u003c/p\u003e\n\n\u003cp\u003eCheers :)\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-14T16:59:54.470Z","updated_at":"2016-09-14T16:59:54.470Z","actor":{"username":"asn","cleared":false,"url":"/asn","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":1193998,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Understood. Thank you very much for considering it!","markdown_message":"\u003cp\u003eUnderstood. Thank you very much for considering it!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-14T17:31:58.326Z","updated_at":"2016-09-14T17:31:58.326Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2083677,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-10-19T09:40:01.959Z","updated_at":"2017-10-19T09:40:01.959Z","first_to_agree":true,"actor":{"username":"geko","cleared":false,"url":"/geko","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2083735,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-10-19T10:15:23.394Z","updated_at":"2017-10-19T10:15:23.394Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2083736,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2017-10-19T10:15:23.453Z","updated_at":"2017-10-19T10:15:23.453Z","actor":{"username":"guido","cleared":false,"url":"/guido","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/983/e55b0b2324777fb7efc2de4212fd8d337ca816bd_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"torproject","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}