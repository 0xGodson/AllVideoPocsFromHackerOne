{"id":447488,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80NDc0ODg=","url":"https://hackerone.com/reports/447488","title":"Corrupted Authorization header can cause logs not to be ingested properly in ████████","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2018-11-20T04:48:27.549Z","submitted_at":"2018-11-20T04:48:27.549Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"jobert","url":"/jobert","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":13,"url":"https://hackerone.com/security","handle":"security","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"HackerOne","twitter_handle":"Hacker0x01","website":"https://hackerone.com","about":"Vulnerability disclosure should be safe, transparent, and rewarding."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-04T19:50:22.462Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-04T19:50:00.392Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"HackerOne ingests different logs in ██████, one of them being nginx access logs from our load balancers. The default log format of our load balancer configuration is shown below. As can be seen in the format, the HTTP user specified in the `Authorization` header (`$remote_user`) is placed between the `$remote_addr` and `[$time_local]`. A log entry is delimited with white space and the `$remote_user` variable isn't surrounded with quotes. When a user isn't specified, its value is set to `-`.\n\nDuring a white box test of another component in a network, it was identified that an additional delimiter can be injected, which seems to cause ingestion of the log entry to fail and the log entry to be discarded.\n\n**H1 nginx log format**\n```\nlog_format cf_custom '$remote_addr - $remote_user [$time_local] '\n                     '\"$request\" $status $body_bytes_sent '\n                     '\"$http_referer\" \"$http_user_agent\" \"$host\" '\n                     '$request_time $upstream_response_time $pipe '\n                     '$http_cf_ray $cookie___cfduid '\n                     '\"$http_x_forwarded_proto\" \"$http_x_forwarded_for\" '\n                     '\"$http_x_amzn_trace_id\"';\n```\n\nConsider the following cURL command:\n\n```\ncurl -X POST -u '- A:B' https://hackerone.com/graphql\\?secret\\=1\n```\n\nThis will result in the following request being submitted:\n\n**HTTP request**\n```\nPOST /graphql?secret=1 HTTP/2\nHost: hackerone.com\nAuthorization: Basic LSBBOkI=\nUser-Agent: curl/7.54.0\nAccept: */*\n```\n\nWhen this request is processed by nginx, the `$remote_user` (`- A`) is being added to the log entry. However, since the delimiter (the whitespace) isn't escaped and no quotes are surrounding the value, an additional column is added to the log entry. When this is ingested by █████████, the log for that particular request doesn't seem to appear in the Events source. However, as the request itself is valid, it'll be proxied to the upstream.\n\nBecause our Rails logs have a different format (JSON), we do have the ability to still determine which requests were sent to our backend. There are very few requests who are stopped on our load balancer and none of them have the ability to interact directly with out database. This lowers the impact of the vulnerability. However, in order for us to rely on either access log that is being ingested, we should address this issue.\n\nIt is currently unknown where the root cause of this vulnerability lies. nginx, by default, uses a very similar log item format: http://nginx.org/en/docs/http/ngx_http_log_module.html. Similar to the HackerOne configuration, the `$remote_user` is not enclosed in double quotes. The fact that nginx doesn't encode the whitespace may actually be something they want to fix going forward. However, it seems rather odd that █████████ completely discards a log entry. Let's figure out where the vulnerability comes from and what we can do to fix it.\n\nThe `$cookie___cfduid` parameter may also be vulnerable to the same attack.\n\n## Impact\n\nThis may impact our ability to give a conclusive answer during incident response or debugging based on the nginx load balancer access logs.","vulnerability_information_html":"\u003cp\u003eHackerOne ingests different logs in ██████, one of them being nginx access logs from our load balancers. The default log format of our load balancer configuration is shown below. As can be seen in the format, the HTTP user specified in the \u003ccode\u003eAuthorization\u003c/code\u003e header (\u003ccode\u003e$remote_user\u003c/code\u003e) is placed between the \u003ccode\u003e$remote_addr\u003c/code\u003e and \u003ccode\u003e[$time_local]\u003c/code\u003e. A log entry is delimited with white space and the \u003ccode\u003e$remote_user\u003c/code\u003e variable isn\u0026#39;t surrounded with quotes. When a user isn\u0026#39;t specified, its value is set to \u003ccode\u003e-\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eDuring a white box test of another component in a network, it was identified that an additional delimiter can be injected, which seems to cause ingestion of the log entry to fail and the log entry to be discarded.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eH1 nginx log format\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003elog_format cf_custom \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#39;\n                     \u0026#39;\u0026quot;$request\u0026quot; $status $body_bytes_sent \u0026#39;\n                     \u0026#39;\u0026quot;$http_referer\u0026quot; \u0026quot;$http_user_agent\u0026quot; \u0026quot;$host\u0026quot; \u0026#39;\n                     \u0026#39;$request_time $upstream_response_time $pipe \u0026#39;\n                     \u0026#39;$http_cf_ray $cookie___cfduid \u0026#39;\n                     \u0026#39;\u0026quot;$http_x_forwarded_proto\u0026quot; \u0026quot;$http_x_forwarded_for\u0026quot; \u0026#39;\n                     \u0026#39;\u0026quot;$http_x_amzn_trace_id\u0026quot;\u0026#39;;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eConsider the following cURL command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ecurl -X POST -u \u0026#39;- A:B\u0026#39; https://hackerone.com/graphql\\?secret\\=1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will result in the following request being submitted:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHTTP request\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /graphql?secret=1 HTTP/2\nHost: hackerone.com\nAuthorization: Basic LSBBOkI=\nUser-Agent: curl/7.54.0\nAccept: */*\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen this request is processed by nginx, the \u003ccode\u003e$remote_user\u003c/code\u003e (\u003ccode\u003e- A\u003c/code\u003e) is being added to the log entry. However, since the delimiter (the whitespace) isn\u0026#39;t escaped and no quotes are surrounding the value, an additional column is added to the log entry. When this is ingested by █████████, the log for that particular request doesn\u0026#39;t seem to appear in the Events source. However, as the request itself is valid, it\u0026#39;ll be proxied to the upstream.\u003c/p\u003e\n\n\u003cp\u003eBecause our Rails logs have a different format (JSON), we do have the ability to still determine which requests were sent to our backend. There are very few requests who are stopped on our load balancer and none of them have the ability to interact directly with out database. This lowers the impact of the vulnerability. However, in order for us to rely on either access log that is being ingested, we should address this issue.\u003c/p\u003e\n\n\u003cp\u003eIt is currently unknown where the root cause of this vulnerability lies. nginx, by default, uses a very similar log item format: \u003ca title=\"http://nginx.org/en/docs/http/ngx_http_log_module.html\" href=\"/redirect?url=http%3A%2F%2Fnginx.org%2Fen%2Fdocs%2Fhttp%2Fngx_http_log_module.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://nginx.org/en/docs/http/ngx_http_log_module.html\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. Similar to the HackerOne configuration, the \u003ccode\u003e$remote_user\u003c/code\u003e is not enclosed in double quotes. The fact that nginx doesn\u0026#39;t encode the whitespace may actually be something they want to fix going forward. However, it seems rather odd that █████████ completely discards a log entry. Let\u0026#39;s figure out where the vulnerability comes from and what we can do to fix it.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e$cookie___cfduid\u003c/code\u003e parameter may also be vulnerable to the same attack.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThis may impact our ability to give a conclusive answer during incident response or debugging based on the nginx load balancer access logs.\u003c/p\u003e\n","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-05-04T19:50:00.733Z","allow_singular_disclosure_after":-52222160.88501915,"singular_disclosure_allowed":true,"vote_count":17,"voters":["base_64","sameerphad72","mygf","eveeez","an0nym0us","what_web","cr4xerbik4sh","silv3rpoision","japz","sa1tama0","and 7 more..."],"severity":{"rating":"medium","score":6.1,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"low","availability":"none"}},"structured_scope":{"databaseId":3,"asset_type":"URL","asset_identifier":"https://hackerone.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3682873,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-11-20T04:48:42.596Z","updated_at":"2018-11-20T04:48:42.596Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3707013,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"","markdown_message":"","automated_response":false,"created_at":"2018-11-26T00:41:04.345Z","updated_at":"2018-11-26T00:41:04.345Z","actor":{"url":"/security","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/013/fa942b9b1cbf4faf37482bf68458e1195aab9c02_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"HackerOne"}},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4262417,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi @jobert - We've deployed a fix. Could you please verify? :) ","markdown_message":"\u003cp\u003eHi \u003ca href=\"/jobert\"\u003e@jobert\u003c/a\u003e - We\u0026#39;ve deployed a fix. Could you please verify? :) \u003c/p\u003e\n","automated_response":false,"created_at":"2019-03-05T18:20:06.351Z","updated_at":"2019-03-05T18:20:06.351Z","actor":{"username":"pei","cleared":false,"url":"/pei","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/939/2d83322336a492279dc84d8f92f280c2d54fcb5b_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4421976,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-29T17:06:50.665Z","updated_at":"2019-03-29T17:06:50.665Z","actor":{"username":"jobert","cleared":true,"url":"/jobert","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ht4b9SmcYNqmpbyCFXd7cxHB/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"jobert","url":"/jobert"},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4480980,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"We've notified the nginx team about the potential insecure default. Below is a copy of their response. We're publicly disclosing this report in order to help other organizations detect similar misconfigurations in their logging infrastructure.\n\n\u003e While it would be good to make default log formats better suited \n\u003e for automatic parsing, this doesn't look like a security issue to \n\u003e me.  Note well that it is actually possible to correcly parse logs \n\u003e with the format in question - though it would be slightly harder \n\u003e than doing so in an assumption that $remote_user cannot contain \n\u003e spaces.\n\u003e \n\u003e Unfortunately, resolving this by adding additional quotes is not \n\u003e possible, due to historic nature of the first part of this format \n\u003e (see https://en.wikipedia.org/wiki/Common_Log_Format).  We may \n\u003e consider introducing additional restrictions on $remote_user to \n\u003e make things simplier, though not sure it is a good idea.  Feel \n\u003e free to suggest if you have other ideas.\n\u003e \n\u003e (Note well that Apache httpd seems to behave similarly with \n\u003e default log format, assuming basic authentication is enabled.)","markdown_message":"\u003cp\u003eWe\u0026#39;ve notified the nginx team about the potential insecure default. Below is a copy of their response. We\u0026#39;re publicly disclosing this report in order to help other organizations detect similar misconfigurations in their logging infrastructure.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhile it would be good to make default log formats better suited \u003cbr\u003e\nfor automatic parsing, this doesn\u0026#39;t look like a security issue to \u003cbr\u003e\nme.  Note well that it is actually possible to correcly parse logs \u003cbr\u003e\nwith the format in question - though it would be slightly harder \u003cbr\u003e\nthan doing so in an assumption that $remote_user cannot contain \u003cbr\u003e\nspaces.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, resolving this by adding additional quotes is not \u003cbr\u003e\npossible, due to historic nature of the first part of this format \u003cbr\u003e\n(see \u003ca title=\"https://en.wikipedia.org/wiki/Common_Log_Format\" href=\"/redirect?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCommon_Log_Format\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://en.wikipedia.org/wiki/Common_Log_Format\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e).  We may \u003cbr\u003e\nconsider introducing additional restrictions on $remote_user to \u003cbr\u003e\nmake things simplier, though not sure it is a good idea.  Feel \u003cbr\u003e\nfree to suggest if you have other ideas.\u003c/p\u003e\n\n\u003cp\u003e(Note well that Apache httpd seems to behave similarly with \u003cbr\u003e\ndefault log format, assuming basic authentication is enabled.)\u003c/p\u003e\n\u003c/blockquote\u003e\n","automated_response":false,"created_at":"2019-04-04T19:50:00.472Z","updated_at":"2019-04-04T19:50:00.472Z","first_to_agree":true,"actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":4480983,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"As per our policy, we're publicly disclosing this security vulnerability.","markdown_message":"\u003cp\u003eAs per our policy, we\u0026#39;re publicly disclosing this security vulnerability.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-04T19:50:22.277Z","updated_at":"2019-04-04T19:50:22.277Z","actor":{"username":"bencode","cleared":false,"url":"/bencode","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/013/117/ddaa1da4e004e1234c6857c42f9bfa8df85b5ccf_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"security","actor_is_team_member":true,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}