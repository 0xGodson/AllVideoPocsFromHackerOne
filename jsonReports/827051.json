{"id":827051,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC84MjcwNTE=","url":"https://hackerone.com/reports/827051","title":"Use after free in smtp_server_connection_handle_command","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2020-03-23T10:54:20.356Z","submitted_at":"2020-03-23T10:54:20.356Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"catenacyber","url":"/catenacyber","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":8906,"url":"https://hackerone.com/open-xchange","handle":"open-xchange","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Open-Xchange","twitter_handle":"openxchange","website":"https://www.open-xchange.com/","about":"Messaging, collaboration and office productivity software for service providers"}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":["CVE-2020-10958"],"singular_disclosure_disabled":true,"disclosed_at":"2020-05-18T12:55:15.565Z","bug_reporter_agreed_on_going_public_at":"2020-05-18T12:55:15.511Z","team_member_agreed_on_going_public_at":"2020-05-18T12:15:17.703Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Function `smtp_server_connection_handle_command` in src/lib-smtp/smtp-server-connection.c creates a variable named cmd with\n`cmd = smtp_server_command_new(tmp_conn, cmd_name, cmd_params);`\nIt gets used with `return (cmd == NULL || !cmd-\u003einput_locked);` ie `cmd-\u003einput_locked` dereferences the pointer \nBut we can get to this code with cmd != NULL and cmd was freed\n\nTo do so, we can trigger in `smtp_server_command_submit_reply` the condition\n`if (conn != NULL \u0026\u0026 conn-\u003ebad_counter \u003e conn-\u003eset.max_bad_commands) {` which calls `smtp_server_connection_terminate` which ends up freeing cmd (`smtp_server_connection_close`, `smtp_server_connection_disconnect`, `smtp_server_command_unref`)\nTo do so, it is enough do send enough linefeeds characters like \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\" to the server.\n\nTo me the flawed logic is to have the check `if (!smtp_server_connection_unref(\u0026tmp_conn)) {`\nThis decreases reference count only once, which has been increased before at least twice in `smtp_server_connection_handle_command` and its caller `smtp_server_connection_input`\n\nProposed patch is\n```\ndiff --git a/src/lib-smtp/smtp-server-connection.c b/src/lib-smtp/smtp-server-connection.c\nindex 404acc888b..ab8746fb2b 100644\n--- a/src/lib-smtp/smtp-server-connection.c\n+++ b/src/lib-smtp/smtp-server-connection.c\n@@ -295,8 +295,10 @@ smtp_server_connection_handle_command(struct smtp_server_connection *conn,\n        struct smtp_server_command *cmd;\n \n        smtp_server_connection_ref(tmp_conn);\n+       int refcount = tmp_conn-\u003erefcount;\n        cmd = smtp_server_command_new(tmp_conn, cmd_name, cmd_params);\n-       if (!smtp_server_connection_unref(\u0026tmp_conn)) {\n+       if (refcount \u003e tmp_conn-\u003erefcount ||\n+               !smtp_server_connection_unref(\u0026tmp_conn)) {\n                /* the command start callback managed to get this connection\n                   destroyed */\n                return FALSE;\n```\n\nThis was found by fuzzing\n\n## Impact\n\nThe attacker can use this as a denial of service against the SMTP server.","vulnerability_information_html":"\u003cp\u003eFunction \u003ccode\u003esmtp_server_connection_handle_command\u003c/code\u003e in src/lib-smtp/smtp-server-connection.c creates a variable named cmd with\u003cbr\u003e\n\u003ccode\u003ecmd = smtp_server_command_new(tmp_conn, cmd_name, cmd_params);\u003c/code\u003e\u003cbr\u003e\nIt gets used with \u003ccode\u003ereturn (cmd == NULL || !cmd-\u0026gt;input_locked);\u003c/code\u003e ie \u003ccode\u003ecmd-\u0026gt;input_locked\u003c/code\u003e dereferences the pointer \u003cbr\u003e\nBut we can get to this code with cmd != NULL and cmd was freed\u003c/p\u003e\n\n\u003cp\u003eTo do so, we can trigger in \u003ccode\u003esmtp_server_command_submit_reply\u003c/code\u003e the condition\u003cbr\u003e\n\u003ccode\u003eif (conn != NULL \u0026amp;\u0026amp; conn-\u0026gt;bad_counter \u0026gt; conn-\u0026gt;set.max_bad_commands) {\u003c/code\u003e which calls \u003ccode\u003esmtp_server_connection_terminate\u003c/code\u003e which ends up freeing cmd (\u003ccode\u003esmtp_server_connection_close\u003c/code\u003e, \u003ccode\u003esmtp_server_connection_disconnect\u003c/code\u003e, \u003ccode\u003esmtp_server_command_unref\u003c/code\u003e)\u003cbr\u003e\nTo do so, it is enough do send enough linefeeds characters like \u0026quot;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\u0026quot; to the server.\u003c/p\u003e\n\n\u003cp\u003eTo me the flawed logic is to have the check \u003ccode\u003eif (!smtp_server_connection_unref(\u0026amp;tmp_conn)) {\u003c/code\u003e\u003cbr\u003e\nThis decreases reference count only once, which has been increased before at least twice in \u003ccode\u003esmtp_server_connection_handle_command\u003c/code\u003e and its caller \u003ccode\u003esmtp_server_connection_input\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eProposed patch is\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/src/lib-smtp/smtp-server-connection.c b/src/lib-smtp/smtp-server-connection.c\nindex 404acc888b..ab8746fb2b 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/src/lib-smtp/smtp-server-connection.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/src/lib-smtp/smtp-server-connection.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -295,8 +295,10 @@\u003c/span\u003e smtp_server_connection_handle_command(struct smtp_server_connection *conn,\n        struct smtp_server_command *cmd;\n\n        smtp_server_connection_ref(tmp_conn);\n\u003cspan class=\"gi\"\u003e+       int refcount = tmp_conn-\u0026gt;refcount;\n\u003c/span\u003e        cmd = smtp_server_command_new(tmp_conn, cmd_name, cmd_params);\n\u003cspan class=\"gd\"\u003e-       if (!smtp_server_connection_unref(\u0026amp;tmp_conn)) {\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+       if (refcount \u0026gt; tmp_conn-\u0026gt;refcount ||\n+               !smtp_server_connection_unref(\u0026amp;tmp_conn)) {\n\u003c/span\u003e                /* the command start callback managed to get this connection\n                   destroyed */\n                return FALSE;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis was found by fuzzing\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThe attacker can use this as a denial of service against the SMTP server.\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":50,"name":"Use After Free"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":30,"voters":["skr0x1c0","secator","holme","mygf","mainteemoforfun","since2003","noapearson","farjaalahmad0","sumit7","elohell","and 20 more..."],"severity":{"rating":"medium","score":5.3,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"unchanged","confidentiality":"none","integrity":"none","availability":"low"}},"structured_scope":{"databaseId":42899,"asset_type":"SOURCE_CODE","asset_identifier":"https://github.com/dovecot/core","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":7400171,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi!\n\nThank you for the report, we will look into this.","markdown_message":"\u003cp\u003eHi!\u003c/p\u003e\n\n\u003cp\u003eThank you for the report, we will look into this.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-23T14:06:44.268Z","updated_at":"2020-03-23T14:06:44.268Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7400548,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-23T14:30:04.049Z","updated_at":"2020-03-23T14:30:04.049Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7400602,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi!\n\nWere you able to actually get a crash?","markdown_message":"\u003cp\u003eHi!\u003c/p\u003e\n\n\u003cp\u003eWere you able to actually get a crash?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-23T14:34:39.672Z","updated_at":"2020-03-23T14:34:39.672Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7401275,"is_internal":false,"editable":false,"type":"Activities::ExternalUserJoined","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-23T15:23:45.528Z","updated_at":"2020-03-23T15:23:45.528Z","actor":{"username":"tss","cleared":false,"url":"/tss","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7401758,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi!\n\nThanks for the quick feedback.\n\nI managed to get a crash with my fuzz target, compiled with Address Sanitizer (ASAN).\nI did not manage to find how to run dovecot as a SMTP server (and thus unable to make it crash).\nCan you give me some pointers on how to do this ? Should I run lmtp binary ?\n\nDo you want me to share the fuzz target here ?\nIt is inspired by the smtp server tests\n\nHere is some excerpts from the stack trace :\n```\n==2067==ERROR: AddressSanitizer: heap-use-after-free on address 0x6190020e1948 at pc 0x000101039353 bp 0x7ffeeec44af0 sp 0x7ffeeec44ae8\nREAD of size 1 at 0x6190020e1948 thread T0\n    #0 0x101039352 in smtp_server_connection_handle_command smtp-server-connection.c:309\n    #1 0x1010384c3 in smtp_server_connection_handle_input smtp-server-connection.c:432\n    #2 0x101037e2a in smtp_server_connection_input smtp-server-connection.c:581\n    #3 0x1010c17ab in io_loop_call_io ioloop.c:713\n    #4 0x1010c2990 in io_loop_call_pending ioloop.c:751\n    #5 0x1010c2469 in io_loop_handler_run ioloop.c:766\n    #6 0x1010c20ed in io_loop_run ioloop.c:738\n    #7 0x100fbaed1 in LLVMFuzzerTestOneInput fuzz-smtp-server.c:86\n\n0x6190020e1948 is located 200 bytes inside of 1024-byte region [0x6190020e1880,0x6190020e1c80)\nfreed by thread T0 here:\n    #0 0x1013ee10d in wrap_free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5710d)\n    #1 0x10102489a in smtp_server_command_unref smtp-server-command.c:303\n    #2 0x101032761 in smtp_server_connection_disconnect smtp-server-connection.c:1060\n    #3 0x10102fe34 in smtp_server_connection_close smtp-server-connection.c:1289\n    #4 0x10103433e in smtp_server_connection_terminate smtp-server-connection.c:1315\n    #5 0x101026976 in smtp_server_command_submit_reply smtp-server-command.c:573\n    #6 0x101023fd4 in smtp_server_command_fail smtp-server-command.c:720\n    #7 0x101023a71 in smtp_server_command_new smtp-server-command.c\n    #8 0x1010391e2 in smtp_server_connection_handle_command smtp-server-connection.c:298\n    #9 0x1010384c3 in smtp_server_connection_handle_input smtp-server-connection.c:432\n    #10 0x101037e2a in smtp_server_connection_input smtp-server-connection.c:581\n    #11 0x1010c17ab in io_loop_call_io ioloop.c:713\n    #12 0x1010c2990 in io_loop_call_pending ioloop.c:751\n    #13 0x1010c2469 in io_loop_handler_run ioloop.c:766\n    #14 0x1010c20ed in io_loop_run ioloop.c:738\n    #15 0x100fbaed1 in LLVMFuzzerTestOneInput fuzz-smtp-server.c:86\n```\n\nI had first found the bug fixed by https://github.com/dovecot/core/commit/429756095dde22eca7085d91f7047b013d866f22\nSo, I guessed I was on the right path.\nThen I rebased on latest commit from today.\n\nAnother obvious fix for a null pointer dereference is \n```\ndiff --git a/src/lib-smtp/smtp-syntax.c b/src/lib-smtp/smtp-syntax.c\nindex 5d22445f72..43db157ded 100644\n--- a/src/lib-smtp/smtp-syntax.c\n+++ b/src/lib-smtp/smtp-syntax.c\n@@ -32,7 +32,8 @@ int smtp_string_parse(const char *string,\n                return -1;\n        }\n        if (parser.cur \u003c parser.end) {\n-               *error_r = \"Invalid character in string\";\n+               if (error_r != NULL)\n+                       *error_r = \"Invalid character in string\";\n                return -1;\n        }\n        return 1;\n``","markdown_message":"\u003cp\u003eHi!\u003c/p\u003e\n\n\u003cp\u003eThanks for the quick feedback.\u003c/p\u003e\n\n\u003cp\u003eI managed to get a crash with my fuzz target, compiled with Address Sanitizer (ASAN).\u003cbr\u003e\nI did not manage to find how to run dovecot as a SMTP server (and thus unable to make it crash).\u003cbr\u003e\nCan you give me some pointers on how to do this ? Should I run lmtp binary ?\u003c/p\u003e\n\n\u003cp\u003eDo you want me to share the fuzz target here ?\u003cbr\u003e\nIt is inspired by the smtp server tests\u003c/p\u003e\n\n\u003cp\u003eHere is some excerpts from the stack trace :\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e==2067==ERROR: AddressSanitizer: heap-use-after-free on address 0x6190020e1948 at pc 0x000101039353 bp 0x7ffeeec44af0 sp 0x7ffeeec44ae8\nREAD of size 1 at 0x6190020e1948 thread T0\n    #0 0x101039352 in smtp_server_connection_handle_command smtp-server-connection.c:309\n    #1 0x1010384c3 in smtp_server_connection_handle_input smtp-server-connection.c:432\n    #2 0x101037e2a in smtp_server_connection_input smtp-server-connection.c:581\n    #3 0x1010c17ab in io_loop_call_io ioloop.c:713\n    #4 0x1010c2990 in io_loop_call_pending ioloop.c:751\n    #5 0x1010c2469 in io_loop_handler_run ioloop.c:766\n    #6 0x1010c20ed in io_loop_run ioloop.c:738\n    #7 0x100fbaed1 in LLVMFuzzerTestOneInput fuzz-smtp-server.c:86\n\n0x6190020e1948 is located 200 bytes inside of 1024-byte region [0x6190020e1880,0x6190020e1c80)\nfreed by thread T0 here:\n    #0 0x1013ee10d in wrap_free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5710d)\n    #1 0x10102489a in smtp_server_command_unref smtp-server-command.c:303\n    #2 0x101032761 in smtp_server_connection_disconnect smtp-server-connection.c:1060\n    #3 0x10102fe34 in smtp_server_connection_close smtp-server-connection.c:1289\n    #4 0x10103433e in smtp_server_connection_terminate smtp-server-connection.c:1315\n    #5 0x101026976 in smtp_server_command_submit_reply smtp-server-command.c:573\n    #6 0x101023fd4 in smtp_server_command_fail smtp-server-command.c:720\n    #7 0x101023a71 in smtp_server_command_new smtp-server-command.c\n    #8 0x1010391e2 in smtp_server_connection_handle_command smtp-server-connection.c:298\n    #9 0x1010384c3 in smtp_server_connection_handle_input smtp-server-connection.c:432\n    #10 0x101037e2a in smtp_server_connection_input smtp-server-connection.c:581\n    #11 0x1010c17ab in io_loop_call_io ioloop.c:713\n    #12 0x1010c2990 in io_loop_call_pending ioloop.c:751\n    #13 0x1010c2469 in io_loop_handler_run ioloop.c:766\n    #14 0x1010c20ed in io_loop_run ioloop.c:738\n    #15 0x100fbaed1 in LLVMFuzzerTestOneInput fuzz-smtp-server.c:86\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI had first found the bug fixed by \u003ca title=\"https://github.com/dovecot/core/commit/429756095dde22eca7085d91f7047b013d866f22\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdovecot%2Fcore%2Fcommit%2F429756095dde22eca7085d91f7047b013d866f22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/dovecot/core/commit/429756095dde22eca7085d91f7047b013d866f22\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nSo, I guessed I was on the right path.\u003cbr\u003e\nThen I rebased on latest commit from today.\u003c/p\u003e\n\n\u003cp\u003eAnother obvious fix for a null pointer dereference is \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight diff\"\u003e\u003ccode\u003e\u003cspan class=\"gh\"\u003ediff --git a/src/lib-smtp/smtp-syntax.c b/src/lib-smtp/smtp-syntax.c\nindex 5d22445f72..43db157ded 100644\n\u003c/span\u003e\u003cspan class=\"gd\"\u003e--- a/src/lib-smtp/smtp-syntax.c\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+++ b/src/lib-smtp/smtp-syntax.c\n\u003c/span\u003e\u003cspan class=\"p\"\u003e@@ -32,7 +32,8 @@\u003c/span\u003e int smtp_string_parse(const char *string,\n                return -1;\n        }\n        if (parser.cur \u0026lt; parser.end) {\n\u003cspan class=\"gd\"\u003e-               *error_r = \u0026quot;Invalid character in string\u0026quot;;\n\u003c/span\u003e\u003cspan class=\"gi\"\u003e+               if (error_r != NULL)\n+                       *error_r = \u0026quot;Invalid character in string\u0026quot;;\n\u003c/span\u003e                return -1;\n        }\n        return 1;\n\u003cspan class=\"err\"\u003e``\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2020-03-23T16:05:16.117Z","updated_at":"2020-03-23T16:05:16.117Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7401981,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"You can use following to start dovecot submission server for crash reproduction\n\n```\nprotocols = submission\n\nmail_home=/srv/mail/%Lu\nmail_location=sdbox:~/Mail\n\n# if you want to use system users\npassdb {\n  driver = static\n  args = password=pass\n}\n\nssl=no\n```\n\nIf you want to do post-login testing, you need to add\n\n```\nsubmission_relay_host=some.mx.server\n```","markdown_message":"\u003cp\u003eYou can use following to start dovecot submission server for crash reproduction\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eprotocols = submission\n\nmail_home=/srv/mail/%Lu\nmail_location=sdbox:~/Mail\n\n# if you want to use system users\npassdb {\n  driver = static\n  args = password=pass\n}\n\nssl=no\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you want to do post-login testing, you need to add\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esubmission_relay_host=some.mx.server\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","automated_response":false,"created_at":"2020-03-23T16:27:27.000Z","updated_at":"2020-03-23T16:27:27.000Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7402114,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"I was able to reproduce the invalid memory access with submission-login and valgrind using external input. No crash though. I cannot rule out crash, but it does seem that the availability score migth be too high for this issue.","markdown_message":"\u003cp\u003eI was able to reproduce the invalid memory access with submission-login and valgrind using external input. No crash though. I cannot rule out crash, but it does seem that the availability score migth be too high for this issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-23T16:42:07.396Z","updated_at":"2020-03-23T16:42:07.396Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7402221,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the tips and for managing to reproduce this.\n\nIndeed, the result of a use-after-free depends on many things : operating system, compile options, time (and use of memory) between the free and the use (I do not think there is any allocation done in this spot here)\nAnyways, it is up to you to score how high you rate this issue :-)\n\nShould I submit another report for the null pointer dereference in `smtp_string_parse` ?","markdown_message":"\u003cp\u003eThanks for the tips and for managing to reproduce this.\u003c/p\u003e\n\n\u003cp\u003eIndeed, the result of a use-after-free depends on many things : operating system, compile options, time (and use of memory) between the free and the use (I do not think there is any allocation done in this spot here)\u003cbr\u003e\nAnyways, it is up to you to score how high you rate this issue :-)\u003c/p\u003e\n\n\u003cp\u003eShould I submit another report for the null pointer dereference in \u003ccode\u003esmtp_string_parse\u003c/code\u003e ?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-23T16:51:43.203Z","updated_at":"2020-03-23T16:51:43.203Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7402233,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Yes, please.","markdown_message":"\u003cp\u003eYes, please.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-23T16:52:36.875Z","updated_at":"2020-03-23T16:52:36.875Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7402236,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-23T16:52:50.951Z","updated_at":"2020-03-23T16:52:50.951Z","additional_data":{"old_severity":"High (7.5)","new_severity":"Medium (5.3)","old_severity_id":667815,"new_severity_id":668314},"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7408501,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thank you for the excellent report.","markdown_message":"\u003cp\u003eThank you for the excellent report.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-24T10:45:07.855Z","updated_at":"2020-03-24T10:45:07.855Z","actor":{"url":"/open-xchange","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/JtYLEsu5yRZxGitSmAjeAFtK/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Open-Xchange"}},"bounty_amount":"500.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"open-xchange","collaborator":{"username":"catenacyber","url":"/catenacyber"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7425958,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Do you have preference on how to credit you on this issue and the other?","markdown_message":"\u003cp\u003eDo you have preference on how to credit you on this issue and the other?\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-25T06:39:15.056Z","updated_at":"2020-03-25T06:39:15.056Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7430247,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"You can credit this as :\nPhilippe Antoine (Catena cyber)\n\nPS : I have another null dereference coming up (investigating the right fix)","markdown_message":"\u003cp\u003eYou can credit this as :\u003cbr\u003e\nPhilippe Antoine (Catena cyber)\u003c/p\u003e\n\n\u003cp\u003ePS : I have another null dereference coming up (investigating the right fix)\u003c/p\u003e\n","automated_response":false,"created_at":"2020-03-25T12:12:37.412Z","updated_at":"2020-03-25T12:12:37.412Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7445031,"is_internal":false,"editable":false,"type":"Activities::CveIdAdded","message":"","markdown_message":"","automated_response":false,"created_at":"2020-03-26T08:38:54.320Z","updated_at":"2020-03-26T08:38:54.320Z","cve_ids":["CVE-2020-10958"],"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7518306,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi! Just to let you know that this is being published in about two months along with the other one.","markdown_message":"\u003cp\u003eHi! Just to let you know that this is being published in about two months along with the other one.\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-02T12:54:12.325Z","updated_at":"2020-04-02T12:54:12.325Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":7519716,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the info","markdown_message":"\u003cp\u003eThanks for the info\u003c/p\u003e\n","automated_response":false,"created_at":"2020-04-02T15:01:25.087Z","updated_at":"2020-04-02T15:01:25.087Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":7525626,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2020-04-03T05:34:18.898Z","updated_at":"2020-04-03T05:34:18.898Z","actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"catenacyber","url":"/catenacyber"},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8034347,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T12:15:17.725Z","updated_at":"2020-05-18T12:15:17.725Z","first_to_agree":true,"actor":{"username":"akituomi","cleared":false,"url":"/akituomi","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/060/216/805d230879c8e3757d37eedddaadf9efed0a8094_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":8034881,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T12:55:15.537Z","updated_at":"2020-05-18T12:55:15.537Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":8034882,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2020-05-18T12:55:15.593Z","updated_at":"2020-05-18T12:55:15.593Z","actor":{"username":"catenacyber","cleared":false,"url":"/catenacyber","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"open-xchange","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}