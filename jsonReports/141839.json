{"id":141839,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNDE4Mzk=","url":"https://hackerone.com/reports/141839","title":"Multiple vulnerabilities related to PCRE functions (already fixed)","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-05-29T15:03:56.852Z","submitted_at":"2016-05-29T15:03:56.852Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mongo","url":"/mongo","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/019/482/fe5ab898025ee366ad00c3b43f2404bbccb9f160_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:35:35.841Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:35:25.521Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"This issue was reported a while ago at: https://bugs.php.net/bug.php?id=70345\nThe report is now public, but for some reason I was not notified by email when the report was closed. I just remembered to check again today and noticed multiple code changes were made and the bug is now considered closed.\nWould be nice if a bounty was still possible, even though so much time has passed.\n\nDescription:\n------------\nThe pcre_exec() function generates a list of \"offsets\", each consisting\nof a start and an end position within the subject string. Throughout the code its often assumed that\nfor each \"offset\", the start position is smaller than or equal to the end position.\nHowever, certain regular expressions break this assumption (see the testcase for an example).\n\nThis leads to:\n- Multiple heap overflows (through preg_match() or preg_replace(), for instance): in the best case scenario these are simply denial-of-service; exploitation to achieve arbitrary code execution might be possible, but not trivial.\n\n- Memory exhaustion (through preg_split(), for instance)\n\nI'm not providing filenames / line numbers with this bug report because pcre_exec() is used extensively throughout the codebase, and from what I have seen, all of its uses fail to fully validate the returned offsets and are thus vulnerable, to varying degrees.\n\nBecause regular expression functions are often exposed to user input, I believe this could be a fairly serious bug.\n\nTest script:\n---------------\n\u003c?php\n\n$regex = '/(?=xyz\\K)/';\n$subject = \"aaaaxyzaaaa\";\n\n// Comment/uncomment below as wanted.\n// All 3 functions are vulnerable (note, other functions are affected as well)\npreg_match($regex, $subject, $matches);\npreg_replace($regex, '\\0', $subject);\npreg_split($regex, $subject);\n\n\nActual result:\n--------------\nA trace for preg_match, showing a SIGSEGV caused by a runaway memcpy:\n```\n(gdb) r\nStarting program: php-5.6.12/sapi/cli/php go.php\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118\n118     ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) bt\n#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118\n#1  0x000000000047b6fc in memcpy (__len=18446744073709551613, __src=\u003coptimized out\u003e, __dest=\u003coptimized out\u003e) at /usr/include/x86_64-linux-gnu/bits/string3.h:51\n#2  php_pcre_get_substring_list (subject=subject@entry=0x7ffff7ebbe18 \"aaaaxyzaaaa\", ovector=ovector@entry=0x7ffff7fcebc0, stringcount=stringcount@entry=1, listptr=listptr@entry=0x7fffffffaee8)\n    at php-5.6.12/ext/pcre/pcrelib/pcre_get.c:477\n#3  0x00000000004a569f in php_pcre_match_impl (pce=pce@entry=0x1012cf0, subject=0x7ffff7ebbe18 \"aaaaxyzaaaa\", subject_len=11, return_value=return_value@entry=0x7ffff7fcea58, subpats=0x7ffff7fce900, global=global@entry=0, use_flags=0, \n    flags=0, start_offset=0) at php-5.6.12/ext/pcre/php_pcre.c:707\n#4  0x00000000004a614b in php_do_pcre_match (ht=3, return_value=0x7ffff7fcea58, global=0, return_value_used=\u003coptimized out\u003e, this_ptr=\u003coptimized out\u003e, return_value_ptr=\u003coptimized out\u003e) at php-5.6.12/ext/pcre/php_pcre.c:575\n#5  0x000000000077894e in zend_do_fcall_common_helper_SPEC (execute_data=\u003coptimized out\u003e) at php-5.6.12/Zend/zend_vm_execute.h:558\n#6  0x000000000070d968 in execute_ex (execute_data=0x7ffff7f9a158) at php-5.6.12/Zend/zend_vm_execute.h:363\n#7  0x00000000006d4740 in zend_execute_scripts (type=type@entry=8, retval=retval@entry=0x0, file_count=file_count@entry=3) at php-5.6.12/Zend/zend.c:1341\n#8  0x00000000006722f2 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd500) at php-5.6.12/main/main.c:2597\n#9  0x000000000077a5bf in do_cli (argc=2, argv=0xe93760) at php-5.6.12/sapi/cli/php_cli.c:994\n#10 0x0000000000426980 in main (argc=2, argv=0xe93760) at php-5.6.12/sapi/cli/php_cli.c:1378\n```","vulnerability_information_html":"\u003cp\u003eThis issue was reported a while ago at: \u003ca title=\"https://bugs.php.net/bug.php?id=70345\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D70345\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=70345\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003cbr\u003e\nThe report is now public, but for some reason I was not notified by email when the report was closed. I just remembered to check again today and noticed multiple code changes were made and the bug is now considered closed.\u003cbr\u003e\nWould be nice if a bounty was still possible, even though so much time has passed.\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription:\u003c/h2\u003e\n\n\u003cp\u003eThe pcre_exec() function generates a list of \u0026quot;offsets\u0026quot;, each consisting\u003cbr\u003e\nof a start and an end position within the subject string. Throughout the code its often assumed that\u003cbr\u003e\nfor each \u0026quot;offset\u0026quot;, the start position is smaller than or equal to the end position.\u003cbr\u003e\nHowever, certain regular expressions break this assumption (see the testcase for an example).\u003c/p\u003e\n\n\u003cp\u003eThis leads to:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eMultiple heap overflows (through preg_match() or preg_replace(), for instance): in the best case scenario these are simply denial-of-service; exploitation to achieve arbitrary code execution might be possible, but not trivial.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eMemory exhaustion (through preg_split(), for instance)\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI\u0026#39;m not providing filenames / line numbers with this bug report because pcre_exec() is used extensively throughout the codebase, and from what I have seen, all of its uses fail to fully validate the returned offsets and are thus vulnerable, to varying degrees.\u003c/p\u003e\n\n\u003cp\u003eBecause regular expression functions are often exposed to user input, I believe this could be a fairly serious bug.\u003c/p\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\n\u003cp\u003e\u0026lt;?php\u003c/p\u003e\n\n\u003cp\u003e$regex = \u0026#39;/(?=xyz\\K)/\u0026#39;;\u003cbr\u003e\n$subject = \u0026quot;aaaaxyzaaaa\u0026quot;;\u003c/p\u003e\n\n\u003cp\u003e// Comment/uncomment below as wanted.\u003cbr\u003e\n// All 3 functions are vulnerable (note, other functions are affected as well)\u003cbr\u003e\npreg_match($regex, $subject, $matches);\u003cbr\u003e\npreg_replace($regex, \u0026#39;\\0\u0026#39;, $subject);\u003cbr\u003e\npreg_split($regex, $subject);\u003c/p\u003e\n\n\u003ch2 id=\"actual-result\"\u003eActual result:\u003c/h2\u003e\n\n\u003cp\u003eA trace for preg_match, showing a SIGSEGV caused by a runaway memcpy:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e(gdb) r\nStarting program: php-5.6.12/sapi/cli/php go.php\n\nProgram received signal SIGSEGV, Segmentation fault.\n__memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118\n118     ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb) bt\n#0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:118\n#1  0x000000000047b6fc in memcpy (__len=18446744073709551613, __src=\u0026lt;optimized out\u0026gt;, __dest=\u0026lt;optimized out\u0026gt;) at /usr/include/x86_64-linux-gnu/bits/string3.h:51\n#2  php_pcre_get_substring_list (subject=subject@entry=0x7ffff7ebbe18 \u0026quot;aaaaxyzaaaa\u0026quot;, ovector=ovector@entry=0x7ffff7fcebc0, stringcount=stringcount@entry=1, listptr=listptr@entry=0x7fffffffaee8)\n    at php-5.6.12/ext/pcre/pcrelib/pcre_get.c:477\n#3  0x00000000004a569f in php_pcre_match_impl (pce=pce@entry=0x1012cf0, subject=0x7ffff7ebbe18 \u0026quot;aaaaxyzaaaa\u0026quot;, subject_len=11, return_value=return_value@entry=0x7ffff7fcea58, subpats=0x7ffff7fce900, global=global@entry=0, use_flags=0, \n    flags=0, start_offset=0) at php-5.6.12/ext/pcre/php_pcre.c:707\n#4  0x00000000004a614b in php_do_pcre_match (ht=3, return_value=0x7ffff7fcea58, global=0, return_value_used=\u0026lt;optimized out\u0026gt;, this_ptr=\u0026lt;optimized out\u0026gt;, return_value_ptr=\u0026lt;optimized out\u0026gt;) at php-5.6.12/ext/pcre/php_pcre.c:575\n#5  0x000000000077894e in zend_do_fcall_common_helper_SPEC (execute_data=\u0026lt;optimized out\u0026gt;) at php-5.6.12/Zend/zend_vm_execute.h:558\n#6  0x000000000070d968 in execute_ex (execute_data=0x7ffff7f9a158) at php-5.6.12/Zend/zend_vm_execute.h:363\n#7  0x00000000006d4740 in zend_execute_scripts (type=type@entry=8, retval=retval@entry=0x0, file_count=file_count@entry=3) at php-5.6.12/Zend/zend.c:1341\n#8  0x00000000006722f2 in php_execute_script (primary_file=primary_file@entry=0x7fffffffd500) at php-5.6.12/main/main.c:2597\n#9  0x000000000077a5bf in do_cli (argc=2, argv=0xe93760) at php-5.6.12/sapi/cli/php_cli.c:994\n#10 0x0000000000426980 in main (argc=2, argv=0xe93760) at php-5.6.12/sapi/cli/php_cli.c:1378\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:35:25.627Z","allow_singular_disclosure_after":-35664795.92196431,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":991746,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2016-05-31T05:39:23.663Z","updated_at":"2016-05-31T05:39:23.663Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"mongo","url":"/mongo"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":991747,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Thanks for the detailed summary @mongo!","markdown_message":"\u003cp\u003eThanks for the detailed summary \u003ca href=\"/mongo\"\u003e@mongo\u003c/a\u003e!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-31T05:39:40.697Z","updated_at":"2016-05-31T05:39:40.697Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"mongo","url":"/mongo"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":992057,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks for the bounty!","markdown_message":"\u003cp\u003eThanks for the bounty!\u003c/p\u003e\n","automated_response":false,"created_at":"2016-05-31T09:41:43.113Z","updated_at":"2016-05-31T09:41:43.113Z","actor":{"username":"mongo","cleared":false,"url":"/mongo","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/019/482/fe5ab898025ee366ad00c3b43f2404bbccb9f160_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026372,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:35:25.545Z","updated_at":"2019-10-13T09:35:25.545Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285845,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:35:35.909Z","updated_at":"2019-11-12T09:35:35.909Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}