{"id":310280,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8zMTAyODA=","url":"https://hackerone.com/reports/310280","title":"[Informational] Possible SQL Injection in inc/ajax-actions-frontend.php","state":"Closed","substate":"resolved","severity_rating":"medium","readable_substate":"Resolved","created_at":"2018-01-29T18:39:41.247Z","submitted_at":"2018-01-29T18:39:41.247Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"damian89","url":"/damian89","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/074/229/2d63a2914887aa483eba2634f50d78b85870d569_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":16780,"url":"https://hackerone.com/mapsmarker_com_e_u","handle":"mapsmarker_com_e_u","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/016/780/a085f8583e82952cf1d20e56bd15b263c3ba5332_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/780/a085f8583e82952cf1d20e56bd15b263c3ba5332_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"MapsMarker.com e.U.","twitter_handle":"mapsmarker","website":"https://www.mapsmarker.com","about":"  The most comprehensive \u0026 user-friendly mapping solution for WordPress "}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2018-06-17T08:27:19.442Z","bug_reporter_agreed_on_going_public_at":"2018-05-18T08:27:10.170Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"At first, I thought, that my finding is a valid sql injection but I was wrong because of WordPress currently adding magic slashes to COOKIE/POST/GET - this is a very special behaviour which may be remove in the future. There are tons of requests to remove this \"old\" technique.\n\nNevertheless I decided to report the issue, because similar code within the audited plugin is escaped - so this is more informational.\n\nLine 49-50:\n```\n$multi_layer_map_list = isset($_POST['multi_layer_map_list']) ? ($_POST['multi_layer_map_list']) : (isset($_GET['multi_layer_map_list']) ? ($_GET['multi_layer_map_list']) : '');\n$multi_layer_map_list_exploded = explode(',', $multi_layer_map_list);\n```\n\nAs you can see $_GET['multi_layer_map_list']/$_POST['multi_layer_map_list'] are not escaped and exploded by \",\" in line 50. \n\nThis may result in a succesful sql injection on line 145 - depending on the use case of the shortcode:\n```\n$mlm_query = \"SELECT \". $distance_query .\" l.id as lid,l.name as lname,... FROM `\" . $table_name_layers . \"` as l INNER JOIN `\" . $table_name_markers . \"` AS m ON m.layer LIKE concat('%\\\"',l.id,'\\\"%') \". $search_query .\" WHERE l.id='\" . $multi_layer_map_list . \"'  ORDER BY ...\";\n```\nFix: esc_sql()\n\nA very similar behaviour can be found in line 149 and following:\n\n```\n$first_mlm_id = $multi_layer_map_list_exploded[0];\n$other_mlm_ids = array_slice($multi_layer_map_list_exploded,1);\n$mlm_query = \"(SELECT ... WHERE l.id='\" . $first_mlm_id . \"'  )\";\nforeach ($other_mlm_ids as $row) {\n    $mlm_query .= \" UNION (SELECT ... FROM `\" . $table_name_layers . \"` ... WHERE l.id='\" . $row . \"' )\";\n}\n```\n\nHere $row and $first_mlm_id are controlled by a guestuser and are not escaped or validated.\n\nFix: intval()\n\nThe only reason the application is not vulnerable is because of wp-settings.php:\n\n```\n// Add magic quotes and set up $_REQUEST ( $_GET + $_POST )\nwp_magic_quotes();\n```\n\nBut the problem is: a lot of themes and/or plugins (which are loaded sometimes before your plugin is loaded) reset this setting like described hiere:\n\nhttps://stackoverflow.com/questions/8949768/with-magic-quotes-disabled-why-does-php-wordpress-continue-to-auto-escape-my\n\nI believe it may be a better solution to escaped mentioned parts, just to be sure!\n\nOfftopic: the plugin has also a lot of interesting backend functions and calls - are vulnerabilities which can be triggered by admin/mod/author relevent? I'm not talking about xss, more execs and sqlinjections.\n\n## Impact\n\nUnder certain circumstances a SQL Injection is possible.","vulnerability_information_html":"\u003cp\u003eAt first, I thought, that my finding is a valid sql injection but I was wrong because of WordPress currently adding magic slashes to COOKIE/POST/GET - this is a very special behaviour which may be remove in the future. There are tons of requests to remove this \u0026quot;old\u0026quot; technique.\u003c/p\u003e\n\n\u003cp\u003eNevertheless I decided to report the issue, because similar code within the audited plugin is escaped - so this is more informational.\u003c/p\u003e\n\n\u003cp\u003eLine 49-50:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$multi_layer_map_list = isset($_POST[\u0026#39;multi_layer_map_list\u0026#39;]) ? ($_POST[\u0026#39;multi_layer_map_list\u0026#39;]) : (isset($_GET[\u0026#39;multi_layer_map_list\u0026#39;]) ? ($_GET[\u0026#39;multi_layer_map_list\u0026#39;]) : \u0026#39;\u0026#39;);\n$multi_layer_map_list_exploded = explode(\u0026#39;,\u0026#39;, $multi_layer_map_list);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see $_GET[\u0026#39;multi_layer_map_list\u0026#39;]/$_POST[\u0026#39;multi_layer_map_list\u0026#39;] are not escaped and exploded by \u0026quot;,\u0026quot; in line 50. \u003c/p\u003e\n\n\u003cp\u003eThis may result in a succesful sql injection on line 145 - depending on the use case of the shortcode:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$mlm_query = \u0026quot;SELECT \u0026quot;. $distance_query .\u0026quot; l.id as lid,l.name as lname,... FROM `\u0026quot; . $table_name_layers . \u0026quot;` as l INNER JOIN `\u0026quot; . $table_name_markers . \u0026quot;` AS m ON m.layer LIKE concat(\u0026#39;%\\\u0026quot;\u0026#39;,l.id,\u0026#39;\\\u0026quot;%\u0026#39;) \u0026quot;. $search_query .\u0026quot; WHERE l.id=\u0026#39;\u0026quot; . $multi_layer_map_list . \u0026quot;\u0026#39;  ORDER BY ...\u0026quot;;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFix: esc_sql()\u003c/p\u003e\n\n\u003cp\u003eA very similar behaviour can be found in line 149 and following:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$first_mlm_id = $multi_layer_map_list_exploded[0];\n$other_mlm_ids = array_slice($multi_layer_map_list_exploded,1);\n$mlm_query = \u0026quot;(SELECT ... WHERE l.id=\u0026#39;\u0026quot; . $first_mlm_id . \u0026quot;\u0026#39;  )\u0026quot;;\nforeach ($other_mlm_ids as $row) {\n    $mlm_query .= \u0026quot; UNION (SELECT ... FROM `\u0026quot; . $table_name_layers . \u0026quot;` ... WHERE l.id=\u0026#39;\u0026quot; . $row . \u0026quot;\u0026#39; )\u0026quot;;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere $row and $first_mlm_id are controlled by a guestuser and are not escaped or validated.\u003c/p\u003e\n\n\u003cp\u003eFix: intval()\u003c/p\u003e\n\n\u003cp\u003eThe only reason the application is not vulnerable is because of wp-settings.php:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e// Add magic quotes and set up $_REQUEST ( $_GET + $_POST )\nwp_magic_quotes();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut the problem is: a lot of themes and/or plugins (which are loaded sometimes before your plugin is loaded) reset this setting like described hiere:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"https://stackoverflow.com/questions/8949768/with-magic-quotes-disabled-why-does-php-wordpress-continue-to-auto-escape-my\" href=\"/redirect?url=https%3A%2F%2Fstackoverflow.com%2Fquestions%2F8949768%2Fwith-magic-quotes-disabled-why-does-php-wordpress-continue-to-auto-escape-my\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://stackoverflow.com/questions/8949768/with-magic-quotes-disabled-why-does-php-wordpress-continue-to-auto-escape-my\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eI believe it may be a better solution to escaped mentioned parts, just to be sure!\u003c/p\u003e\n\n\u003cp\u003eOfftopic: the plugin has also a lot of interesting backend functions and calls - are vulnerabilities which can be triggered by admin/mod/author relevent? I\u0026#39;m not talking about xss, more execs and sqlinjections.\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eUnder certain circumstances a SQL Injection is possible.\u003c/p\u003e\n","bounty_amount":"10.0","formatted_bounty":"$10","weakness":{"id":67,"name":"SQL Injection"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2018-06-17T08:27:10.273Z","allow_singular_disclosure_after":-79995860.19249497,"singular_disclosure_allowed":true,"vote_count":14,"voters":["damian89","eveeez","apapedulimu","an0nym0us","prob","japz","cryptographer","kass198","sahilharchandani22","pseudononomys_anonymous","and 4 more..."],"severity":{"rating":"medium","author_type":"User"},"structured_scope":{"databaseId":356,"asset_type":"OTHER","asset_identifier":"Maps Marker Pro WordPress plugin","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":2328412,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thanks for your report, seems like we missed adding esc_sql() and intval() on the lines you pointed out. Anyway we are in the middle of a major rewrite project and that code will not be available in v4.0 anymore, so I am closing this ticket and marking it as resolved as a consequence.\nVulnerabilities which can be triggered by admins are not relevant - please see the program description for details.\nAnyway we decided to close submission of hackerone submissions until v4.0 is available - we would be happy if you take another look at our plugin once the next release is available (which is as said before a complete rewrite).","markdown_message":"\u003cp\u003eThanks for your report, seems like we missed adding esc_sql() and intval() on the lines you pointed out. Anyway we are in the middle of a major rewrite project and that code will not be available in v4.0 anymore, so I am closing this ticket and marking it as resolved as a consequence.\u003cbr\u003e\nVulnerabilities which can be triggered by admins are not relevant - please see the program description for details.\u003cbr\u003e\nAnyway we decided to close submission of hackerone submissions until v4.0 is available - we would be happy if you take another look at our plugin once the next release is available (which is as said before a complete rewrite).\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-29T19:12:31.616Z","updated_at":"2018-01-29T19:12:31.616Z","actor":{"username":"mapsmarker","cleared":false,"url":"/mapsmarker","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/129/564/d2eb58f19ca754c0dd34ec913c0fcbe811afec1c_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"damian89","url":"/damian89"},"genius_execution_id":null,"team_handle":"mapsmarker_com_e_u","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2328418,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2018-01-29T19:14:45.496Z","updated_at":"2018-01-29T19:14:45.496Z","actor":{"url":"/mapsmarker_com_e_u","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/780/a085f8583e82952cf1d20e56bd15b263c3ba5332_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"MapsMarker.com e.U."}},"bounty_amount":"10.0","bounty_currency":"usd","bonus_amount":"0.0","genius_execution_id":null,"team_handle":"mapsmarker_com_e_u","collaborator":{"username":"damian89","url":"/damian89"},"actor_is_team_member":true,"actor_is_concealed_member":false},{"id":2328431,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks, will do so!","markdown_message":"\u003cp\u003eThanks, will do so!\u003c/p\u003e\n","automated_response":false,"created_at":"2018-01-29T19:18:04.857Z","updated_at":"2018-01-29T19:18:04.857Z","actor":{"username":"damian89","cleared":true,"url":"/damian89","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/074/229/2d63a2914887aa483eba2634f50d78b85870d569_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"mapsmarker_com_e_u","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2760524,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-05-18T08:27:10.213Z","updated_at":"2018-05-18T08:27:10.213Z","first_to_agree":true,"actor":{"username":"damian89","cleared":true,"url":"/damian89","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/074/229/2d63a2914887aa483eba2634f50d78b85870d569_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"mapsmarker_com_e_u","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":2895318,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2018-06-17T08:27:19.473Z","updated_at":"2018-06-17T08:27:19.473Z","actor":{"url":"/mapsmarker_com_e_u","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/016/780/a085f8583e82952cf1d20e56bd15b263c3ba5332_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"MapsMarker.com e.U."}},"genius_execution_id":null,"team_handle":"mapsmarker_com_e_u","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}